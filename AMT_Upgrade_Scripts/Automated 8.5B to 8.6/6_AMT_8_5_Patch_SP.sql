/******************************************************************************
	File: 	6_AMT_8_5_Patch_SP.sql

	Description:	Creates the Stored Procedures in the database

**************************************************************************************************************
	Change History
**************************************************************************************************************
Date:		Author:		Description:
--------	--------	----------------------------------------

27 Jul 11	VV			Mod: STD_JOB_LINK_P
02 Aug 11	KN			Mod: TASK_AUTO_CREATE_WO_P
02 Aug 11	KN			Mod: RPT_BUDGET_COST_WORKSHEET_P
02 Aug 11	DS			Mod: COST_ADJUSTER_GET_P
03 Aug 11	VV			Mod: MB_CHECK_IN_P
03 Aug 11   GD          Mod: EXPORT_PROJ_TASK_P
04 Aug 11	VV			Mod: STD_JOB_LINK_P
04 Aug 11   GD          Mod: #E610 DEFECTS_IMPORT_P,PROJECTED_TASK_IMPORT_P,IMPORT_ERROR_INSERT
04 Aug 11	DS			Mod: HOLDING_EVENT_UPDATE_NEW_P
08 Aug 11   GD          Mod: PROJECTED_TASK_IMPORT_P,IMPORT_ERROR_INSERT
10 Aug 11	VV			Mod: EQP_SIBLINGS_SELECTOR_GET_P
15 Aug 11	DS			Mod: COST_ADJUSTER_PUT_2_P
16 Aug 11	VV			Mod: BUDGET_RPT_PLANT_HIRE_P_L_P
17 Aug 11   GD          Mod: AMT_WORK_ORDER_CREATE_P
18 Aug 11   GD          Mod: WORKORDER_IMPORT_P
18 Aug 11	TP			Mod: RPT_GENERIC_INTERFACE_LOG_P
19 Aug 11   GD          Mod: RPT_BUDGET_COST_WORKSHEET_P, RPT_PARTS_DEMAND_ANALYSIS_P,RPT_CHANGEOUT_ANALYSIS_P
22 Aug 11	VV			Mod: ELECTRONIC_WORKSCOPE_MANAGER_GET_P
							 ELECTRONIC_WORKSCOPE_UPDATE_P
23 Aug 11   GD          Mod: RPT_CUSTOMER_AGREEMENT_SUMMARY_P
23 Aug 11   GD          Mod: RPT_CUSTOMER_AGREEMENT_SUMMARY_P
23 Aug 11	RJ			Mod: SYSTEM_TASK_QUEUE_GET_P 
24 Aug 11	VV			Mod: RPT_CHANGEOUT_ANALYSIS_P	
24 Aug 11   GD          Mod: RPT_PROJECTION_AND_INVERVAL_ANALYSIS_P		
26 Aug 11	VV			Mod: STRATEGY_TASK_ADD_GRID_P	
							 STRATEGY_TASK_CREATING_MAINTAINING_P
							 TASK_CHECK_STRATEGY_DETAILS_P	
							 TASK_DEFAULT_ADD_GET_P
26 Aug 11   GD          Mod: JOB_COST_IMPORT_P
26 Aug 11	TP			Mod: EQUIPMENT_IMPORT_CODES_CREATE_OR_GET
04 Sep 11   GD          Mod: PLANNING_GRID_GET_P
						Add: OPEN_EXTERNAL_WO_PARAMETERS_GET 
						Mod: SYSTEM_DEFAULTS_GET_P
06 Sep 11	RJ			Mod: EXPORT_WORKORDER_STATUS_P	
06 Sep 11	RJ			Mod: JOB_COST_IMPORT_P	
09 Sep 11   GD          Mod: RPT_COMPONENT_HISTORY_P
13 Sep 11   GD          Mod: RPT_COMPONENT_LIFE_DISTRIBUTION_P	
13 Sep 11	KN			Mod: STRATEGY_CONFIRM_UPDATE_P	
14 Sep 11	VV			Mod: PARTS_FILTERED_GET_P	
19 Sep 11	KN			Mod: WORKORDER_IMPORT_P
19 Sep 11	TP			Mod: RPT_MTBS_MTBF_MTBUPS_P	
19 Sep 11   GD          Mod: IMPORT_ERROR_INSERT	
21 Sep 11	VV			Mod: ADVANCED_PLANNING_FROM_WO_SETTLEMENT_P	
22 Sep 11	VV			Mod: BUDGET_RPT_PLANT_HIRE_P_L_P		
22 Sep 11	DS			Mod: COST_ADJUSTER_PUT_2_P
24 Sep 11   GD          Mod: DEFECTS_IMPORT_P,PROJECTED_TASK_IMPORT_P,WORKORDER_IMPORT_P
27 Sep 11	VV			Mod: SCHEDULING_TASK_TO_PROJ_TASK_P
28 Sep 11	DA			Mod: EQP_CLASS_ADD_UPDATE_P
						Mod: EQUIPMENT_IMPORT_CODES_CREATE_OR_GET
4 Oct 11	VV			Mod: PH_RPT_INVOICE_SUMMARY_P
14 Oct 11	TP			Mod: QW_WIP_P
14 Oct 11   GD          Mod: JOB_COST_IMPORT_P
17 Oct 11   GD          Mod: WORKORDER_IMPORT_P,PROJECTED_TASK_IMPORT_P,DEFECTS_IMPORT_P
21 Oct 11   GD          Mod: RPT_GET_TECH_PERF_ANALYSIS_CHART_P
24 Oct 11	VV			Mod: EVENT_ADD_UPDATE_P
						     MB_CHECK_IN_P
26 Oct 11   TP  		Mod: RPT_TOTALCOST_WORKSHEET_P			
 1 Nov 11	VV			Mod: MB_CHECK_OUT_DATA_GET_P	
 2 Nov 11	VV			Mod: RPT_PROJECTION_AND_INVERVAL_ANALYSIS_P		
							 RPT_TOTAL_COST_INTERVAL_P	
 3 Nov 11	VV			Mod: RPT_PROJECTION_AND_INVERVAL_ANALYSIS_P
							 BUDGET_RPT_PLANT_HIRE_P_L_P
04 Nov 11   GD          Mod: EMPLOYEE_AVAILABILITY_REUSABLE_GET_P
09 Nov 11   RJ          Mod: RPT_MAINTENANCE_STRATEGY_SUMMARY_P

**END OF HISTORY************************************************************************************************************/
SET QUOTED_IDENTIFIER ON	--should be always ON
GO
SET ANSI_NULLS ON			--should be always ON
GO


--=============================================================================
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[RPT_TOTAL_COST_INTERVAL_P]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[RPT_TOTAL_COST_INTERVAL_P]
GO

create      Procedure [dbo].[RPT_TOTAL_COST_INTERVAL_P]
/******************************************************************************
	File: 
	Name: RPT_TOTAL_COST_INTERVAL_P
	Called By: 

	Desc: Get data for Cost per Interval Report
	(based on SP RPT_TOTAL_COST_ANALYSIS_P)
             

	Auth: Sergey Babeshko
	Date: 23-Dec-2004
*******************************************************************************
		Change History
*******************************************************************************
Date:		Author:		Description:
--------	--------	----------------------------------------
22 Oct 09	V vasylyeva	CR8399 Cost per Interval showes 0 in the first interval
24 Sep 09	V vasylyeva	CR8399 Cost per Interval does not calculate cost correctly 
						if there are multiple equipment 
18 Sep 09	V Vasylyeva	CR8391 Rounding problem
25 Feb 09	V Vasylyeva Added CostPerUOM
 5 Feb 09	V Vasylyeva	Added LabourHours and Duration
 3 Feb 09	V Vasylyeva	Added @Summary for the new report Cost per UOM per Interval
16 Jul 08	V Vasylyeva	Changed according the new spec. Also do not use @ShowSellAmt and @CountIntervals
21-Jul-07	KN			Fixed - Collation and tempDB Conflicts
18 Oct 2006     ID		Fixed error in @projTaskId in WHERE clause.
01 Feb 2006 	K Nagarajan	Fixed the end of the last interval which was incorrect.
18 Mar 2005	S Babeshko	Add @CountIntervals parameter and return count of intervals or report data depends of this new parameter
8 Mar 11	V Vasylyeva	#378 Last interval sometime shows 1 additional hour because
						of the calculation of the end date of equipment (It is 1 min 
						after the equipment end date calculated from usage)
07 Apr 2011 G Wang      Add @Customer option
11 Apr 2011 G Wang      Mod @Customer option
12 Apr 2011 G Wang      Mod @Customer option
14 Apr 2011 G Wang      Mod @Customer option
15 Apr 2011 G Wang		Del Agr_Type_Id
18-Jul-11	V Vasylyeva	#2098 rounding usage because of float calculations. 
 2 Nov 11	V Vasylyeva	#2663 changed end uom calculation
*******************************************************************************/
	/* Param List */
    @Interval int = 0, 
    @dealerId int = 1,
    @branchId varchar(MAX)='',
    @site_ID varchar(MAX)='',
    @fleet_ID varchar(MAX)='',
    @eqp_Plan_ID varchar(MAX)='',
    @ProjHeaderId varchar(MAX)='',
    @CostBearerID varchar(MAX)='',
    @costResponsibilityID varchar(MAX)='',
    @costCentreID varchar(MAX)='',
    @costActivityID varchar(MAX)='',
    @costExpenseID varchar(MAX)='',   
    @modelId varchar(MAX) = '',
    @costTypeID varchar(MAX) = '',
    @systemID varchar(MAX) = '',
    @subSystemID varchar(MAX) = '',
    @taskTypeID varchar(MAX) = '',
    @componentCodeID varchar(MAX) = '',
    @modifierID varchar(MAX) = '',
    @projTaskId varchar(MAX) = '',--ComponentCode.ModifierCode.TaskType.ApplicationCode
    @Parts_Labour_Misc int=0,
    @AnalyseBy varchar(10) = '',
    @ShowSellAmt bit = 1, 
    @CountIntervals bit = 0,
	@QUOMID int = -1,
	/*VV 3-Feb-2009*/
	@Summary bit=0,
	/*VV 5-Feb-2009*/
	@ShowCostLabHrsDuration int=0,
	@FieldShop int=0,
	@JobCodeId varchar(max)='',
	@LabourActivityId varchar(max)='',
	@CostPerUOM bit=0,
	@Customer bit=0/*GW*/

AS
SET NOCOUNT ON


if @Interval = 0 return
-- Parts/Labour/Misc: ALL=0,PART=1,LABOUR=2,MISC=3

SET @ShowCostLabHrsDuration=ISNULL(@ShowCostLabHrsDuration,0)

/*
@ShowCostLabHrsDuration=0 - show cost
@ShowCostLabHrsDuration=1 - show labour hours
@ShowCostLabHrsDuration=2 - show duration

@FieldShop : 0- All, 1 - Field, 2- Shop
*/

DECLARE @All int
DECLARE @Parts int
DECLARE @Labour int
DECLARE @Misc int

DECLARE @P float
DECLARE @L float
DECLARE @M float
DECLARE @Field int
DECLARE @Shop int
DECLARE @ShowLabHrs int
DECLARE @ShowDuration int
DECLARE @TypeCurr int
DECLARE @TypeAlt int
DECLARE @TaskStatusIP int
DECLARE @TaskStatusC int
/*GW*/
DECLARE @DefCB int
/*VV #378*/
DECLARE @TermByUsage int

SET @TermByUsage=1
SET @ShowLabHrs=1
SET @ShowDuration=2
SET @Field=1
SET @Shop=2

SET @TypeCurr=1
SET @TypeAlt=3

SET @All=0
SET @Parts=1
SET @Labour=2
SET @Misc=3

SET @TaskStatusIP=2
SET @TaskStatusC=3

SET @branchId =REPLACE(@branchId,'''','')
SET @site_ID =REPLACE(@site_ID,'''','')
SET @fleet_ID =REPLACE(@fleet_ID,'''','')
SET @eqp_Plan_ID =REPLACE(@eqp_Plan_ID,'''','')
SET @ProjHeaderId =REPLACE(@ProjHeaderId,'''','')
SET @CostBearerID =REPLACE(@CostBearerID,'''','')
SET @costResponsibilityID =REPLACE(@costResponsibilityID,'''','')
SET @costCentreID =REPLACE(@costCentreID,'''','')
SET @costActivityID =REPLACE(@costActivityID,'''','')
SET @costExpenseID =REPLACE(@costExpenseID,'''','')   
SET @modelId =REPLACE(@modelId,'''','')
SET @costTypeID =REPLACE(@costTypeID,'''','')
SET @systemID =REPLACE(@systemID,'''','')
SET @subSystemID =REPLACE(@subSystemID,'''','')
SET @taskTypeID =REPLACE(@taskTypeID,'''','')
SET @componentCodeID =REPLACE(@componentCodeID,'''','')
SET @modifierID =REPLACE(@modifierID,'''','')
SET @projTaskId =REPLACE(@projTaskId,'''','')

--Set Parts/Labour/Misc to all if it is null
SET @Parts_Labour_Misc=ISNULL(@Parts_Labour_Misc,@All)

IF @Parts_Labour_Misc=@All
BEGIN
	SET @P=1
	SET @L=1
	SET @M=1
END
IF @Parts_Labour_Misc=@Parts
BEGIN
	SET @P=1
	SET @L=0
	SET @M=0
END
IF @Parts_Labour_Misc=@Labour
BEGIN
	SET @P=0
	SET @L=1
	SET @M=0
END
IF @Parts_Labour_Misc=@Misc
BEGIN
	SET @P=0
	SET @L=0
	SET @M=1
END


SET @AnalyseBy=UPPER(@AnalyseBy)

SET @QUOMID=NULLIF(@QUOMID,999)

IF @QUOMID=-1 SET @QUOMID=(SELECT QUOMId FROM tblQUOMs WHERE QUOMDefault<>0)

--Create a temp table for equipment to filter QUOM
CREATE TABLE #aa_EqpProj(EqpPlanId int,EqpProjId int,ModelId int,Model varchar(200) COLLATE DATABASE_DEFAULT,
Cost_Responsibility_ID int,Projection_Type_ID int,FleetId int,ExchangeRateId int,
Default_Cost_Bearer_ID int,Cost_Centre_ID int,StartDate datetime,EndDate datetime,
StartUsage float, EndUsage float,StartIntervalId int,EndIntervalId int,EndQUOMId int,AdjFactor float default 1
PRIMARY KEY(EqpProjId,EqpPlanId))

IF @QUOMID>0
BEGIN
	INSERT INTO #aa_EqpProj(EqpPlanId,EqpProjId,ModelId,Model,Cost_Responsibility_ID,Projection_Type_ID,FleetId,ExchangeRateId,
	Default_Cost_Bearer_ID,Cost_Centre_ID,StartDate,EndDate,StartUsage, EndUsage,EndQUOMId)
	SELECT DISTINCT EH.EqpPlanId, EH.EqpProjId,EH.ModelId,EH.Model,EH.Cost_Responsibility_ID,EH.Projection_Type_ID,
	EH.FleetId,EH.ExchangeRateId,EH.Default_Cost_Bearer_ID,EH.Cost_Centre_ID,
	EH.EqpStartDate,EH.EndDate,dbo.GET_USAGE_FROM_DATE_F(EH.EqpProjId,@QUOMID,EH.EqpStartDate) AS StartUsage,
	/*VV #378
	dbo.GET_USAGE_FROM_DATE_F(EH.EqpProjId,@QUOMID,EH.EndDate) AS EndUsage,*/
	CASE WHEN EPR.Eqp_Term_Rule_ID=@TermByUsage /*VV #2663*/ AND ISNULL(EPR.EndQUOMId,0)=ISNULL(@QUOMID,0) THEN EPR.EndUsage ELSE
	dbo.GET_EQUIPMENT_END_USAGE_F(EH.EqpPlanId, @QUOMID,EH.EndDate,EH.Utilisation_Method_Id,
	 EPR.Annual_Utilisation,EH.UsageProfileId) END AS EndUsage,
	EH.QUOMId AS EndQUOMId
	FROM  
	EQUIPMENT_HIERARCHY_V EH 
		INNER JOIN
	tblEqpProjs EPR
		ON EH.EqpProjId=EPR.EqpProjId
		LEFT JOIN
	tblUsageProfiles UP
		ON EH.UsageProfileId=UP.UsageProfileId       
		LEFT JOIN
	tblUsageSteps US 
		ON US.UsageProfileId=UP.UsageProfileId
		LEFT JOIN
	tblUsageStepRels USR 
		ON US.UsageStepId = USR.UsageStepId 
	WHERE ISNULL(USR.ChildQUOMId,EH.QUOMId)=@QUOMId AND
	 (@dealerId=0 OR EH.DealerId=@dealerId) AND
	(@branchId='' OR EH.BranchId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@branchId))) AND
	(@site_ID='' OR EH.SiteId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@site_ID))) AND
	(@fleet_ID='' OR EH.FleetId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@fleet_ID))) AND
	(@eqp_Plan_ID='' OR EH.EqpPlanId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@eqp_Plan_ID))) AND
	(@modelId='' OR EH.ModelId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@modelId))) AND
	(@ProjHeaderId='' OR EH.ProjHeaderId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@ProjHeaderId))) 
END
ELSE
BEGIN
	INSERT INTO #aa_EqpProj(/*VV #378*/EqpPlanId,EqpProjId,ModelId,Model,Cost_Responsibility_ID,Projection_Type_ID,FleetId,ExchangeRateId,
	Default_Cost_Bearer_ID,Cost_Centre_ID,StartDate,EndDate,StartUsage, EndUsage,EndQUOMId)
	SELECT DISTINCT /*VV #378*/EH.EqpPlanId, EH.EqpProjId,EH.ModelId,EH.Model,EH.Cost_Responsibility_ID,EH.Projection_Type_ID,
	EH.FleetId,EH.ExchangeRateId,EH.Default_Cost_Bearer_ID,EH.Cost_Centre_ID,
	EH.EqpStartDate,EH.EndDate,dbo.GET_USAGE_FROM_DATE_F(EH.EqpProjId,@QUOMID,EH.EqpStartDate) AS StartUsage,
	/*VV #378 dbo.GET_USAGE_FROM_DATE_F(EH.EqpProjId,@QUOMID,EH.EndDate) AS EndUsage,*/
	CASE WHEN EPR.Eqp_Term_Rule_ID=@TermByUsage /*VV #2663*/ AND ISNULL(EPR.EndQUOMId,0)=ISNULL(@QUOMID,0) THEN EPR.EndUsage ELSE
	dbo.GET_EQUIPMENT_END_USAGE_F(EH.EqpPlanId, @QUOMID,EH.EndDate,EH.Utilisation_Method_Id,
	EPR.Annual_Utilisation,EH.UsageProfileId) END AS EndUsage,
	EH.QUOMId AS EndQUOMId
	FROM  
	EQUIPMENT_HIERARCHY_V EH 
		INNER JOIN
	tblEqpProjs EPR
		ON EH.EqpProjId=EPR.EqpProjId
	WHERE 
	 (@dealerId=0 OR EH.DealerId=@dealerId) AND
	(@branchId='' OR EH.BranchId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@branchId))) AND
	(@site_ID='' OR EH.SiteId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@site_ID))) AND
	(@fleet_ID='' OR EH.FleetId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@fleet_ID))) AND
	(@eqp_Plan_ID='' OR EH.EqpPlanId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@eqp_Plan_ID))) AND
	(@modelId='' OR EH.ModelId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@modelId))) AND
	(@ProjHeaderId='' OR EH.ProjHeaderId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@ProjHeaderId))) 
END

--drop table aa_EqpProj
--SELECT * INTO aa_EqpProj FROM #aa_EqpProj
--RETURN


IF @@ROWCOUNT=0 RETURN



/*GW*/
SELECT @DefCB=CostBearerId FROM tblCostBearers WHERE Default_Value=1

CREATE TABLE #aa_Factor(EqpProjId int,AdjFactor float PRIMARY KEY(EqpProjId))

/*GW Calculation factor from [RPT_PROJECTION_SUMMARY_CUSTOMER_P]*/
if @Customer=1 
	Begin
		INSERT #aa_Factor(EqpProjId ,AdjFactor)
		SELECT DISTINCT EP.EqpProjId,
			(Case when PC.Agr_Type_Id=4
			then 
				ISNULL((PC.CostProj+PC.CostProj * (PC.Pct_Risk_Premium /100.00))/NULLIF(PC.CostProj,0),1)
			else
				Case when ISNULL(RB.BillProj,0)<>0
				then
					ISNULL(RB.BillProj/NULLIF(PC.CostProj,0),1)
				else
					1
				end
			end) as AdjFactor 
		FROM  
			#aa_EqpProj EP 
				LEFT JOIN
			(select B.EqpProjID,SUM(B.PrimeBillProj) AS BillProj 
			FROM 
			tblRepBilling B
				inner join
			#aa_EqpProj E
				on B.EqpProjID=E.EqpProjId
				INNER JOIN
			SALES_AGREEMENT	SA 
				ON SA.Agr_Eqp_Plan_ID=E.EqpPlanId AND E.Projection_Type_ID=6/*Estimate-Current*/
				group by B.EqpProjID
			) RB
				ON RB.EqpProjID=EP.EqpProjID
				INNER JOIN
			(select C.EqpProjID,SA.Pct_Risk_Premium,SA.Agr_Type_Id,
			SUM(C.PrimePartsSell+C.PrimeLabourSell+C.PrimeMiscSell) AS CostProj  from
			tblRepProjCosts C
				inner join
			#aa_EqpProj E
				on C.EqpProjID=E.EqpProjId
				INNER JOIN
			SALES_AGREEMENT	SA 
				ON SA.Agr_Eqp_Plan_ID=E.EqpPlanId AND E.Projection_Type_ID=6/*Estimate-Current*/
				where C.CostBearerID=@DefCB  
				group by C.EqpProjID,SA.Pct_Risk_Premium,SA.Agr_Type_Id
			) PC
				ON PC.EqpProjID=EP.EqpProjID 
				
		
		Update #aa_EqpProj 
		set #aa_EqpProj.AdjFactor=isnull(#aa_Factor.AdjFactor,1)
		From #aa_EqpProj
			left join #aa_Factor on #aa_Factor.EqpProjId = #aa_EqpProj.EqpProjId

		 
	End

--Task header
CREATE TABLE #aa_Task_Header(Task_Header_Id int PRIMARY KEY (Task_Header_Id))
IF @ProjTaskId<>''
BEGIN
	INSERT INTO #aa_Task_Header(Task_Header_Id)
	SELECT DISTINCT PT.Task_Header_Id FROM 
	tblProjTasks PT
		INNER JOIN
	dbo.LIST_TO_TABLE_F(@projTaskId) LTT
		ON PT.ProjTaskId=LTT.List_Item
	
END


--Create a temporary table for tasks
CREATE TABLE #aa_Tasks(
ProjTaskID int,EqpProjID int,SystemID int,ManufacturerId int,UsageQUOMId int,Cost_Activity_ID int,
Cost_Expense_ID int,Unscheduled bit,
AnalyseById int,AnalyseBy varchar(350) COLLATE DATABASE_DEFAULT
PRIMARY KEY(ProjTaskID,EqpProjID))

--Get all tasks
INSERT INTO #aa_Tasks (ProjTaskID,EqpProjID,SystemID,ManufacturerId,UsageQUOMId,Cost_Activity_ID,Cost_Expense_ID,
Unscheduled,AnalyseById,AnalyseBy)
SELECT PT.ProjTaskID,PT.EqpProjID,S.SystemID,PT.ManufacturerId,PT.UsageQUOMId,TT.Cost_Activity_ID,
SS.Cost_Expense_ID,CASE PT.Unscheduled WHEN 0 THEN 0 ELSE 1 END AS Unscheduled,
CASE @AnalyseBy
	WHEN 'MODL' THEN EPR.ModelId
	WHEN 'CTTY' THEN CT.CostTypeId
	WHEN 'SYST' THEN S.SystemId
	WHEN 'SUBS' THEN SS.SubSystemId
	WHEN 'EVCC' THEN PT.ComponentCodeId
	WHEN 'EVTT' THEN PT.TaskTypeId			
	WHEN 'PRTA' THEN PT.Task_Header_Id 
	WHEN 'PLM'	THEN 0
	/*VV 5-Feb-2009*/
	WHEN 'FISH' THEN 0 -- Field Shop
	WHEN 'LBAY' THEN 0 -- Labour activity
	WHEN 'JOBC' THEN 0 -- Job Code
	ELSE PT.Task_Header_Id
END AS AnalyseByID,

CASE @AnalyseBy
	
	WHEN 'MODL' THEN EPR.Model
	WHEN 'CTTY' THEN CT.CostType
	WHEN 'SYST' THEN S.System
	WHEN 'SUBS' THEN SS.SubSystem
	WHEN 'EVCC' THEN CC.Code + '-' + CC.Description
	WHEN 'EVTT' THEN TT.Code + '-' + TT.Description
	WHEN 'PRTA' THEN TH.Description
	WHEN 'PLM'	THEN @AnalyseBy 
	/*VV 5-Feb-2009*/
	WHEN 'FISH' THEN @AnalyseBy
	WHEN 'LBAY' THEN @AnalyseBy
	WHEN 'JOBC' THEN @AnalyseBy
	ELSE TH.Description
END AS AnalyseBy
FROM 
tblProjTasks PT
	INNER JOIN
#aa_EqpProj EPR
	ON PT.EqpProjId=EPR.EqpProjId
	INNER JOIN
tblTaskTypes TT
	ON PT.TaskTypeId = TT.TaskTypeID
	INNER JOIN
tblComponentCodes CC 
	ON PT.ComponentCodeId = CC.ComponentCodeID
	INNER JOIN 
tblSubSystems SS 
	ON CC.SubSystemID = SS.SubSystemID 
	INNER JOIN
tblSystems S ON SS.SystemID = S.SystemID
	 INNER JOIN
tblCostTypes CT 
	ON S.CostTypeID = CT.CostTypeID
	INNER JOIN
TASK_HEADER TH
	ON PT.Task_Header_Id=TH.Task_Header_Id
WHERE 
(@taskTypeID='' OR PT.TaskTypeID IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@taskTypeID))) AND
(@componentCodeID='' OR PT.ComponentCodeID IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@componentCodeID))) AND
(@modifierID='' OR PT.ModifierId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@modifierID))) AND
(@projTaskId='' OR PT.Task_Header_Id IN (SELECT Task_Header_Id FROM #aa_Task_Header)) AND
(@systemID='' OR S.SystemID IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@systemID))) AND
(@subSystemID='' OR SS.SubSystemID IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@subSystemID))) AND
(@costTypeID='' OR S.CostTypeID IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@costTypeID))) 

--drop table aa_EqpProj,aa_Tasks
--select * into aa_EqpProj from #aa_EqpProj
--select * into aa_Tasks from #aa_Tasks 
--
-- return
	
/*For calculation of actual costs. We need to filter by 
@CostBearerID,@costResponsibilityID,@costCentreID,@costActivityID,@costExpenseID 

This script was copied from usp_Update_RepActualCosts
*/

CREATE TABLE #ProjTaskDefaults (ProjTaskId int,CountJobs int,Cost_Bearer_ID int,Parts_Cost_Expense_ID int,
Misc_Cost_Expense_ID int,Labour_Cost_Expense_ID int,Cost_Centre_ID int,Labour_Activity_Id int
PRIMARY KEY(ProjTaskId) )

CREATE TABLE #PTADefaults(ProjTaskAmtId int,ProjTaskOptId int,ProjTaskId int,Cost_Centre_ID int,Parts_Cost_Expense_ID int,
Labour_Cost_Expense_ID int,Misc_Cost_Expense_ID int,Cost_Bearer_ID int,Labour_Activity_Id int
PRIMARY KEY(ProjTaskAmtId,ProjTaskOptId))

--Create a temporary table for costs
CREATE TABLE #aa_CostComparison(
	[AnalyseByID] [int],
	[AnalyseBy] [varchar] (350) COLLATE database_default NULL ,
	[PartsCost] [float] NULL ,
	[LabourCost] [float] NULL ,
	[MiscCost] [float] NULL ,
	/*VV 5-Feb-2009*/
	[LabourHours] [float] NULL, 
	[Duration] [float] NULL,
	[Usage] [float],
	/*VV CR8399*/
	EqpProjId int)

--	Insert into temporary table the actual costs for current and alternate projections 

IF @FieldShop=0 AND @AnalyseBy<>'FISH'/*VV @FieldShop<>0 only if Labour hrs per interval report is run
				 Discussed with GE If the user selects to filter labour hrs by field or shop do not show actuals because
				we cannot determine if they are field or shop*/
	AND @ShowCostLabHrsDuration<>@ShowDuration /*VV  For current/alternate projections historical (actual) duration 
												is taken from EQS tasks with status complete and in progress*/
BEGIN
	INSERT INTO #PTADefaults(ProjTaskAmtId,ProjTaskOptId,ProjTaskId,Cost_Centre_ID,Parts_Cost_Expense_ID,Labour_Cost_Expense_ID,
	Misc_Cost_Expense_ID,Cost_Bearer_ID,Labour_Activity_Id)
	SELECT     
	PTA.ProjTaskAmtId, PTA.ProjTaskOptId,PT.ProjTaskId,
	ISNULL(PTA.Cost_Centre_ID,CASE COUNT(CA.Cost_Allocation_Id) WHEN 1 THEN MAX(CAD.Cost_Centre_Id) ELSE PTA.Cost_Centre_ID END) AS Cost_Centre_ID, 
	ISNULL(PTA.Parts_Cost_Expense_ID,CASE COUNT(CA.Cost_Allocation_Id) WHEN 1 THEN MAX(CAD.Parts_Cost_Expense_Id) ELSE PTA.Parts_Cost_Expense_ID END) AS Parts_Cost_Expense_ID, 
	ISNULL(PTA.Labour_Cost_Expense_ID,CASE COUNT(CA.Cost_Allocation_Id) WHEN 1 THEN MAX(CAD.Labour_Cost_Expense_Id) ELSE PTA.Labour_Cost_Expense_ID END) AS Labour_Cost_Expense_ID, 
	ISNULL(PTA.Misc_Cost_Expense_ID,CASE COUNT(CA.Cost_Allocation_Id) WHEN 1 THEN MAX(CAD.Misc_Cost_Expense_Id) ELSE PTA.Misc_Cost_Expense_ID END) AS Misc_Cost_Expense_ID, 
	ISNULL(PTA.Cost_Bearer_ID,CASE COUNT(CA.Cost_Allocation_Id) WHEN 1 THEN MAX(CAD.Cost_Bearer_Id) ELSE PTA.Cost_Bearer_ID END) AS Cost_Bearer_ID,
	PTA.Labour_Activity_Id
	FROM 
	#aa_Tasks A
		INNER JOIN  
	tblProjTasks PT
		ON A.ProjTaskId=PT.ProjTaskId
		INNER JOIN     
	tblProjTaskOpts PTO 
		ON PT.ProjTaskId=PTO.ProjTaskId
		INNER JOIN
	tblProjTaskAmts PTA 
		ON PTO.ProjTaskOptId = PTA.ProjTaskOptId 	
		LEFT OUTER JOIN
	COST_ALLOCATION_DETAIL CAD 
		INNER JOIN
	COST_ALLOCATION CA 
		ON CAD.Cost_Allocation_Id = CA.Cost_Allocation_Id 
		ON PTA.ProjTaskAmtId = CA.Proj_Task_Amt_Id
	GROUP BY PTA.ProjTaskAmtId, PTA.ProjTaskOptId,PT.ProjTaskId,PTA.Misc_Cost_Expense_ID, PTA.Labour_Cost_Expense_ID, 
	PTA.Cost_Bearer_ID, PTA.Parts_Cost_Expense_ID, PTA.Cost_Centre_ID,PTA.Labour_Activity_Id


	INSERT INTO #ProjTaskDefaults(ProjTaskId,CountJobs,Cost_Bearer_ID,Parts_Cost_Expense_ID,
	Misc_Cost_Expense_ID,Labour_Cost_Expense_ID,Cost_Centre_ID,Labour_Activity_Id)
	SELECT     
	PTA.ProjTaskId, 
	COUNT(PTA.ProjTaskAmtId) AS CountJobs, MAX(PTA.Cost_Bearer_ID) AS Cost_Bearer_ID, 
	MAX(PTA.Parts_Cost_Expense_ID) AS Parts_Cost_Expense_ID, MAX(PTA.Misc_Cost_Expense_ID) AS Misc_Cost_Expense_ID, 
	MAX(PTA.Labour_Cost_Expense_ID) AS Labour_Cost_Expense_ID, MAX(PTA.Cost_Centre_ID) AS Cost_Centre_ID,
	MAX(PTA.Labour_Activity_Id) AS Labour_Activity_Id
	FROM  
	#PTADefaults PTA 	
	GROUP BY PTA.ProjTaskId


	UPDATE #ProjTaskDefaults SET
	Cost_Bearer_ID=NULL,
	Parts_Cost_Expense_ID=NULL,
	Misc_Cost_Expense_ID=NULL,
	Labour_Cost_Expense_ID=NULL,
	Cost_Centre_ID=NULL,
	Labour_Activity_Id=NULL
	WHERE CountJobs>1 OR CountJobs<1
	

	INSERT INTO #aa_CostComparison (AnalyseByID,AnalyseBy,PartsCost,LabourCost,MiscCost,Usage,
	/*VV 5-Feb-2009*/LabourHours,Duration,/*VV CR8399*/EqpProjId)
	SELECT 
	CASE @AnalyseBy
	WHEN 'LBAY' THEN ISNULL(ISNULL(WOO.Labour_Activity_ID, PT.Labour_Activity_ID),0)
	WHEN 'JOBC' THEN WO.AmtJobCodeId
	ELSE A.AnalyseByID END AS AnalyseByID,
	CASE @AnalyseBy
	WHEN 'LBAY' THEN CASE WHEN WOO.Labour_Activity_ID>0 THEN LAWO.ActivityCode+' - '+LAWO.LabourActivity
						  WHEN PT.Labour_Activity_ID>0 THEN LAPT.ActivityCode+' - '+LAPT.LabourActivity
						  ELSE LAWO.ActivityCode+' - '+LAWO.LabourActivity END /*This will show  "NONE" */
	WHEN 'JOBC' THEN JC.Code+' - '+JC.Description
	ELSE A.AnalyseBy END AS AnalyseBy,
	SUM(CASE WHEN ccat.Cost_Category_Id = 1 THEN woo.PartsSell*wos.PercentParts / 100.00 / wo.ExchangeRate ELSE 0 END) AS PartsCost,
	SUM(CASE WHEN ccat.Cost_Category_Id = 2 THEN woo.LabourSell*wos.PercentLabour / 100.00 / wo.ExchangeRate ELSE 0 END) AS LabourCost,
	SUM(CASE WHEN ccat.Cost_Category_Id = 3 THEN woo.MiscSell*wos.PercentMisc / 100.00 / wo.ExchangeRate ELSE 0 END) AS MiscCost,

	dbo.GET_USAGE_FROM_DATE_F(A.EqpProjId,@QUOMID,
	CASE WHEN PWO.AMTStartDate<=EP.StartDate THEN DATEADD(n,1,EP.StartDate) ELSE PWO.AMTStartDate END) AS Usage,
	/*VV 5-Feb-2009*/
	SUM(CASE WHEN ccat.Cost_Category_Id = 2 THEN WOS.PercentLabour / 100 * WOO.ActualLabourHours ELSE 0 END) AS LabourHours, 
	SUM(CASE WHEN ccat.Cost_Category_Id = 2 THEN WOS.PercentLabour / 100 * WOO.ActualDurationHours ELSE 0 END)  AS Duration,
	/*VV CR8399*/
	A.EqpProjId
	FROM 
	tblWorkOrderProjs WOP
		INNER JOIN
	#aa_Tasks A
		ON WOP.ProjTaskId = A.ProjTaskId
		INNER JOIN
	#ProjTaskDefaults PT
		ON A.ProjTaskId=PT.ProjTaskId
		INNER JOIN
	#aa_EqpProj EP
		ON A.EqpProjId=EP.EqpProjId
		INNER JOIN
	tblWorkOrders WO
		ON WOP.WorkOrderId=WO.AmtParentWorkOrderId 
		INNER JOIN
	tblWorkOrderOperations WOO 
		ON WO.WorkOrderId = WOO.WorkOrderId 
		INNER JOIN
	tblWorkOrderSettlements WOS 
		ON WO.WorkOrderId = WOS.WorkOrderId
		INNER JOIN
	tblWorkOrders PWO
		ON WO.AmtParentWorkOrderId=PWO.WorkOrderId
		LEFT OUTER JOIN
	TASK T
		ON PWO.WorkOrderId=T.Work_Order_Id
		LEFT OUTER JOIN
	tblLabourActivities LAWO
		ON ISNULL(WOO.Labour_Activity_Id,0)=LAWO.LabourActivityId
		LEFT OUTER JOIN
	tblLabourActivities LAPT
		ON PT.Labour_Activity_Id=LAPT.LabourActivityId
		LEFT OUTER JOIN
	tblJobCodes JC
		ON ISNULL(WO.AmtJobCodeId,0)=JC.JobCodeId
		CROSS JOIN 
	COST_CATEGORY ccat
	WHERE 
	(@CostBearerID='' OR ISNULL(WOS.CostBearerId,ISNULL(ISNULL(T.Cost_Bearer_ID, PT.Cost_Bearer_Id), EP.Default_Cost_Bearer_ID)) IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@CostBearerID))) AND
	(@costCentreID='' OR ISNULL(ISNULL(T.Cost_Centre_ID, PT.Cost_Centre_ID),EP.Cost_Centre_ID) IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@costCentreID))) AND
	(@costActivityID='' OR ISNULL(WOS.Cost_Activity_ID,A.Cost_Activity_ID) IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@costActivityID))) AND
	(@costExpenseID='' OR 
	(ccat.Cost_Category_Id = 1 AND 
		ISNULL(WOS.Cost_Expense_ID,ISNULL(ISNULL(T.Parts_Cost_Expense_Id, PT.Parts_Cost_Expense_Id),A.Cost_Expense_ID)) IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@costExpenseID))) OR
	(ccat.Cost_Category_Id = 2 AND 
		ISNULL(WOS.Cost_Expense_ID,ISNULL(ISNULL(T.Labour_Cost_Expense_Id, PT.Labour_Cost_Expense_Id),A.Cost_Expense_ID)) IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@costExpenseID))) OR
	(ccat.Cost_Category_Id = 3 AND 
		ISNULL(WOS.Cost_Expense_ID,ISNULL(ISNULL(T.Misc_Cost_Expense_Id, PT.Misc_Cost_Expense_Id),A.Cost_Expense_ID)) IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@costExpenseID)))) AND

	(@costResponsibilityID='' OR ISNULL(WOS.Cost_Responsibility_ID,EP.Cost_Responsibility_ID) IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@costResponsibilityID))) AND
	(@LabourActivityId='' OR ISNULL(ISNULL(WOO.Labour_Activity_Id,PT.Labour_Activity_Id),0) IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@LabourActivityId))) AND
	(@JobCodeId='' OR WO.AmtJobCodeId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@JobCodeId)))

	GROUP BY CASE @AnalyseBy
					WHEN 'LBAY' THEN ISNULL(ISNULL(WOO.Labour_Activity_ID, PT.Labour_Activity_ID),0)
					WHEN 'JOBC' THEN WO.AmtJobCodeId
					ELSE A.AnalyseByID END,
					CASE @AnalyseBy
					WHEN 'LBAY' THEN CASE WHEN WOO.Labour_Activity_ID>0 THEN LAWO.ActivityCode+' - '+LAWO.LabourActivity
						  WHEN PT.Labour_Activity_ID>0 THEN LAPT.ActivityCode+' - '+LAPT.LabourActivity
						  ELSE LAWO.ActivityCode+' - '+LAWO.LabourActivity END /*This will show  "NONE" */
					WHEN 'JOBC' THEN JC.Code+' - '+JC.Description
	ELSE A.AnalyseBy END,
	A.EqpProjId,CASE WHEN PWO.AMTStartDate<=EP.StartDate THEN DATEADD(n,1,EP.StartDate) ELSE PWO.AMTStartDate END
END


/*VV  For current/alternate projections historical (actual) duration 
is taken from EQS tasks with status complete and in progress*/
IF @ShowCostLabHrsDuration=@ShowDuration AND 
	EXISTS(SELECT EqpPlanId FROM #aa_EqpProj WHERE Projection_Type_Id IN(@TypeCurr,@TypeAlt))
BEGIN
	DECLARE @UTaskType varchar(200)
	DECLARE @UTaskTypeId int
	DECLARE @UModifierId int
	DECLARE @UCostActivityID int

	SET @UModifierId=0 /*Same as in Add unassigned task*/

	SELECT @UTaskTypeId=TaskTypeId, @UTaskType=Code + '-' + [Description],@UCostActivityID=Cost_Activity_ID 
	FROM tblTaskTypes WHERE Code='UN'

	INSERT INTO #aa_CostComparison (AnalyseByID,AnalyseBy,Usage,Duration,/*VV CR8399*/EqpProjId)
	SELECT 
	CASE @AnalyseBy
		WHEN 'MODL' THEN EPR.ModelId
		WHEN 'CTTY' THEN CT.CostTypeId
		WHEN 'SYST' THEN S.SystemId
		WHEN 'SUBS' THEN SS.SubSystemId
		WHEN 'EVCC' THEN CASE WHEN T.Strategy_Proj_Task_Opt_Id>0 THEN T.Component_Code_Id ELSE SS.UnsCompCodeID END
		WHEN 'EVTT' THEN CASE WHEN T.Strategy_Proj_Task_Opt_Id>0 THEN T.Task_Type_Id  ELSE @UTaskTypeId END		
		WHEN 'PRTA' THEN CASE WHEN T.Strategy_Proj_Task_Opt_Id>0 THEN T.Task_Header_Id ELSE UTH.Task_Header_Id END
		WHEN 'PLM'	THEN 0
		WHEN 'FISH' THEN 0 -- Field Shop
		WHEN 'LBAY' THEN 0 -- Labour activity
		WHEN 'JOBC' THEN 0 -- Job Code
		ELSE T.Task_Header_Id
	END AS AnalyseByID,

	CASE @AnalyseBy
		
		WHEN 'MODL' THEN EPR.Model
		WHEN 'CTTY' THEN CT.CostType
		WHEN 'SYST' THEN S.System
		WHEN 'SUBS' THEN SS.SubSystem
		WHEN 'EVCC' THEN CASE WHEN T.Strategy_Proj_Task_Opt_Id>0 THEN CC.Code + '-' + CC.Description ELSE UCC.Code + '-' + UCC.Description END
		WHEN 'EVTT' THEN CASE WHEN T.Strategy_Proj_Task_Opt_Id>0 THEN TT.Code + '-' + TT.Description ELSE @UTaskType END
		WHEN 'PRTA' THEN CASE WHEN T.Strategy_Proj_Task_Opt_Id>0 THEN TH.Description ELSE UTH.Description END
		WHEN 'PLM'	THEN @AnalyseBy 
		/*VV 5-Feb-2009*/
		WHEN 'FISH' THEN @AnalyseBy
		WHEN 'LBAY' THEN @AnalyseBy
		WHEN 'JOBC' THEN @AnalyseBy
		ELSE TH.Description
	END AS AnalyseBy,
	dbo.GET_USAGE_FROM_DATE_F(EPR.EqpProjId,@QUOMID,ISNULL(E.Actual_Down_Time,T.Actual_Down_Time)) AS Usage,
	SUM(T.Actual_Duration) AS Duration,
	EPR.EqpProjId
	FROM 
	TASK T
		INNER JOIN
	#aa_EqpProj EPR
		ON T.Eqp_Plan_Id=EPR.EqpPlanId
		INNER JOIN
	tblTaskTypes TT
		ON T.Task_Type_Id = TT.TaskTypeID
		INNER JOIN
	tblComponentCodes CC 
		ON T.Component_Code_Id = CC.ComponentCodeID
		INNER JOIN 
	tblSubSystems SS 
		ON CC.SubSystemID = SS.SubSystemID 
		INNER JOIN
	tblSystems S ON SS.SystemID = S.SystemID
		 INNER JOIN
	tblCostTypes CT 
		ON S.CostTypeID = CT.CostTypeID
		INNER JOIN
	TASK_HEADER TH
		ON T.Task_Header_Id=TH.Task_Header_Id
		LEFT JOIN
	tblComponentCodes UCC
		ON SS.UnsCompCodeID=UCC.ComponentCodeID
		LEFT JOIN
	TASK_HEADER UTH
		ON UCC.Code=UTH.Component_Code AND UTH.Task_Type='UN'
		LEFT JOIN
	[EVENT] E
		ON T.Event_Id=E.Event_Id

	WHERE EPR.Projection_Type_Id IN(@TypeCurr,@TypeAlt) AND 
	T.Task_Status_ID IN(@TaskStatusIP,@TaskStatusC) AND
	(@costActivityID='' OR CASE WHEN T.Strategy_Proj_Task_Opt_Id>0 THEN TT.Cost_Activity_ID ELSE @UCostActivityId END IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@costActivityID))) AND
	(@taskTypeID='' OR CASE WHEN T.Strategy_Proj_Task_Opt_Id>0 THEN T.Task_Type_Id  ELSE @UTaskTypeId END IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@taskTypeID))) AND
	(@componentCodeID='' OR CASE WHEN T.Strategy_Proj_Task_Opt_Id>0 THEN T.Component_Code_Id ELSE SS.UnsCompCodeID END IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@componentCodeID))) AND
	(@modifierID='' OR CASE WHEN T.Strategy_Proj_Task_Opt_Id>0 THEN T.Modifier_Id ELSE @UModifierId END IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@modifierID))) AND
	(@projTaskId='' OR CASE WHEN T.Strategy_Proj_Task_Opt_Id>0 THEN T.Task_Header_Id ELSE UTH.Task_Header_Id END IN (SELECT Task_Header_Id FROM #aa_Task_Header)) AND
	(@systemID='' OR S.SystemID IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@systemID))) AND
	(@subSystemID='' OR SS.SubSystemID IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@subSystemID))) AND
	(@costResponsibilityID='' OR EPR.Cost_Responsibility_ID IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@costResponsibilityID))) AND
	(@costTypeID='' OR S.CostTypeID IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@costTypeID))) 
	GROUP BY
	CASE @AnalyseBy
		WHEN 'MODL' THEN EPR.ModelId
		WHEN 'CTTY' THEN CT.CostTypeId
		WHEN 'SYST' THEN S.SystemId
		WHEN 'SUBS' THEN SS.SubSystemId
		WHEN 'EVCC' THEN CASE WHEN T.Strategy_Proj_Task_Opt_Id>0 THEN T.Component_Code_Id ELSE SS.UnsCompCodeID END
		WHEN 'EVTT' THEN CASE WHEN T.Strategy_Proj_Task_Opt_Id>0 THEN T.Task_Type_Id  ELSE @UTaskTypeId END		
		WHEN 'PRTA' THEN CASE WHEN T.Strategy_Proj_Task_Opt_Id>0 THEN T.Task_Header_Id ELSE UTH.Task_Header_Id END
		WHEN 'PLM'	THEN 0
		WHEN 'FISH' THEN 0 -- Field Shop
		WHEN 'LBAY' THEN 0 -- Labour activity
		WHEN 'JOBC' THEN 0 -- Job Code
		ELSE T.Task_Header_Id
	END ,

	CASE @AnalyseBy
		
		WHEN 'MODL' THEN EPR.Model
		WHEN 'CTTY' THEN CT.CostType
		WHEN 'SYST' THEN S.System
		WHEN 'SUBS' THEN SS.SubSystem
		WHEN 'EVCC' THEN CASE WHEN T.Strategy_Proj_Task_Opt_Id>0 THEN CC.Code + '-' + CC.Description ELSE UCC.Code + '-' + UCC.Description END
		WHEN 'EVTT' THEN CASE WHEN T.Strategy_Proj_Task_Opt_Id>0 THEN TT.Code + '-' + TT.Description ELSE @UTaskType END
		WHEN 'PRTA' THEN CASE WHEN T.Strategy_Proj_Task_Opt_Id>0 THEN TH.Description ELSE UTH.Description END
		WHEN 'PLM'	THEN @AnalyseBy 
		WHEN 'FISH' THEN @AnalyseBy
		WHEN 'LBAY' THEN @AnalyseBy
		WHEN 'JOBC' THEN @AnalyseBy
		ELSE TH.Description
	END,
	EPR.EqpProjId,ISNULL(E.Actual_Down_Time,T.Actual_Down_Time)
END

--drop table aa_EqpProj,aa_Tasks,aa_ProjTaskDefaults
--select * into aa_ProjTaskDefaults from #ProjTaskDefaults
--select * into aa_EqpProj from #aa_EqpProj	
--select * into aa_Tasks from #aa_Tasks
--return

--drop table aa_CostComparison
--select * into aa_CostComparison from #aa_CostComparison
--return


DROP TABLE #ProjTaskDefaults, #PTADefaults,#aa_Task_Header


--	Insert into temporary table the future costs for current and alternate projections and the costs
-- for all other projections. Do not include unassigned tasks
 
INSERT INTO #aa_CostComparison (AnalyseByID,AnalyseBy,PartsCost,LabourCost,MiscCost,Usage,
/*VV 5-Feb-2009*/LabourHours,Duration,/*VV CR8399*/EqpProjId)
SELECT 
CASE @AnalyseBy
WHEN 'FISH' THEN CAST(PTA.Labour_Hrs_Field AS int)
WHEN 'LBAY' THEN ISNULL(PTA.Labour_Activity_Id,0)
WHEN 'JOBC' THEN ISNULL(PTA.JobCodeId,0)
ELSE PT.AnalyseByID END AS AnalyseByID,
CASE @AnalyseBy
WHEN 'FISH' THEN CASE PTA.Labour_Hrs_Field WHEN 1 THEN 'Field' ELSE 'Shop' END
WHEN 'LBAY' THEN LA.ActivityCode+' - '+LA.LabourActivity
WHEN 'JOBC' THEN JC.Code+' - '+JC.Description
ELSE PT.AnalyseBy END AS AnalyseBy,

SUM(CASE WHEN ccat.Cost_Category_Id = 1 THEN /*GW*/(case when pta.Cost_Bearer_ID=@DefCB  then EP.AdjFactor else 1.00 end)* pta.PartsCost * pto.Probability * cpe.CumPartsEscalation / cpe1.CumPartsEscalation / 100.00 / erc.ExRate ELSE 0 END) AS PartsCost,

SUM(CASE WHEN ccat.Cost_Category_Id = 2 THEN /*GW*/(case when pta.Cost_Bearer_ID=@DefCB  then EP.AdjFactor else 1.00 end)* pta.TotalLabourCost * pto.Probability * ce.CumLaborEscalation / ce1.CumLaborEscalation / 100.00 / erc.ExRate ELSE 0 END) AS LabourCost,

SUM(CASE WHEN ccat.Cost_Category_Id = 3 THEN /*GW*/(case when pta.Cost_Bearer_ID=@DefCB  then EP.AdjFactor else 1.00 end)* pta.TotalMiscCost * pto.Probability * ce.CumMiscEscalation / ce1.CumMiscEscalation / 100.00 / erc.ExRate ELSE 0 END) AS MiscCost,

CASE 
WHEN occ.OccDate<=EP.StartDate OR ISNULL(PT.UsageQUOMId,0)<>ISNULL(@QUOMId,0) THEN
	dbo.GET_USAGE_FROM_DATE_F(pt.EqpProjId,@QUOMId,
	CASE WHEN occ.OccDate<=EP.StartDate THEN DATEADD(n,1,EP.StartDate) ELSE occ.OccDate END) 
ELSE occ.OccUsage END AS Usage,
/*VV 5-Feb-2009*/
SUM(CASE WHEN ccat.Cost_Category_Id = 2 THEN pta.LaborHours * pto.Probability / 100 ELSE 0 END) AS LabourHours, 
SUM(CASE WHEN ccat.Cost_Category_Id = 1 THEN pta.Duration * pto.Probability / 100 ELSE 0 END) AS Duration,
/*VV CR8399*/
PT.EqpProjId
	FROM 
#aa_EqpProj EP
	INNER JOIN
#aa_Tasks PT
	ON EP.EqpProjId=PT.EqpProjId
	INNER JOIN 
tblProjTaskOpts pto 
	ON PT.ProjTaskId = pto.ProjTaskId
	INNER JOIN 
PROJ_TASK_AMT_COST_1_V pta 
	ON PTO.ProjTaskOptId = pta.ProjTaskOptId
	INNER JOIN 
tblProjTaskOccs occ 
	ON PT.ProjTaskId = occ.ProjTaskId 	
	INNER JOIN 
tblExRateCurrencies erc 
	ON pta.CurrencyId = erc.CurrencyID AND EP.ExchangeRateId = erc.ExRateID
	INNER JOIN 
tblCostEscalations ce 
	ON ce.EndDate > pta.Pricing_Date AND ce.EscalationDate <= pta.Pricing_Date 
	INNER JOIN 
tblCostPartsEscalations cpe 
	ON ce.CostEscalationId = cpe.CostEscalationId AND cpe.ManufacturerId = pt.ManufacturerId
	INNER JOIN 
tblCostEscalations ce1 
	ON occ.OccDate >= ce1.EscalationDate AND occ.OccDate < ce1.EndDate
	INNER JOIN 
tblCostPartsEscalations cpe1 
	ON ce1.CostEscalationId = cpe1.CostEscalationId AND pt.ManufacturerId = cpe1.ManufacturerId
	LEFT OUTER JOIN
tblLabourActivities LA
	ON ISNULL(PTA.Labour_Activity_Id,0)=LA.LabourActivityId
	LEFT OUTER JOIN
tblJobCodes JC
	ON ISNULL(PTA.JobCodeId,0)=JC.JobCodeId
	CROSS JOIN 
COST_CATEGORY ccat
WHERE (PT.Unscheduled=0) AND
(@costResponsibilityID='' OR EP.Cost_Responsibility_ID IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@costResponsibilityID))) AND
(@CostBearerID='' OR ISNULL(pta.Cost_Bearer_ID, ep.Default_Cost_Bearer_ID) IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@CostBearerID))) AND
(@costCentreID='' OR ISNULL(pta.Cost_Centre_ID, ep.Cost_Centre_ID) IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@costCentreID))) AND
(@costActivityID='' OR PT.Cost_Activity_ID IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@costActivityID))) AND
(@costExpenseID='' OR 
(ccat.Cost_Category_Id = 1 AND
	ISNULL(pta.Parts_Cost_Expense_ID, pt.Cost_Expense_ID) IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@costExpenseID))) OR
(ccat.Cost_Category_Id = 2 AND
	ISNULL(pta.Labour_Cost_Expense_ID, pt.Cost_Expense_ID) IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@costExpenseID))) OR
(ccat.Cost_Category_Id = 3 AND
	ISNULL(pta.Misc_Cost_Expense_ID, pt.Cost_Expense_ID) IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@costExpenseID)))) AND
(@FieldShop=0 OR (@FieldShop=@Field AND pta.Labour_Hrs_Field=1) OR (@FieldShop=@Shop AND pta.Labour_Hrs_Field=0)) AND
(@JobCodeId='' OR pta.JobCodeId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@JobCodeId))) AND
(@LabourActivityId='' OR ISNULL(pta.Labour_Activity_Id,0) IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@LabourActivityId)))
GROUP BY CASE @AnalyseBy
			WHEN 'FISH' THEN CAST(PTA.Labour_Hrs_Field AS int)
			WHEN 'LBAY' THEN ISNULL(PTA.Labour_Activity_Id,0)
			WHEN 'JOBC' THEN ISNULL(PTA.JobCodeId,0)
			ELSE PT.AnalyseByID END,
			CASE @AnalyseBy
			WHEN 'FISH' THEN CASE PTA.Labour_Hrs_Field WHEN 1 THEN 'Field' ELSE 'Shop' END
			WHEN 'LBAY' THEN LA.ActivityCode+' - '+LA.LabourActivity
			WHEN 'JOBC' THEN JC.Code+' - '+JC.Description
			ELSE PT.AnalyseBy END,
PT.EqpProjId,PT.UsageQUOMId,occ.OccDate,EP.StartDate,occ.OccUsage


--drop table aa_CostComparison
--SELECT * into aa_CostComparison from #aa_CostComparison
--return
--Intervals

DECLARE @IntervalMin int
DECLARE @IntervalMax int
DECLARE @IntNumber int

--Set start and end interval id
UPDATE #aa_EqpProj SET StartIntervalId=FLOOR(StartUsage/@Interval),EndIntervalId=CEILING(EndUsage/@Interval)

SELECT @IntervalMin	=MIN(StartIntervalId),	@IntervalMax=MAX(EndIntervalId)
FROM #aa_EqpProj

CREATE TABLE #aa_Intervals(IntervalId int,IntervalStart int,IntervalEnd int PRIMARY KEY (IntervalId))

SET @IntNumber=@IntervalMin

WHILE @IntNumber<=@IntervalMax
BEGIN
	INSERT INTO #aa_Intervals(IntervalId,IntervalStart,IntervalEnd)
	VALUES(@IntNumber,@IntNumber*@Interval,(@IntNumber+1)*@Interval)

	SET @IntNumber=@IntNumber+1
END

IF EXISTS (SELECT ProjTaskId FROM #aa_Tasks WHERE Unscheduled=1)
BEGIN
	
	CREATE TABLE #aa_EqpPeriod(EqpProjId int,IntervalId int,
	IntervalStartDate datetime,IntervalEndDate datetime,
	StartPeriod int,EndPeriod int
	 PRIMARY KEY (EqpProjId,IntervalId))

	INSERT INTO #aa_EqpPeriod(EqpProjId,IntervalId,IntervalStartDate,IntervalEndDate)
	SELECT EPR.EqpProjId,I.IntervalId,

	/*This will return eqpstart date if period starts before the start date*/
	dbo.GET_DATE_FROM_USAGE_F(EPR.EqpProjId,@QUOMId,I.IntervalStart) AS IntervalStartDate,

	dbo.GET_DATE_FROM_USAGE_F(EPR.EqpProjId,@QUOMId,I.IntervalEnd) AS IntervalEndDate
	FROM
	#aa_EqpProj EPR
		INNER JOIN
	#aa_Intervals I
		ON I.IntervalId >= EPR.StartIntervalId AND I.IntervalId<=EPR.EndIntervalId

	UPDATE #aa_EqpPeriod SET 
	StartPeriod=YEAR(IntervalStartDate)*100+MONTH(IntervalStartDate),	
	EndPeriod=YEAR(IntervalEndDate)*100+MONTH(IntervalEndDate)

--drop table aa_EqpProj
--select * into aa_EqpProj from #aa_EqpProj
--return
--drop table aa_Intervals,aa_EqpPeriod
--	select * into aa_Intervals from #aa_Intervals
--	select * into aa_EqpPeriod from #aa_EqpPeriod
--	return

	CREATE TABLE #aa_Usages(EqpProjId int, CalenderPeriod int, PeriodStartUsage float,PeriodEndUsage float,
		PeriodUsage float)

	IF @QUOMId IS NULL
	BEGIN

		--Calculate usages in days. RepUsage table does not have date based records if equipment is not date based

		INSERT INTO #aa_Usages(EqpProjId, CalenderPeriod, PeriodStartUsage,PeriodEndUsage,PeriodUsage)
		SELECT DISTINCT PT.EqpProjId,RPC.Period AS CalenderPeriod,

		CAST(RU.PeriodStartDate as float)-CAST(EP.StartDate as float) AS PeriodStartUsage,
		CAST(RU.PeriodEndDate as float)-CAST(EP.StartDate as float) AS PeriodEndUsage,
		RU.PeriodDays AS PeriodUsage
		FROM
		#aa_EqpProj EP
			INNER JOIN
		#aa_Tasks PT
			ON EP.EqpProjId=PT.EqpProjId
			INNER JOIN
		tblRepProjCosts RPC
			ON PT.ProjTaskId=RPC.ProjTaskId 
			INNER JOIN		
		tblRepUsages RU
			ON RPC.Period=RU.CalenderPeriod AND RPC.EqpProjId=RU.EqpProjId AND ISNULL(RU.QUOMId,0)=ISNULL(EP.EndQUOMId,0)
		WHERE PT.Unscheduled=1
		
	END
	ELSE --@QUOMId>0
	BEGIN
		INSERT INTO #aa_Usages(EqpProjId, CalenderPeriod, PeriodStartUsage,PeriodEndUsage,
		PeriodUsage)
		SELECT DISTINCT PT.EqpProjId,RU.CalenderPeriod, RU.PeriodStartUsage,RU.PeriodEndUsage,
		RU.PeriodUsage
		FROM
		#aa_Tasks PT
			INNER JOIN
		tblRepProjCosts RPC
			ON PT.ProjTaskId=RPC.ProjTaskId 
			INNER JOIN		
		tblRepUsages RU
			ON RPC.Period=RU.CalenderPeriod AND RPC.EqpProjId=RU.EqpProjId AND RU.QUOMId=@QUOMId
		WHERE PT.Unscheduled=1
	END

--drop table aa_EqpProj
--select * into aa_EqpProj from #aa_EqpProj
----return
--drop table aa_Intervals,aa_EqpPeriod
--	select * into aa_Intervals from #aa_Intervals
--	select * into aa_EqpPeriod from #aa_EqpPeriod
--	--return
--drop table aa_Usages
--select * into aa_Usages from #aa_Usages
--
--drop table aa_Tasks
--select * into aa_Tasks from #aa_Tasks
--
--return

	/*(1) Add costs for the intervals which start period< end period*/

	INSERT INTO #aa_CostComparison (AnalyseByID,AnalyseBy,PartsCost,LabourCost,MiscCost,Usage,
	/*VV 5-Feb-2009*/LabourHours,Duration,/*VV CR8399*/EqpProjId)
	SELECT 
	CASE @AnalyseBy
	WHEN 'FISH' THEN CAST(PTA.Labour_Hrs_Field AS int)
	WHEN 'LBAY' THEN ISNULL(RPC.Labour_Activity_Id,0)
	WHEN 'JOBC' THEN ISNULL(PTA.JobCodeId,0)
	ELSE PT.AnalyseByID END AS AnalyseByID,
	CASE @AnalyseBy
	WHEN 'FISH' THEN CASE PTA.Labour_Hrs_Field WHEN 1 THEN 'Field' ELSE 'Shop' END
	WHEN 'LBAY' THEN LA.ActivityCode+' - '+LA.LabourActivity
	WHEN 'JOBC' THEN JC.Code+' - '+JC.Description
	ELSE PT.AnalyseBy END AS AnalyseBy,
	SUM(/*GW*/(case when pta.Cost_Bearer_ID=@DefCB  then E.AdjFactor else 1.00 end)*
		CASE 
		/*Could happen for the last interval*/
		WHEN RU.PeriodEndUsage<I.IntervalStart THEN 0
		/*period usage is in the interval*/
		WHEN RU.PeriodStartUsage >=I.IntervalStart AND RU.PeriodEndUsage<=I.IntervalEnd THEN 1.00
		/*interval is in period usage*/
		WHEN RU.PeriodStartUsage <=I.IntervalStart AND RU.PeriodEndUsage>=I.IntervalEnd THEN @Interval/RU.PeriodUsage
		/*period starts before interval and ends in  the interval*/	 
		WHEN RU.PeriodStartUsage<I.IntervalStart AND RU.PeriodEndUsage<=I.IntervalEnd THEN (RU.PeriodEndUsage-I.IntervalStart)/RU.PeriodUsage
		/*period starts in the interval, ends after the interval*/
		WHEN RU.PeriodStartUsage>I.IntervalStart AND RU.PeriodEndUsage>=I.IntervalEnd THEN (I.IntervalEnd-RU.PeriodStartUsage)/RU.PeriodUsage
		END
	* 
	RPC.PrimePartsSell) AS PartsCost,

	SUM(
	/*GW*/(case when pta.Cost_Bearer_ID=@DefCB  then E.AdjFactor else 1.00 end)*
	CASE 
	/*Could happen for the last interval*/
	WHEN RU.PeriodEndUsage<I.IntervalStart THEN 0
	/*period usage is in the interval*/
	WHEN RU.PeriodStartUsage >=I.IntervalStart AND RU.PeriodEndUsage<=I.IntervalEnd THEN 1.00
	/*interval is in period usage*/
	WHEN RU.PeriodStartUsage <=I.IntervalStart AND RU.PeriodEndUsage>=I.IntervalEnd THEN @Interval/RU.PeriodUsage
	/*period starts before interval and ends in  the interval*/	 
	WHEN RU.PeriodStartUsage<I.IntervalStart AND RU.PeriodEndUsage<=I.IntervalEnd THEN (RU.PeriodEndUsage-I.IntervalStart)/RU.PeriodUsage
	/*period starts in the interval, ends after the interval*/
	WHEN RU.PeriodStartUsage>I.IntervalStart AND RU.PeriodEndUsage>=I.IntervalEnd THEN (I.IntervalEnd-RU.PeriodStartUsage)/RU.PeriodUsage
	END * RPC.PrimeLabourSell) AS LabourCost,

	SUM(/*GW*/(case when pta.Cost_Bearer_ID=@DefCB  then E.AdjFactor else 1.00 end)*
	CASE 
	/*Could happen for the last interval*/
	WHEN RU.PeriodEndUsage<I.IntervalStart THEN 0
	/*period usage is in the interval*/
	WHEN RU.PeriodStartUsage >=I.IntervalStart AND RU.PeriodEndUsage<=I.IntervalEnd THEN 1.00
	/*interval is in period usage*/
	WHEN RU.PeriodStartUsage <=I.IntervalStart AND RU.PeriodEndUsage>=I.IntervalEnd THEN @Interval/RU.PeriodUsage
	/*period starts before interval and ends in  the interval*/	 
	WHEN RU.PeriodStartUsage<I.IntervalStart AND RU.PeriodEndUsage<=I.IntervalEnd THEN (RU.PeriodEndUsage-I.IntervalStart)/RU.PeriodUsage
	/*period starts in the interval, ends after the interval*/
	WHEN RU.PeriodStartUsage>I.IntervalStart AND RU.PeriodEndUsage>=I.IntervalEnd THEN (I.IntervalEnd-RU.PeriodStartUsage)/RU.PeriodUsage
	END *RPC.PrimeMiscSell) AS MiscCost,
	CASE 
	WHEN I.IntervalStart+@Interval/2.00>E.EndUsage THEN E.EndUsage
	ELSE I.IntervalStart+@Interval/2.00 END AS Usage,
	/*VV 5-Feb-09*/
	SUM(
	CASE 
	/*Could happen for the last interval*/
	WHEN RU.PeriodEndUsage<I.IntervalStart THEN 0
	/*period usage is in the interval*/
	WHEN RU.PeriodStartUsage >=I.IntervalStart AND RU.PeriodEndUsage<=I.IntervalEnd THEN 1.00
	/*interval is in period usage*/
	WHEN RU.PeriodStartUsage <=I.IntervalStart AND RU.PeriodEndUsage>=I.IntervalEnd THEN @Interval/RU.PeriodUsage
	/*period starts before interval and ends in  the interval*/	 
	WHEN RU.PeriodStartUsage<I.IntervalStart AND RU.PeriodEndUsage<=I.IntervalEnd THEN (RU.PeriodEndUsage-I.IntervalStart)/RU.PeriodUsage
	/*period starts in the interval, ends after the interval*/
	WHEN RU.PeriodStartUsage>I.IntervalStart AND RU.PeriodEndUsage>=I.IntervalEnd THEN (I.IntervalEnd-RU.PeriodStartUsage)/RU.PeriodUsage
	END *RPC.LabourHours) AS LabourHours,
	SUM(
	CASE 
	/*Could happen for the last interval*/
	WHEN RU.PeriodEndUsage<I.IntervalStart THEN 0
	/*period usage is in the interval*/
	WHEN RU.PeriodStartUsage >=I.IntervalStart AND RU.PeriodEndUsage<=I.IntervalEnd THEN 1.00
	/*interval is in period usage*/
	WHEN RU.PeriodStartUsage <=I.IntervalStart AND RU.PeriodEndUsage>=I.IntervalEnd THEN @Interval/RU.PeriodUsage
	/*period starts before interval and ends in  the interval*/	 
	WHEN RU.PeriodStartUsage<I.IntervalStart AND RU.PeriodEndUsage<=I.IntervalEnd THEN (RU.PeriodEndUsage-I.IntervalStart)/RU.PeriodUsage
	/*period starts in the interval, ends after the interval*/
	WHEN RU.PeriodStartUsage>I.IntervalStart AND RU.PeriodEndUsage>=I.IntervalEnd THEN (I.IntervalEnd-RU.PeriodStartUsage)/RU.PeriodUsage
	END *RPC.Duration) AS Duration,
	/*VV CR8399*/
	E.EqpProjId
	FROM
	#aa_EqpProj E
		INNER JOIN
	#aa_Tasks PT
		ON E.EqpProjId=PT.EqpProjId
		INNER JOIN
	#aa_EqpPeriod EP
		ON PT.EqpProjId=EP.EqpProjId
		INNER JOIN
	#aa_Intervals I
		ON EP.IntervalId=I.IntervalId
		INNER JOIN
	tblRepProjCosts RPC
		ON PT.ProjTaskId=RPC.ProjTaskId AND EP.EqpProjId=RPC.EqpProjId AND 
		   RPC.Period >=EP.StartPeriod AND RPC.Period<=EP.EndPeriod 
		INNER JOIN
	tblProjTaskAmts PTA
		ON RPC.ProjTaskAmtId=PTA.ProjTaskAmtId
		INNER JOIN
	#aa_Usages RU
		ON RPC.Period=RU.CalenderPeriod AND RPC.EqpProjId=RU.EqpProjId  
		LEFT OUTER JOIN
	tblLabourActivities LA
		ON ISNULL(RPC.Labour_Activity_Id,0)=LA.LabourActivityId
		LEFT OUTER JOIN
	tblJobCodes JC
		ON ISNULL(PTA.JobCodeId,0)=JC.JobCodeId
	WHERE PT.Unscheduled=1 AND
	(@costResponsibilityID='' OR RPC.Cost_Responsibility_ID IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@costResponsibilityID))) AND
	(@CostBearerID='' OR RPC.CostBearerID IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@CostBearerID))) AND
	(@costCentreID='' OR RPC.Cost_Centre_ID IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@costCentreID))) AND
	(@costActivityID='' OR RPC.Cost_Activity_ID IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@costActivityID))) AND
	(@costExpenseID='' OR RPC.Cost_Expense_ID IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@costExpenseID))) AND
	(@FieldShop=0 OR (@FieldShop=@Field AND PTA.Labour_Hrs_Field=1) OR (@FieldShop=@Shop AND PTA.Labour_Hrs_Field=0)) AND
	(@JobCodeId='' OR pta.JobCodeId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@JobCodeId))) AND
	(@LabourActivityId='' OR ISNULL(RPC.Labour_Activity_Id,0) IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@LabourActivityId)))
	GROUP BY CASE @AnalyseBy
			WHEN 'FISH' THEN CAST(PTA.Labour_Hrs_Field AS int)
			WHEN 'LBAY' THEN ISNULL(RPC.Labour_Activity_Id,0)
			WHEN 'JOBC' THEN ISNULL(PTA.JobCodeId,0)
			ELSE PT.AnalyseByID END,
			CASE @AnalyseBy
			WHEN 'FISH' THEN CASE PTA.Labour_Hrs_Field WHEN 1 THEN 'Field' ELSE 'Shop' END
			WHEN 'LBAY' THEN LA.ActivityCode+' - '+LA.LabourActivity
			WHEN 'JOBC' THEN JC.Code+' - '+JC.Description
			ELSE PT.AnalyseBy END,
	I.IntervalStart,E.EndUsage,I.IntervalEnd,/*VV CR8399*/E.EqpProjId
	
	DROP TABLE #aa_EqpPeriod,#aa_Usages
	
END

--drop table aa_CostComparison
--SELECT * into aa_CostComparison from #aa_CostComparison 
--return


/*VV #378 Discussed with RF: Put all costs beyond equipment end to the last interval*/
/*VV #2098 ROUND Usage to 4 digits because of float calculations*/
UPDATE C SET C.Usage=ROUND(CASE WHEN C.Usage>E.EndUsage THEN E.EndUsage ELSE C.Usage END,4)
FROM
#aa_CostComparison C
	INNER JOIN
#aa_EqpProj E
	ON C.EqpProjId=E.EqpProjId

CREATE TABLE #aa_CostInterval(
AnalyseById int,
AnalyseBy varchar (350) COLLATE database_default,
Cost float,	
/*VV 5-Feb-2009*/	
LabourHours float,
Duration float,
IntervalId int)
	
--#aa_CostComparison (AnalyseByID,AnalyseBy,PartsCost,LabourCost,MiscCost,Usage)
--
--#aa_Intervals(IntervalId int,IntervalStart int,IntervalEnd 



CREATE TABLE #aa_AnalyseBy(AnalyseByID int, AnalyseBy varchar(350) COLLATE DATABASE_DEFAULT PRIMARY KEY (AnalyseByID))

/*VV CR8399*/
CREATE TABLE #aa_AnalyseByEqpProj(AnalyseByID int,EqpProjId int)

IF @AnalyseBy='PLM'
BEGIN

	INSERT INTO #aa_CostInterval(AnalyseById,AnalyseBy,Cost,IntervalId)
	SELECT 1 AS AnalyseById,'Parts' AS AnalyseBy,@P*SUM(CC.PartsCost) AS Cost,I.IntervalId
	FROM
	#aa_CostComparison CC
		INNER JOIN
	#aa_Intervals I
		ON CC.Usage >I.IntervalStart AND CC.Usage<=I.IntervalEnd
	GROUP BY I.IntervalId
	
	INSERT INTO #aa_CostInterval(AnalyseById,AnalyseBy,Cost,IntervalId)
	SELECT 2 AS AnalyseById,'Labour' AS AnalyseBy,@L*SUM(CC.LabourCost) AS Cost,I.IntervalId
	FROM
	#aa_CostComparison CC
		INNER JOIN
	#aa_Intervals I
		ON CC.Usage >I.IntervalStart AND CC.Usage<=I.IntervalEnd
	GROUP BY I.IntervalId

	INSERT INTO #aa_CostInterval(AnalyseById,AnalyseBy,Cost,IntervalId)
	SELECT 3 AS AnalyseById,'Misc' AS AnalyseBy,@M*SUM(CC.MiscCost) AS Cost,I.IntervalId
	FROM
	#aa_CostComparison CC
		INNER JOIN
	#aa_Intervals I
		ON CC.Usage >I.IntervalStart AND CC.Usage<=I.IntervalEnd
	GROUP BY I.IntervalId


	INSERT INTO #aa_AnalyseBy(AnalyseByID,AnalyseBy)
	VALUES(1,'Parts')
	INSERT INTO #aa_AnalyseBy(AnalyseByID,AnalyseBy)
	VALUES(2,'Labour')
	INSERT INTO #aa_AnalyseBy(AnalyseByID,AnalyseBy)
	VALUES(3,'Misc')
	
	/*VV CR8399*/
	INSERT INTO #aa_AnalyseByEqpProj(AnalyseByID,EqpProjId)
	SELECT A.AnalyseByID,B.EqpProjId FROM
	(SELECT DISTINCT EqpProjId FROM #aa_CostComparison) B
		CROSS JOIN
	#aa_AnalyseBy A

END
ELSE
BEGIN
	
	INSERT INTO #aa_CostInterval(AnalyseById,AnalyseBy,Cost,IntervalId,/*VV 5-Feb-2009*/LabourHours,Duration)
	SELECT CC.AnalyseByID,CC.AnalyseBy,@P*SUM(CC.PartsCost)+@L*SUM(CC.LabourCost)+@M*SUM(CC.MiscCost) AS Cost,I.IntervalId,
	/*VV 5-Feb-2009*/SUM(LabourHours) AS LabourHours,SUM(Duration) AS Duration
	FROM
	#aa_CostComparison CC
		INNER JOIN
	#aa_Intervals I
		ON CC.Usage >I.IntervalStart AND CC.Usage<=I.IntervalEnd
	GROUP BY CC.AnalyseByID,CC.AnalyseBy,I.IntervalId

	INSERT INTO #aa_AnalyseBy(AnalyseByID,AnalyseBy)
	SELECT DISTINCT AnalyseById,AnalyseBy FROM #aa_CostComparison
	
	/*VV CR8399*/
	INSERT INTO #aa_AnalyseByEqpProj(AnalyseByID,EqpProjId)
	SELECT DISTINCT AnalyseById,EqpProjId FROM #aa_CostComparison

END




--Add Missing intervals
INSERT INTO #aa_CostInterval(AnalyseById,AnalyseBy,Cost,IntervalId,/*VV 5-Feb-2009*/LabourHours,Duration)
SELECT A.AnalyseById,A.AnalyseBy,0 AS Cost,A.IntervalId,/*VV 5-Feb-2009*/0 AS LabourHours,0 AS Duration
FROM
(SELECT AnalyseById,AnalyseBy,IntervalId FROM #aa_AnalyseBy CROSS JOIN #aa_Intervals) A
	LEFT JOIN
#aa_CostInterval CI
	ON A.AnalyseById=CI.AnalyseById AND A.AnalyseBy=CI.AnalyseBy AND A.IntervalId=CI.IntervalId
WHERE CI.IntervalId IS NULL



DECLARE @MinUsage float
DECLARE @MaxUsage float

SELECT @MinUsage=MIN(StartUsage),@MaxUsage=MAX(EndUsage) FROM #aa_EqpProj

UPDATE #aa_Intervals SET IntervalStart=FLOOR(@MinUsage)/*VV CR8391*/
WHERE IntervalStart<@MinUsage

UPDATE #aa_Intervals SET IntervalEnd=CEILING(@MaxUsage)/*VV CR8391*/
WHERE IntervalEnd>@MaxUsage

DELETE #aa_Intervals 
WHERE IntervalStart>IntervalEnd OR IntervalStart=IntervalEnd

IF @CostPerUOM=0
BEGIN
	SELECT CI.AnalyseById,CI.AnalyseBy,
	/*VV 5-Feb-2009*/
	CASE @ShowCostLabHrsDuration 
	WHEN @ShowLabHrs THEN CI.LabourHours
	WHEN @ShowDuration THEN CI.Duration
	ELSE CI.Cost END AS Cost,
	I.IntervalStart AS PeriodStartUsage,
	CAST(I.IntervalStart AS varchar)+' - '+CAST(I.IntervalEnd AS varchar) AS Interval,
	I.IntervalStart,I.IntervalEnd, 1 AS IntOrder
	FROM
	#aa_CostInterval CI
		INNER JOIN
	#aa_Intervals I
		ON CI.IntervalId=I.IntervalId
END
ELSE

	--DROP TABLE aa_CostInterval,aa_CostComparison,aa_Intervals,aa_EqpProj,aa_AnalyseByEqpProj

	--select * into aa_CostInterval from #aa_CostInterval
	--select * into aa_Intervals from #aa_Intervals
	--select * into aa_EqpProj from #aa_EqpProj
	--select * into aa_AnalyseByEqpProj from #aa_AnalyseByEqpProj
	--select * into aa_CostComparison from #aa_CostComparison
	
	
	--Cost Per UOM per Interval
	SELECT CI.AnalyseById,CI.AnalyseBy,
	ISNULL(CASE @ShowCostLabHrsDuration 
	WHEN @ShowLabHrs THEN CI.LabourHours
	WHEN @ShowDuration THEN CI.Duration
	ELSE CI.Cost END/NULLIF(/*VV CR8399*/CASE WHEN U.Usage<0 THEN 0 ELSE U.Usage END,0),0) AS Cost,
	I.IntervalStart AS PeriodStartUsage,
	CAST(I.IntervalStart AS varchar)+' - '+CAST(I.IntervalEnd AS varchar) AS Interval,
	I.IntervalStart,I.IntervalEnd, 1 AS IntOrder
	FROM
	#aa_CostInterval CI
		INNER JOIN
	#aa_Intervals I
		ON CI.IntervalId=I.IntervalId
		INNER JOIN
	(SELECT I.IntervalId,AEP.AnalyseByID,
	SUM( CASE WHEN I.IntervalEnd<EPR.StartUsage THEN 0
		WHEN I.IntervalStart>EPR.EndUsage THEN 0
		ELSE
			CASE WHEN I.IntervalEnd>EPR.EndUsage THEN EPR.EndUsage ELSE I.IntervalEnd END -
			CASE WHEN I.IntervalStart<EPR.StartUsage THEN EPR.StartUsage ELSE I.IntervalStart END
		
		END) AS Usage
	FROM
	/*VV CR8399*/
	#aa_EqpProj EPR
		INNER JOIN
	#aa_AnalyseByEqpProj AEP
		ON EPR.EqpProjId=AEP.EqpProjId
		CROSS JOIN
	#aa_Intervals I
		GROUP BY
	I.IntervalId,AEP.AnalyseByID) U
		ON I.IntervalId=U.IntervalId AND CI.AnalyseById=U.AnalyseByID

	UNION ALL

	SELECT CI.AnalyseById,CI.AnalyseBy,
	ISNULL(SUM(CASE @ShowCostLabHrsDuration 
		WHEN @ShowLabHrs THEN CI.LabourHours
		WHEN @ShowDuration THEN CI.Duration
		ELSE CI.Cost END)/NULLIF(SUM(/*VV CR8399*/CASE WHEN U.Usage<0 THEN 0 ELSE U.Usage END),0),0) AS Cost,
	MIN(I.IntervalStart) AS PeriodStartUsage,
	'Total' AS Interval,
	MIN(I.IntervalStart) AS IntervalStart,MAX(I.IntervalEnd) AS IntervalEnd,2 AS IntOrder
	FROM
	#aa_CostInterval CI
		INNER JOIN
	#aa_Intervals I
		ON CI.IntervalId=I.IntervalId
	INNER JOIN
	(SELECT I.IntervalId, AEP.AnalyseByID,
	SUM( CASE WHEN I.IntervalEnd<EPR.StartUsage THEN 0
		WHEN I.IntervalStart>EPR.EndUsage THEN 0
		ELSE
			CASE WHEN I.IntervalEnd>EPR.EndUsage THEN EPR.EndUsage ELSE I.IntervalEnd END -
			CASE WHEN I.IntervalStart<EPR.StartUsage THEN EPR.StartUsage ELSE I.IntervalStart END
		
		END) AS Usage
	FROM
	/*VV CR8399*/
	#aa_EqpProj EPR
		INNER JOIN
	#aa_AnalyseByEqpProj AEP
		ON EPR.EqpProjId=AEP.EqpProjId
		CROSS JOIN
	#aa_Intervals I
		GROUP BY
	I.IntervalId,AEP.AnalyseByID) U
		ON I.IntervalId=U.IntervalId AND CI.AnalyseById=U.AnalyseByID
	WHERE @Summary=1
	GROUP BY CI.AnalyseById,CI.AnalyseBy
	ORDER BY IntOrder,IntervalStart, AnalyseBy

--drop table aa_CostInterval
--select * into aa_CostInterval from #aa_CostInterval
--select * into aa_Intervals from #aa_Intervals
	
DROP TABLE #aa_CostInterval,#aa_Tasks,#aa_CostComparison,#aa_Intervals,#aa_EqpProj,#aa_AnalyseByEqpProj,#aa_Factor

GO


if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[MB_CHECK_OUT_DATA_GET_P]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[MB_CHECK_OUT_DATA_GET_P]
GO

create	Procedure MB_CHECK_OUT_DATA_GET_P
/******************************************************************************
	
	Called By: Amt Mobile


	Auth: Veronika Vasylyeva
	Date: 18 Nov-10
*******************************************************************************
		Change History
*******************************************************************************
	Date:		Author:			Description:
	--------	--------		----------------------------------------
	 1 Nov 11	V Vasylyeva		#2622: speed up
	31 May 11	V Vasylyeva		#1799: Filtering by customer
*******************************************************************************/
	/* Param List */
@TableName varchar(100)='',
@SiteId varchar(max)='',
@FleetId varchar(max)='',
@EqpPlanId varchar(max)='',
@ParentEquipmentId varchar(max)='',
@CustomerId varchar(max)='',
@WorkgroupId varchar(max)='',
@EmployeeId varchar(max)='',
@WorkorderId varchar(max)='',
@ExcludeEqp varchar(max)='',
@Days int=0,
@UserId int=0,
@WOXML xml=null,
@EventXML xml=null


AS

DECLARE @hDoc int
DECLARE @Level int  
DECLARE @FromDate datetime

SET @UserId=ISNULL(@UserId,0)  
  
SELECT @Level=User_Access_Level_Id From USER_LEVEL_PERMISSION where AMT_User_Id = @UserId  
SET @Level=ISNULL(@Level,0)  


SET @FromDate= CAST(CAST(YEAR(GETDATE())*10000+MONTH(GETDATE())*100+DAY(GETDATE()) AS varchar) as datetime)

SET @Days=ISNULL(@Days,0)

IF @Days<>0 SET @FromDate=DATEADD(DAY,-@Days,@FromDate)

DECLARE @TablesOrder Table(ListId int IDENTITY(0,1),TableName varchar(100))

CREATE TABLE #z_Eqp(EqpPlanId int,EqpProjId int PRIMARY KEY(EqpPlanId,EqpProjId))
CREATE TABLE #z_MobileEv(UniqueKey varchar(50) COLLATE DATABASE_DEFAULT)
CREATE TABLE #z_MobileWO(UniqueKey varchar(50) COLLATE DATABASE_DEFAULT)

EXEC sp_xml_preparedocument @hDoc OUTPUT, @WOXML 

INSERT INTO #z_MobileWO(UniqueKey)
select [text] 
FROM  OPENXML (@hDoc,'/ArrayOfString')
where [text] is not null 
and [text] not like 'http://%'


EXEC sp_xml_preparedocument @hDoc OUTPUT, @EventXML 

INSERT INTO #z_MobileEv(UniqueKey)
select [text] 
FROM  OPENXML (@hDoc,'/ArrayOfString')
where [text] is not null 
and [text] not like 'http://%'

EXEC sp_xml_removedocument @hDoc


INSERT INTO #z_Eqp(EqpPlanId,EqpProjId)
SELECT EH.EqpPlanId,EH.EqpProjId
FROM
EQUIPMENT_HIERARCHY_V EH
WHERE EH.Projection_Type_ID=1 AND (EH.Advanced_Planning > 0) AND
(@SiteId='' OR EH.SiteId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@SiteId))) AND  
(@FleetId='' OR EH.FleetId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@FleetId))) AND  
(@EqpPlanId='' OR EH.EqpPlanId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@EqpPlanId))) AND  
(@ParentEquipmentId='' OR EH.ParentEqpPlanId IN (SELECT EqpPlanId FROM dbo.EQP_SIBLINGS_F(@ParentEquipmentId))) AND  
(@CustomerId='' OR /*VV #1799*/ISNULL(EH.CustomerId,EH.EqpCustomerId) IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@CustomerId))) AND
(@Level<>1 OR EH.BranchId IN(SELECT AMT_OBJECT_ID FROM USER_LEVEL_PERMISSION WHERE AMT_USER_ID = @UserId)) AND  
(@Level<>2 OR EH.SiteId IN(SELECT AMT_OBJECT_ID FROM USER_LEVEL_PERMISSION WHERE AMT_USER_ID = @UserId))   


IF @@ROWCOUNT=0 RETURN 


CREATE TABLE #z_Task(Task_Id int,EqpPlanId int PRIMARY KEY(Task_Id))

/*Check out WO  - ALWAYS YTS, IP and Outstanding.  WO History is for Completed WO (no abandoned)*/

INSERT INTO #z_Task(Task_Id,EqpPlanId)
SELECT T.Task_ID,T.Eqp_Plan_ID AS EqpPlanId
FROM
#z_Eqp Z
	INNER JOIN
TASK T
	ON T.Eqp_Plan_ID=Z.EqpPlanId
	LEFT JOIN
EVENT E
	ON T.Event_ID=E.Event_ID
	LEFT JOIN
#z_MobileWO M
	ON T.UniqueKey=M.UniqueKey
WHERE 
(T.Task_Status_ID IN(1,2,6)/*O,IP,YTS*/ OR
(@Days<>0 AND T.Task_Status_ID=3/*C*/ AND ISNULL(E.Actual_Down_Time,T.Actual_Down_Time)>=@FromDate)) AND
(@WorkgroupId='' OR T.Work_Group_ID IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@WorkgroupId))) AND  
(@EmployeeId='' OR T.Employee_ID IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@EmployeeId))) AND  
(@WorkorderId='' OR T.Work_Order_ID IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@WorkorderId))) AND
(M.UniqueKey IS NULL) 

-- Delete equipment which is excluded
IF(@ExcludeEqp<>'') DELETE #z_Eqp WHERE EqpPlanId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@ExcludeEqp))

--IF workorder filters supplied bring equipment which is in workorders only
IF @WorkgroupId<>'' OR @EmployeeId<>'' OR @WorkorderId<>''
BEGIN
	DELETE #z_Eqp WHERE EqpPlanId NOT IN(SELECT EqpPlanId FROM #z_Task)
END

IF EXISTS(SELECT EqpPlanId FROM #z_Eqp) /*Equipment tables*/
BEGIN
	/*0 Equipment*/
	IF @TableName='Equipment' OR @TableName=''
	BEGIN
		SELECT     
		EH.EqpPlanId, EH.EqpPlan, EH.ParentEqpPlanId, EH.FleetId,EH.SiteId,
		EH.Advanced_Planning AS AmtPlanningModeId,EP.MobileDowntime AS MobileDowntimeModeId,
		EP.Description,
		EH.ManufacturerId,EH.SerialNumber,EH.ModelId,EP.StartDate,EP.OriginalCommissionDate,
		EP.Eqp_Location_Id AS EqpLocationId,EP.Eqp_Criticality_Id AS EqpCriticalityId,
		EH.CustomerId ,EH.ContractId,EH.Equipment_Group_Id AS ModelFamilyId,EH.Eqp_Class_Id AS EqpClassId
		FROM
		EQUIPMENT_HIERARCHY_V EH
			INNER JOIN
		#z_Eqp Z
			ON EH.EqpProjId=Z.EqpProjId
			INNER JOIN
		tblEqpPlans EP
			ON Z.EqpPlanId=EP.EqpPlanId
			
		IF @TableName<>'' RETURN
		
		INSERT INTO @TablesOrder(TableName) VALUES('Equipment')
	END	

	/* 1 Strategy Tasks*/
	IF @TableName='StrategyTask' OR @TableName=''
	BEGIN
		
		/*VV #2622*/
		CREATE TABLE #z_ProjTasks(ProjTaskId int PRIMARY KEY)
		
		INSERT INTO #z_ProjTasks(ProjTaskId)
		SELECT PT.ProjTaskId
		FROM
		tblProjTasks PT
			INNER JOIN
		#z_Eqp EP
			ON EP.EqpProjId=PT.EqpProjId
		WHERE PT.Unscheduled=0
		
		/*
		Only show if there is a FMA since its last changeout date
		Only show if Rating>1 and show highest (and any logic to pick one if >1 match)
		*/
		CREATE TABLE #z_FMA(ProjTaskId int,CBMFailureModeAssessmentId int PRIMARY KEY(ProjTaskId,CBMFailureModeAssessmentId))

		INSERT INTO #z_FMA(ProjTaskId,CBMFailureModeAssessmentId)
		SELECT FMA2.ProjTaskId,MAX(FMA2.CBMFailureModeAssessmentId) AS CBMFailureModeAssessmentId
		FROM
		(
			SELECT FMA1.ProjTaskId,FMA1.DateRaised,MAX(FMA1.MessageRatingId) AS MessageRatingId
			FROM
			(
				SELECT PT.ProjTaskId,MAX(FMA.DateRaised) AS DateRaised
				FROM
				#z_ProjTasks Z
					INNER JOIN
				tblProjTasks PT
					ON Z.ProjTaskId=PT.ProjTaskId
					INNER JOIN
				CBM_FAILURE_MODE_ASSESSMENT FMA
					ON PT.ProjTaskId=FMA.ProjTaskId
					AND ISNULL(PT.LastOccDate,CAST('19500101' AS datetime))<FMA.DateRaised
				GROUP BY PT.ProjTaskId
			) A
				INNER JOIN
			CBM_FAILURE_MODE_ASSESSMENT FMA1
				ON A.ProjTaskId=FMA1.ProjTaskId 
				AND A.DateRaised=FMA1.DateRaised
				AND FMA1.MessageRatingId>1
			GROUP By FMA1.ProjTaskId,FMA1.DateRaised
			HAVING MAX(FMA1.MessageRatingId)>1
		) B
			INNER JOIN
		CBM_FAILURE_MODE_ASSESSMENT FMA2
			ON B.ProjTaskId=FMA2.ProjTaskId
			AND B.DateRaised=FMA2.DateRaised
			AND B.MessageRatingId=FMA2.MessageRatingId		
		GROUP BY FMA2.ProjTaskId


		/*Only show if there is a message since its last changeout date*/
		CREATE TABLE #z_Message(ProjTaskId int,MessageID int,/*VV #2622*/
		[Description] varchar(8000) COLLATE DATABASE_DEFAULT
		PRIMARY KEY(ProjTaskId,MessageID))

		INSERT INTO #z_Message(ProjTaskId,MessageID)
		SELECT A.ProjTaskId, MAX(M1.MessageID) AS MessageID
		FROM
		(
			SELECT PT.ProjTaskId,MAX(M.DateRaised) AS DateRaised
			FROM
			#z_ProjTasks Z
				INNER JOIN
			tblProjTasks PT
				ON Z.ProjTaskId=PT.ProjTaskId
				INNER JOIN
			[MESSAGE] M
				ON PT.ProjTaskId=M.StrategyTaskID
				AND ISNULL(PT.LastOccDate,CAST('19500101' AS datetime))<M.DateRaised
			GROUP BY PT.ProjTaskId
		) A
			INNER JOIN
		[MESSAGE] M1
			ON A.ProjTaskId=M1.StrategyTaskID
			AND A.DateRaised=M1.DateRaised
		GROUP BY A.ProjTaskId
		
		/*VV #2622*/
		UPDATE ME SET ME.Description=M.Description
		FROM
		#z_Message ME
			INNER JOIN
		[MESSAGE] M
			ON ME.MessageID=M.MessageID
			AND ME.ProjTaskId=M.StrategyTaskID

		/*Based on suppression Component Status report*/

		CREATE TABLE #z_ComponentStatus(
			Equipment varchar(200) COLLATE DATABASE_DEFAULT,
			Component varchar(200) COLLATE DATABASE_DEFAULT,
			SuppressionGroup varchar(200) COLLATE DATABASE_DEFAULT,
			SuppressionLifeUsed float,
			SuppressionLifeUsedPercent float,
			CurrentUsage float,
			CurrentLifeUsed float,
			CurrentLifeUsedPercent float,
			UOM varchar(200) COLLATE DATABASE_DEFAULT,
			NCDCost float,
			NCDUsage float,
			NCDLifeUsed float,
			NCDDate datetime,
			NCDOverDue bit,
			LCDWorkOrder varchar(200) COLLATE DATABASE_DEFAULT,
			LCDLifeUsed float,
			LCDDate datetime,
			LCDUsage float,
			ProjTaskId int,
			/*VV #2622*/
			ListId int IDENTITY(1,1) PRIMARY KEY
		) 

		SELECT @EqpPlanId = (SELECT CAST(EqpPlanId as varchar)+','FROM #z_Eqp FOR XML PATH('') )

		SET @EqpPlanId=LEFT(@EqpPlanId,LEN(@EqpPlanId)-1)
		
		INSERT INTO #z_ComponentStatus
		EXEC RPT_COMPONENT_STATUS_SUPPRESSION_IMPACT_P @DealerId='1',@EqpPlanID=@EqpPlanId,@TaskMode='3'
		
		/*VV #2622*/
		CREATE TABLE #z_RIU(Proj_Task_Id int, Rotable_Item_Id varchar(100) COLLATE DATABASE_DEFAULT,
		PRIMARY KEY (Proj_Task_Id,Rotable_Item_Id))
		
		INSERT INTO #z_RIU(Proj_Task_Id, Rotable_Item_Id)
		SELECT DISTINCT RIU.Proj_Task_Id,RIU.Rotable_Item_Id
		FROM
		#z_ProjTasks Z
			INNER JOIN
		ROTABLE_INUSE riu
			ON Z.ProjTaskId=riu.Proj_Task_Id
			INNER JOIN 
		ROTABLE_ITEM_LATEST_STATUS_V riul 
			ON riul.Rotable_Item_Id = riu.Rotable_Item_Id AND riul.StartDate = riu.Start_Date
					
		CREATE TABLE #z_WO(ProjTaskId int,	LCDLife float,
		AMTStartDate datetime,	LCDWONumber varchar(50) COLLATE DATABASE_DEFAULT,
		SerialNoIn varchar(100) COLLATE DATABASE_DEFAULT,
		ListId int IDENTITY(1,1) PRIMARY KEY)
		
		CREATE TABLE #z_RPT_COMP_STATUS_MAX_WO_DATE_V(ProjTaskId int PRIMARY KEY, AMTStartDate datetime)
		
		INSERT INTO #z_RPT_COMP_STATUS_MAX_WO_DATE_V(ProjTaskId, AMTStartDate)
		SELECT wop.ProjTaskId, MAX(wo.AMTStartDate) AS AMTStartDate  
		FROM 
		#z_ProjTasks Z
			INNER JOIN
		tblWorkOrderProjs wop 
			ON Z.ProjTaskId=WOP.ProjTaskId
			INNER JOIN  
		tblWorkOrders wo 
			ON wop.WorkOrderId = wo.AMTParentWorkOrderId AND wop.WorkOrderId = wo.WorkOrderId  
		WHERE  WO.AMTJobStatus_Id <> 3  
		GROUP BY wop.ProjTaskId 
		
		CREATE TABLE #z_RPT_COMP_STATUS_MAX_USAGE_SINCE_LAST_OCC_V(ProjTaskId int PRIMARY KEY,UsageSinceLastOccurrence float)
		
		INSERT INTO #z_RPT_COMP_STATUS_MAX_USAGE_SINCE_LAST_OCC_V(ProjTaskId,UsageSinceLastOccurrence)
		SELECT wop.ProjTaskId,MAX(WOP.UsageSinceLastOccurrence)
		FROM
		#z_RPT_COMP_STATUS_MAX_WO_DATE_V Z
			INNER JOIN
		tblWorkOrderProjs WOP
			ON Z.ProjTaskId=WOP.ProjTaskId
			INNER JOIN
		tblWorkOrders WO
			ON WOP.WorkOrderId=WO.WorkOrderId
			AND Z.AMTStartDate=WO.AMTStartDate
		GROUP BY wop.ProjTaskId
		
		INSERT INTO #z_WO(ProjTaskId,LCDLife,AMTStartDate,	
		LCDWONumber,SerialNoIn)
		
		SELECT wop.ProjTaskId, mu.UsageSinceLastOccurrence AS LCDLife, md.AMTStartDate,  
		wo.WorkOrderNumber AS LCDWONumber,  T.SerialNoIn  
		FROM           
		tblWorkOrderProjs wop 
			INNER JOIN  
		#z_RPT_COMP_STATUS_MAX_WO_DATE_V md 
			ON wop.ProjTaskId = md.ProjTaskId 
			INNER JOIN  
		#z_RPT_COMP_STATUS_MAX_USAGE_SINCE_LAST_OCC_V mu 
			ON wop.ProjTaskId = mu.ProjTaskId 
			INNER JOIN  
		tblWorkOrders wo 
			ON wop.WorkOrderId = wo.WorkOrderId 
			AND wop.WorkOrderId = wo.AMTParentWorkOrderId 
			LEFT OUTER JOIN  
		TASK T 
			ON wop.WorkorderID=T.Work_Order_ID  
		
		GROUP BY wop.ProjTaskId, mu.UsageSinceLastOccurrence, md.AMTStartDate,T.SerialNoIn,
		wo.WorkOrderNumber 
		
		CREATE TABLE #z_FMA1(ProjTaskId int,MessageRatingId int,FailureMode varchar(100) COLLATE DATABASE_DEFAULT,
		CBMReviewStatusId int,DateRaised datetime, ListId int IDENTITY(1,1) PRIMARY KEY)
		
		INSERT INTO #z_FMA1(ProjTaskId,MessageRatingId,FailureMode,CBMReviewStatusId,DateRaised)
		SELECT FMA.ProjTaskId,FMA.MessageRatingId,CM.CMIObjective AS FailureMode,FMA.CBMReviewStatusId,
		FMA.DateRaised
		FROM
		#z_FMA F
			INNER JOIN
		CBM_FAILURE_MODE_ASSESSMENT FMA
			ON F.ProjTaskId=FMA.ProjTaskId
			AND F.CBMFailureModeAssessmentId=FMA.CBMFailureModeAssessmentId
			INNER JOIN
		RCM_CONDITION_MONITORING CM
			ON FMA.RCMConditionMonitoringId=CM.RCMConditionMonitoringId
			
		SELECT PT.ProjTaskId,PT.EqpPlanId,ISNULL(NULLIF(PT.Task_Description,''),TH.Description) AS TaskDescription,
		PT.ComponentCodeId,
		PT.ModifierId,PT.TaskTypeId,PT.ApplicationCodeId,PT.TagId,PTO.Frequency,
		 SUM(CPE.CumPartsEscalation * PTO.Probability / 100 * PTA.PartsCost / ERC.ExRate) +  
		 SUM(CE.CumLaborEscalation * PTO.Probability / 100 * PTA.TotalLabourCost / ERC.ExRate) +     
		 SUM(CE.CumMiscEscalation * PTO.Probability / 100 * PTA.TotalMiscCost / ERC.ExRate) AS Cost,
		 ISNULL(rp.Part_Number, p.Part) AS PartNo,
		CASE WHEN pt.Rotable_Part_Id IS NULL THEN 
			CASE WHEN wo.LCDWONumber IS NULL THEN pt.StartingSerialNo ELSE wo.SerialNoIn END 
		ELSE riu.Rotable_Item_Id END as SerialNumber,CS.UOM,CS.SuppressionGroup,CS.CurrentLifeUsed,
		CS.CurrentLifeUsedPercent,CS.NCDLifeUsed AS NextChangeoutLifeUsed,CS.NCDDate AS NextChangeoutDate,
		CS.NCDUsage AS NextChangeoutUsage,
		CS.LCDWorkorder AS LastChangeoutWorkorder,CS.LCDLifeUsed AS LastChangeoutLifeUsed,
		CS.LCDDate AS LastChangeoutDate,FMA1.MessageRatingId,FMA1.FailureMode,FMA1.CBMReviewStatusId,
		FMA1.DateRaised AS LastFMADate,M1.Description AS LastMessageDescr,PT.Part_Id AS PartId,
		PT.PartRatingId

		FROM 
		#z_ProjTasks Z
			INNER JOIN
		tblProjTasks PT
			ON Z.ProjTaskId=PT.ProjTaskId
			INNER JOIN  
		tblProjTaskOpts PTO  
			ON PTO.ProjTaskId = PT.ProjTaskId  
			INNER JOIN   
		PROJ_TASK_AMT_COST_1_V PTA  
		ON PTA.ProjTaskOptId = PTO.ProjTaskOptId  
			INNER JOIN   
		tblCostEscalations CE  
			ON PTA.Pricing_Date >= CE.EscalationDate AND PTA.Pricing_Date < CE.EndDate  
			INNER JOIN   
		tblCostPartsEscalations CPE  
			ON CE.CostEscalationId = CPE.CostEscalationId AND CPE.ManufacturerId = PT.ManufacturerId 
			INNER JOIN   
		EQUIPMENT_HIERARCHY_V EH  
			ON PT.EqpProjId = EH.EqpProjId  
			INNER JOIN   
		tblExRates ER  
			ON EH.ExchangeRateId = ER.ExRateID  
			INNER JOIN   
		tblExRateCurrencies ERC  
			ON ERC.ExRateID = ER.ExRateID AND ERC.CurrencyID = PTA.CurrencyID
			INNER JOIN
		TASK_HEADER TH
			ON PT.Task_Header_Id=TH.Task_Header_Id
			LEFT JOIN
		#z_ComponentStatus CS
			ON PT.ProjTaskId=CS.ProjTaskId
			LEFT JOIN
		tblParts P
			ON PT.Part_Id=P.PartId
			LEFT JOIN 
		ROTABLE_PART rp 
			ON pt.Rotable_Part_Id = rp.Rotable_Part_Id
			LEFT JOIN
		/* VV #2622
		(
			ROTABLE_INUSE riu
				INNER JOIN 
			ROTABLE_ITEM_LATEST_STATUS_V riul 
				ON riul.Rotable_Item_Id = riu.Rotable_Item_Id AND riul.StartDate = riu.Start_Date
		) ON pt.ProjTaskId = riu.Proj_Task_Id*/
		#z_RIU riu
			ON pt.ProjTaskId = riu.Proj_Task_Id
			LEFT JOIN 
		/*VV #2622 RPT_COMP_STATUS_WO_DETAILS_V wo */
		#z_WO wo
			ON pt.ProjTaskId = wo.ProjTaskId
			LEFT JOIN
		/*VV #2622(
			SELECT FMA.ProjTaskId,FMA.MessageRatingId,CM.CMIObjective AS FailureMode,FMA.CBMReviewStatusId,
			FMA.DateRaised
			FROM
			#z_FMA F
				INNER JOIN
			CBM_FAILURE_MODE_ASSESSMENT FMA
				ON F.ProjTaskId=FMA.ProjTaskId
				AND F.CBMFailureModeAssessmentId=FMA.CBMFailureModeAssessmentId
				INNER JOIN
			RCM_CONDITION_MONITORING CM
				ON FMA.RCMConditionMonitoringId=CM.RCMConditionMonitoringId
		)FMA1*/
		#z_FMA1 FMA1
			ON PT.ProjTaskId=FMA1.ProjTaskId
			LEFT JOIN
		/*VV #2622(
			SELECT ME.ProjTaskId,M.Description
			FROM
			#z_Message ME
				INNER JOIN
			[MESSAGE] M
				ON ME.MessageID=M.MessageID
				AND ME.ProjTaskId=M.StrategyTaskID
				
		) M1*/
		#z_Message M1
			ON PT.ProjTaskId=M1.ProjTaskId 
		/*VV #2622 where PT.Unscheduled=0*/
		GROUP BY  PT.ProjTaskId,PT.EqpPlanId,PT.Task_Description,PT.ComponentCodeId,
		PT.ModifierId,PT.TaskTypeId,PT.ApplicationCodeId,PT.TagId,PTO.Frequency,
		ISNULL(rp.Part_Number, p.Part),
		CASE WHEN pt.Rotable_Part_Id IS NULL THEN 
			CASE WHEN wo.LCDWONumber IS NULL THEN pt.StartingSerialNo ELSE wo.SerialNoIn END 
		ELSE riu.Rotable_Item_Id END,CS.UOM,CS.SuppressionGroup,CS.CurrentLifeUsed,
		CS.CurrentLifeUsedPercent,CS.NCDLifeUsed,CS.NCDDate,CS.NCDUsage,CS.LCDWorkorder,CS.LCDLifeUsed,
		CS.LCDDate,FMA1.MessageRatingId,FMA1.FailureMode,FMA1.CBMReviewStatusId,
		FMA1.DateRaised,M1.Description,TH.Description,PT.Part_Id,PT.PartRatingId
		
		DROP TABLE #z_FMA,#z_Message,#z_FMA1,#z_ComponentStatus,#z_ProjTasks,#z_RIU,#z_RPT_COMP_STATUS_MAX_USAGE_SINCE_LAST_OCC_V,
		#z_RPT_COMP_STATUS_MAX_WO_DATE_V,#z_WO
		
		IF @TableName<>'' RETURN
		INSERT INTO @TablesOrder(TableName) VALUES('StrategyTask')
	END	

	-- 2 Model
	IF @TableName='Model' OR @TableName=''
	BEGIN
		select M.ModelId,M.Model AS ModelC,M.ModelDesc AS ModelDesciption 
		from 
		EQUIPMENT_HIERARCHY_V EH
			INNER JOIN
		#z_Eqp Z
			ON EH.EqpProjId=Z.EqpProjId
			INNER JOIN
		tblModels M
			ON EH.ModelId=M.ModelId
			UNION
		SELECT M1.ModelId,M1.Model AS ModelC,M1.ModelDesc AS ModelDesciption
		FROM
		#z_Eqp Z
			INNER JOIN
		tblProjTasks PT
			ON Z.EqpProjId=PT.EqpProjId
			INNER JOIN  
		tblProjTaskOpts PTO  
			ON PTO.ProjTaskId = PT.ProjTaskId  
			INNER JOIN   
		PROJ_TASK_AMT_COST_1_V PTA  
			ON PTA.ProjTaskOptId = PTO.ProjTaskOptId  
			INNER JOIN
		tblPricedJobs PJ
			ON PTA.PricedJobId=PJ.PricedJobId
			INNER JOIN
		tblStdJobs SJ
			ON PJ.StdJobId=SJ.StdJobId
			INNER JOIN
		tblModels M1
			ON SJ.ModelId=M1.ModelId
			
		IF @TableName<>'' RETURN
		INSERT INTO @TablesOrder(TableName) VALUES('Model')
	END	

	--3 Manufacturer
	IF @TableName='Manufacturer' OR @TableName=''
	BEGIN
		select DISTINCT M.ManufacturerId,M.Manufacturer AS ManufacturerC,M.ManufacturerDesc 
		from 
		EQUIPMENT_HIERARCHY_V EH
			INNER JOIN
		#z_Eqp Z
			ON EH.EqpProjId=Z.EqpProjId
			INNER JOIN
		tblManufacturers M
			ON EH.ManufacturerId=M.ManufacturerId
			
		IF @TableName<>'' RETURN
		INSERT INTO @TablesOrder(TableName) VALUES('Manufacturer')
	END	

	--4 Fleet
	IF @TableName='Fleet' OR @TableName=''
	BEGIN
		select DISTINCT FleetId,Fleet AS FleetName 
		from 
		EQUIPMENT_HIERARCHY_V EH
			INNER JOIN
		#z_Eqp Z
			ON EH.EqpProjId=Z.EqpProjId
		IF @TableName<>'' RETURN
		INSERT INTO @TablesOrder(TableName) VALUES('Fleet')
	END	

	--5 Site
	IF @TableName='Site' OR @TableName=''
	BEGIN
		SELECT DISTINCT SiteId,Site AS SiteName,B.Enable_Auto_WO_Create AS EnableAutoWOCreate
		from 
		EQUIPMENT_HIERARCHY_V EH
			INNER JOIN
		#z_Eqp Z
			ON EH.EqpProjId=Z.EqpProjId
			INNER JOIN
		tblBranches B
			ON EH.BranchId=B.BranchId
			
		IF @TableName<>'' RETURN
		INSERT INTO @TablesOrder(TableName) VALUES('Site')
	END	
		
	--6 EQP_LOCATION
	IF @TableName='EqpLocation' OR @TableName=''
	BEGIN
		select DISTINCT Eqp_Location_Id AS EqpLocationId,Eqp_Location_Desc AS EqpLocationDesc
		from 
		EQUIPMENT_HIERARCHY_V EH
			INNER JOIN
		#z_Eqp Z
			ON EH.EqpProjId=Z.EqpProjId
		WHERE Eqp_Location_Id>0
		
		IF @TableName<>'' RETURN
		INSERT INTO @TablesOrder(TableName) VALUES('EqpLocation')
	END	

	--7 EqpCriticality
	IF @TableName='EqpCriticality' OR @TableName=''
	BEGIN
		select DISTINCT Eqp_Criticality_Id AS EqpCriticalityId,Eqp_Criticality_Desc AS EqpCriticalityDesc
		from 
		EQUIPMENT_HIERARCHY_V EH
			INNER JOIN
		#z_Eqp Z
			ON EH.EqpProjId=Z.EqpProjId
		WHERE Eqp_Criticality_Id>0
		
		IF @TableName<>'' RETURN
		INSERT INTO @TablesOrder(TableName) VALUES('EqpCriticality')
	END	
	
	--ModelFamily
	IF @TableName='ModelFamily' OR @TableName=''
	BEGIN
		/*select DISTINCT Equipment_Group_Id AS ModelFamilyId,Equipment_Group_Desc AS ModelFamilyDesc
		from 
		EQUIPMENT_HIERARCHY_V EH
			INNER JOIN
		#z_Eqp Z
			ON EH.EqpProjId=Z.EqpProjId
		WHERE Equipment_Group_Id>0*/
		/*Need all model families because they are used in ewtemplates*/
		select Model_Family_Id AS ModelFamilyId,Model_Family_Code+' - '+Model_Family_Desc as ModelFamilyDesc 
		from MODEL_FAMILY
		
		IF @TableName<>'' RETURN
		INSERT INTO @TablesOrder(TableName) VALUES('ModelFamily')
	END	
	
	--EqpClass
	IF @TableName='EqpClass' OR @TableName=''
	BEGIN
		/*select DISTINCT Eqp_Class_Id AS EqpClassId,Eqp_Class_Desc AS EqpClassDesc
		from 
		EQUIPMENT_HIERARCHY_V EH
			INNER JOIN
		#z_Eqp Z
			ON EH.EqpProjId=Z.EqpProjId
		WHERE Equipment_Group_Id>0*/
		
		/*Need all EqpClasses because they are used in ewtemplates*/
		select Eqp_Class_Id as EqpClassId,Eqp_Class_Code+' - '+Eqp_Class_Desc as EqpClassDesc  
		from EQP_CLASS
		
		IF @TableName<>'' RETURN
		INSERT INTO @TablesOrder(TableName) VALUES('EqpClass')
	END	

	--8 Customer
	IF @TableName='Customer' OR @TableName=''
	BEGIN
		select DISTINCT C.CustomerId,C.Customer AS CustomerName,C.StreetAddress,C.Surburb,
		C.BusinessName,C.Phone,C.BusinessEmail 
		from 
		EQUIPMENT_HIERARCHY_V EH
			INNER JOIN
		#z_Eqp Z
			ON EH.EqpProjId=Z.EqpProjId
			INNER JOIn
		tblCustomers C
			ON EH.CustomerId=C.CustomerId
			
		IF @TableName<>'' RETURN
		INSERT INTO @TablesOrder(TableName) VALUES('Customer')
	END	

	--9 Contract
	IF @TableName='Contract' OR @TableName=''
	BEGIN
		select DISTINCT ContractId,Contract AS ContractName
		from 
		EQUIPMENT_HIERARCHY_V EH
			INNER JOIN
		#z_Eqp Z
			ON EH.EqpProjId=Z.EqpProjId
		WHERE ContractId>0
		
		IF @TableName<>'' RETURN
		INSERT INTO @TablesOrder(TableName) VALUES('Contract')
	END	

	--10 Strategy Task Job
	IF @TableName='StrategyTaskJob' OR @TableName=''
	BEGIN
		SELECT PT.ProjTaskId,PTA.ProjTaskAmtId, PJ.StdJobId,SUM(PTA.LaborHours) AS LaborHours,
		SUM(PTA.Duration) AS Duration,PTA.Work_Group_Id AS WorkGroupId,PTA.JobCodeId
		FROM
		#z_Eqp Z
			INNER JOIN
		tblProjTasks PT
			ON Z.EqpProjId=PT.EqpProjId
			INNER JOIN  
		tblProjTaskOpts PTO  
			ON PTO.ProjTaskId = PT.ProjTaskId  
			INNER JOIN   
		PROJ_TASK_AMT_COST_1_V PTA  
			ON PTA.ProjTaskOptId = PTO.ProjTaskOptId  
			LEFT JOIN
		tblPricedJobs PJ
			ON PTA.PricedJobId=PJ.PricedJobId
		where PT.Unscheduled=0
		GROUP BY PT.ProjTaskId,PTA.ProjTaskAmtId, PJ.StdJobId,PTA.Work_Group_Id,PTA.JobCodeId
		
		IF @TableName<>'' RETURN
		INSERT INTO @TablesOrder(TableName) VALUES('StrategyTaskJob')
	END	

	--11 Measurements
	IF @TableName='CMMeasurement' OR @TableName=''
	BEGIN
		SELECT M.EqpPlanId,M.CMCodeId,M.MeasurementTime,M.Reading, M.CMRatingId,M.ExtComments,M.Recommendations
		FROM
		CM_MEASUREMENT M
			INNER JOIN
		(SELECT M1.EqpPlanId,M1.CMCodeId,MAX(M1.MeasurementTime) AS MeasurementTime
		FROM
		#z_Eqp Z
			INNER JOIN
		CM_MEASUREMENT M1
			ON Z.EqpPlanId=M1.EqpPlanId
		GROUP BY M1.EqpPlanId,M1.CMCodeId	
		) A
			ON M.EqpPlanId=A.EqpPlanId
			AND M.CMCodeId=A.CMCodeId
			AND M.MeasurementTime=A.MeasurementTime
			
		IF @TableName<>'' RETURN
		INSERT INTO @TablesOrder(TableName) VALUES('CMMeasurement')
	END	
		
	--12 Usage
	IF @TableName='ActualUsage' OR @TableName=''
	BEGIN
		SELECT B.EqpPlanId,A.RecordingDate,A.ActualUsage AS Usage,A.QUOMId
		FROM
		tblActualUsages A
			INNER JOIN
		(SELECT AU.EquipmentId,EP.EqpPlanId, AU.QUOMId,MAX(AU.RecordingDate) AS RecordingDate
		FROM
		#z_Eqp Z
			INNER JOIN
		tblEqpPlans EP
			ON Z.EqpPlanId=EP.EqpPlanId
			INNER JOIN
		tblEquipment E
			ON EP.EquipmentId=E.EquipmentId
			INNER JOIN
		tblActualUsages AU
			ON E.EquipmentId=AU.EquipmentId
		GROUP BY AU.EquipmentId,EP.EqpPlanId, AU.QUOMId	
		) B
			ON A.EquipmentId=B.EquipmentId
			AND A.RecordingDate=B.RecordingDate
			AND A.QUOMId=B.QUOMId
			
		IF @TableName<>'' RETURN
		INSERT INTO @TablesOrder(TableName) VALUES('ActualUsage')
	END	
		
	--13 KPI
	IF @TableName='KPI' OR @TableName=''
	BEGIN
		SELECT Z.EqpPlanId,K.Utilisation_qtr AS UtilisationQtr,K.Availability_qtr_pct AS AvailabilityQtr,
		K.Mean_Time_Btwn_Stop_qtr AS MTBSQtr
		FROM
		#z_Eqp Z
			INNER JOIN
		KPI_VALUE K
			ON Z.EqpPlanId=K.Eqp_Plan_Id
			
		IF @TableName<>'' RETURN
		INSERT INTO @TablesOrder(TableName) VALUES('KPI')
	END	
	
	IF @TableName='StrategyTaskDocument' OR @TableName=''
	BEGIN
	
		SELECT TD.ProjTaskId, D.Work_Scope_Document_Id AS DocumentId,
		1 AS DocumentType/*Library Documents*/
		FROM 
		WORK_SCOPE_DOCUMENT D
			INNER JOIN
		PROJ_TASK_DOCUMENT TD
			ON D.Work_Scope_Document_Id=TD.WorkScopeDocumentId
			INNER JOIN
		tblProjTasks PT
			ON TD.ProjTaskId=PT.ProjTaskId
			INNER JOIN
		#z_Eqp Z
			ON PT.EqpProjId=Z.EqpProjId
			
			UNION ALL
		
		SELECT D.ProjTaskId, D.ProjTaskExternalDocumentId AS DocumentId,
		2 AS DocumentType/*External Documents*/
		FROM
		PROJ_TASK_EXTERNAL_DOCUMENT D 
			INNER JOIN
		tblProjTasks PT
			ON D.ProjTaskId=PT.ProjTaskId
			INNER JOIN
		#z_Eqp Z
			ON PT.EqpProjId=Z.EqpProjId
				
		IF @TableName<>'' RETURN
		INSERT INTO @TablesOrder(TableName) VALUES('StrategyTaskDocument')
	
	END	
	
	IF @TableName='StrategyTaskEWTemplate' OR @TableName=''
	BEGIN
		SELECT S.ProjTaskAmtId,S.EWTemplateId
		FROM
		#z_Eqp Z
			INNER JOIN
		tblProjTasks PT
			ON Z.EqpProjId=PT.EqpProjId
			INNER JOIN
		tblProjTaskOpts PTO
			ON PT.ProjTaskId=PTO.ProjTaskId
			INNER JOIN
		tblProjTaskAmts PTA
			ON PTO.ProjTaskOptId=PTA.ProjTaskOptId
			INNER JOIN
		STRATEGY_TASK_JOB_EW_TEMPLATE S
			ON PTA.ProjTaskAmtId=S.ProjTaskAmtId
			
		IF @TableName<>'' RETURN
		INSERT INTO @TablesOrder(TableName) VALUES('StrategyTaskEWTemplate')
	END	

END /*Equipment tables*/

/*Discussed with RF: Bring all workorders from the linked Events*/

INSERT INTO #z_Task(Task_Id)
SELECT T1.Task_ID FROM
(SELECT DISTINCT E.Event_ID
FROM 
EVENT E
	INNER JOIN
TASK T
	ON E.Event_ID=T.Event_ID
	INNER JOIN
#z_Task Z
	ON T.Task_ID=Z.Task_Id) A
	INNER JOIN
TASK T1
	ON A.Event_ID=T1.Event_ID
	LEFT JOIN
#z_Task Z1
	ON T1.Task_ID=Z1.Task_Id
	LEFT JOIN
#z_MobileWO M
	ON T1.UniqueKey=M.UniqueKey
WHERE Z1.Task_Id IS NULL
AND M.UniqueKey IS NULL

DROP TABLE #z_MobileWO

--0 Events

IF @TableName='Event' OR @TableName=''
BEGIN
	SELECT DISTINCT E.Event_ID AS EventId,E.Eqp_Plan_ID AS EqpPlanId,E.Event_Status_ID AS EventStatusId,
	E.Planned,E.Break_Down AS BreakDown,E.Event_Prevention_ID AS EventPreventionId,E.UniqueKey,
	CAST(CASE WHEN H.Event_Id>0 THEN 1 ELSE 0 END AS bit) AS IsLinked,E.Actual_Down_Time as ActualDownTime,
	E.Actual_Up_Time as ActualUpTime,E.Planned_Down_Time as PlannedDownTime,E.Planned_Up_Time as PlannedUpTime,
	E.Description
	
	FROM
	EVENT E
		INNER JOIN
	TASK T
		ON E.Event_ID=T.Event_ID
		INNER JOIN
	#z_Task Z
		ON T.Task_ID=Z.Task_Id	
		LEFT JOIN
	HOLDING_EVENT H
		ON E.Event_ID=H.Event_Id
		LEFT JOIN
	#z_MobileEv M
		ON E.UniqueKey=M.UniqueKey
	WHERE M.UniqueKey IS NULL
	
	IF @TableName<>'' RETURN
	INSERT INTO @TablesOrder(TableName) VALUES('Event')
END	

IF @TableName='DowntimeAllocation' OR @TableName=''
BEGIN
	SELECT DISTINCT DTA.Down_Time_Allocation_ID AS DownTimeAllocationId,
	DTA.Event_ID AS EventId,DTA.Primary_DTA as PrimaryDTA,
	DTA.Task_Type_ID as TaskTypeId,DTA.Responsibility_ID as ResponsibilityId,
	DTA.Variance_Cause_ID as VarianceCauseId,DTA.Planned_Hours as PlannedHours,
	DTA.Actual_Hours as ActualHours,DTA.UniqueKey,DTA.Notes
	
	FROM
	DOWN_TIME_ALLOCATION DTA
		INNER JOIN
	EVENT E
		ON DTA.Event_ID=E.Event_ID
		INNER JOIN
	TASK T
		ON E.Event_ID=T.Event_ID
		INNER JOIN
	#z_Task Z
		ON T.Task_ID=Z.Task_Id	
		LEFT JOIN
	#z_MobileEv M
		ON E.UniqueKey=M.UniqueKey
	WHERE M.UniqueKey IS NULL
	
	IF @TableName<>'' RETURN
	INSERT INTO @TablesOrder(TableName) VALUES('DowntimeAllocation')
	
END	

DROP TABLE #z_MobileEv


IF EXISTS(SELECT Task_Id FROM #z_Task)
BEGIN
	-- 1 Workorders

	IF @TableName='Workorder' OR @TableName=''
	BEGIN
		SELECT T.Task_ID AS TaskId,T.Eqp_Plan_ID AS EqpPlanId,T.AMTPlanningModeId,
		T.Primary_Cause AS PrimaryCause,T.Event_ID AS EventId,T.Task_Status_ID AS TaskStatusId,
		T.Work_Order AS WorkorderNumber,T.Description,T.Component_Code_ID AS ComponentCodeId,
		T.Modifier_ID AS ModifierId,T.Task_Type_ID AS TaskTypeId,T.Application_Code_ID AS ApplicationCodeId,
		ISNULL( T.Planned_Down_Time,E.Planned_Down_Time) AS PlannedDownTime,T.Expected_Duration AS ExpectedDuration,
		ISNULL(T.Actual_Down_Time,E.Actual_Down_Time) AS ActualDownTime,T.Actual_Duration AS ActualDuration,
		ISNULL(E.Break_Down,T.Break_Down) AS BreakDown,T.Symptom_ID AS SymptomId,T.Symptom_Notes AS SymptomNotes,
		T.Cause_ID AS CauseId,T.Cause_Notes AS CauseNotes,T.Repair_Code_Id AS RepairCodeId,
		T.Repair_Notes AS RepairNotes,T.SIMS_Code_Id AS SIMSCodeId,T.Occurrence_Type_Id AS OccurrenceTypeId,
		PT.TagId,T.Employee_ID AS EmployeeId,T.Work_Group_ID AS WorkGroupId,
		T.Work_Location,T.ActualEmployeeId,T.ActualWorkGroupId,T.CompletedById,T.Part_No AS PartNo,
		T.Part_Description AS PartDescription,T.Group_No AS GroupNo,T.Group_Description AS GroupDescription,
		T.FailedGroupListPosition,T.FailedGroupPartsListGroup,

		/*if (!chkTaskAuthorised.Checked)
			 picJobReadyColour.BackColor = System.Drawing.Color.Yellow;
		else if (chkPartsRequired.Checked && !chkPartsOrdered.Checked && !chkPartsReady.Checked)
			picJobReadyColour.BackColor = System.Drawing.Color.OrangeRed;
		else if (chkResourceReady.Checked && ((!chkPartsRequired.Checked && !chkPartsOrdered.Checked && !chkPartsReady.Checked) 
			|| chkPartsReady.Checked))
			picJobReadyColour.BackColor = System.Drawing.Color.LimeGreen;
		else
			picJobReadyColour.BackColor = System.Drawing.Color.Blue;*/
		CASE 
		WHEN T.Task_Authorised=1 THEN 1 /*Yellow*/
		WHEN T.PartsStatusRequired=1 AND T.PartsStatusOrdered=0 AND T.PartsStatusReady=0 THEN 2 /*OrangeRed*/
		WHEN T.ResourceStatusReady=1 
			 AND ((T.PartsStatusRequired=0 AND T.PartsStatusOrdered=0 AND T.PartsStatusReady=0)
				OR T.PartsStatusReady=1) THEN 3 /*LimeGreen*/
		ELSE 0 /*Blue*/ END AS JobReadyStatus,T.Last_Mod_Date AS LastModDate,T.Priority_ID AS PriorityId,
		T.RaisedByID AS RaisedById,T.PartsReturned,T.Task_Mode_ID AS TaskModeId,T.UniqueKey,
		T.FailedPartListPosition,T.FailedPartListGroup,T.Inspection
		
		FROM
		TASK T
			INNER JOIN
		#z_Task Z
			ON T.Task_ID=Z.Task_Id
			INNER JOIN
		tblEqpPlans EP
			ON T.Eqp_Plan_ID=EP.EqpPlanId
			INNER JOIN
		tblEqpProjs EPR
			ON EP.EqpPlanId=EPR.EqpPlanId
			AND EPR.Projection_Type_ID=1
			LEFT JOIN
		EVENT E
			ON T.Event_ID=E.Event_ID
			LEFT JOIN
		tblProjTaskOpts PTO
			ON T.Strategy_Proj_Task_Opt_ID=PTO.ProjTaskOptId
			LEFT JOIN
		tblProjTasks PT
			ON PTO.ProjTaskId=PT.ProjTaskId

		IF @TableName<>'' RETURN
		INSERT INTO @TablesOrder(TableName) VALUES('Workorder')
	END		

	--2 Workorder operation
	IF @TableName='WOOperation' OR @TableName=''
	BEGIN
		SELECT O.Task_Id AS TaskId,O.Task_Operation_Id AS TaskOperationId,O.SortOrder,
		O.Task_Operation AS TaskOperation,O.Component_Code_Id AS ComponentCodeId,
		O.Modifier_Code_Id AS ModifierCodeId,O.Job_Code_Id AS JobCodeId,
		O.Operation_Instructions AS OperationInstructions,O.OperationOffset,
		O.Planned_Duration AS PlannedDuration,O.Actual_Duration AS ActualDuration,
		O.Completed,O.PartsReturned,O.Work_Group_Id AS WorkGroupId,O.UniqueKey
		
		FROM
		#z_Task Z
			INNER JOIN
		TASK_OPERATION O
			ON Z.Task_Id=O.Task_Id
			
		IF @TableName<>'' RETURN
		INSERT INTO @TablesOrder(TableName) VALUES('WOOperationBase')
	END	

	--3 WO Parts	
	IF @TableName='WOPart' OR @TableName=''
	BEGIN
		SELECT O.Task_Operation_Id AS TaskOperationId,P.Task_Operation_Part_Id AS TaskOperationPartId,
		P.Part_Number AS PartNumber,
		P.Part_Description AS PartDescription,P.Planned_Qty AS PlannedQty
		
		FROM
		#z_Task Z
			INNER JOIN
		TASK_OPERATION O
			ON Z.Task_Id=O.Task_Id
			INNER JOIN
		TASK_OPERATION_PART P
			ON O.Task_Operation_Id=P.Task_Operation_Id
			
		IF @TableName<>'' RETURN
		INSERT INTO @TablesOrder(TableName) VALUES('WOPart')
	END		
	--4 WO Labour	
		/*Assigned Hours*/
	--3 WO Parts	
	IF @TableName='WOLabour' OR @TableName=''
	BEGIN
		SELECT O.Task_Operation_Id AS TaskOperationId,L.Task_Operation_Labour_Id AS TaskOperationLabourId, 
		L.Labour_Activity_Id AS LabourActivityId,L.Labour_Activity AS LabourActivityWO,
		L.Work_Group_Id AS WorkGroupId,L.Planned_Labour_Hrs AS PlannedLabourHrs,L.Employee_Id AS EmployeeId,
		L.Actual_Labour_Hrs AS ActualLabourHrs,L.JSARead,L.JSAReadId,L.UniqueKey
		
		FROM
		#z_Task Z
			INNER JOIN
		TASK_OPERATION O
			ON Z.Task_Id=O.Task_Id
			INNER JOIN
		TASK_OPERATION_LABOUR L
			ON O.Task_Operation_Id=L.Task_Operation_Id
			
		IF @TableName<>'' RETURN
		INSERT INTO @TablesOrder(TableName) VALUES('WOLabourBase')
	END		
		
	--5 WO Misc	
	IF @TableName='WOMisc' OR @TableName=''
	BEGIN
		SELECT O.Task_Operation_Id AS TaskOperationId,M.Task_Operation_Misc_Id AS TaskOperationMiscId,
		M.Misc_Category_Id AS MiscCategoryId,M.Task_Operation_Misc_Desc AS TaskOperationMiscDesc
		FROM
		#z_Task Z
			INNER JOIN
		TASK_OPERATION O
			ON Z.Task_Id=O.Task_Id
			INNER JOIN
		TASK_OPERATION_MISC M
			ON O.Task_Operation_Id=M.Task_Operation_Id
			
		IF @TableName<>'' RETURN
		INSERT INTO @TablesOrder(TableName) VALUES('WOMisc')
	END		
		
	--6 WO Electronic Workscopes
	IF @TableName='WOElectronicWorkscope' OR @TableName=''
	BEGIN
		SELECT EW.EWWorkorderId,EW.TaskOperationId,EW.EWTitle,EW.UniqueKey
		
		FROM
		#z_Task Z
			INNER JOIN
		TASK_OPERATION O
			ON Z.Task_Id=O.Task_Id
			INNER JOIN
		EW_WORKORDER EW
			ON O.Task_Operation_Id=EW.TaskOperationId
			
		IF @TableName<>'' RETURN
		INSERT INTO @TablesOrder(TableName) VALUES('WOElectronicWorkscopeBase')
	END		
		
	-- 7 WO Worksteps
	IF @TableName='WOWorkstep' OR @TableName=''
	BEGIN
		SELECT EWS.EWWorkstepId, EWS.EWWorkorderId, EWS.EWStepTemplateId, EWS.Sequence, EWS.EWWorkstepTitle, 
		EWS.ComponentCodeId, EWS.CMCodeId, EWS.Instructions, EWS.DocumentGUID, EWS.DocumentExt, EWS.Safety, 
		EWS.Environmental, EWS.Reading, EWS.CMRatingId, EWS.ResultId, EWS.PerformedById, EWS.Comments, 
		EWS.CrreateDefectWO AS CreateDefectWO, EWS.DefectRepairInstructions, EWS.Actioned,EWS.ActionedComments, EWS.ReviewdById,
		EWS.UniqueKey
		
		FROM
		#z_Task Z
			INNER JOIN
		TASK_OPERATION O
			ON Z.Task_Id=O.Task_Id
			INNER JOIN
		EW_WORKORDER EW
			ON O.Task_Operation_Id=EW.TaskOperationId
			INNER JOIN
		EW_WORKSTEP EWS
			ON EW.EWWorkorderId=EWS.EWWorkorderId
		IF @TableName<>'' RETURN
		INSERT INTO @TablesOrder(TableName) VALUES('WOWorkstep')
	END	
	
	IF @TableName='WODocument' OR @TableName=''
	BEGIN

		SELECT TD.Task_Id AS TaskId, D.Work_Scope_Document_Id AS DocumentId,
		1 AS DocumentType/*Library Documents*/
		FROM 
		WORK_SCOPE_DOCUMENT D
			INNER JOIN
		TASK_DOCUMENT TD
			ON D.Work_Scope_Document_Id=TD.Work_Scope_Document_Id
			INNER JOIN
		#z_Task Z
			ON TD.Task_Id=Z.Task_Id
			
			UNION ALL
		
		SELECT D.TaskId, D.TaskExternalDocumentId AS DocumentId,
		2 AS DocumentType/*External Documents*/
		FROM
		TASK_EXTERNAL_DOCUMENT D 
			INNER JOIN
		#z_Task Z
			ON D.TaskId=Z.Task_Id
			
		IF @TableName<>'' RETURN
		INSERT INTO @TablesOrder(TableName) VALUES('WODocument')

	END
			
	IF @TableName='WOAttachedDocument' OR @TableName=''
	BEGIN

		SELECT A.TaskId,A.FileName/*,3 AS DocumentTypeAttached Documents*/
		
		FROM
		ATTACHED_DOCUMENT_TASK A
			INNER JOIN
		#z_Task Z1
			ON A.TaskId=Z1.Task_Id
			
		IF @TableName<>'' RETURN
		INSERT INTO @TablesOrder(TableName) VALUES('WOAttachedDocument')
	END	

	IF @TableName='AttachedDocumentsEWWorkstep' OR @TableName=''
	BEGIN

		SELECT A.EWWorkstepId,A.FileName
		
		FROM
		ATTACHED_DOCUMENTS_EW_WORKSTEP A
			INNER JOIN
		EW_WORKSTEP S
			ON A.EWWorkstepId =S.EWWorkstepId
			INNER JOIN
		EW_WORKORDER E
			ON S.EWWorkorderId=E.EWWorkorderId
			INNER JOIN
		TASK_OPERATION O
			ON E.TaskOperationId=O.Task_Operation_Id
			INNER JOIN
		#z_Task Z1
			ON O.Task_Id=Z1.Task_Id
			
		IF @TableName<>'' RETURN
		INSERT INTO @TablesOrder(TableName) VALUES('AttachedDocumentsEWWorkstep')
	END	

END

--8 WO Linked Documents
IF EXISTS(SELECT * FROM #z_Task) OR EXISTS(SELECT * FROM #z_Eqp)
BEGIN
	IF @TableName='AmtDocument' OR @TableName=''
	BEGIN

		SELECT D.Work_Scope_Document_Id AS DocumentId, D.Document_Name AS DocumentName,
		D.Document_File_Name AS DocumentFileName,1 AS DocumentType/*Library Documents*/
		FROM 
		WORK_SCOPE_DOCUMENT D
			INNER JOIN
		TASK_DOCUMENT TD
			ON D.Work_Scope_Document_Id=TD.Work_Scope_Document_Id
			INNER JOIN
		#z_Task Z
			ON TD.Task_Id=Z.Task_Id
			
			UNION
			
		SELECT D.TaskExternalDocumentId AS DocumentId,D.Documentname,
		D.DocumentLink AS DocumentFileName,2 AS DocumentType/*External Documents*/
		FROM
		TASK_EXTERNAL_DOCUMENT D 
			INNER JOIN
		#z_Task Z
			ON D.TaskId=Z.Task_Id
			
			UNION
			
		SELECT D.Work_Scope_Document_Id AS DocumentId,	D.Document_Name AS DocumentName,
		D.Document_File_Name AS DocumentFileName,1 AS DocumentType/*Library Documents*/
		FROM 
		WORK_SCOPE_DOCUMENT D
			INNER JOIN
		PROJ_TASK_DOCUMENT TD
			ON D.Work_Scope_Document_Id=TD.WorkScopeDocumentId
			INNER JOIN
		tblProjTasks PT
			ON TD.ProjTaskId=PT.ProjTaskId
			INNER JOIN
		#z_Eqp Z
			ON PT.EqpProjId=Z.EqpProjId
			
			UNION
		
		SELECT D.ProjTaskExternalDocumentId AS DocumentId,D.Documentname,
		D.DocumentLink AS DocumentFileName,2 AS DocumentType/*External Documents*/
		FROM
		PROJ_TASK_EXTERNAL_DOCUMENT D 
			INNER JOIN
		tblProjTasks PT
			ON D.ProjTaskId=PT.ProjTaskId
			INNER JOIN
		#z_Eqp Z
			ON PT.EqpProjId=Z.EqpProjId
			
		IF @TableName<>'' RETURN
		INSERT INTO @TablesOrder(TableName) VALUES('AmtDocument')
	END
END

IF EXISTS(SELECT * FROM @TablesOrder)
BEGIN
	SELECT * FROM @TablesOrder
END

GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[EVENT_ADD_UPDATE_P]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[EVENT_ADD_UPDATE_P]
GO

create Procedure EVENT_ADD_UPDATE_P  
/******************************************************************************  
 Name: EVENT_ADD_UPDATE_P  
  
 Called By: -   
  
 Desc:   
               
 Auth: Veronika Vasylyeva  
 Date: 10-Oct-2009  
*******************************************************************************  
  Change History  
*******************************************************************************  
 Date:  Author:  Description:  
 -------- -------- ----------------------------------------  
 21 Oct 11	V Vasylyeva	#2644 Added Create_By_User_Id
 03-May-11	D Smith	#1661: Fixed test time (Was called TestTime in the XML - should be Test_Time)
 28-Jun-10 V Vasylyeva CR9000: Took out rounding  
  8 Jan 10	V Vasylyeva	AmtMobile chnanges
*******************************************************************************/  
 /* Param List */  
 @xmlEvent varchar(max)='',  
 @xmlTask varchar(max)='',  
 @opDeleted varchar(max)='',  
 @pDeleted varchar(max)='',  
 @labDeleted varchar(max)='',  
 @miscDeleted varchar(max)='',  
 @poDeleted varchar(max)='',  
 @libDeleted varchar(max)='',  
 @UpdateWO bit=0,  
 @OpReplaced bit=0,  
 @opAdded text='',      
 @opModified text='',  
 @EventId int=0 OUTPUT,  
 @TaskId int =0 OUTPUT,  
 @Message varchar(max)=Null OUTPUT,
 /*VV AmtMobile*/
 @PrimaryTaskId int=0,
 @CopyEWTemplateFiles bit=0 OUTPUT
   
AS  
  
DECLARE @Eqp_Plan_ID int,/*VV #2644*/@UserId int
DECLARE @Description varchar(500)   
DECLARE @Event_Status_ID int   
DECLARE @Priority_ID int   
DECLARE @Work_Location_ID int   
DECLARE @Planned bit   
DECLARE @Break_Down bit   
DECLARE @Expected_Up_Time datetime   
DECLARE @Confirmed bit   
DECLARE @Event_Prevention_ID int   
DECLARE @Planned_Down_Time datetime   
DECLARE @Planned_Up_Time datetime   
DECLARE @Actual_Down_Time datetime   
DECLARE @Actual_Up_Time datetime   
DECLARE @Last_Mod_Date varchar(25)  
DECLARE @TestTime float  
DECLARE @ReleasedByID int  
DECLARE @TasksSortOrder varchar(max) 
DECLARE @UniqueKeyE varchar(50) 
  
DECLARE @Down_Time_Allocation_ID int  
DECLARE @Variance_Cause_ID int   
DECLARE @Task_Type_ID int   
DECLARE @Responsibility_ID int   
DECLARE @Planned_Hours real   
DECLARE @Actual_Hours real   
DECLARE @Variance real   
DECLARE @Notes varchar(500)   
DECLARE @EMIssueId int  
DECLARE @Primary_DTA bit 
DECLARE @UniqueKey varchar(50) 
  
DECLARE @PlanDiff float  
DECLARE @ActDiff float  
  
DECLARE @hDoc int  
DECLARE @Counter int  
  
Declare @EventStatusIP int  
Declare @EventStatusC int  
  
SET @EventStatusIP=2  
SET @EventStatusC=3  
  
CREATE TABLE #z_DOWN_TIME_ALLOCATION(  
ListId int IDENTITY(1,1),  
Down_Time_Allocation_ID int,  
Variance_Cause_ID int,  
Task_Type_ID int,  
Responsibility_ID int,  
Planned_Hours real,  
Actual_Hours real,  
Notes varchar(500),  
Primary_DTA bit,  
EM_Issue_Id int,
UniqueKey varchar(50)  COLLATE DATABASE_DEFAULT
PRIMARY KEY (Down_Time_Allocation_ID))  
  
EXEC sp_xml_preparedocument @hDoc OUTPUT, @xmlEvent  
  
SELECT @EventID=Event_ID,@Eqp_Plan_ID=Eqp_Plan_ID,@Description=Description,   
@Event_Status_ID=Event_Status_ID,@Priority_ID=Priority_ID,@Work_Location_ID=NULLIF(Work_Location_ID,0),  
@Planned=ISNULL(Planned,0),@Break_Down=ISNULL(Break_Down,0),@Expected_Up_Time=Expected_Up_Time_D,
@Confirmed=ISNULL(Confirmed,0),@Event_Prevention_ID=NULLIF(Event_Prevention_ID,0),
@Planned_Down_Time=Planned_Down_Time_D, @Planned_Up_Time=Planned_Up_Time_D,
@Actual_Down_Time=Actual_Down_Time_D,@Actual_Up_Time=Actual_Up_Time_D,  
@Last_Mod_Date=Last_Mod_Date,@TestTime =ISNULL(Test_Time,0),@ReleasedByID=NULLIF(Released_By_ID,0),  
@TasksSortOrder=Sort_Order,@UniqueKeyE=ISNULL(UniqueKey,''),@UserId=ISNULL(UserId,0)
  
FROM  OPENXML (@hDoc,'/DS_EV/TBL_EV',2) WITH (Event_ID int,Eqp_Plan_ID int,Description varchar(500),   
Event_Status_ID int,Priority_ID int,Work_Location_ID int,Planned bit,Break_Down bit,  
Expected_Up_Time_D datetime,Confirmed bit,Event_Prevention_ID int,Planned_Down_Time_D datetime,  
Planned_Up_Time_D datetime,Actual_Down_Time_D datetime,Actual_Up_Time_D datetime,Last_Mod_Date varchar(25),  
Test_Time float,Released_By_ID int,Sort_Order varchar(max),UniqueKey varchar(50),UserId int)  

  
INSERT INTO #z_DOWN_TIME_ALLOCATION  
(Down_Time_Allocation_ID,Variance_Cause_ID,Task_Type_ID,Responsibility_ID,  
Planned_Hours,Actual_Hours,Notes,Primary_DTA,EM_Issue_Id,UniqueKey)  
SELECT Down_Time_Allocation_ID,Variance_Cause_ID,Task_Type_ID,Responsibility_ID,  
ISNULL(Planned_Hours,0) AS Planned_Hours,ISNULL(Actual_Hours,0) AS Actual_Hours,  
NULLIF(Notes,'') AS Notes,Primary_DTA,NULLIF(EM_Issue_Id,0) AS EM_Issue_Id,
ISNULL(NULLIF(UniqueKey,''),NEWID()) AS UniqueKey  
FROM OPENXML (@hDoc,'/DS_EV/TBL_DT',2) WITH #z_DOWN_TIME_ALLOCATION  
  
SET @Counter=@@ROWCOUNT  
  
EXEC sp_xml_removedocument @hDoc  
  
IF @Event_Status_ID =@EventStatusIP SET @Actual_Up_Time=GETDATE()  
  
IF @Event_Status_ID NOT IN(@EventStatusIP,@EventStatusC)  
BEGIN  
 SET @Actual_Up_Time=NULL  
 SET @Actual_Down_Time=NULL  
END

DECLARE @EventIdExisting int

IF @UniqueKeyE<>''
BEGIN
	SELECT @EventIdExisting=Event_Id FROM EVENT WHERE UniqueKey=@UniqueKeyE
	
	IF @EventIdExisting>0 SET @EventID=@EventIdExisting
END
ELSE
BEGIN
	SET @UniqueKeyE=NEWID()
END

  
IF @EventID>0  
BEGIN  
 EXEC EVENT_UPDATE_P  
   @Event_ID =@EventID,  
   @Eqp_Plan_ID =@Eqp_Plan_ID,   
   @Description=@Description,   
   @Event_Status_ID =@Event_Status_ID,   
   @Priority_ID =@Priority_ID,   
   @Work_Location_ID =@Work_Location_ID,   
   @Planned =@Planned,   
   @Break_Down =@Break_Down,   
   @Expected_Up_Time =@Expected_Up_Time,   
   @Confirmed =@Confirmed,   
   @Event_Prevention_ID =@Event_Prevention_ID,   
   @Planned_Down_Time =@Planned_Down_Time,   
   @Planned_Up_Time=@Planned_Up_Time,   
   @Actual_Down_Time =@Actual_Down_Time,   
   @Actual_Up_Time =@Actual_Up_Time,   
   @Last_Mod_Date=@Last_Mod_Date,  
   @TestTime=@TestTime,  
   @ReleasedByID=@ReleasedByID,  
   @TasksSortOrder=@TasksSortOrder,  
   @Message=@Message OUTPUT
     
	 DELETE DOWN_TIME_ALLOCATION  
	 WHERE Event_ID=@EventId AND  
	 Down_Time_Allocation_ID NOT IN(SELECT Down_Time_Allocation_ID FROM #z_DOWN_TIME_ALLOCATION)  
    
END  
ELSE  
BEGIN  
	
 EXEC EVENT_ADD_P  
  @Eqp_Plan_ID =@Eqp_Plan_ID,   
  @Description =@Description,   
  @Event_Status_ID =@Event_Status_ID,   
  @Priority_ID =@Priority_ID,   
  @Work_Location_ID=@Work_Location_ID,   
  @Planned=@Planned,   
  @Break_Down=@Break_Down,   
  @Expected_Up_Time=@Expected_Up_Time,   
  @Confirmed=@Confirmed,   
  @Event_Prevention_ID=@Event_Prevention_ID,   
  @Planned_Down_Time=@Planned_Down_Time,   
  @Planned_Up_Time =@Planned_Up_Time,   
  @Actual_Down_Time =@Actual_Down_Time,   
  @Actual_Up_Time =@Actual_Up_Time,   
  @Event_Mode_ID =1,   
  @Has_Down_Time =1,    
  @New_Event =1,   
  @NewEvent_ID =@EventId OUTPUT,  
  @TestTime=@TestTime,  
  @RelesedByID =@ReleasedByID,  
  @Message=@Message OUTPUT,  
  @TaskXml=@xmlTask,  
  @opDeleted=@opDeleted,  
  @pDeleted=@pDeleted,  
  @labDeleted=@labDeleted,  
  @miscDeleted=@miscDeleted,  
  @poDeleted=@poDeleted,  
  @libDeleted=@libDeleted,  
  @UpdateWO=@UpdateWO,  
  @OpReplaced=@OpReplaced,  
  @opAdded=@opAdded,      
  @opModified=@opModified,  
  @Task_Id=@TaskId OUTPUT,
  /*VV AmtMobile*/
  @PrimaryTaskId = @PrimaryTaskId,
  @UniqueKey=@UniqueKeyE,
  @CopyEWTemplateFiles=@CopyEWTemplateFiles OUTPUT,
  /*VV 2644*/
  @Create_By_User_Id=@UserId
  
END  


  
IF ISNULL(@Message,'')<>'' RETURN  
  
IF @Event_Status_ID NOT IN(@EventStatusIP,@EventStatusC)  
BEGIN  
 UPDATE #z_DOWN_TIME_ALLOCATION SET Actual_Hours=0  
END  
  
SET @PlanDiff=(CAST(@Planned_Up_Time AS float)-CAST(@Planned_Down_Time AS float))*24.00 -  
ISNULL((SELECT SUM(Planned_Hours) FROM #z_DOWN_TIME_ALLOCATION WHERE Primary_DTA=0),0)  
  
IF @PlanDiff<0 SET @PlanDiff=0  
  
SET @ActDiff=0  
  
IF @Event_Status_ID IN(@EventStatusIP,@EventStatusC)  
BEGIN  
 SET @ActDiff=(CAST(@Actual_Up_Time AS float)-CAST(@Actual_Down_Time AS float))*24.00 -  
 ISNULL((SELECT SUM(Actual_Hours) FROM #z_DOWN_TIME_ALLOCATION WHERE Primary_DTA=0),0)  
   
 IF @ActDiff<0 SET @ActDiff=0  
END  
  
/*VV CR9000*/  
UPDATE #z_DOWN_TIME_ALLOCATION SET Actual_Hours=@ActDiff,  
Planned_Hours=@PlanDiff WHERE Primary_DTA=1  
  
  
  
WHILE @Counter>0  
BEGIN  
 SELECT @Down_Time_Allocation_ID=Down_Time_Allocation_ID,@Variance_Cause_ID = Variance_Cause_ID,   
 @Task_Type_ID = Task_Type_ID,  @Responsibility_ID = Responsibility_ID, @Planned_Hours = Planned_Hours,   
 @Actual_Hours = Actual_Hours,@Notes = Notes,@EMIssueId = EM_Issue_Id,  
 @Primary_DTA = Primary_DTA,@UniqueKey=UniqueKey
 FROM #z_DOWN_TIME_ALLOCATION WHERE ListId=@Counter  
   
   
 IF @Down_Time_Allocation_ID>0  
 BEGIN  
  EXEC DOWN_TIME_ALLOCATION_UPDATE_P  
   @Down_Time_Allocation_ID=@Down_Time_Allocation_ID,  
   @Event_ID =@EventId,   
   @Variance_Cause_ID=@Variance_Cause_ID,   
   @Task_Type_ID=@Task_Type_ID,   
   @Responsibility_ID=@Responsibility_ID,   
   @Planned_Hours=@Planned_Hours,   
   @Actual_Hours=@Actual_Hours,   
   @Variance=0,  
   @Notes=@Notes,   
   @EMI_Ref=@EMIssueId,  
   @EMIssueId =@EMIssueId,  
   @Primary_DTA =@Primary_DTA,  
   @Event_Last_Mod_Date=NULL  
 END  
 ELSE   
 BEGIN  
  EXEC DOWN_TIME_ALLOCATION_ADD_P  
   @Event_ID =@EventId,   
   @Variance_Cause_ID=@Variance_Cause_ID,   
   @Task_Type_ID=@Task_Type_ID,   
   @Responsibility_ID=@Responsibility_ID,   
   @Planned_Hours=@Planned_Hours,   
   @Actual_Hours=@Actual_Hours,   
   @Notes=@Notes,   
   @EMI_Ref=@EMIssueId,  
   @EMIssueId =@EMIssueId,  
   @Primary_DTA =@Primary_DTA,  
   @Event_Last_Mod_Date=NULL,  
   @New_Down_Time_Allocation_ID=0,
   @UniqueKey=@UniqueKey 
 END  
  
 SET @Counter=@Counter-1  
END  
    
         
        
GO


if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[PH_RPT_INVOICE_SUMMARY_P]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[PH_RPT_INVOICE_SUMMARY_P]
GO

create         Procedure [dbo].[PH_RPT_INVOICE_SUMMARY_P]
/******************************************************************************
	File: 
	Name: PH_RPT_INVOICE_SUMMARY_P

	Called By: 

	Desc: Returns data for Plant Hire Invoice Summary report

	Auth: Veronika Vasylyeva
	Date: 22-Oct-2007
*******************************************************************************
		Change History
*******************************************************************************
	Date:		Author:		Description:
	--------	--------	----------------------------------------
	 4 Oct 11	V Vasylyeva	#2573 Error when analyse by cost responsibility
	17/09/08	AL		removed links to tblqualifier and tbluoms	+ replaced to varchar(MAX)
*******************************************************************************/
	/* Param List */

	@BranchId varchar(MAX)='',
	@SiteId varchar(MAX)='',
	@FleetId varchar(MAX)='',
	@EqpPlanId varchar(MAX)='',
    @ModelId varchar(MAX)='', 
	@Regionid varchar(MAX)='', 
	@DivisionId varchar(MAX)='', 
	@EqpCriticalityId varchar(MAX)='', 
	@EqpClassid varchar(MAX)='', 
	@EqpGroupId  varchar(MAX)='', 
	@EqpCategoryId varchar(MAX)='', 
	@CostCentreId varchar(MAX)='', 
	@CostResponsibilityId varchar(MAX)='', 
	@IndustryGroupId varchar(MAX)='', 
	@EquipmentYear varchar(MAX)='', 
	@ManufacturerId varchar(MAX)='', 
	@ProjectId varchar(MAX)='', 
	@ProjectCustomerId varchar(MAX)='', 
	@HireStatusId varchar(MAX)='', 
	@ShowTerminated int=0,/*0 - All, 1 - Show terminated equipment, 2 - don't show terminated equipment*/
	@AnalyseBy varchar(10),
	@StartDate int,
	@EndDate int
    
AS

DECLARE @ShowAll int
DECLARE @ShowTerm int
DECLARE @ShowCurr int
DECLARE @From varchar(MAX)
DECLARE @Where varchar(MAX)
DECLARE @Select varchar(MAX)
DECLARE @GroupBy varchar(MAX)
DECLARE @ProjTypeCur int
DECLARE @TotalId int

SET @ProjTypeCur=1
SET @ShowAll=0
SET @ShowTerm=1
SET @ShowCurr=2

SET @BranchId =ISNULL(@BranchId,'')
SET @SiteId =ISNULL(@SiteId,'')
SET @FleetId =ISNULL(@FleetId,'')
SET @EqpPlanId =ISNULL(@EqpPlanId,'')
SET @ModelId =ISNULL(@ModelId,'') 
SET @Regionid =ISNULL(@Regionid,'') 
SET @DivisionId =ISNULL(@DivisionId,'') 
SET @EqpCriticalityId =ISNULL(@EqpCriticalityId,'') 
SET @EqpClassid =ISNULL(@EqpClassid,'') 
SET @EqpGroupId  =ISNULL(@EqpGroupId,'') 
SET @EqpCategoryId =ISNULL(@EqpCategoryId,'') 
SET @CostCentreId =ISNULL(@CostCentreId,'') 
SET @CostResponsibilityId =ISNULL(@CostResponsibilityId,'') 
SET @IndustryGroupId =ISNULL(@IndustryGroupId,'') 
SET @EquipmentYear=ISNULL(@EquipmentYear,'') 
SET @ManufacturerId =ISNULL(@ManufacturerId,'') 
SET @ProjectId =ISNULL(@ProjectId,'') 
SET @ProjectCustomerId =ISNULL(@ProjectCustomerId,'') 
SET @HireStatusId =ISNULL(@HireStatusId,'') 


/*MIN(ISNULL(TRU.Override_Start_Usage,TRU.Start_Usage)) AS StartUsage, 
MIN(ISNULL(TRU.Override_End_Usage,TRU.End_Usage)) AS EndUsage,
SUM(ISNULL(TRU.Override_End_Usage,TRU.End_Usage)-
ISNULL(TRU.Override_Start_Usage,TRU.Start_Usage)) AS Usage,
SUM(ISNULL(TRC.Override_Cost,TRC.Calc_Cost))/
NULLIF(SUM(ISNULL(TRU.Override_End_Usage,TRU.End_Usage)-
ISNULL(TRU.Override_Start_Usage,TRU.Start_Usage)),0)
AS EffectiveRate
INNER JOIN
PH_TRANSACTION_USAGE TRU 
	ON TRC.PH_Tran_Header_Id = TRU.PH_Tran_Header_Id AND TRC.QUOM_Id=TRU.QUOM_Id
*/

SET @From='
FROM
tblFinancialPeriods FP
	INNER JOIN
PH_TRANSACTION_HEADER TRH 
	ON FP.FinancialPeriodId=TRH.Financial_Period_id
	INNER JOIN
PH_TRANSACTION_COST TRC 
	ON TRH.PH_Tran_Header_Id = TRC.PH_Tran_Header_Id 
	INNER JOIN
PH_TRANSACTION_PROJECT TRP 
	ON TRH.PH_Tran_Header_Id = TRP.PH_Tran_Header_Id
	INNER JOIN
PH_EQP_PLANT_HIRE EPH
	ON TRH.Eqp_Plant_Hire_Id=EPH.Eqp_Plant_Hire_Id
	INNER JOIN
PH_PROJECT P
	ON TRP.PH_Project_Id=P.Project_Id
	INNER JOIN
EQUIPMENT_HIERARCHY_V EH
	ON EPH.Eqp_Plan_Id=EH.EqpPlanId
	INNER JOIN 
HIRE_STATUS HS
	ON EPH.Hire_Status_Id=HS.Hire_Status_Id
	INNER JOIN
COST_EXPENSE CE 
	ON TRC.Cost_Expense_Id = CE.Cost_Expense_ID
	LEFT OUTER JOIN
COST_RESPONSIBILITY CR
	ON EH.Cost_Responsibility_Id=CR.Cost_Responsibility_Id
	LEFT OUTER JOIN
COST_CENTRE CC
	ON TRC.Cost_Centre_Id=CC.Cost_Centre_Id
	LEFT OUTER JOIN
tblCustomers CU
	ON P.Customer_Id=CU.CustomerId
	LEFT OUTER JOIN
PH_TRANSACTION_USAGE TRU 
	ON TRH.PH_Tran_Header_Id = TRU.PH_Tran_Header_Id AND EH.QUOMId=TRU.QUOM_Id 
	'

SET @Where='
WHERE EH.Projection_Type_Id='+CAST(@ProjTypeCur AS varchar)+' AND 
FP.CalenderPeriod>='+CAST(@StartDate AS varchar)+' AND FP.CalenderPeriod<='+CAST(@EndDate AS varchar)

IF @BranchId<>'' SET @Where=@Where+' AND EH.BranchId IN('+@BranchId+')'
IF @SiteId<>'' SET @Where=@Where+' AND EH.SiteId IN('+@SiteId+')'
IF @FleetId<>'' SET @Where=@Where+' AND EH.FleetId IN('+@FleetId+')'
IF @EqpPlanId<>'' SET @Where=@Where+' AND EH.EqpPlanId IN('+@EqpPlanId+')'
IF @ModelId<>'' SET @Where=@Where+' AND EH.ModelId IN('+@ModelId+')' 
IF @Regionid<>'' SET @Where=@Where+' AND EH.Region_Id IN('+@Regionid+')' 
IF @DivisionId<>'' SET @Where=@Where+' AND EH.Division_Id IN('+@DivisionId+')' 
IF @EqpCriticalityId<>'' SET @Where=@Where+' AND EH.Eqp_Criticality_Id IN('+@EqpCriticalityId+')' 
IF @EqpClassId<>'' SET @Where=@Where+' AND EH.Eqp_Class_Id IN('+@EqpClassid+')' 
IF @EqpGroupId <>'' SET @Where=@Where+' AND EH.Equipment_Group_Id IN('+@EqpGroupId+')' 
IF @EqpCategoryId<>'' SET @Where=@Where+' AND EH.Eqp_Category_Id IN('+@EqpCategoryId+')' 
IF @CostCentreId<>'' SET @Where=@Where+' AND TRC.Cost_Centre_Id IN('+@CostCentreId+')' 
IF @CostResponsibilityId<>'' SET @Where=@Where+' AND EH.Cost_Responsibility_Id IN('+@CostResponsibilityId+')' 
IF @IndustryGroupId<>'' SET @Where=@Where+' AND EH.IndGrpId IN('+@IndustryGroupId+')' 
IF @EquipmentYear<>'' SET @Where=@Where+' AND EH.Eqp_Year IN('+@EquipmentYear+')' 
IF @ManufacturerId<>'' SET @Where=@Where+' AND EH.ManufacturerId IN('+@ManufacturerId+')' 
IF @ProjectId<>'' SET @Where=@Where+' AND TRP.PH_Project_Id IN('+@ProjectId+')' 
IF @ProjectCustomerId<>'' SET @Where=@Where+' AND P.Customer_Id IN('+@ProjectCustomerId+')' 
IF @HireStatusId<>'' SET @Where=@Where+' AND EPH.Hire_Status_Id IN('+@HireStatusId+')' 
IF @ShowTerminated=1 SET @Where=@Where+' AND EH.Eqp_Terminated=1'
IF @ShowTerminated=2 SET @Where=@Where+' AND EH.Eqp_Terminated=0'

SET @Select='SELECT EPH.Eqp_Plant_Hire_Id,EH.EqpPlan,EH.EqpProjId,EH.QUOMId,
SUM(TRP.Pct_Project*(CASE WHEN TRC.QUOM_Id>0 THEN 0 ELSE TRC.Calc_Cost END)/100.00) AS MonthlyCharge,
SUM(TRP.Pct_Project*(CASE WHEN TRC.QUOM_Id>0 THEN TRC.Calc_Cost ELSE 0 END)/100.00) AS VariableCharge,

MAX(CASE WHEN TRC.Override_Cost IS NULL THEN 0 ELSE 1 END) AS OverrideC,
SUM(TRP.Pct_Project*ISNULL(TRC.Override_Cost,TRC.Calc_Cost)/100.00) AS Total,
MIN(ISNULL(TRU.Override_Start_Usage,TRU.Start_Usage)) AS StartUsage, 
MAX(ISNULL(TRU.Override_End_Usage,TRU.End_Usage)) AS EndUsage,
CE.Cost_Expense_Id,CE.Cost_Expense_Desc,
'+
CASE @AnalyseBy 
WHEN 'BRAN' THEN 'EH.BranchId AS AnalyseId,''Branch: ''+EH.Branch AS Analyse'
WHEN 'SITE' THEN 'EH.SiteId AS AnalyseId,''Site: ''+EH.Site AS Analyse'
WHEN 'FLEE' THEN 'EH.FleetId AS AnalyseId,''Fleet: ''+EH.Fleet AS Analyse'
WHEN 'EQPL' THEN 'EH.EqpPlanId AS AnalyseId,''Equipment: ''+EH.EqpPlan AS Analyse'
WHEN 'MFAC' THEN 'EH.ManufacturerId AS AnalyseId,''Manufacturer: ''+EH.ManufacturerDesc AS Analyse'
WHEN 'MODL' THEN 'EH.ModelId AS AnalyseId,''Model: ''+EH.Model AS Analyse'
WHEN 'EGRP' THEN 'ISNULL(EH.Equipment_Group_Id,0) AS AnalyseId,''Equipment Group: ''+ISNULL(EH.Equipment_Group_Desc,'''') AS Analyse'
WHEN 'ECLS' THEN 'ISNULL(EH.Eqp_Class_Id,0) AS AnalyseId,''Equipment Class: ''+ISNULL(EH.Eqp_Class_Desc,'''') AS Analyse'
WHEN 'REGN' THEN 'ISNULL(EH.Region_Id,0) AS AnalyseId,''Region: ''+ISNULL(EH.Region_Desc,'''') AS Analyse'
WHEN 'DEVI' THEN 'ISNULL(EH.Division_Id,0) AS AnalyseId,''Division: ''+ISNULL(EH.Division_Desc,'''') AS Analyse'
WHEN 'CRIT' THEN 'ISNULL(EH.Eqp_Criticality_Id,0) AS AnalyseId,''Equipment Criticality: ''+ISNULL(EH.Eqp_Criticality_Desc,'''') AS Analyse'
WHEN 'CTGR' THEN 'ISNULL(EH.Eqp_Category_Id,0) AS AnalyseId,''Equipment Category: ''+ISNULL(Eqp_Category_Desc,'''') AS Analyse'
WHEN 'IDGR' THEN 'ISNULL(EH.IndGrpId,0) AS AnalyseId,''Industry Group: ''+ISNULL(EH.IndGrpName,'''') AS Analyse'
WHEN 'CRSP' THEN 'ISNULL(EH.Cost_Responsibility_Id,0) AS AnalyseId,''Cost Responsibility: ''+ISNULL(CR.Cost_Responsibility_Desc,'''') AS Analyse'
WHEN 'CCTR' THEN 'ISNULL(CC.Cost_Centre_Id,0) AS AnalyseId,''Cost Centre: ''+ISNULL(CC.Cost_Centre_Desc,'''') AS Analyse'
WHEN 'EQYR' THEN 'ISNULL(EH.Eqp_Year,0) AS AnalyseId,''Equipment Year: ''+ISNULL(CAST(EH.Eqp_Year AS varchar),'''') AS Analyse'
WHEN 'PRNM' THEN 'ISNULL(P.Project_Id,0) AS AnalyseId,''Project Name: ''+ISNULL(P.Project_Name,'''') AS Analyse'
WHEN 'PRCT' THEN 'ISNULL(CU.CustomerId,0) AS AnalyseId,''Project Customer: ''+ISNULL(CU.Customer,'''') AS Analyse'
WHEN 'PRHS' THEN 'ISNULL(HS.Hire_Status_Id,0) AS AnalyseId,''Hire Status: ''+ISNULL(HS.Status,'''') AS Analyse'
WHEN 'TERM' THEN 'CAST(EH.Eqp_Terminated AS int) AS AnalyseId,
CASE EH.Eqp_Terminated WHEN 1 THEN ''Terminated Equipment'' ELSE ''Current Equipment'' END AS Analyse'

END

			
SET @GroupBy='
GROUP BY EPH.Eqp_Plant_Hire_Id,EH.EqpPlan,EH.EqpProjId,EH.QUOMId,CE.Cost_Expense_Id,CE.Cost_Expense_Desc,'+
	CASE @AnalyseBy 
	WHEN 'BRAN' THEN 'EH.BranchId,EH.Branch'
	WHEN 'SITE' THEN 'EH.SiteId,EH.Site'
	WHEN 'FLEE' THEN 'EH.FleetId,EH.Fleet'
	WHEN 'EQPL' THEN 'EH.EqpPlanId,EH.EqpPlan'
	WHEN 'MFAC' THEN 'EH.ManufacturerId,EH.ManufacturerDesc'
	WHEN 'MODL' THEN 'EH.ModelId,EH.Model'
	WHEN 'EGRP' THEN 'ISNULL(EH.Equipment_Group_Id,0),ISNULL(EH.Equipment_Group_Desc,'''')'
	WHEN 'ECLS' THEN 'ISNULL(EH.Eqp_Class_Id,0),ISNULL(EH.Eqp_Class_Desc,'''')'
	WHEN 'REGN' THEN 'ISNULL(EH.Region_Id,0),ISNULL(EH.Region_Desc,'''')'
	WHEN 'DEVI' THEN 'ISNULL(EH.Division_Id,0),ISNULL(EH.Division_Desc,'''')'
	WHEN 'CRIT' THEN 'ISNULL(EH.Eqp_Criticality_Id,0),ISNULL(EH.Eqp_Criticality_Desc,'''')'
	WHEN 'CTGR' THEN 'ISNULL(EH.Eqp_Category_Id,0),ISNULL(Eqp_Category_Desc,'''')'
	WHEN 'IDGR' THEN 'ISNULL(EH.IndGrpId,0),ISNULL(EH.IndGrpName,'''')'
	/*VV #2573*/
	WHEN 'CRSP' THEN 'ISNULL(EH.Cost_Responsibility_Id,0),ISNULL(CR.Cost_Responsibility_Desc,'''')'
	WHEN 'CCTR' THEN 'ISNULL(CC.Cost_Centre_Id,0),ISNULL(CC.Cost_Centre_Desc,'''')'
	WHEN 'EQYR' THEN 'ISNULL(EH.Eqp_Year,0),ISNULL(CAST(EH.Eqp_Year AS varchar),'''')'
	WHEN 'PRNM' THEN 'ISNULL(P.Project_Id,0),ISNULL(P.Project_Name,'''')'
	WHEN 'PRCT' THEN 'ISNULL(CU.CustomerId,0),ISNULL(CU.Customer,'''')'
	WHEN 'PRHS' THEN 'ISNULL(HS.Hire_Status_Id,0),ISNULL(HS.Status,'''')'
	WHEN 'TERM' THEN 'CAST(EH.Eqp_Terminated AS int),
	CASE EH.Eqp_Terminated WHEN 1 THEN ''Terminated Equipment'' ELSE ''Current Equipment'' END'

	END	

--print @Select+@From+@Where+@GroupBy return

CREATE TABLE #z_Analyse(
Eqp_Plant_Hire_Id int,EqpPlan varchar(100),EqpProjId int,QUOMId int,
MonthlyCharge float,VariableCharge float,OverrideC int,Total float,
StartUsage float,EndUsage float,Cost_Expense_Id int,
Cost_Expense_Desc varchar(100) COLLATE DATABASE_DEFAULT,
AnalyseId int,Analyse varchar(100) COLLATE DATABASE_DEFAULT
PRIMARY KEY(Eqp_Plant_Hire_Id,Cost_Expense_Id,AnalyseId))
INSERT INTO #z_Analyse
EXEC(@Select+@From+@Where+@GroupBy)

--DECLARE @CountEqp int

SELECT @TotalId=MAX(Eqp_Plant_Hire_Id)/*,@CountEqp=Count(Eqp_Plant_Hire_Id)*/ FROM #z_Analyse

--In case MAX(Eqp_Plant_Hire_Id)=0

SET @TotalId=@TotalId+10

CREATE TABLE #z_AnalyseSummary(
AnalyseId int,Analyse varchar(100),Eqp_Plant_Hire_Id int,EqpPlan varchar(100)  collate database_default,
MonthlyCharge float,VariableCharge float,StartUsage float,EndUsage float,
OverrideC int,TotalInvoice float,QUOMId int)

INSERT INTO #z_AnalyseSummary(
AnalyseId,Analyse,Eqp_Plant_Hire_Id,EqpPlan,MonthlyCharge,VariableCharge,StartUsage,
EndUsage,OverrideC,TotalInvoice,QUOMId)
SELECT AnalyseId,Analyse,Eqp_Plant_Hire_Id,EqpPlan,
SUM(MonthlyCharge) AS MonthlyCharge,
SUM(VariableCharge) AS VariableRate,
MIN(StartUsage) AS StartUsage,MAX(EndUsage) AS EndUsage,
MAX(OverrideC) AS OverrideC,
SUM(Total) AS TotalInvoice,QUOMId
FROM #z_Analyse
GROUP BY AnalyseId,Analyse,Eqp_Plant_Hire_Id,EqpPlan,QUOMId



INSERT INTO #z_AnalyseSummary(AnalyseId,Analyse,Eqp_Plant_Hire_Id,EqpPlan,MonthlyCharge,VariableCharge,StartUsage,
EndUsage,OverrideC,TotalInvoice)
SELECT AnalyseId,Analyse,@TotalId+AnalyseId AS Eqp_Plant_Hire_Id,
'Total' AS EqpPlan,NULL AS MonthlyCharge,NULL AS VariableCharge,NULL AS StartUsage,
NULL AS EndUsage,NULL AS OverrideC,SUM(Total) AS TotalInvoice
FROM #z_Analyse
GROUP BY AnalyseId,Analyse

CREATE TABLE #z_List2(ListId int IDENTITY(1,1),Eqp_Plant_Hire_Id int,AnalyseId int,
EqpPlan varchar(100) collate database_default)

INSERT INTO #z_List2(AnalyseId,Eqp_Plant_Hire_Id,EqpPlan)
SELECT DISTINCT AnalyseId,Eqp_Plant_Hire_Id,EqpPlan FROM #z_Analyse ORDER BY EqpPlan

INSERT INTO #z_List2(AnalyseId,Eqp_Plant_Hire_Id,EqpPlan)
SELECT DISTINCT AnalyseId,@TotalId+AnalyseId AS Eqp_Plant_Hire_Id,'Total' As EqpPlan FROM #z_Analyse


CREATE TABLE #z_List(ListId int IDENTITY(9,1),Cost_Expense_Id int,Cost_Expense_Desc varchar(100)  collate database_default)
INSERT INTO #z_List(Cost_Expense_Id,Cost_Expense_Desc)
SELECT DISTINCT Cost_Expense_Id,Cost_Expense_Desc FROM #z_Analyse ORDER BY Cost_Expense_Desc



/*SELECT AnalyseId,Analyse,Eqp_Plant_Hire_Id,EqpPlan,
SUM(MonthlyCharge) AS MonthlyCharge,
SUM(VariableCharge)/NULLIF(MAX(EndUsage)-MIN(StartUsage),0) AS VariableRate,
MIN(StartUsage) AS StartUsage,MAX(EndUsage) AS EndUsage,MAX(EndUsage)-MIN(StartUsage) AS Usage,
MAX(OverrideC) AS OverrideC,
SUM(Total) AS TotalInvoice,SUM(Total)/NULLIF(MAX(EndUsage)-MIN(StartUsage),0) AS EffectiveRate
FROM #z_Analyse
GROUP BY AnalyseId,Analyse,Eqp_Plant_Hire_Id,EqpPlan
ORDER BY Analyse,EqpPlan*/

SELECT A.AnalyseId,A.Analyse,L.ListId AS Eqp_Plant_Hire_Id,
	--A.EqpPlan
	LEFT(A.EqpPlan,15) AS EqpPlan,
	CAST(CASE A.OverrideC WHEN 1 THEN 'O/R' ELSE NULL END AS varchar) AS OverrideC,
	QUOMS.UOMShortDesc AS QUOM
	--into z_Output1
FROM 
	#z_List2 L
		INNER JOIN
	#z_AnalyseSummary A
		ON L.AnalyseId=A.AnalyseId AND L.Eqp_Plant_Hire_Id=A.Eqp_Plant_Hire_Id
		LEFT OUTER JOIN
	tblQUOMs QUOMS
		ON  A.QUOMID=QUOMS.QUOMId
	--	LEFT OUTER JOIN
	--tblUOMs US
	--	ON QUOMS.UOMId=US.UOMId
	--	LEFT OUTER JOIN
	--tblQualifiers QS
	--	ON QUOMS.QualifierId=QS.QualifierId

/*SELECT AnalyseId,Eqp_Plant_Hire_Id, ColId,ColDesc,Total
into z_Output2
from
(*/

SELECT A.AnalyseId,L.ListId AS Eqp_Plant_Hire_Id, 1 AS ColId,'Start Usage' AS ColDesc,
A.StartUsage AS Total
FROM
#z_List2 L
	INNER JOIN
#z_AnalyseSummary A
	ON L.AnalyseId=A.AnalyseId AND L.Eqp_Plant_Hire_Id=A.Eqp_Plant_Hire_Id
UNION ALL
SELECT A.AnalyseId,L.ListId AS Eqp_Plant_Hire_Id, 2 AS ColId,'End Usage' AS ColDesc,
A.EndUsage AS Total
FROM 
#z_List2 L
	INNER JOIN
#z_AnalyseSummary A
	ON L.AnalyseId=A.AnalyseId AND L.Eqp_Plant_Hire_Id=A.Eqp_Plant_Hire_Id
UNION ALL
SELECT A.AnalyseId,L.ListId AS Eqp_Plant_Hire_Id, 3 AS ColId,'Usage' AS ColDesc,
A.EndUsage-A.StartUsage AS Total
FROM 
#z_List2 L
	INNER JOIN
#z_AnalyseSummary A
	ON L.AnalyseId=A.AnalyseId AND L.Eqp_Plant_Hire_Id=A.Eqp_Plant_Hire_Id
UNION ALL
SELECT A.AnalyseId,L.ListId AS Eqp_Plant_Hire_Id, 4 AS ColId,'Monthly Charge' AS ColDesc,A.MonthlyCharge AS Total
FROM 
#z_List2 L
	INNER JOIN
#z_AnalyseSummary A
	ON L.AnalyseId=A.AnalyseId AND L.Eqp_Plant_Hire_Id=A.Eqp_Plant_Hire_Id
UNION ALL
SELECT A.AnalyseId,L.ListId AS Eqp_Plant_Hire_Id, 5 AS ColId,'Variable Rate' AS ColDesc,
A.VariableCharge/NULLIF(A.EndUsage-A.StartUsage,0) AS Total
FROM 
#z_List2 L
	INNER JOIN
#z_AnalyseSummary A
	ON L.AnalyseId=A.AnalyseId AND L.Eqp_Plant_Hire_Id=A.Eqp_Plant_Hire_Id
/*UNION ALL
SELECT AnalyseId,Eqp_Plant_Hire_Id, 6 AS ColId,'Over-ride' AS ColDesc,
OverrideC AS Total
FROM #z_AnalyseSummary*/
UNION ALL
SELECT A.AnalyseId,L.ListId AS Eqp_Plant_Hire_Id, 7 AS ColId,'Total Invoice' AS ColDesc,
A.TotalInvoice AS Total
FROM 
#z_List2 L
	INNER JOIN
#z_AnalyseSummary A
	ON L.AnalyseId=A.AnalyseId AND L.Eqp_Plant_Hire_Id=A.Eqp_Plant_Hire_Id
UNION ALL
SELECT A.AnalyseId,L.ListId AS Eqp_Plant_Hire_Id, 8 AS ColId,'Effective Rate' AS ColDesc,
A.TotalInvoice/NULLIF(A.EndUsage-A.StartUsage,0) AS Total
FROM 
#z_List2 L
	INNER JOIN
#z_AnalyseSummary A
	ON L.AnalyseId=A.AnalyseId AND L.Eqp_Plant_Hire_Id=A.Eqp_Plant_Hire_Id
UNION ALL
SELECT A.AnalyseId,L2.ListId AS Eqp_Plant_Hire_Id,L.ListId AS ColId,A.Cost_Expense_Desc AS ColDesc,A.Total
FROM 
#z_List2 L2
	INNER JOIN
#z_Analyse A 	
	ON L2.AnalyseId=A.AnalyseId AND L2.Eqp_Plant_Hire_Id=A.Eqp_Plant_Hire_Id
	INNER JOIN
#z_List L 	
	ON A.Cost_Expense_Id=L.Cost_Expense_Id
UNION ALL
SELECT C.AnalyseId,L2.ListId AS Eqp_Plant_Hire_Id,C.ColId,C.ColDesc,
C.Total
FROM
#z_List2 L2
	INNER JOIN
(SELECT A.AnalyseId,@TotalId+AnalyseId AS Eqp_Plant_Hire_Id,L.ListId AS ColId,A.Cost_Expense_Desc AS ColDesc,
SUM(A.Total) AS Total
FROM 
#z_Analyse A 	
	INNER JOIN 
#z_List L 
	ON A.Cost_Expense_Id=L.Cost_Expense_Id
GROUP BY A.AnalyseId,L.ListId,A.Cost_Expense_Desc) C
	ON L2.AnalyseId=C.AnalyseId AND L2.Eqp_Plant_Hire_Id=C.Eqp_Plant_Hire_Id
	



DROP TABLE #z_Analyse,#z_AnalyseSummary,#z_List,#z_List2
/*drop table z_Analyse
select * into z_Analyse from #z_Analyse*/

GO


if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SCHEDULING_TASK_TO_PROJ_TASK_P]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[SCHEDULING_TASK_TO_PROJ_TASK_P]
GO

create PROCEDURE SCHEDULING_TASK_TO_PROJ_TASK_P
/******************************************************************************
	
	Name: SCHEDULING_TASK_TO_PROJ_TASK_P

	Called By: 

	Desc: 

	Auth: 	Sergey Ivanov
	Date: 	20 Sep 2005
*******************************************************************************
		Change History
*******************************************************************************
Date:		Author:		Description:
--------	--------	----------------------------------------
14 Nov 06	SI		Changed to support date based tasks
03 Mar 06	SI		Fixed the check if the Scheduling Task is changed
21 Dec 05	SI		Removed usp_Plan_Run_Calc_Task because of long locks and deadlocks
13 Dec 05	SI		Added usp_Plan_Run_Calc_Task
07 Sep 05	SI		Set Ext_Last_Occ, Ext_Last_Occ_Date
25 Jun 07	KN		Updated External Identifier and External Set Next Occ
19 Jul 07	KN		IF NEXT OCC IS SET IN A DEPENDENCY GROUP, RESET ALL THE OTHER TASK IN THE GROUP TO SYSTEM CALCULATED
21 Feb 08	AL		Changed PlanDateLocked to ReviewStatusID
18 Apr 08	VV		Added @ProjTaskIdMany, set external identifier to NUll if the scheduling task is unlinked
17 Oct 08	KN		Removed setting Ext_Last_Occ, Ext_Last_Occ_Date
16 Jan 08	VV		CR Update next Occ only in 1 task in the scheduling group.
					Update task with the earliest Next and the earliest counter
18 May 09	VV		CR8108: Frequency is not updated in the strategy task if it changes
27 Sep 11	VV		#2518: Review status shall not change if Next occ are NULL
					and strategy task was system calculated
*******************************************************************************/
	/* Param List */

	@ProjTaskId int = 0,
	@ProjTaskIdMany varchar(max)=''

AS

SET @ProjTaskId=ISNULL(@ProjTaskId,0)
SET @ProjTaskIdMany=ISNULL(@ProjTaskIdMany,'')

CREATE TABLE #z_ProjTasksSch(ProjTaskId int PRIMARY KEY(ProjTaskId))

IF @ProjTaskId>0 SET @ProjTaskIdMany=CAST(@ProjTaskId AS varchar)
	
IF @ProjTaskIdMany<>''
BEGIN
	INSERT INTO #z_ProjTasksSch(ProjTaskId)
	SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@ProjTaskIdMany)
END


-- Unlink if QUOM doesn't match
UPDATE prtsk
SET prtsk.SchedulingTaskId = NULL,prtsk.ExternalIdentifier=NULL
--select *
FROM tblProjTasks prtsk
	LEFT JOIN SCHEDULING_TASK st ON st.SchedulingTaskId=prtsk.SchedulingTaskId
WHERE st.SchedulingTaskId IS NOT NULL AND ISNULL(prtsk.UsageQUOMId,0) <> ISNULL(st.QUOMId,0)

/*VV 18 Apr 08 AND (prtsk.ProjTaskId=@ProjTaskId OR @ProjTaskId=0)*/
AND (@ProjTaskIdMany='' OR prtsk.ProjTaskId IN(SELECT ProjTaskId FROM #z_ProjTasksSch))

-- Unlink if CC doesn't match
UPDATE prtsk
SET prtsk.SchedulingTaskId = NULL,prtsk.ExternalIdentifier=NULL
--select *
FROM tblProjTasks prtsk
	LEFT JOIN SCHEDULING_TASK st ON st.SchedulingTaskId=prtsk.SchedulingTaskId
WHERE st.SchedulingTaskId IS NOT NULL AND prtsk.ComponentCodeId<>st.ComponentCodeId

AND (@ProjTaskIdMany='' OR prtsk.ProjTaskId IN(SELECT ProjTaskId FROM #z_ProjTasksSch))
--VV 18 Apr 08 AND (prtsk.ProjTaskId=@ProjTaskId OR @ProjTaskId=0)



UPDATE pto
SET	Frequency=st.Interval
FROM tblProjTasks prtsk
	LEFT JOIN tblEqpProjs epr ON epr.EqpProjId=prtsk.EqpProjId
	LEFT JOIN SCHEDULING_TASK st ON st.SchedulingTaskId=prtsk.SchedulingTaskId
	LEFT JOIN tblProjTaskOpts pto ON prtsk.ProjTaskId=pto.ProjTaskId /* VV CR8108 AND pto.PlannedOption<>0*/
WHERE st.SchedulingTaskId IS NOT NULL 
	AND prtsk.Planning_Task=1
	AND epr.Projection_Type_ID=1 --Current
	AND 	ISNULL(st.Interval,0)<>ISNULL(pto.Frequency,0)
	AND st.ChangedInAMT=0
	AND (@ProjTaskIdMany='' OR prtsk.ProjTaskId IN(SELECT ProjTaskId FROM #z_ProjTasksSch))
	--VV 18 Apr 08 AND (prtsk.ProjTaskId=@ProjTaskId OR @ProjTaskId=0)

UPDATE prtsk
SET	Frequency=pto.Frequency,/*VV CR8108 pto_g.Frequency,*/
	ExternalIdentifier = ST.ExternalIdentifier,
	NextOcc=
			CASE 
				WHEN st.NextOccurrence IS NULL AND st.NextOccDate IS NULL THEN prtsk.NextOcc 
				WHEN st.NextOccDate IS NOT NULL THEN dbo.GET_USAGE_FROM_DATE_NO_CHECK_TERM_F(prtsk.EqpProjId, prtsk.UsageQUOMId, st.NextOccDate) 
				ELSE st.NextOccurrence 
			END,
			--ISNULL(st.NextOccurrence,prtsk.NextOcc), -- do not change if not set
	NextOccDate=
			CASE 
				WHEN st.NextOccurrence IS NULL AND st.NextOccDate IS NULL THEN prtsk.NextOccDate 
				WHEN st.NextOccDate IS NOT NULL THEN st.NextOccDate
				ELSE dbo.GET_DATE_FROM_USAGE_EQP_F(prtsk.EqpProjId, prtsk.UsageQUOMId, st.NextOccurrence, 0, NULL, NULL, NULL, NULL)
			END,
	ReviewStatusID=CASE WHEN st.NextOccurrence IS NULL AND st.NextOccDate IS NULL /*VV #2518*/AND PlanUseCalc=0 THEN 1 ELSE ReviewStatusID END,
	ReviewUserID=CASE WHEN st.NextOccurrence IS NULL AND st.NextOccDate IS NULL /*VV #2518*/AND PlanUseCalc=0 THEN NULL ELSE ReviewUserID END,
	ReviewDate=CASE WHEN st.NextOccurrence IS NULL AND st.NextOccDate IS NULL /*VV #2518*/AND PlanUseCalc=0 THEN NULL ELSE ReviewDate END, 

	PlanUseCalc=CASE WHEN st.NextOccurrence IS NULL AND st.NextOccDate IS NULL THEN 1 ELSE 0 END,
	PlanStatus=CASE WHEN st.NextOccurrence IS NULL AND st.NextOccDate IS NULL THEN 0 WHEN st.NextOccDate IS NOT NULL THEN 2 ELSE 1 END
FROM tblProjTasks prtsk
	LEFT JOIN tblEqpProjs epr ON epr.EqpProjId=prtsk.EqpProjId
	LEFT JOIN SCHEDULING_TASK st ON st.SchedulingTaskId=prtsk.SchedulingTaskId
	LEFT JOIN tblProjTaskOpts pto ON prtsk.ProjTaskId=pto.ProjTaskId /*VV CR8108 AND pto.PlannedOption<>0*/

	/*VV CR8108 LEFT JOIN ( 	SELECT ProjTaskId, sum(Frequency/100*Probability) as Frequency
				FROM tblProjTaskOpts
				GROUP BY ProjTaskId
		) pto_g ON pto_g.ProjTaskId=prtsk.ProjTaskId*/

WHERE st.SchedulingTaskId IS NOT NULL 
	AND prtsk.Planning_Task=1
	AND epr.Projection_Type_ID=1 --Current
	AND (	ISNULL(st.Interval,0)<>prtsk.Frequency/*ISNULL(pto.Frequency,0)*/
		OR (ISNULL(st.NextOccurrence,0)<>ISNULL(prtsk.NextOcc,0) AND PlanUseCalc=0 AND PlanStatus = 1)
		OR (ISNULL(st.NextOccDate,'1900-01-01')<>ISNULL(prtsk.NextOccDate,'1900-01-01') AND PlanUseCalc=0 AND PlanStatus = 2) 
		OR
		PlanUseCalc <> CASE WHEN st.NextOccurrence IS NULL AND st.NextOccDate IS NULL THEN 1 ELSE 0 END
		OR
		PlanStatus <> CASE WHEN st.NextOccurrence IS NULL AND st.NextOccDate IS NULL THEN 0 WHEN st.NextOccDate IS NOT NULL THEN 2 ELSE 1 END
		OR
		--AL: 21/02/08
		--PlanDateLocked <> CASE WHEN st.NextOccurrence IS NULL AND st.NextOccDate IS NULL THEN 0 ELSE PlanDateLocked END
		ReviewStatusID <> CASE WHEN st.NextOccurrence IS NULL AND st.NextOccDate IS NULL THEN 1 ELSE ReviewStatusID END
	    )
	AND st.ChangedInAMT=0
	AND (@ProjTaskIdMany='' OR prtsk.ProjTaskId IN(SELECT ProjTaskId FROM #z_ProjTasksSch))
	--VV 18 Apr 08 AND (prtsk.ProjTaskId=@ProjTaskId OR @ProjTaskId=0)

--select * into z_ProjTasksSch from #z_ProjTasksSch return

-- IF NEXT OCC IS SET IN A DEPENDENCY GROUP, RESET ALL THE OTHER TASK IN THE GROUP TO SYSTEM CALCULATED.
IF EXISTS ( 
			SELECT ProjTaskId FROM tblProjTasks PT
				INNER JOIN dbo.PROJ_TASK_SCHEDULING_GROUP AS PTSG ON PTSG.Scheduling_Group_Id = PT.Scheduling_Group_Id
			 WHERE (pt.ProjTaskId IN(SELECT ProjTaskId FROM #z_ProjTasksSch))
				--VV 18 Apr 08 PT.ProjTaskId = @ProjTaskId 
				AND PT.Scheduling_Group_Id IS NOT NULL AND  PTSG.Scheduling_Group_Type = 2
					AND PT.PlanUseCalc = 0
		)
BEGIN

	CREATE TABLE #z_T(EqpProjId int,Scheduling_Group_Id int,Scheduling_Group_Counter int PRIMARY KEY(EqpProjId,Scheduling_Group_Id))
	
	INSERT INTO #z_T(EqpProjId,Scheduling_Group_Id,Scheduling_Group_Counter)
	SELECT PT.EqpProjId,PT.Scheduling_Group_Id,MIN(PT.Scheduling_Group_Counter) AS Scheduling_Group_Counter
	FROM
	#z_ProjTasksSch PTS
		INNER JOIN
	tblProjTasks PT
		ON PTS.ProjTaskId=PT.ProjTaskId
		INNER JOIN
	(SELECT PT.EqpProjId,PT.Scheduling_Group_Id,MIN(PT.NextOcc) AS MinNextOcc
	FROM 
	#z_ProjTasksSch PTS
		INNER JOIN
	tblProjTasks PT
		ON PTS.ProjTaskId=PT.ProjTaskId
		INNER JOIN 
	PROJ_TASK_SCHEDULING_GROUP PTSG 
		ON PT.Scheduling_Group_Id=PTSG.Scheduling_Group_Id 
	WHERE PTSG.Scheduling_Group_Type = 2 AND PT.PlanUseCalc = 0
	GROUP BY PT.EqpProjId,PT.Scheduling_Group_Id) A
		ON PT.EqpProjId=A.EqpProjId AND 
		   PT.Scheduling_Group_Id=A.Scheduling_Group_Id AND 
		   PT.NextOcc=A.MinNextOcc
	WHERE PT.PlanUseCalc = 0
	GROUP BY PT.EqpProjId,PT.Scheduling_Group_Id

	/*
	UPDATE	prtsk
		SET prtsk.PlanUseCalc = 1
	FROM	tblProjTasks prtsk
	INNER JOIN (
		SELECT DISTINCT PT.Scheduling_Group_Id, PT.EqpProjId
		FROM	tblProjTasks PT 
		WHERE	(PT.ProjTaskId IN(SELECT ProjTaskId FROM #z_ProjTasksSch))
		/* VV 18 Apr 08 PT.ProjTaskId = @ProjTaskId*/
	) ptsht ON ptsht.Scheduling_Group_Id = prtsk.Scheduling_Group_Id AND ptsht.EqpProjId = prtsk.EqpProjId
	WHERE (prtsk.ProjTaskId NOT IN(SELECT ProjTaskId FROM #z_ProjTasksSch))
	/*VV 18 Apr 08 prtsk.ProjTaskId <> @ProjTaskId*/
	*/
	UPDATE PT SET 
	PT.PlanUseCalc = CASE WHEN PT.Scheduling_Group_Counter=T.Scheduling_Group_Counter THEN 0 ELSE 1 END
	FROM 
	tblProjTasks PT
		INNER JOIN
	#z_T T
		ON PT.EqpProjId=T.EqpProjId AND PT.Scheduling_Group_Id=T.Scheduling_Group_Id

END

/*
DECLARE Cur CURSOR FOR 
	SELECT ProjTaskId FROM #UPDATED_TASK
OPEN Cur
FETCH NEXT FROM Cur INTO @ProjTaskId
WHILE @@FETCH_STATUS = 0
BEGIN
	EXEC usp_Plan_Run_Calc_Task @piProjTaskId=@ProjTaskId
	FETCH NEXT FROM Cur INTO @ProjTaskId
END
CLOSE Cur
DEALLOCATE Cur
*/

GO


if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ADVANCED_PLANNING_FROM_WO_SETTLEMENT_P]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[ADVANCED_PLANNING_FROM_WO_SETTLEMENT_P]
GO

create PROCEDURE [dbo].[ADVANCED_PLANNING_FROM_WO_SETTLEMENT_P]
/******************************************************************************
	
	Name: ADVANCED_PLANNING_FROM_WO_SETTLEMENT_P


	Desc: For each Advanced Planning Eqp set as UpdateAMTPlanning=True, do the following...						
						
						
STEP 1: Delete all YTS Events						
ACTION: Delete all existing YTS and Deferred Events						
CONSEQUENCE: All existing YTS Workorders are now set to OUTSTANDING						
						
STEP 2: Create new YTS Workorders (and Events)							
ACTION: 	If there is a YTS Event within +/- x hours, add the YTS Workorder to this Event; 
otherwise create a new YTS Event and add the YTS Workorder to it						
							
CONSEQUENCE: Every YTS WOS has a linked Workorder (NOTE: The Workorders may not all be YTS - 
eg. users may have set some to IP or COMP)	
					
STEP 3: Update Planning data of YTS Events						
ACTION: Update the Planning data (Planned Downtime, Planned Uptime) of each YTS Event from its linked 
YTS WOS's (use the minimum Downtime, maximum Uptime from the YTS WOS's)						
CONSEQUENCE: The Planning data (Planned Downtime, Planned Uptime) of each YTS Event matches its linked 
YTS WOS's (minimum Downtime, maximum Uptime from the YTS WOS's)	
					
Update planned hours of the primary DTA to the event planned duration. Update all non-primary DTAs 
planned hours to 0.						
	
VV: If UpdateAMTPlanning=true, flags UpdateAMTWorkordersFromWOS and CreateAMTWorkordersFromWOS 
shall be set to true

	Auth: Veronika Vasylyeva
	Date: 21 Jun 2010
*******************************************************************************
		Change History
*******************************************************************************
	Date:		Author:		Description:
	--------	--------	----------------------------------------
	  24 Jan 10	V Vasylyeva	#1144 set @Message='' 
	  27 Jan 11	V Vasylyeva #1163: Rules are: When create/Update the WO from the WOS then:
									Take details from the Workorder with the LATEST Start_Date 
									(Open Date) where the PURE WORKORDER number of the Workorder is 
									the same as the PARENT WORKORDER Pure_Workorder number.

									Where the Start Dates are the same, then take the workorder with the 
									HIGHEST workorder ID.
	10 Mar 11	V Vasylyeva	E450: Where the WOS planning status = "COMP" and the WO = "OUT"			
								  Then create a ZERO downtime event for the WO.	
	24 Mar 11	V Vasylyeva	E450: Use planned start time as actual down time for completed events,
								  If planned start time  > Current date time, 
								  set actual down time = current date/time
	 3 May 11	V Vasylyeva	#1666	Changed planned up/down times of events with wo merged
									Added WORK_ORDER_MERGE_P
`	21 Sep 11	V Vasylyeva	E634	Create Planning for complete workorders only								
*******************************************************************************/
	/* Param List */
	
 @SystemTaskId int=0,
 @LastModDate datetime=null

AS

DECLARE @Message varchar(max)
DECLARE @AdvPlanning int
DECLARE @EStatus_YTS int,@EStatus_D int,@WOSStatus_YTS int

/*VV E450*/
DECLARE @WOSStatus_C int,@PlanningStatusId int,@Event_Status_Id int,@EStatus_C int
DECLARE @AmtStartDate datetime

DECLARE @EventId int
DECLARE @TaskModeGT int
DECLARE @TaskId int
DECLARE @PlannedStartTime datetime
DECLARE @PlannedEndTime datetime 
DECLARE @EqpPlanId int
DECLARE @Description varchar(500)
DECLARE @Priority_ID int 
DECLARE @QUOMId int
DECLARE @TaskTypeId int
DECLARE @DTA_Id int
DECLARE @PlannedHours float
DECLARE @VarianceCauseId int,@ResponsibilityId int
DECLARE @StatusId int 
DECLARE @Work_Location_ID int 
DECLARE @Planned bit 
DECLARE @Break_Down bit 
DECLARE @Confirmed bit 
DECLARE @Event_Prevention_ID int 
DECLARE @Actual_Down_Time datetime 
DECLARE @Actual_Up_Time datetime 
DECLARE @Notes varchar(2500) 
DECLARE @Repair_Details varchar(100) 
DECLARE @TestTime float
DECLARE @ReleasedByID int
/*VV E634*/
DECLARE @CreatePlanningCompleteWOOnly bit
	
SET @AdvPlanning=1
SET @EStatus_YTS=1
SET @EStatus_D=5
SET @WOSStatus_YTS=2
SET @TaskModeGT=1

/*VV E450*/
SET @WOSStatus_C=4
SET @EStatus_C=3

DECLARE @Counter int
SET @Counter=0
DECLARE @PlannedEventCreationToleranceHours float

IF @SystemTaskId>0 SELECT @LastModDate=Last_Run_Time FROM AMT_SYSTEM_TASK

EXEC WORK_ORDER_MERGE_P

EXEC AMT_TYPED_VARIABLE_GET_P @Value_Name='PlannedEventCreationToleranceHours',  @Varchar_Value=@PlannedEventCreationToleranceHours OUTPUT
SET @PlannedEventCreationToleranceHours=ISNULL(@PlannedEventCreationToleranceHours,0)

/*VV E634*/
EXEC AMT_TYPED_VARIABLE_GET_P @Value_Name='CreatePlanningCompleteWOOnly',  @Varchar_Value=@CreatePlanningCompleteWOOnly OUTPUT
SET @CreatePlanningCompleteWOOnly=ISNULL(@CreatePlanningCompleteWOOnly,0)


/*Delete all existing YTS  Events that contain no Workorders linked to YTS WOS. Delete deferred Events.*/

CREATE TABLE #z_EventsToDelete(EventId int,ListId int IDENTITY(1,1) PRIMARY KEY(EventId))

IF @CreatePlanningCompleteWOOnly=0
BEGIN
	INSERT INTO #z_EventsToDelete(EventId)
	SELECT E.Event_ID
	FROM
	EVENT E
		INNER JOIN
	tblEqpPlans EP
		ON E.Eqp_Plan_ID=EP.EqpPlanId
	WHERE EP.UpdateAMTPlanning=1 AND E.Event_Status_ID IN(@EStatus_YTS,@EStatus_D)

	SET @Counter=@@ROWCOUNT

	SET XACT_ABORT ON

	WHILE @Counter>0
	BEGIN
		/*VV #1144*/
		SET @Message=''
		SELECT @EventID=EventId FROM #z_EventsToDelete WHERE ListId=@Counter
		
		BEGIN TRANSACTION
		
		EXEC EVENT_DELETE_P @Event_ID=@EventID,@Error=0,@Error_Message=@Message OUTPUT
			
		IF ISNULL(@Message,'')<>''
		BEGIN
			SELECT 'Cannot delete Event EventId='+CAST(@EventID AS varchar(50))+': '+ @Message
			ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
			COMMIT TRANSACTION
		END
		SET @Counter=@Counter-1
	END

	DROP TABLE #z_EventsToDelete
END


SET @Counter=0

DECLARE @Use_Transaction_WO_Costs bit
SELECT @Use_Transaction_WO_Costs=Use_Transaction_WO_Costs FROM AMT_VARIABLE
SET @Use_Transaction_WO_Costs=ISNULL(@Use_Transaction_WO_Costs,0)

CREATE TABLE #z_TasksToMerge(TaskId int,ListId int IDENTITY(1,1),/*VV #1163*/WorkOrderId int,
C_WorkOrderId int,PureWONumber varchar(100) COLLATE DATABASE_DEFAULT PRIMARY KEY(TaskId))

INSERT INTO #z_TasksToMerge(TaskId,WorkOrderId,C_WorkOrderId,PureWONumber)
SELECT T.Task_Id,T.Work_Order_ID as WorkOrderId,T.Work_Order_ID as C_WorkOrderId,
WO.PureWONumber
FROM
tblEqpPlans EP
	INNER JOIN
TASK T
	ON EP.EqpPlanId=T.Eqp_Plan_ID
	INNER JOIN
tblWorkOrders WO
	ON T.Work_Order_ID=WO.WorkOrderId
WHERE EP.UpdateAMTPlanning=1 AND T.Task_Mode_ID=@TaskModeGT
AND T.Event_ID IS NULL AND T.AMTPlanningModeId=@AdvPlanning
/*VV #1163 */
AND
(@Use_Transaction_WO_Costs=1 OR
(@Use_Transaction_WO_Costs=0 AND /*VV E450*/
/*VV E634*/
/*WO.PlanningStatusId IN(@WOSStatus_YTS,@WOSStatus_C)*/
(WO.PlanningStatusId=@WOSStatus_C OR (@CreatePlanningCompleteWOOnly=0 AND WO.PlanningStatusId=@WOSStatus_YTS))
AND WO.PlannedStartTime IS NOT NULL))
ORDER BY WO.PlannedStartTime DESC


SET @Counter=@@ROWCOUNT

IF @Use_Transaction_WO_Costs=1
BEGIN
	CREATE TABLE #C_WO(WorkOrderId int,C_WorkOrderId int PRIMARY KEY(WorkOrderId))
	
	INSERT INTO #C_WO(WorkOrderId,C_WorkOrderId)
	SELECT A.WorkOrderId, MAX(W1.WorkOrderId) AS C_WorkOrderId
	FROM
	tblWorkOrders W1
		INNER JOIN
	(SELECT WO.WorkOrderId, MAX(CWO.StartDate) AS StartDate,WO.PureWONumber
	FROM
	#z_TasksToMerge WO
		INNER JOIN
	tblWorkOrders CWO
		ON WO.WorkOrderId=CWO.AMTParentWorkOrderId
		AND WO.PureWONumber=CWO.PureWONumber
		GROUP BY WO.WorkOrderId,WO.PureWONumber
		HAVING MIN(CWO.PlanningStatusId)>0) A
		ON W1.AMTParentWorkOrderId=A.WorkOrderId
		AND W1.StartDate=A.StartDate
		AND W1.PureWONumber=A.PureWONumber
	
	GROUP BY A.WorkOrderId
	
	DELETE #z_TasksToMerge WHERE WorkOrderId NOT IN(SELECT WorkOrderId FROM #C_WO)
	
	UPDATE Z SET C_WorkOrderId=C.C_WorkOrderId
	FROM
	#z_TasksToMerge Z
		INNER JOIN
	#C_WO C
		ON Z.WorkOrderId=C.WorkOrderId
	
	DROP TABLE #C_WO
END

--select * into z_TasksToMerge from #z_TasksToMerge return

CREATE TABLE #z_EventsToUpdate(EventId int, ListId int IDENTITY(1,1) PRIMARY KEY(EventId))

SELECT @VarianceCauseId=Variance_Cause_ID FROM VARIANCE_CAUSE WHERE Default_Record=1
SELECT @ResponsibilityId=Responsibility_ID FROM RESPONSIBILITY WHERE Default_Record=1

WHILE @Counter>0
BEGIN
	SET @TaskId=0
	SET @Message=''
	SET @PlannedEndTime=NULL
	SET @QUOMId=NULL
	
	SELECT @TaskId=T.Task_Id,@PlannedStartTime=WO.PlannedStartTime,@EqpPlanId=T.Eqp_Plan_ID,
	@Description=T.Description,@PlannedEndTime=WO.PlannedEndTime,@Priority_ID=T.Priority_ID,
	@QUOMId=EP.Primary_QUOM_ID,@TaskTypeId=T.Task_Type_ID,
	/*VV E450*/@PlanningStatusId=WO.PlanningStatusId,@AmtStartDate=WO.AMTStartDate
	FROM
	#z_TasksToMerge Z
		INNER JOIN
	TASK T
		ON Z.ListId=@Counter AND Z.TaskId=T.Task_Id
		INNER JOIN
	tblWorkOrders WO
		ON Z.C_WorkOrderId=WO.WorkOrderId
		INNER JOIN
	tblEqpPlans EP
		ON T.Eqp_Plan_ID=EP.EqpPlanId
	WHERE (T.Event_ID IS NULL) 
	/*VV #1163*/
	/*VV E634 AND /*VV E450*/ WO.PlanningStatusId IN(@WOSStatus_YTS,@WOSStatus_C)*/
	AND (WO.PlanningStatusId=@WOSStatus_C OR (@CreatePlanningCompleteWOOnly=0 AND WO.PlanningStatusId=@WOSStatus_YTS))
	AND WO.PlannedStartTime IS NOT NULL
	
	IF @TaskId>0
	BEGIN
	
		SET @PlannedEndTime=ISNULL(@PlannedEndTime,@PlannedStartTime)
	
		SET @EventId=0
		
		IF(@PlanningStatusId=@WOSStatus_YTS)/*VV E450*/
		BEGIN
			SELECT @EventId=E.Event_Id
			FROM EVENT E
			WHERE E.Eqp_Plan_ID=@EqpPlanId AND E.Event_Status_Id =@EStatus_YTS
			AND (CAST(@PlannedStartTime AS float)>=CAST(E.Planned_Down_Time AS float)-@PlannedEventCreationToleranceHours/24.00)
			AND	(CAST(@PlannedStartTime AS float)<=CAST(E.Planned_Up_Time AS float)+@PlannedEventCreationToleranceHours/24.00)
		END
		
		IF @EventId>0
		BEGIN
			BEGIN TRANSACTION
			
			EXEC EXPRESS_ADD_BACKLOGS_TO_EVENT_P @Backlogs=@TaskId,@Event_ID=@EventId, @Message=@Message OUTPUT
			
			IF ISNULL(@Message,'')<>''
			BEGIN
				SELECT 'Cannot add workorder to Event EventId='+CAST(@EventID AS varchar(50))+', Task_Id='+CAST(@TaskId AS varchar(50))+': '+ @Message
				ROLLBACK TRANSACTION
			END
			ELSE
			BEGIN
				COMMIT TRANSACTION
				IF NOT EXISTS(SELECT EventId FROM #z_EventsToUpdate WHERE EventId=@EventId)
				BEGIN
					INSERT INTO #z_EventsToUpdate(EventId) VALUES(@EventId)
				END
			END
			
		END
		ELSE
		BEGIN
			SET @Event_Status_Id=CASE @PlanningStatusId WHEN @WOSStatus_YTS THEN @EStatus_YTS ELSE @EStatus_C END			
			SET @Actual_Down_Time=CASE @PlanningStatusId			
								WHEN @WOSStatus_C THEN CASE WHEN @PlannedStartTime<GETDATE() THEN @PlannedStartTime ELSE GETDATE() END
								ELSE NULL END
			
			BEGIN TRANSACTION
			EXEC EVENT_ADD_P @Eqp_Plan_ID=@EqpPlanId, 
				@Description=@Description, 
				@Event_Status_ID =@Event_Status_Id, 
				@Priority_ID =@Priority_ID, 
				@Work_Location_ID =NULL, 
				@Planned =0, 
				@Break_Down =0, 
				@Expected_Up_Time =@PlannedEndTime, 
				@Confirmed= 0, 
				@Event_Prevention_ID =NULL, 
				@Planned_Down_Time =@PlannedStartTime, 
				@Planned_Down_Usage=0, 
				@Planned_Up_Time =@PlannedEndTime, 
				@Planned_Up_Usage =0, 
				@Actual_Down_Time =@Actual_Down_Time, 
				@Actual_Down_Usage =0, 
				@Actual_Up_Time =@Actual_Down_Time, 
				@Actual_Up_Usage =0, 
				@Notes =NULL, 
				@Down_Delay_Notes =NULL, 
				@Down_Delay_Hrs =0, 
				@Down_Delay_ID =NULL, 
				@Event_Mode_ID =1, 
				@Has_Down_Time =1,	 
				@New_Event =1, 
				@Repair_Details=NULL, /*VV The field lenth is less then wo.Repair description*/
				@QUOM_ID=@QUOMId,
				@Create_By_User_ID=0,	
				@NewEvent_ID =@EventId OUTPUT,
				@RelesedByID =NULL,
				@Message =@Message OUTPUT,
				@PrimaryTaskId=@TaskId
				
			
			IF ISNULL(@Message,'')<>''
			BEGIN
				SELECT 'Cannot create Event Task_Id='+CAST(@TaskId AS varchar(50)) +': '+@Message
				ROLLBACK TRANSACTION
			END
			ELSE
			BEGIN
				SET @DTA_Id=0
				SET @PlannedHours=ISNULL((CAST(@PlannedEndTime AS float)-CAST(@PlannedStartTime AS float))*24.00,0) 
				
				IF @PlannedHours<0 SET @PlannedHours=0
				SET @PlannedHours=ROUND(@PlannedHours,2)
				
				EXEC DOWN_TIME_ALLOCATION_ADD_P
				@Event_ID =@EventId, 
				@Variance_Cause_ID=@VarianceCauseId, 
				@Task_Type_ID=@TaskTypeId, 
				@Responsibility_ID=@ResponsibilityId, 
				@Planned_Hours=@PlannedHours, 
				@Actual_Hours=0, 
				@Notes=NULL, 
				@EMI_Ref=NULL,
				@EMIssueId =NULL,
				@Primary_DTA =1,
				@Event_Last_Mod_Date=NULL,
				@New_Down_Time_Allocation_ID=@DTA_Id OUTPUT
				
				IF @DTA_Id>0
					COMMIT TRANSACTION
				ELSE
				BEGIN
					SELECT 'Cannot create Event DTA for Task_Id='+CAST(@TaskId AS varchar(50))
					ROLLBACK TRANSACTION
				END
			END
		END
	END
	
	SET @Counter=@Counter-1
END



SET @Counter=0
SELECT @Counter=MAX(ListId) FROM #z_EventsToUpdate
SET @Counter=ISNULL(@Counter,0)

WHILE @Counter>0
BEGIN
	SET @EventId=0
	SET @Message=''
	
	SELECT 
	@EventId=E.Event_ID,
	@EqpPlanId=E.Eqp_Plan_ID, 
	@Description=E.Description, 
	@StatusId=E.Event_Status_ID, 
	@Priority_ID =E.Priority_ID, 
	@Work_Location_ID =E.Work_Location_Id, 
	@Planned =E.Planned, 
	@Break_Down =E.Break_Down, 
	@Confirmed =E.Confirmed, 
	@Event_Prevention_ID =E.Event_Prevention_ID, 
    @PlannedStartTime  =MIN(ISNULL(WO.PlannedStartTime, E.Planned_Down_Time)), 
	@PlannedEndTime=MAX(ISNULL(WO.PlannedEndTime,E.Planned_Up_Time)), 
	@Actual_Down_Time =E.Actual_Down_Time, 
	@Actual_Up_Time =E.Actual_Up_Time, 
    @Notes =E.Notes, 
	@Repair_Details =E.Repair_Details, 
	@QUOMId =E.QUOM_Id,    	
	@TestTime=E.Test_Time,
	@ReleasedByID=E.Released_By_ID
	FROM
	#z_EventsToUpdate Z
		INNER JOIN
	EVENT E
		ON Z.ListId=@Counter AND Z.EventId=E.Event_ID
		INNER JOIN
	TASK T
		On E.Event_ID=T.Event_ID
		INNER JOIN
	#z_TasksToMerge M
		ON T.Task_ID=M.TaskId
		INNER JOIN
	tblWorkOrders WO
		ON M.C_WorkOrderId=WO.WorkOrderId
	WHERE E.Event_Status_ID=@EStatus_YTS AND WO.PlanningStatusId=@WOSStatus_YTS
	GROUP BY E.Event_ID,E.Eqp_Plan_ID, E.Description, E.Event_Status_ID, E.Priority_ID, E.Work_Location_Id, 
	E.Planned, E.Break_Down, E.Expected_Up_Time, E.Event_Prevention_ID, E.Actual_Down_Time, 
	E.Actual_Up_Time, E.Notes, E.Repair_Details, E.QUOM_Id,E.Test_Time,E.Released_By_ID,E.Confirmed

	IF @EventId>0
	BEGIN
		BEGIN TRANSACTION
		
		EXEC EVENT_UPDATE_P @Event_ID =@EventId,
		@Eqp_Plan_ID =@EqpPlanId, 
		@Description=@Description, 
		@Event_Status_ID =@StatusId, 
		@Priority_ID =@Priority_ID, 
		@Work_Location_ID =@Work_Location_Id, 
		@Planned =@Planned, 
		@Break_Down =@Break_Down, 
		@Expected_Up_Time =@PlannedEndTime, 
		@Confirmed =@Confirmed, 
		@Event_Prevention_ID =@Event_Prevention_ID, 
		@Planned_Down_Time =@PlannedStartTime, 
		@Planned_Down_Usage =0, 
		@Planned_Up_Time =@PlannedEndTime, 
		@Planned_Up_Usage =0, 
		@Actual_Down_Time =@Actual_Down_Time, 
		@Actual_Down_Usage =0, 
		@Actual_Up_Time =@Actual_Up_Time, 
		@Actual_Up_Usage =0, 
		@Notes =@Notes, 
		@Repair_Details =@Repair_Details, 
		@QUOM_ID =@QUOMId,    	
		@Last_Mod_Date =NULL,
		@Last_Mod_By_User_ID =0,
		@TestTime=@TestTime,
		@ReleasedByID=@ReleasedByID,
		@Message =@Message OUTPUT,
		@ShutdownID =-1	
	
		IF ISNULL(@Message,'')<>''
		BEGIN
			SELECT 'Cannot update Event Planned Times Event_Id='+CAST(@EventId AS varchar(50))+': '+ @Message
			ROLLBACK TRANSACTION
		END
		ELSE
		BEGIN
			EXEC DTA_HOURS_UPDATE_P @EventId =@EventId,@Message=@Message OUTPUT,@ZeroPlannedNonPrimary=1

			IF ISNULL(@Message,'')<>''
			BEGIN
				SELECT 'Cannot update Event DTAs Event_Id='+CAST(@EventId AS varchar(50))+': '+ @Message
				ROLLBACK TRANSACTION
			END
			ELSE
				COMMIT TRANSACTION
		END
			
	END
	
	SET @Counter=@Counter-1
END

GO


if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[PARTS_FILTERED_GET_P]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[PARTS_FILTERED_GET_P]
GO


create          Procedure [dbo].[PARTS_FILTERED_GET_P]  
/******************************************************************************  
 File: amt_3_sp.sql.sql  
 Name: PARTS_FILTERED_GET_P  
  
 Called By:   
  
 Desc: 1. Get data set ffrom tblParts table or ROTABLE_PART  
               
  
 Auth: Harpreet Singh  
 Date: 03-Sep-2003  
*******************************************************************************  
  Change History  
*******************************************************************************  
 Date:  Author:  Description:  
 -------- -------- ----------------------------------------  
    24 Nov 03   ML          Put Distinct in Select statement  
 13 Feb 08 V Vasylyeva Added Reman_Part_Number  
  9 Apr 08 V Vasylyeva Changed input parameter from @ModelID varchar(8000) = '5' to @ModelID varchar(8000) = ''  
 11 Jun 08 V Vasylyeva Added @NoneId  
 27 May 09 AL   CR8179: Added @InProjTaskOnly  
 17 Feb 11 V Vasylyeva AmtMobile: Added @ShowCode  
 20 Aug 11	V Vasylyeva	E602 added @Show_SOS
*******************************************************************************/  
 /* Param List */  
  
      
    @SearchText varchar(50) = '%%',  
    @ModelID varchar(8000) = '',  
    @RotablePart bit = 1,  
 @Reman bit = 1,  
 @NoneId int=NULL,  
 @InProjTaskOnly bit=0, --AL: 27/05/09  
 @ShowCode bit=0/*VV AmtMobile*/ ,
 @Show_SOS bit=0/*VV E602*/ 
AS  
   
 DECLARE @SQL as varchar(8000)   
  
 IF ISNULL(@RotablePart,1) = 0   
 BEGIN  
  IF ISNULL(@InProjTaskOnly,0)=0  
  BEGIN  
     
   SET @SQL = ' SELECT P.PartId Id, P.Part + '' '' + P.PartDescription Description, '''' GroupNumber, '''' Supplier'  
   SET @SQL = @SQL+CASE @ShowCode WHEN 1 THEN ',Part' ELSE '' END  
   /*VV E602*/
   SET @SQL = @SQL+CASE @Show_SOS WHEN 1 THEN ',S.Sos_Code AS Part_SOS' ELSE '' END 
   SET @SQL = @SQL + ' FROM tblParts P'  
   IF @Show_SOS=1
   BEGIN
		SET @SQL = @SQL +' INNER JOIN SOURCE_OF_SUPPLY S ON P.Source_Of_Supply_Id=S.Source_Of_Supply_Id '
   END
   SET @SQL = @SQL + ' WHERE P.Part + '' '' + P.PartDescription LIKE ' + CHAR(39) + @SearchText + CHAR(39)   
 
  END  
  ELSE  
  BEGIN  
  
   SET @SQL = ' SELECT PartId Id, Part + '' '' + PartDescription Description, '''' GroupNumber, '''' Supplier'  
   SET @SQL = @SQL + ' FROM tblParts P INNER JOIN tblProjTasks PT ON P.PartId = PT.Part_Id'  
   SET @SQL = @SQL + ' WHERE Part + '' '' + PartDescription LIKE ' + CHAR(39) + @SearchText + CHAR(39)   
    
  END  
  
  IF @NoneId IS NOT NULL  
  BEGIN  
   SET @SQL = @SQL +' UNION  
       SELECT  '+CAST (@NoneId AS varchar)+' AS Id, ''(NONE) ''  AS Description, '''' GroupNumber, '''' Supplier'  
  END  
  
  SET @SQL = @SQL + ' ORDER BY Part + '' '' + PartDescription'  
  
 END  
 ELSE  
  BEGIN  
   SET @SQL = ' SELECT DISTINCT r.Rotable_Part_Id AS Id,   
      r.Part_Number + '' '' + r.Part_Description + '' ('' + cc.Code + '' '' + cc.Description + '')'' AS Description,   
      r.Group_Number GroupNumber, m.ManufacturerDesc Supplier,r.Reman_Part_Number'  
   SET @SQL = @SQL + ' FROM ROTABLE_PART r INNER JOIN  
                      ROTABLE_PART_MODEL rm ON r.Rotable_Part_Id = rm.Rotable_Part_Id INNER JOIN  
                      tblComponentCodes cc ON r.Component_Code_Id = cc.ComponentCodeID LEFT OUTER JOIN  
                      tblManufacturers m ON r.Manufacturer_Id = m.ManufacturerId'  
   SET @SQL = @SQL + ' WHERE r.Part_Number + '' '' + r.Part_Description + '' ('' + cc.Code + '' '' + cc.Description + '')'' LIKE ' + CHAR(39) + @SearchText + CHAR(39)   
   IF @Reman = 1 SET @SQL = @SQL + ' AND r.Reman_Part_Number <> '''''  
   IF ISNULL(@ModelID,'') <> ''  SET @SQL = @SQL + ' AND rm.Model_Id IN (' + @ModelID + ')'  
   SET @SQL = @SQL + ' ORDER BY r.Part_Number + '' '' + r.Part_Description + '' ('' + cc.Code + '' '' + cc.Description + '')'''  
  END  
   
 --Print(@SQL)  
 EXEC(@SQL)  
    
GO


if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[STRATEGY_CONFIRM_UPDATE_P]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[STRATEGY_CONFIRM_UPDATE_P]
GO

 
 
CREATE PROCEDURE STRATEGY_CONFIRM_UPDATE_P
/******************************************************************************
	File: STRATEGY_CONFIRM_UPDATE_P (copied from usp_Plan_Save_Task.sql)
	Name: STRATEGY_CONFIRM_UPDATE_P usp_Plan_Save_Task

	Called By:  usp_Plan_Update or directly from a client (E.g COM class)

	Desc: Saves the updated plan data in tblProjTasks for a tasks AND Runs
		replan to get the caculated value of Usage/Date 
              
	Auth: Mathew Lam
	Date: 26-FEB-2004
*******************************************************************************
		Change History
*******************************************************************************
	Date:		Author:		Description:
	--------	--------	----------------------------------------
	01 Sep 11	KN			2166: Fixed the Last Scheduled, when it is out of sync by setting LSP with MaxOcc in the Group
	02 Jun 09	AL			CR8224: do not set dependency task to not sys calc if only changing its plan status
	19 Feb 09	AL			CR 7894: Reset @Scheduling_Group params in loop + new process for multi changes
	28 Nov 08	AL			Fixed planstatus setting when date based task
	11 Sep 08	KN			Fixed the Last Scheduled, when it is out of sync in the 
	13 Jun 08	AL			Changed to batch update and clean up
	12 Jun 08	AL			Added @RepairDescription
    21 Feb 08	AL			Changed PlanDateLocked to ReviewStatusID
	09-Sep-07	KN			Replaced  GET_USAGE_FROM_DATE_F with GET_USAGE_FROM_DATE_NO_CHECK_TERM_F function 
	31-May-07	KN			IF NEXT OCC IS SET IN A DEPENDENCY GROUP, RESET ALL THE OTHER TASK IN THE GROUP TO SYSTEM CALCULATED
	01 Nov 06	SI			Update Usage/Date if the user move the task manually
	23 Oct 06	SI			Removed PM logic
	13 Sep 06	V Vasylyeva	Set plan status depending on proj task uom if it is system calculated
	08 Sep 06	SI			Removed usp_Plan_Run_Calc_Task call, added NEXT_OCC_CALC_P
	05 May 04	M Lam		Added logic to optionally Adjust PMs
*******************************************************************************/
	/* Param List */
	@piTaskId 			varchar(MAX)='',	--AL: 13/06/08
	@piPlanOptId 		varchar(MAX)='',	--AL: 13/06/08
	@pfNextOccUsage 	float OUTPUT,
	@pdtNextOccDate		datetime OUTPUT,
	@ptiPlanStatus		tinyint,
	@pbPlanUseCalc 		bit,
	@ReviewStatusID int=1,
	@ReviewUserID int=NULL,
	@ReviewDate datetime=NULL,
	@RepairDescription varchar(MAX)=NULL,	--AL: 12/06/08
	@Message varchar(MAX) OUTPUT
AS
	/* Local procedure variables */
	DECLARE @PlanStatusUsage tinyint,@PlanStatusDate tinyint
	DECLARE @TaskId int,@PlanOptId int
	DECLARE @Pos int,@Chunk varchar(MAX)
	DECLARE @Error int

	SET @Error=0
	SET @PlanStatusUsage=1
	SET @PlanStatusDate=2

	BEGIN TRAN
		
	/*	
		AL: 19/08/09

		The last id is the one setting the value, and needs to be done last. 
		So it is taken out and will be added at the end of the list of tasks to process.
		The remaining tasks are order by eqp, group number and group counter DESC so that 
			the one set in a dependency group is the one with the lowest group counter in the selection
	*/

	--1: get the last optionID
	declare @lastPlanOptId int

	if  right(@piPlanOptId,1)=','
		set @piPlanOptId=left(@piPlanOptId,len(@piPlanOptId)-1)

	declare @counter int
	set @counter=len(@piPlanOptId)-1

	while substring(@piPlanOptId,@counter,1)<>',' and @counter>0
		set @counter=@counter-1

	if @counter=0 
	begin
		set @lastPlanOptId=convert(int,@piPlanOptId)
		set @piPlanOptId=''
	end
	else
	begin
		set @lastPlanOptId=convert(int,right(@piPlanOptId,len(@piPlanOptId)-@counter))
		set @piPlanOptId=left(@piPlanOptId,@counter-1)
	end

	--2: order the tasks to process in a temp table
	create table #OrderedTasks (ID int identity (1,1) primary key,
		TaskId int,PlanOptId int,eqpprojID int, 
		Scheduling_Group_Id int,Scheduling_Group_Counter int)

	--2a: all tasks except the last in the selection, using the special order
	insert into #OrderedTasks(TaskId,PlanOptId,eqpprojID,Scheduling_Group_Id,Scheduling_Group_Counter)
	select	pt.projtaskid,pto.ProjTaskOptId,pt.EqpProjId,pt.Scheduling_Group_Id,pt.Scheduling_Group_Counter
	from	tblProjTasks pt inner join
			tblProjTaskOpts pto on pt.projtaskid=pto.projtaskid
	where	pto.ProjTaskOptId IN (SELECT list_item FROM dbo.LIST_TO_TABLE_F(@piPlanOptId))
	order by eqpprojID,Scheduling_Group_Id,Scheduling_Group_Counter desc
			
	--2b: the last task in the selection
	insert into #OrderedTasks(TaskId,PlanOptId,eqpprojID,Scheduling_Group_Id,Scheduling_Group_Counter)
	select	pt.projtaskid,pto.ProjTaskOptId,pt.EqpProjId,pt.Scheduling_Group_Id,pt.Scheduling_Group_Counter
	from	tblProjTasks pt inner join
			tblProjTaskOpts pto on pt.projtaskid=pto.projtaskid
	where	pto.ProjTaskOptId = @lastPlanOptId

	--3: loop through the tasks using a cursor
	DECLARE ds_Cursor CURSOR FOR 
	SELECT TaskId,PlanOptId
	FROM #OrderedTasks
	ORDER BY ID

	OPEN ds_Cursor

	FETCH NEXT FROM ds_Cursor 
	INTO  @TaskId,@PlanOptId

	WHILE @@FETCH_STATUS = 0
	--WHILE @piTaskId<>''
	BEGIN
		--AL: 19/02/09
		/*
		SET @Pos=CHARINDEX(',',@piTaskId)
		IF @Pos=0
		BEGIN
			SET @TaskId=@piTaskId
			SET @piTaskId=''
		END
		ELSE
		BEGIN
			SET @TaskId=LEFT(@piTaskId,@Pos-1)	
			SET @piTaskId=RIGHT(@piTaskId,LEN(@piTaskId)-@Pos)
			IF @piTaskId=','
				SET @piTaskId=''
		END
		SET @Pos=CHARINDEX(',',@piPlanOptId)
		IF @Pos=0
		BEGIN
			SET @PlanOptId=@piPlanOptId
			SET @piPlanOptId=''
		END
		ELSE
		BEGIN
			SET @PlanOptId=LEFT(@piPlanOptId,@Pos-1)	
			SET @piPlanOptId=RIGHT(@piPlanOptId,LEN(@piPlanOptId)-@Pos)
		END
		*/
		
		-- Update New Data
		IF @ptiPlanStatus=0
			--Batch update review status only
			UPDATE	tblProjTasks
			SET ReviewStatusID=@ReviewStatusID,
				ReviewUserID=@ReviewUserID,
				ReviewDate=@ReviewDate
			WHERE	ProjTaskId = @TaskId
		ELSE
			UPDATE	tblProjTasks
			SET PlanTaskOptId = @PlanOptId,
				PlanUseCalc = @pbPlanUseCalc,
				NextOcc = CASE WHEN @pbPlanUseCalc=0 AND @ptiPlanStatus=2 THEN dbo.GET_USAGE_FROM_DATE_NO_CHECK_TERM_F(EqpProjId, UsageQUOMId, @pdtNextOccDate) ELSE @pfNextOccUsage END, /*KN 09-09-2007 Used NO Check Term Function*/
				NextOccDate = CASE WHEN @pbPlanUseCalc=0 AND @ptiPlanStatus=1 THEN dbo.GET_DATE_FROM_USAGE_F(EqpProjId, UsageQUOMId, @pfNextOccUsage) ELSE @pdtNextOccDate END,
				PlanStatus =CASE @pbPlanUseCalc 
						--AL: 28/11/08
						WHEN 0 THEN 
							CASE WHEN ISNULL(UsageQUOMId,0)>0 THEN @ptiPlanStatus ELSE @PlanStatusDate END
						ELSE 
							CASE WHEN ISNULL(UsageQUOMId,0)>0 THEN  @PlanStatusUsage ELSE @PlanStatusDate END
						--WHEN 0 THEN @ptiPlanStatus ELSE 
						--CASE WHEN UsageQUOMId>0 THEN  @PlanStatusUsage ELSE @PlanStatusDate END
						END,
				ReviewStatusID=CASE WHEN @ReviewStatusID=-1 THEN ReviewStatusID ELSE @ReviewStatusID END,
				ReviewUserID=CASE WHEN @ReviewStatusID=-1 THEN ReviewUserID ELSE @ReviewUserID END,
				ReviewDate=CASE WHEN @ReviewStatusID=-1 THEN ReviewDate ELSE @ReviewDate END
				--13 Sep 06 VV took it from VB code in strategy confirmation (in COM+ PlanTaskPut.DeterminePlanStatus)
				--NextOcc = @pfNextOccUsage,
				--NextOccDate = @pdtNextOccDate,
				--AL: 21/02/08
				--PlanDateLocked = @pbPlanDateLocked
			WHERE	ProjTaskId = @TaskId
		
		SET @Error=@@ERROR
				
		IF @Error<>0
		BEGIN
			ROLLBACK TRANSACTION 
			SET @Message='Error updating strategy'

			--AL: 19/02/09
			CLOSE ds_Cursor
			DEALLOCATE ds_Cursor

			DROP TABLE #OrderedTasks

			RETURN
		END

		-- KN 31-May-2007
		-- IF NEXT OCC IS SET IN A DEPENDENCY GROUP, RESET ALL THE OTHER TASK IN THE GROUP TO SYSTEM CALCULATED.
--		IF @pbPlanUseCalc = 0 AND EXISTS ( 
--					SELECT ProjTaskId FROM tblProjTasks PT
--						INNER JOIN dbo.PROJ_TASK_SCHEDULING_GROUP AS PTSG ON PTSG.Scheduling_Group_Id = PT.Scheduling_Group_Id
--					 WHERE PT.ProjTaskId = @TaskId AND PT.Scheduling_Group_Id IS NOT NULL AND  PTSG.Scheduling_Group_Type = 2
--				)
--		BEGIN
--			UPDATE	prtsk
--				SET prtsk.PlanUseCalc = 1
--			FROM	tblProjTasks prtsk
--			INNER JOIN (
--				SELECT DISTINCT PT.Scheduling_Group_Id, PT.EqpProjId
--				FROM	tblProjTasks PT 
--				WHERE	PT.ProjTaskId = @TaskId
--			) ptsht ON ptsht.Scheduling_Group_Id = prtsk.Scheduling_Group_Id AND ptsht.EqpProjId = prtsk.EqpProjId
--			WHERE prtsk.ProjTaskId <> @TaskId
--		END
--		
		
-- COMMENTED THE ABOVE AND ADDED TO THE BELOW LOGIC.

		IF @pbPlanUseCalc = 0
		BEGIN
			
			DECLARE @Scheduling_Group_Type INT
			DECLARE @Scheduling_Group_Id INT
			DECLARE @EqpProjId INT
			DECLARE @SchedulingTypeID INT
			
			--AL: 18/02/09
			SET @Scheduling_Group_Id = NULL 
			SET @EqpProjId = NULL	
			SET @Scheduling_Group_Type =NULL
			

			SELECT @Scheduling_Group_Id = PT.Scheduling_Group_Id, @EqpProjId = PT.EqpProjId	, @Scheduling_Group_Type = PTSG.Scheduling_Group_Type,
			@SchedulingTypeID = PT.Schedule_Type_Id
			FROM tblProjTasks PT 
				INNER JOIN dbo.PROJ_TASK_SCHEDULING_GROUP AS PTSG ON PTSG.Scheduling_Group_Id = PT.Scheduling_Group_Id
			WHERE	PT.ProjTaskId = @TaskId AND PT.Planning_Task = 1
				

			IF @Scheduling_Group_Type IS NULL
			BEGIN
				UPDATE prtsk
				SET 
					AMT_Last_Sched_Occ = CASE WHEN prtsk.Schedule_Type_Id IN (2,4) THEN AMT_WO_Last_Occ ELSE AMT_Last_Sched_Occ END,
					AMT_Last_Sched_Date = CASE WHEN prtsk.Schedule_Type_Id IN (2,4) THEN AMT_WO_Last_Occ_Date ELSE AMT_Last_Sched_Date END
				FROM
					tblProjTasks prtsk 
				WHERE prtsk.ProjTaskId = @TaskId
			END
			ELSE IF @Scheduling_Group_Type =  2  -- DEPENDENCY
			BEGIN
				IF @ptiPlanStatus<>0	--AL: 02/06/09
					UPDATE	prtsk
						SET prtsk.PlanUseCalc = CASE WHEN prtsk.ProjTaskId = @TaskId THEN 0 ELSE 1 END,
						prtsk.AMT_Last_Sched_Occ = CASE WHEN prtsk.Schedule_Type_Id IN (2,4) THEN prtsk.AMT_WO_Last_Occ ELSE prtsk.AMT_Last_Sched_Occ END,
						prtsk.AMT_Last_Sched_Date = CASE WHEN prtsk.Schedule_Type_Id IN (2,4) THEN prtsk.AMT_WO_Last_Occ_Date ELSE prtsk.AMT_Last_Sched_Date END
					FROM	tblProjTasks prtsk
					WHERE prtsk.Scheduling_Group_Id  = @Scheduling_Group_Id AND prtsk.EqpProjId = @EqpProjId
			END
			ELSE  IF @Scheduling_Group_Type =  1  --- SUPPRESSION
			BEGIN
				--2166: For Last Scheduled Type Tasks, instead of Updating LSP with Workorder Last Occurrece, use the MAX Occ of the Parents. So that 
				--Manually set Next will not be overwritten/reset by Usp Udate Last occ procedure. 
				DECLARE @UseSchedulingSystemLastOcc BIT
				SELECT TOP 1 @UseSchedulingSystemLastOcc = UseSchedulingSystemLastOcc	FROM AMT_VARIABLE

				DECLARE @MaxOccDate DateTIME
				DECLARE @MaxOccUsage FLOAT
				
				SELECT 
					@MaxOccDate = dbo.GET_SCHEDULING_GROUP_MAX_OCC_DATE_F(prtsk.EqpProjId, PTSG.Scheduling_Group_Type,prtsk.Scheduling_Group_Id,prtsk.Scheduling_Group_Counter,@UseSchedulingSystemLastOcc)					
				FROM	tblProjTasks prtsk
				LEFT JOIN PROJ_TASK_SCHEDULING_GROUP PTSG ON prtsk.Scheduling_Group_Id = PTSG.Scheduling_Group_Id
				WHERE prtsk.ProjTaskId = @TaskId AND prtsk.Schedule_Type_Id IN (2,4)
				
				SELECT @MaxOccUsage =dbo.GET_USAGE_FROM_DATE_F(prtsk.EqpProjID, prtsk.UsageQUOMId, @MaxOccDate)
				FROM tblProjTasks prtsk
				WHERE prtsk.ProjTaskId = @TaskId AND prtsk.Schedule_Type_Id IN (2,4)
				
				
				UPDATE	prtsk
				SET
					prtsk.AMT_Last_Sched_Occ = CASE WHEN prtsk.Schedule_Type_Id IN (2,4) THEN prtsk.AMT_WO_Last_Occ ELSE prtsk.AMT_Last_Sched_Occ END,
					prtsk.AMT_Last_Sched_Date = CASE WHEN prtsk.Schedule_Type_Id IN (2,4) THEN prtsk.AMT_WO_Last_Occ_Date ELSE prtsk.AMT_Last_Sched_Date END,
					prtsk.LastOcc = CASE WHEN prtsk.Schedule_Type_Id IN (2,4) THEN @MaxOccUsage ELSE prtsk.LastOcc END,
					prtsk.LastOccDate = CASE WHEN prtsk.Schedule_Type_Id IN (2,4) THEN @MaxOccDate ELSE prtsk.LastOccDate END
				FROM	tblProjTasks prtsk
				LEFT JOIN PROJ_TASK_SCHEDULING_GROUP PTSG ON prtsk.Scheduling_Group_Id = PTSG.Scheduling_Group_Id
				WHERE prtsk.ProjTaskId = @TaskId AND prtsk.Schedule_Type_Id IN (2,4)

				
				-- Calcualte LSP.
				EXEC usp_Update_ProjTask_Last_Occ @piProjTaskID = @TaskId
				
			END
		END

		SET @Error=@@ERROR
				
		IF @Error<>0
		BEGIN
			ROLLBACK TRANSACTION 
			SET @Message='Error updating strategy'

			--AL: 19/02/09
			CLOSE ds_Cursor
			DEALLOCATE ds_Cursor

			DROP TABLE #OrderedTasks

			RETURN
		END

		-- Run re-planning for task
		IF EXISTS (SELECT ProjTaskId FROM tblProjTasks WHERE ProjTaskId = @TaskId AND Scheduling_Group_Id IS NOT NULL)
			EXEC NEXT_OCC_CALC_P @Proj_Task_Id = @TaskId
	
		SET @Error=@@ERROR
				
		IF @Error<>0
		BEGIN
			ROLLBACK TRANSACTION 
			SET @Message='Error updating strategy'

			--AL: 19/02/09
			CLOSE ds_Cursor
			DEALLOCATE ds_Cursor

			DROP TABLE #OrderedTasks

			RETURN
		END

		-- Get Caculated Dates / Usage	(Note: in batch update, every cycle will update these values - OK as the last one will be OK)
		SELECT  @pfNextOccUsage = NextOcc,
				@pdtNextOccDate = NextOccDate
		FROM	tblProjTasks
		WHERE	ProjTaskId = @TaskId

		--AL: 12/06/08
		IF (@RepairDescription IS NOT NULL)
		BEGIN
			EXEC NEXT_OCC_STRATEGY_DEFAULT_ADD_P @ProjTaskId=@TaskId
			UPDATE NEXT_OCC_STRATEGY SET Repair_Description=@RepairDescription WHERE Proj_Task_Id=@TaskId
		END

		SET @Error=@@ERROR
				
		IF @Error<>0
		BEGIN
			ROLLBACK TRANSACTION 
			SET @Message='Error updating strategy'

			--AL: 19/02/09
			CLOSE ds_Cursor
			DEALLOCATE ds_Cursor

			DROP TABLE #OrderedTasks

			RETURN
		END

		--AL: 19/02/09
		FETCH NEXT FROM ds_Cursor 
		INTO  @TaskId,@PlanOptId

	END

	--AL: 19/02/09
	CLOSE ds_Cursor
	DEALLOCATE ds_Cursor

	DROP TABLE #OrderedTasks


	COMMIT TRAN

GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[TASK_DEFAULT_ADD_GET_P]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[TASK_DEFAULT_ADD_GET_P]
GO

create Procedure [dbo].[TASK_DEFAULT_ADD_GET_P]
/******************************************************************************
	File: 
	Name: TASK_DEFAULT_ADD_GET_P

	Called By: 

	Desc: Get Task defaults, Task Operation defaults, Task Operation parts, labour, misc,
	      purchase orders,
		  Add a task with the default values.
	      

	Auth: Veronika Vasylyeva
*******************************************************************************
		Change History
*******************************************************************************
	Date:		Author:		Description:
	--------	--------	----------------------------------------
	26 Aug 11	V Vasylyeva	#2351: Set occurrence type to the default
	10 Feb 10	V Vasylyeva	AmtMobile: Add Checksheets when create from std jobs or strategy tasks
	06 OCt 10	K Nagarajan	#603: Inventory Validation Error adding parts to work order from standard job
	25 Aug 10	K Nagarajan	#317: Error Message After Parts Selected from Inventory
	18 Aug 10	V Vasylyeva	#261: Primary key on identiy field (-1,-1)
							 Msg 4819 Cannot bulk load. The bulk data stream was incorrectly 
							 specified as sorted or the data violates a uniqueness constraint 
							 imposed by the target table. Sort order incorrect for the following two rows: 
							 primary key of first row: (-1), primary key of second row: (-2).
							 Error 4819 Microsoft is going to adress in the future
							 
	12 Aug 10	V Vasylyeva	#40 Task types are not transferring to work orders from a standard job.
	10 Aug 10	DS			Added CreatePOModeAllowCreateERPWO
	08 Apr 10	AL			CR8869: TASK_PARTS_READY_STATUS_UPDATE_P only for qty >0
	06 Apr 10	AL			CR8869: implemented logic from TASK_PARTS_READY_STATUS_UPDATE_P
	31-Mar-2010	AL			CR8869: Added new JR fields in defaults
	29 Mar 10	AL			CR8865: provide Health_Safety_ID in defaults, + HealthSafetyAuditable and LastNotified
	15 Dec 09	AL			CR8638: Added showOPParts_PartsBookLookup
	 1 Dec 09	V Vasylyeva	CR8498: Importing a std job to an existing work order asks "do you want 
									 to over-ride operations from standard job" 
									 but replaces the Cost Centre and Cost Bearer with blanks because the std job 
									 doesn't have thes fields in the operation. 

	26 Nov 09	V Vasylyeva CR8449: removed createbyuser
	25 Nov 09	AL			CR8449: Added missing createByuser to returned dataset
	23 Nov 2009	V Vasylyeva	CR8449: Save createByuser
	10-Sep-2009	AL			CR8387: always have parts required set	
	03 Sep 09	K Nagarajan Added Detailed Description (CBM Enhancements)
	01 Jul 09	AL			CR8301: set some parts values to null if equal to ''
	30 Jun 09	V Vasylyeva	CR8294 When a new Workorder is CREATED from a Standard Job, the Cost Bearer, 
							Expense Element, Cost Centre and Workgroup fields are not populated. 
							This is also the case when a Workorder is CREATED automatically from a 
							Strategy Task that is linked to Standard Job(s).

	26 May 09	AL			CR8041: put table columns in the same order as TASK_GET_P
	13 May 09	V Vasylyeva	CR8036: If NextOccDate is null - take the earliest occurrence date for the strategy task 
								(tblProjTaskOccs). 	if there are no future occurrencies - set the end date of equipment
	12-May-09	V Vasylyeva			CR8096: tblLabourRates -->LABOUR_RATE_DEF_V
	 6 May 09	VV			External documents
	30 Apr 09	VV			CR8035: Library Documents
	27-Apr-09	VV			CR8035: Library Link
	22 Apr 09	AL			CR8013: Added PricingGroup and PrimaryCurrency
	08 Apr 09	AL			CR7933: fixed finperiod
	07 Apr 09	AL			CR7933: populate TO P/L/M finperiod and currencyID + exchangeRate
	04 Apr 09	AL			CR7933: ManualEntryActuals* as int
	03 Apr 09	AL			CR7933: added new fields
	27-Mar-09	AL			CR7932: ACW changes: place checks before call AND any creation to branch out before (backlogs from EMI not in transaction)
	26-Mar-09	AL			CR7932: ACW changes: have checks before call 
	24 Mar 09	AL			CR7932: Tasks created from std job change
	24 Mar 09	AL			CR7932: remove branch out if no operation in @add=1
	23 Mar 09	AL			CR7932: expected_duration cannot be null
	23 Mar 09	AL			CR7932: Tasks created from std job get task type from std job + check if it is not 0 for ACW
	19 Mar 09	AL			CR7932: ACW changes
	17 Mar 09	AL			CR7933: added new AMT_TYPED_VARIABLEs
	16-Mar-09	AL			CR7933: added InvNotFound + SOSDescription 
	11-Mar-09	AL			CR7933: removed OpEditionLabourWG
	10-Mar-09	AL			CR7933: Added new fields 
	20-Feb-09	AL			CR7896: set task's planned duration against std job's header duration
	11-Feb-09	AL			CR7845: do not authorise unplanned sched tasks added to event
	11-Feb-09	AL			CR7846: added feedback info 
	10-Feb-09	AL			CR7845: Planning_Notes and Operation_Instructions to be varchar(8000)
	09-Feb-09	AL			CR7845: Always have 1 operation and labour
	06-Feb-09	AL			Changed ManualWOClosure to ACWManualWOClosure
	03-Feb-09	AL			CR7844: Added Task Authorisation info + removed DefaultTaskAuthorised
	20 Jan 08	V Vasylyeva	CR7835 Changes to task description for the strategy tasks
	12 Dec 08	VV			CR7787 If Job code is empty for strategy task and cost allocation
							the task operation will not be created
	23 Oct 08	VV			CR7244 Changed linking of the library documents
	11 Oct 08	DS			Added WOCreateFromPO
	17/09/08	AL			removed links to tblqualifier and tbluoms
	29 Aug 08	AL			Added WarrantyParts
	12 Jun 08	AL			Changed Repair Description size
	22-May-2008	A Lass.		changed Planning_Notes and Operation_Instructions to be varchar(MAX)
	21 Apr 2008	KN			Added "OverwriteLifeAchieved","IsOverwriteLife"
	10 Apr 2008	K Nagarajan	Added ForWOCreate Parameter which returns only the Task Defaults.
    21 Feb 2008	AL			Changed PlanDateLocked to ReviewStatusID
	13 Feb 2008	K Nagarajan	Added Default CBM Alert Task Counter for CBM Tasks.
	11 Feb 2008	K Nagarajan	Added @RCMConditionMonitoringId,@RCMRuleId 
	 1 Nov 2007	V Vasylyeva	Added default work groups
	18 Oct 2007	V Vasylyeva	Added Task_header_Id if created from std job or workorder
	15 Oct 2007 KN			Added WorkOrderId
	08 Oct 2007	KN			Added "LifeConfirmed","ChangeoutCategory"
	20 Aug 07	V Vasylyeva	Added Warranty days and warranty usage into task creation
	18 Jul 07	V Vasylyeva	Added SourceOfSupplyId,COLLATE database_default
    02 Jul 07	V Vasylyeva	Added system settings for task_authorised
*******************************************************************************/
	/* Param List */
@Eqp_Plan_ID int,
@EventId int=0, 
@Proj_Task_Opt_Id int =NULL,
@Std_Job_Id int=NULL,
@PricedJobId int=NULL,
@TaskDefaults bit=1, 
@Add bit=0,
@UserId int=0,
@TaskId int=0 OUTPUT,
@WorkOrderId INT = 0,
@RCMConditionMonitoringId INT = 0,
@RCMRuleId INT = NULL,
@IsPrimaryTask BIT = 0,
@ForWOCreate BIT = 0,
--AL: 23/03/09
@Message varchar(8000)='' OUTPUT ,
@TaskDesc VARCHAR(MAX)  = '',
@WOSymptoms VARCHAR(MAX) = '',
@RCMProjTaskId INT = 0,
@CopyEWTemplateFiles bit=0 OUTPUT

AS

-- IF @TaskDefaults=1 select defaults for TASK and operations
-- IF @TaskDefaults=0 select defaults for operations only

--If @Add=0 - select defaults
--If @Add=1 - add task with default values to the database

--Task defaults: [TASK_GET_DEFAULTS_P]
DECLARE @Description varchar(500)
DECLARE @Task_Type_ID int
DECLARE @Component_Code_ID int
DECLARE @Modifier_ID int
DECLARE @Application_Code_ID int
DECLARE @Occurrence_Type_Id int
DECLARE @Task_Status_ID int
DECLARE @Symptom_ID int
DECLARE @Cause_ID int
DECLARE @Repair_Code_ID int
DECLARE @Priority_ID int
DECLARE @Task_Mode_ID int
DECLARE @Source_ID int 
DECLARE @PartsStatusRequired bit
DECLARE @PartsStatusOrdered bit
DECLARE @PartsStatusReady bit
DECLARE @ExtDocUseClientCredentials bit/*VV 30-Apr-2009*/
DECLARE @Cost_Bearer_ID int
DECLARE @Cost_Centre_ID int
DECLARE @Part_Entry_Distribution_Code_Id int
DECLARE @Labour_Entry_Distribution_Code_Id int
DECLARE @Misc_Entry_Distribution_Code_Id int
DECLARE @Expected_Duration float
DECLARE @Expected_Labor_Hours float
DECLARE @Strategy_Usage real
DECLARE @Strategy_QUOM_ID int
DECLARE @Strategy_Date datetime
DECLARE @Strategy_Locked bit
DECLARE @Task_Header_Id int
DECLARE @Strategy_Repair_Description varchar(MAX)	--AL: 12/06/08
DECLARE @Final_Change float
DECLARE @Risk_Life_Left float
DECLARE @Strategy_Frequency float
DECLARE @Last_Performed float
DECLARE @Last_Scheduled float
DECLARE @Last_Performed_Date datetime
DECLARE @Last_Scheduled_Date datetime
DECLARE @Site_Id int
DECLARE @Branch_Id int
DECLARE @Customer_Id int
DECLARE @Entry_Distribution_Code_Id int
DECLARE @Parts_Cost_Expense_Id int
DECLARE @Labour_Cost_Expense_Id int
DECLARE @Misc_Cost_Expense_Id int
DECLARE @Warranty_Days float
DECLARE @Warranty_Usage float
DECLARE @ProjTaskId int
DECLARE @LastOcc float
DECLARE @First float
DECLARE @EndUsage float
DECLARE @EndDate datetime
DECLARE @Frequency float
DECLARE @Task_Mode_GT int
DECLARE @Task_Mode_AW int
DECLARE @Component varchar(50)
DECLARE @UseSchedulingSystemLastOcc bit
DECLARE @DefDescription varchar(50)
DECLARE @PrimCurrencyId int
DECLARE @Price_Group_ID int
DECLARE @FleetId int
DECLARE @ManufacturerId int
DECLARE @Def_Misc_Category_Id int
DECLARE @Counter int
DECLARE @Site varchar(50)
DECLARE @Branch varchar(50)
DECLARE @Strategy_Part_Num varchar(50)
DECLARE @IsEditable bit
DECLARE @CompanyCode varchar(50)
DECLARE @AMTPlanningModeId int

DECLARE @Task_Status_OUS int
DECLARE @Task_Status_YTS int
DECLARE @TaskStatusIP int
DECLARE @TaskStatusC int
DECLARE @TaskStatusA int
DECLARE @SJBranchId int
DECLARE @SJPriceGroupId int
DECLARE @ModelId int
--DECLARE @TaskAuthorised bit	AL: 03/02/09
DECLARE @TaskOperationId int
/*VV 1/11/2007*/
DECLARE @WorkGroupId int
--AL: 29/03/10
DECLARE @Health_Safety_ID int

DECLARE @OpCount int

DECLARE @ChooseWODate bit
DECLARE @WOCreationDateFutureONLY bit

DECLARE @LifeConfirmed bit
SET @LifeConfirmed = 1


DECLARE @ChangeoutCategoryId INT
SELECT @ChangeoutCategoryId = ChangeoutCategoryId FROM CHANGEOUT_CATEGORY WHERE DefaultRecord = 1

DECLARE @IsOverwriteLife bit
SET @IsOverwriteLife = 0

DECLARE @ExternalDocumentSystem bit /*VV 27-Apr-2009*/

SET @Task_Status_OUS=1
SET @Task_Status_YTS=6
SET @TaskStatusIP =2
SET @TaskStatusC =3
SET @TaskStatusA =5

DECLARE @PartsAvailableFromERP bit
DECLARE @WOCreateFromPO bit
--AL: 03/02/09
DECLARE @ACWManualWOClosure BIT	
DECLARE @AuthorisationMode INT	
DECLARE @AuthorisationTolerancePct FLOAT	

DECLARE @FeedbackPartsTab bit	--AL: 10/02/09
DECLARE @FeedbackLabourTab bit	--AL: 10/02/09
DECLARE @FeedbackMiscTab bit	--AL: 10/02/09


SELECT TOP 1 @WOCreateFromPO = WOCreateFromPO,
	@PartsAvailableFromERP=Parts_Available_From_ERP,
	@ChooseWODate=Choose_WO_Date,
	@WOCreationDateFutureONLY=WO_CreationDate_FutureONLY,
	@ACWManualWOClosure=ACWManualWOClosure,
	@AuthorisationMode=AuthorisationMode,
	@AuthorisationTolerancePct=AuthorisationTolerancePct,
	@FeedbackPartsTab=FeedbackPartsTab,	--AL: 10/02/09
	@FeedbackLabourTab=FeedbackLabourTab,	--AL: 10/02/09
	@FeedbackMiscTab=FeedbackMiscTab	--AL: 10/02/09

FROM AMT_VARIABLE

DECLARE @AuthModeNone int, @AuthModeSimple int, @AuthModeAdvanced int
SET @AuthModeNone=0
SET @AuthModeSimple=1
SET @AuthModeAdvanced=2


--AL: 10/03/09
DECLARE @ManualEntryActualsParts INT
DECLARE @ManualEntryActualsLabour INT
DECLARE @ManualEntryActualsMisc INT
DECLARE @OpEditionPartsStockCode BIT
DECLARE @OpEditionPartsCB INT
DECLARE @OpEditionPartsCC INT
DECLARE @OpEditionPartsEE INT
DECLARE @OpEditionPartsWG INT
DECLARE @OpEditionLabourCB INT
DECLARE @OpEditionLabourCC INT
DECLARE @OpEditionLabourEE INT
--DECLARE @OpEditionLabourWG INT
DECLARE @OpEditionMiscCB INT
DECLARE @OpEditionMiscCC INT
DECLARE @OpEditionMiscEE INT
DECLARE @OpEditionMiscWG INT
DECLARE @ShowOPParts_LookupPartsDetails BIT
DECLARE @ShowOPParts_SearchPurchaseHistory BIT
DECLARE @ShowOPParts_AssignSupplier BIT
DECLARE @ShowOPParts_InventorySearch BIT
DECLARE @ShowOPParts_InventoryValidation BIT
DECLARE @ShowOPParts_PartsBookLookup BIT	--AL: 15/12/09
DECLARE @ShowPOAssignNo BIT 
DECLARE	@ShowPOActions BIT
DECLARE @OpEditionPlanStatus INT

EXEC TASK_OPERATION_CONFIGURATION_GET_P
	@ManualEntryActualsParts=@ManualEntryActualsParts OUTPUT,
	@ManualEntryActualsLabour=@ManualEntryActualsLabour OUTPUT,
	@ManualEntryActualsMisc=@ManualEntryActualsMisc OUTPUT,
	@OpEditionPartsStockCode=@OpEditionPartsStockCode OUTPUT,
	@OpEditionPartsCB=@OpEditionPartsCB OUTPUT,
	@OpEditionPartsCC=@OpEditionPartsCC OUTPUT,
	@OpEditionPartsEE=@OpEditionPartsEE OUTPUT,
	@OpEditionPartsWG=@OpEditionPartsWG OUTPUT,
	@OpEditionLabourCB=@OpEditionLabourCB OUTPUT,
	@OpEditionLabourCC=@OpEditionLabourCC OUTPUT,
	@OpEditionLabourEE=@OpEditionLabourEE OUTPUT,
	--@OpEditionLabourWG=@OpEditionLabourWG OUTPUT,
	@OpEditionMiscCB=@OpEditionMiscCB OUTPUT,
	@OpEditionMiscCC=@OpEditionMiscCC OUTPUT,
	@OpEditionMiscEE=@OpEditionMiscEE OUTPUT,
	@OpEditionMiscWG=@OpEditionMiscWG OUTPUT,
	@ShowOPParts_LookupPartsDetails=@ShowOPParts_LookupPartsDetails OUTPUT,
	@ShowOPParts_SearchPurchaseHistory=@ShowOPParts_SearchPurchaseHistory OUTPUT,
	@ShowOPParts_AssignSupplier=@ShowOPParts_AssignSupplier OUTPUT,
	@ShowOPParts_InventorySearch=@ShowOPParts_InventorySearch OUTPUT,
	@ShowOPParts_InventoryValidation=@ShowOPParts_InventoryValidation OUTPUT,
	@ShowOPParts_PartsBookLookup=@ShowOPParts_PartsBookLookup OUTPUT,
	@ShowPOAssignNo=@ShowPOAssignNo OUTPUT,
	@ShowPOActions=@ShowPOActions OUTPUT,
	--AL: 03/04/09
	@OpEditionPlanStatus=@OpEditionPlanStatus OUTPUT

/*AL 31/03/10*/
DECLARE @AutoLookupPartsReadyStatus bit
EXEC AMT_TYPED_VARIABLE_GET_P @Value_Name='AutoLookupPartsReadyStatus',  @Varchar_Value=@AutoLookupPartsReadyStatus OUTPUT

--DS 2010-08-10
DECLARE @CreatePOModeAllowCreateERPWO bit
EXEC AMT_TYPED_VARIABLE_GET_P @Value_Name='CreatePOModeAllowCreateERPWO',  @Varchar_Value=@CreatePOModeAllowCreateERPWO OUTPUT


SET @DefDescription='Various'

SET @Task_Mode_GT =1
SET @Task_Mode_AW=2

SET @EventId=ISNULL(@EventId,0)


SET @Proj_Task_Opt_Id=ISNULL(@Proj_Task_Opt_Id,0)
SET @Std_Job_Id=ISNULL(@Std_Job_Id,0)
SET @PricedJobId=ISNULL(@PricedJobId,0)
SET @WorkOrderId = ISNULL(@WorkOrderId, 0)

SET @IsPrimaryTask = ISNULL(@IsPrimaryTask,0)

IF @Proj_Task_Opt_Id>0 OR @Std_Job_Id>0  OR @PricedJobId>0
BEGIN
	SET @IsEditable=0
END
ELSE
BEGIN
	SET @IsEditable=1
END

IF @Proj_Task_Opt_Id >0 OR @Std_Job_Id>0 OR @PricedJobId>0
BEGIN
	SELECT @PrimCurrencyId=CurrencyID FROM tblCurrencies WHERE PrimaryCurr<>0
END

--If Priced job is supplied take std job, price group, branch from
--tblPricedjobs

IF @PricedJobId>0
BEGIN
	SELECT @Std_Job_Id=StdJobId,@SJBranchId=BranchId,@SJPriceGroupId=Price_Group_Id
	FROM tblPricedJobs WHERE PricedJobId=@PricedJobId
END

If @Proj_Task_Opt_Id >0
BEGIN

	--AMT variables
	SELECT @UseSchedulingSystemLastOcc=UseSchedulingSystemLastOcc FROM AMT_VARIABLE

	SELECT @Def_Misc_Category_Id=Misc_Category_Id FROM MISC_CATEGORY WHERE Default_Record=1

	--Select strategy defaults
	SELECT @Symptom_ID=Symptom_ID FROM SYMPTOM WHERE Strategy_Default = 1	
		
	SELECT @Cause_ID=Cause_ID FROM CAUSE WHERE Strategy_Default = 1	
	
	SELECT 
	@Repair_Code_Id=CASE COUNT(ProjTaskAmtId) WHEN 1 THEN MAX(JobCodeId) ELSE NULL END,
	@Expected_Labor_Hours=SUM(LaborHours),
	@Expected_Duration=SUM(Duration)
	FROM PROJ_TASK_AMT_COST_1_V
	WHERE ProjTaskOptId=@Proj_Task_Opt_Id

	SELECT	
	@ProjTaskId=PT.ProjTaskId,
	@Description=/*VV 20-Jan-09*/ISNULL(PT.Task_Description,TH.Description),
	@Task_Type_ID=PT.TaskTypeId,
	@Component_Code_ID=PT.ComponentCodeId,
	@Modifier_ID=PT.ModifierId,
	@Application_Code_ID=PT.ApplicationCodeId,
	/*VV #2351 @Occurrence_Type_Id=PTO.OccurrenceTypeId,	*/
	@Strategy_Usage =PT.NextOcc,
	@Strategy_QUOM_ID=PT.UsageQUOMId,
	@Strategy_Date =PT.NextOccDate,
	--AL: 21/02/08
	--@Strategy_Locked =PT.PlanDateLocked,
	@Strategy_Locked =CASE WHEN PT.ReviewStatusID=3 THEN CONVERT(BIT,1) ELSE CONVERT(BIT,0) END,
	@Task_Header_Id=PT.Task_Header_Id,
	@Strategy_Repair_Description =NOS.Repair_Description,	
	@Strategy_Frequency =PTO.Frequency,
	@Last_Performed =CASE WHEN @UseSchedulingSystemLastOcc =1 AND SchedulingTaskId>0 THEN Ext_Last_Occ ELSE AMT_WO_Last_Occ END,
	@Last_Scheduled =CASE WHEN @UseSchedulingSystemLastOcc =1 AND SchedulingTaskId>0 THEN Ext_Last_Sched_Occ ELSE AMT_Last_Sched_Occ END,
	@Last_Performed_Date=CASE WHEN @UseSchedulingSystemLastOcc =1 AND SchedulingTaskId>0 THEN Ext_Last_Occ_Date ELSE AMT_WO_Last_Occ_Date END,
	@Last_Scheduled_Date=CASE WHEN @UseSchedulingSystemLastOcc =1 AND SchedulingTaskId>0 THEN Ext_Last_Sched_Date ELSE AMT_Last_Sched_Date END, 
	@LastOcc=PT.LastOcc,
	@First=PTO.[First],
	@EndUsage=CASE WHEN ISNULL(EPR.EndQUOMId,0)=ISNULL(PT.UsageQUOMId,0) THEN EPR.EndUsage 
			       ELSE dbo.GET_EQP_PROJ_END_USAGE_F(EPR.EqpProjId, PT.UsageQUOMID,EPR.EndDate) END,
	@EndDate=EPR.EndDate,/*VV CR8036*/
	@Warranty_Days=PT.Warranty_Period_Days,
	@Warranty_Usage=PT.Warranty_Period_Usage,
	@ManufacturerId=PT.ManufacturerId,
	@Strategy_Part_Num=ISNULL(P.Part, RP.Part_Number) 
	FROM
	TASK_HEADER TH
		INNER JOIN
	tblProjTasks PT
		ON TH.Task_Header_Id=PT.Task_Header_Id
		INNER JOIN
	tblEqpProjs EPR
		ON PT.EqpProjId=EPR.EqpProjId
		INNER JOIN
	tblProjTaskOpts PTO
		ON PT.ProjtaskId=PTO.ProjTaskId
		LEFT OUTER JOIN
	NEXT_OCC_STRATEGY NOS
		ON PT.ProjTaskId=NOS.Proj_Task_Id
		LEFT OUTER JOIN
	tblParts P 
		ON PT.Part_Id=P.PartId
		LEFT OUTER JOIN
	ROTABLE_PART RP
		ON PT.Rotable_Part_Id=RP.Rotable_Part_Id		
	WHERE PTO.ProjTaskOptId=@Proj_Task_Opt_Id		
	

	--Final change usage
	SELECT @Final_Change=MAX(OccUsage) FROM tblProjTaskOccs WHERE ProjTaskId=@ProjTaskId

	SET @Final_Change=ISNULL(ISNULL(@Final_Change,@LastOcc),@First)

	/*SET @Risk_Life_Left =100.00*(@Frequency-(@EndUsage - @Final_Change ))/NULLIF(@Frequency,0)*/
	SET @Risk_Life_Left=dbo.RISK_LIFE_LEFT_F(@Frequency,@EndUsage,@Final_Change)

	/*VV CR8036*/
	IF @Strategy_Date IS NULL
	BEGIN
		/*If NextOccDate is null - take the earliest occurrence date for the strategy task (tblProjTaskOccs) 
		if there are no future occurrencies - set the end date.*/
		SELECT @Strategy_Date=MIN(OC.OccDate),@Strategy_Usage=MIN(OC.OccUsage )
		FROM 
		tblProjTaskOccs OC
			INNER JOIN
		tblProjTaskOpts PTO
			ON OC.ProjTaskId=PTO.ProjTaskId
		WHERE PTO.ProjTaskOptId=@Proj_Task_Opt_Id
	END

	SET @Strategy_Date=ISNULL(@Strategy_Date,@EndDate)
	SET @Strategy_Usage=ISNULL(@Strategy_Usage,@EndUsage)
END

IF @Std_Job_Id>0
BEGIN
	SELECT @Description=LEFT(StdJob,500), 
	@Component_Code_ID=ComponentCodeId, 
	@Modifier_ID=ModifierCodeId, 
	@Repair_Code_ID=JobCodeId,
	--AL: 20/02/09
	@Expected_Duration=Duration_Hrs,
	/*VV #40*/
	@Task_Type_ID=TaskTypeId

	FROM tblStdJobs WHERE StdJobId=@Std_Job_Id

	/* VV #40 SELECT @Task_Type_ID=TaskTypeID FROM tblTaskTypes WHERE Default_Record = 1*/

	SELECT @Application_Code_ID=ApplicationCodeID FROM tblApplicationCodes WHERE Default_Record = 1

	-- Task header
	EXEC TASK_HEADER_MANAGER_P @Comp_Code_id=@Component_Code_ID,
								@Mod_Code_id=@Modifier_ID,
								@Task_Type_id =@Task_Type_ID,
								@Application_Code_id=@Application_Code_ID,
								@Task_Header_Id=@Task_Header_Id OUTPUT
END

IF @WorkOrderId > 0
BEGIN
	SELECT
		@Component_Code_ID = AMTComponentCodeId, 
		@Modifier_ID = AMTModifierId, 
		@Task_Type_ID = AMTTaskTypeId, 
		@Application_Code_ID = AMTApplicationCodeId, 
		@Occurrence_Type_Id = AMTOccurrenceTypeId,
		@Strategy_Date=AMTStartDate,
		@Task_Header_Id=Task_Header_Id
	FROM    
		tblWorkOrders
	WHERE
		WorkOrderId = @WorkOrderId
END

SELECT   
	@Site_Id=S.SiteId,
	@Site=S.Site,
	@Branch_Id=S.BranchId, 
	@Branch=B.Branch,
	@Cost_Bearer_ID=EP.Default_Cost_Bearer_ID, 
	@Cost_Centre_ID=EP.Cost_Centre_ID, 
	@Part_Entry_Distribution_Code_Id=EP.Parts_Entry_Distribution_Code_Id, 
	@Labour_Entry_Distribution_Code_Id=EP.Labour_Entry_Distribution_Code_Id, 
	@Misc_Entry_Distribution_Code_Id=EP.Misc_Entry_Distribution_Code_Id,
	@Customer_id=EP.Customer_Id,
	@Task_Mode_ID=CASE B.Enable_Auto_WO_Create WHEN 1 THEN @Task_Mode_AW ELSE @Task_Mode_GT END,
	@Price_Group_ID=F.Price_Group_ID,
	@FleetId=EP.FleetId,
	@AMTPlanningModeId=EP.Advanced_Planning,
	@ModelId=E.ModelId,
	@WorkGroupId=WG.Work_Group_Id
FROM   
tblEquipment E
	INNER JOIN      
tblEqpPlans AS EP 
	ON E.EquipmentId=EP.EquipmentId
	INNER JOIN
tblFleets F
	ON EP.FleetId=F.FleetId
	INNER JOIN
tblSites S
	ON F.SiteId=S.SiteId
	INNER JOIN
tblBranches B
	ON S.BranchId=B.BranchId
	/*VV 1/11/2007*/
	LEFT OUTER JOIN
WORK_GROUP WG
	ON S.SiteId=WG.Site_Id/* End VV 1/11/2007*/
WHERE EP.EqpPlanId=@Eqp_Plan_Id
/*VV 1/11/2007*/
AND (WG.Default_Record=1 OR WG.Default_Record IS NULL)

SET @SJBranchId=@Branch_Id
SET @SJPriceGroupId=@Price_Group_Id

IF ISNULL(@RCMRuleId,0) > 0 AND ISNULL(@RCMConditionMonitoringId,0) > 0
BEGIN

	/*KN: TODO Select the default Task Counter.*/

	DECLARE @DefaultCBMAlertTaskCounterId INT
	SELECT @DefaultCBMAlertTaskCounterId = CAST(Varchar_Value AS INT) FROM AMT_TYPED_VARIABLE WHERE Value_Name = 'DefaultCBMAlertTaskCounterId'
 	
	SET @DefaultCBMAlertTaskCounterId = ISNULL(@DefaultCBMAlertTaskCounterId,-1)


	SELECT 
		@Component_Code_ID = PT.ComponentCodeId,
		@Modifier_ID = PT.ModifierId,
		@Task_Type_ID = PT.TaskTypeId,
		@Application_Code_ID = ISNULL(AC.ApplicationCodeId, RCS.ApplicationCodeId),
		@Occurrence_Type_Id = FM.OccurrenceTypeId,
		@Description = R.PlanningTaskMsg + ISNULL(@TaskDesc ,'') 
	FROM
		RCM_RULE R
		LEFT JOIN RCM_CONDITION_MONITORING RCM ON R.RCMConditionMonitoringId = RCM.RCMConditionMonitoringId
		LEFT JOIN RCM_FAILURE_MODE FM 	 ON RCM.RCMFailureModeId = FM.RCMFailureModeId
		LEFT JOIN RCM_COMPONENT_STRUCTURE RCS ON FM.RCMComponentStructureId = RCS.RCMComponentStructureId
		LEFT JOIN tblApplicationCodes AC ON AC.ApplicationCodeId = @DefaultCBMAlertTaskCounterId
		LEFT JOIN tblProjTasks PT ON PT.ProjTaskId = @RCMProjTaskId
	WHERE  R.RCMConditionMonitoringId = @RCMConditionMonitoringId AND R.RCMRuleId = @RCMRuleId
 
 
END

IF @TaskDefaults=1
BEGIN
	IF @Symptom_ID IS NULL SELECT @Symptom_ID=Symptom_ID FROM SYMPTOM WHERE Default_Record = 1

	IF @Cause_ID IS NULL SELECT @Cause_ID=Cause_ID FROM CAUSE WHERE Default_Record = 1

	IF @Repair_Code_ID IS NULL SELECT @Repair_Code_ID=Repair_Code_ID FROM REPAIR_CODE WHERE Default_Record = 1
	 
	IF @Task_Type_ID IS NULL SELECT @Task_Type_ID=TaskTypeID FROM tblTaskTypes WHERE Default_Record = 1

	IF @Component_Code_ID IS NULL SELECT @Component_Code_ID=ComponentCodeID FROM tblComponentCodes WHERE Default_Record = 1

	IF @Modifier_ID IS NULL SELECT @Modifier_ID=ModifierID FROM tblModifierCodes WHERE Default_Record = 1

	IF @Application_Code_ID IS NULL SELECT @Application_Code_ID=ApplicationCodeID FROM tblApplicationCodes WHERE Default_Record = 1

	IF @Occurrence_Type_Id IS NULL SELECT @Occurrence_Type_Id=OccurrenceTypeId FROM tblOccurrenceTypes WHERE Default_Record = 1
	
	--AL: 29/03/10
	IF @Health_Safety_ID IS NULL SELECT @Health_Safety_ID=Health_Safety_ID FROM HEALTH_SAFETY WHERE DefaultRecord <> 0

	SELECT @Source_Id= Source_Id FROM SOURCE where Default_Record = 1
	SELECT @Priority_ID=Priority_ID FROM PRIORITY WHERE Default_Record = 1

--	SET @Parts_Resources_Identified=0
	SET @PartsStatusRequired=1	--AL: 10/09/09
	SET @PartsStatusOrdered=0
	SET @PartsStatusReady=0

	/*
	SET @Labour_Resources_Identified=1
	SET @Location_Identified=1
	SET @Tooling_Resources_Identified=1
	*/

	
	--TASK defaults
	DECLARE @z_TASK TABLE(
	Task_ID int ,
	Description varchar(500) COLLATE database_default,
	Eqp_Plan_ID int  ,
	Task_Type_ID int  ,
	Component_Code_ID int  ,
	Modifier_ID int  ,
	Application_Code_ID int  ,
	Occurrence_Type_Id int  ,
	Priority_ID int  ,
	Source_ID int,
	Task_Status_ID int ,
	Symptom_ID int  ,
	Cause_ID int  ,
	Expected_Duration float  ,
	Expected_Labor_Hours float,
	Planning_Notes varchar(8000) COLLATE database_default,	--AL: 22/05/08, 10/02/09
	Work_Order varchar(50) COLLATE database_default,
	Actual_Duration float  ,
	Actual_Labor_Hrs float  ,
	Primary_Cause bit  ,
	Notes varchar(1000) COLLATE database_default,
	Task_Mode_ID int ,
--	Parts_Resources_Identified bit  ,
	PartsStatusRequired bit  ,
	PartsStatusOrdered bit  ,
	PartsStatusReady bit  ,
	Strategy_Usage real,
	Strategy_QUOM_ID int,
	Strategy_Proj_Task_Opt_ID int,
	Planned_Proj_Task_Opt_ID int,
	Strategy_Date datetime,
	Strategy_Locked bit  ,
	Repair_Code_Id int  ,
	Task_Header_Id int  ,
	Strategy_Repair_Description varchar(MAX) COLLATE database_default,	--AL: 12/06/08
	Cost_Bearer_ID int,
	Task_Warranty bit  ,
	Redo_Work_Order_ID int,
	View_Warranty bit  ,
	Health_Safety_Id int,
	Break_Down bit  ,
	Planned_Down_Time datetime,
	Actual_Down_Time datetime,
	Planned_Offset float  ,
	Final_Change float  ,
	Risk_Life_Left float  ,
	Strategy_Frequency float  ,
	Last_Performed float ,
	Last_Scheduled float,
	Last_Performed_Date datetime,
	Last_Scheduled_Date datetime,
	Site_Id int,
	Cost_Centre_Id int,
	Branch_Id int,
	Customer_Id int,
	Part_Entry_Distribution_Code_Id int,
	Part_Cost_Expense_Id int,
	Labour_Cost_Expense_Id int,
	Misc_Cost_Expense_Id int,
	Warranty_Days float  ,
	Warranty_Usage float,
	Strategy_Part_Num varchar(50) COLLATE database_default,
	Labour_Entry_Distribution_Code_Id int,
	Misc_Entry_Distribution_Code_Id int,
	AMTPlanningModeId int,
	Specific_Operation_Codes bit DEFAULT 1,
	ChangeoutCategoryId int,
	/*VV 1/11/2007*/
	Work_Group_Id int,
	Def_Work_Group_Id int,
	WOCreateFromPO bit,
	--AL: 29/03/10
	LastNotified datetime,
	--AL: 31/03/10
	AuthorisationRequestByID int,
	AuthorisationRequestDate datetime,
	ResourceStatusReady bit,
	PRIMARY KEY(Task_Id))

	INSERT INTO @z_TASK(
	Task_ID, Description, Eqp_Plan_ID, Task_Type_ID, Component_Code_ID, Modifier_ID, Application_Code_ID, 
	Occurrence_Type_Id, Priority_ID, Source_ID, Task_Status_ID, Symptom_ID, Cause_ID, Expected_Duration, 
	Expected_Labor_Hours, Task_Mode_ID, --Parts_Resources_Identified,
	PartsStatusRequired, PartsStatusOrdered, PartsStatusReady,  
	Strategy_Usage,  Strategy_QUOM_ID, 
	Strategy_Proj_Task_Opt_ID, Planned_Proj_Task_Opt_ID, Strategy_Date, Strategy_Locked, 
	Repair_Code_Id, Task_Header_Id, Strategy_Repair_Description,Cost_Bearer_ID, Final_Change, Risk_Life_Left, 
	Strategy_Frequency, Last_Performed, Last_Scheduled, Last_Performed_Date, Last_Scheduled_Date, Site_Id, 
	Cost_Centre_Id, Branch_Id, Customer_Id, Part_Entry_Distribution_Code_Id, Part_Cost_Expense_Id, 
	Labour_Cost_Expense_Id, Misc_Cost_Expense_Id, Warranty_Days, Warranty_Usage,Strategy_Part_Num,
	Labour_Entry_Distribution_Code_Id, Misc_Entry_Distribution_Code_Id,AMTPlanningModeId,ChangeoutCategoryId,
	/*VV 1/11/2007*/
	Work_Group_Id,Def_Work_Group_Id, WOCreateFromPO,
	--AL: 29/03/10
	Health_Safety_ID)

	SELECT
	0 AS Task_ID ,
	@Description AS Description,
	@Eqp_Plan_ID As Eqp_Plan_ID,
	@Task_Type_ID as Task_Type_ID,
	@Component_Code_ID AS Component_Code_ID,
	@Modifier_ID AS Modifier_ID,
	@Application_Code_ID AS Application_Code_ID,
	@Occurrence_Type_Id AS Occurrence_Type_Id,
	@Priority_ID AS Priority_ID,
	@Source_ID AS Source_ID,
	CASE @EventId WHEN 0 THEN @Task_Status_OUS ELSE @Task_Status_YTS END AS Task_Status_ID,
	@Symptom_ID AS Symptom_ID,
	@Cause_ID AS Cause_ID,
	ISNULL(@Expected_Duration,0) AS Expected_Duration,	--AL: 23/03/09
	@Expected_Labor_Hours AS Expected_Labor_Hours,
	@Task_Mode_ID AS Task_Mode_ID,
--	@Parts_Resources_Identified AS Parts_Resources_Identified,
	@PartsStatusRequired AS PartsStatusRequired,
	@PartsStatusOrdered AS PartsStatusOrdered,
	@PartsStatusReady AS PartsStatusReady,
	@Strategy_Usage AS Strategy_Usage,
	@Strategy_QUOM_ID AS Strategy_QUOM_ID,
	@Proj_Task_Opt_ID AS Strategy_Proj_Task_Opt_ID,
	@Proj_Task_Opt_ID AS Planned_Proj_Task_Opt_ID,
	@Strategy_Date AS Strategy_Date,
	ISNULL(@Strategy_Locked,0) AS Strategy_Locked,
	@Repair_Code_Id AS Repair_Code_Id,
	@Task_Header_Id AS Task_Header_Id,
	@Strategy_Repair_Description AS Strategy_Repair_Description,
	@Cost_Bearer_ID AS Cost_Bearer_ID,
	@Final_Change AS Final_Change,
	@Risk_Life_Left AS Risk_Life_Left,
	@Strategy_Frequency AS Strategy_Frequency,
	@Last_Performed AS Last_Performed,
	@Last_Scheduled AS Last_Scheduled,
	@Last_Performed_Date AS Last_Performed_Date,
	@Last_Scheduled_Date AS Last_Scheduled_Date,
	@Site_Id AS Site_Id,
	@Cost_Centre_Id AS Cost_Centre_Id,
	@Branch_Id AS Branch_Id,
	@Customer_Id AS Customer_Id,
	@Part_Entry_Distribution_Code_Id AS Parts_Entry_Distribution_Code_Id,
	@Parts_Cost_Expense_Id AS Parts_Cost_Expense_Id,
	@Labour_Cost_Expense_Id AS Labour_Cost_Expense_Id,
	@Misc_Cost_Expense_Id AS Misc_Cost_Expense_Id,
	@Warranty_Days AS Warranty_Days,
	@Warranty_Usage AS Warranty_Usage,
	@Strategy_Part_Num AS Strategy_Part_Num,
	@Labour_Entry_Distribution_Code_Id AS Labour_Entry_Distribution_Code_Id,
	@Misc_Entry_Distribution_Code_Id AS Misc_Entry_Distribution_Code_Id,
	@AMTPlanningModeId AS AMTPlanningModeId,
	@ChangeoutCategoryId AS ChangeoutCategoryId,
	/*VV 1/11/2007*/
	@WorkGroupId AS Work_Group_Id,
	@WorkGroupId AS Def_Work_Group_Id,
	@WOCreateFromPO AS WOCreateFromPO,
	--AL: 29/03/10
	@Health_Safety_ID

	DECLARE @z_TASK_DOCUMENT TABLE(Work_Scope_Document_Id int PRIMARY KEY (Work_Scope_Document_Id))

	IF @Proj_Task_Opt_id>0
	BEGIN
		 
		--VV 23-Oct-2008
		CREATE TABLE #z_Jobs(JobCodeId int)

		INSERT INTO #z_Jobs(JobCodeId)
		SELECT DISTINCT 
		ISNULL(PTA.JobCodeId,CASE WHEN CA.Job_Code<>'CA - Multiple' THEN ABS(CA.Job_Code_Id) ELSE -1 END) AS JobCodeId
		FROM
		tblProjTaskAmts PTA
			LEFT JOIN
		dbo.COST_ALLOCATIONS_F('',0,0,0,0,0,@ProjTaskId) CA
			ON PTA.ProjTaskAmtId=CA.Proj_Task_Amt_Id
		WHERE PTA.ProjTaskOptId=@Proj_Task_Opt_id
			

		INSERT INTO @z_TASK_DOCUMENT(Work_Scope_Document_Id)
		
		SELECT DISTINCT WSJD.Document_Id AS Work_Scope_Document_Id
		FROM
		WORK_SCOPE_JOB WSJ
			INNER JOIN
		WORK_SCOPE_JOB_DOCUMENT WSJD
			ON WSJ.Work_Scope_Job_Id=WSJD.Work_Scope_Job_Id
		WHERE
			Component_Code_Id = @Component_Code_ID
		AND Task_Type_Id = @Task_Type_Id
		AND Model_Id = @ModelId
		AND WSJ.Job_Code_Id IN (SELECT JobCodeId FROM #z_Jobs)

		DROP TABLE #z_Jobs

		--VV CR8035
		INSERT INTO @z_TASK_DOCUMENT(Work_Scope_Document_Id)
		SELECT DISTINCT PTD.WorkScopeDocumentId
		FROM
		PROJ_TASK_DOCUMENT PTD
			INNER JOIN
		tblProjTaskOpts PTO
			ON PTO.ProjTaskOptId=@Proj_Task_Opt_Id AND PTD.ProjTaskId=PTO.ProjTaskId
			LEFT JOIN
		@z_TASK_DOCUMENT TD
			ON PTD.WorkScopeDocumentId=TD.Work_Scope_Document_Id
		WHERE TD.Work_Scope_Document_Id IS NULL
	END

	IF @ForWOCreate = 1
		BEGIN
			SELECT * FROM @z_TASK
			RETURN
		END
END --IF @TaskDefaults=1

--Task Operations
DECLARE @z_TASK_OPERATION TABLE(
	Task_Operation_Id int IDENTITY(-1,-1),
	Task_Id int DEFAULT 0,	
	Task_Operation varchar(200) COLLATE database_default,
	Component_Code_Id int,
	Modifier_Code_Id int,
	Job_Code_Id int,
	Work_Group_Id int,
	Health_Safety_Id int,
	Planned_Duration float,
	Actual_Duration float DEFAULT 0,
	Operation_Instructions varchar(8000) COLLATE database_default,	--AL: 22/05/08, 10/02/09
	/*Ignore_Operation bit DEFAULT 0,*/

	Cost_Bearer_Id int,
	Cost_Centre_Id int,
	Parts_Cost_Expense_Id int,
	Labour_Cost_Expense_Id int,
	Misc_Cost_Expense_Id int,
	Parts_Entry_Distribution_Code_Id int,
	Labour_Entry_Distribution_Code_Id int,
	Misc_Entry_Distribution_Code_Id int,
	Proj_Task_Amt_Id int,
	Priced_Job_id int,
	Std_Job_Op_Id int,
	Parts_Cost float,
	Labour_Cost float,
	Misc_Cost float,
	Labour_Hrs float,
	Labour_Activity_Id int,
	Overwrite_Costs bit DEFAULT 0,
	Std_Job_Id int,
	Parts_Usage_Factor float,
	OperationOffset float DEFAULT 0,
	SortOrder int,
	Last_Mod_Date datetime DEFAULT GETDATE(),
	NewTaskOpId int,
	/*VV #261 PRIMARY KEY(Task_Operation_Id)*/
	/*VV AmtMobile*/
	UniqueKey varchar(50) COLLATE DATABASE_DEFAULT DEFAULT NEWID())

--Task Operation Parts
DECLARE @z_TASK_OPERATION_PART TABLE(
Task_Operation_Part_Id int IDENTITY(-1,-1), 
Task_Operation_Id int, 
Part_Id int, 
Strategy_Qty float, 
Pct_Strategy_Probability float, 
Strategy_Unit_Price float, 
Include_In_Total bit, 
Proj_Task_Amt_Id int, 
Std_Job_Op_Id int,
Use_Credit_Price bit,
Full_Credit bit,
Supplier_Id int,
SourceOfSupplyId int,
--AL: 03/04/09
PartAvailabilityStatusId int,
/*VV CR8294*/
CostBearerID int,
CostCentreID int,
ExpenseElementID int,
WorkGroupID int
/*VV #261 PRIMARY KEY(Task_Operation_Part_Id)*/)

--Task operation labour
DECLARE @z_TASK_OPERATION_LABOUR TABLE(
Task_Operation_Labour_Id int IDENTITY(-1,-1),
Task_Operation_Id int ,
Work_Group_Id int,
Labour_Activity_Id int,
Labour_Activity varchar(50) COLLATE database_default,
Include_In_Total bit,
Strategy_Labour_Hrs float  ,
Strategy_Labour_Rate float,
/*VV CR8294*/
CostBearerID int,
CostCentreID int,
ExpenseElementID int
/*VV #261 PRIMARY KEY(Task_Operation_Labour_Id)*/) 

--Task operation misc
DECLARE @z_TASK_OPERATION_MISC TABLE(
Task_Operation_Misc_Id int IDENTITY(-1,-1),
Task_Operation_Id int,
Task_Operation_Misc_Desc varchar(200) COLLATE database_default,
Misc_Category_Id int,
Strategy_Sell float,
Include_In_Total bit,
Supplier_Id int,
/*VV CR8294*/
CostBearerID int,
CostCentreID int,
ExpenseElementID int,
WorkGroupID int
/*VV #261 PRIMARY KEY(Task_Operation_Misc_Id)*/)

/*VV AmtMobile*/
CREATE TABLE #z_EW_WORKORDER(EWWorkorderId int IDENTITY(-1,-1),TaskOperationId int,
EWTitle	varchar(200) COLLATE DATABASE_DEFAULT, UniqueKey varchar(50) COLLATE DATABASE_DEFAULT,
EWTemplateId int)

CREATE TABLE #z_EW_WORKSTEP(
	EWWorkstepId int IDENTITY(-1,-1),
	EWWorkorderId int,
	EWStepTemplateId int,
	Sequence int,
	EWWorkstepTitle varchar(200) COLLATE DATABASE_DEFAULT,
	ComponentCodeId int,
	CMCodeId int,
	Instructions varchar(1000) COLLATE DATABASE_DEFAULT,
	DocumentGUID varchar(50) COLLATE DATABASE_DEFAULT,
	DocumentExt varchar(50) COLLATE DATABASE_DEFAULT,
	Safety bit,
	Environmental bit,
	UniqueKey varchar(50) COLLATE DATABASE_DEFAULT
	)
	
--Create a temp table to hold the details from strategy task
IF @Proj_Task_Opt_Id>0
BEGIN
	--Select proj task documents

	DECLARE @z_ProjTaskAmt TABLE(
	ProjTaskAmtId int,
	Cost_Allocation_Id int,
	PricedJobId int, 
	JobCodeId int, 
	Duration float, 
	Work_Group_Id int, 
	Health_Safety_Id int, 
	Misc_Cost_Expense_ID int, 
    Labour_Cost_Expense_ID int, 
	Cost_Bearer_ID int, 
	Parts_Cost_Expense_ID int, 
	Parts_EDC_ID int, 
	Labour_EDC_ID int, 
	Misc_EDC_ID int,
	Cost_Centre_Id int,
	Parts_Cost float,
	Labour_Cost float,
	Misc_Cost float,
	Labour_Hrs float,
	Labour_Activity_Id int
	PRIMARY KEY (ProjTaskAmtId,Cost_Allocation_Id))

	INSERT INTO @z_ProjTaskAmt(
	ProjTaskAmtId,Cost_Allocation_Id,PricedJobId, JobCodeId, Duration, Work_Group_Id, Health_Safety_Id,  
	Misc_Cost_Expense_ID, Labour_Cost_Expense_ID, Cost_Bearer_ID, Parts_Cost_Expense_ID, Parts_EDC_ID, Labour_EDC_ID, 
	Misc_EDC_ID,Cost_Centre_Id,Parts_cost,Labour_Cost,Misc_Cost,Labour_Hrs,Labour_Activity_Id)
	SELECT ProjTaskAmtId,
	ISNULL(PTA.Cost_Allocation_Details_Id,0) AS Cost_Allocation_Id,	
	PricedJobId, JobCodeId, Duration, 
	/*1/11/07 VV*/ 
	ISNULL(Work_Group_Id,@WorkGroupId) AS Work_Group_Id, 
	Health_Safety_Id,  
	Misc_Cost_Expense_ID, Labour_Cost_Expense_ID, Cost_Bearer_ID, Parts_Cost_Expense_ID, Parts_EDC_ID, Labour_EDC_ID, 
	Misc_EDC_ID,Cost_Centre_Id,	
	PTA.PartsCost* CPE.CumPartsEscalation/ ERC.ExRate AS Parts_Cost,
	PTA.TotalLabourCost * CE.CumLaborEscalation/ ERC.ExRate AS Labour_Cost,
	PTA.TotalMiscCost * CE.CumMiscEscalation / ERC.ExRate AS Misc_Cost,
	LaborHours,Labour_Activity_Id

	FROM 
	PROJ_TASK_AMT_COST_1_V PTA
		INNER JOIN 
	tblCostEscalations CE
			ON PTA.Pricing_Date >= CE.EscalationDate AND PTA.Pricing_Date < CE.EndDate
			INNER JOIN 
	tblCostPartsEscalations CPE
			ON CE.CostEscalationId = CPE.CostEscalationId AND CPE.ManufacturerId = @ManufacturerId			
			INNER JOIN 
	tblExRateCurrencies ERC
			ON ERC.ExRateID = 0 AND ERC.CurrencyID = PTA.CurrencyID

	WHERE ProjTaskOptId=@Proj_Task_Opt_Id

	IF EXISTS(SELECT ProjTaskAmtId FROM @z_ProjTaskAmt WHERE PricedJobId IS NULL)
	BEGIN
		SELECT @Component=Description FROM tblComponentCodes WHERE ComponentCodeId=@Component_Code_Id

		--Proj jobs not liked to the std jobs
		INSERT INTO @z_TASK_OPERATION(	Task_Operation,
		Component_Code_Id,Modifier_Code_Id,Job_Code_Id,Work_Group_Id,Health_Safety_Id,Planned_Duration,		
		Cost_Bearer_Id,	Cost_Centre_Id,	Parts_Cost_Expense_Id,
		Labour_Cost_Expense_Id,	Misc_Cost_Expense_Id,Parts_Entry_Distribution_Code_Id,Labour_Entry_Distribution_Code_Id,
		Misc_Entry_Distribution_Code_Id,Proj_Task_Amt_Id,Parts_cost,Labour_Cost,Misc_Cost,Labour_Hrs,
		Labour_Activity_Id)
		SELECT @Component +/*VV 12-Dec-08*/ISNULL(' - '+JC.Description,'') AS Task_Operation,
		@Component_Code_Id AS Component_Code_Id,@Modifier_Id AS Modifier_Code_Id,
		PTA.JobCodeId,
		/*VV 1/10/2007*/
		ISNULL(CASE WHEN COUNT(DISTINCT ISNULL(Work_Group_Id,0))=1 THEN MAX(Work_Group_Id) ELSE NULL END,@WorkGroupId) AS Work_Group_Id,		
		Health_Safety_Id,SUM(Duration) AS Planned_Duration,
		CASE WHEN COUNT(DISTINCT ISNULL(Cost_Bearer_Id,0))=1 THEN MAX(Cost_Bearer_Id) ELSE NULL END AS Cost_Bearer_Id,	
		CASE WHEN COUNT(DISTINCT ISNULL(Cost_Centre_Id,0))=1 THEN MAX(Cost_Centre_Id) ELSE NULL END AS Cost_Centre_Id,	
		CASE WHEN COUNT(DISTINCT ISNULL(Parts_Cost_Expense_Id,0))=1 THEN MAX(Parts_Cost_Expense_Id) ELSE NULL END AS Parts_Cost_Expense_Id,
		CASE WHEN COUNT(DISTINCT ISNULL(Labour_Cost_Expense_Id,0))=1 THEN MAX(Labour_Cost_Expense_Id) ELSE NULL END AS Labour_Cost_Expense_Id,	
		CASE WHEN COUNT(DISTINCT ISNULL(Misc_Cost_Expense_Id,0))=1 THEN MAX(Misc_Cost_Expense_Id) ELSE NULL END AS Misc_Cost_Expense_Id,	
		CASE WHEN COUNT(DISTINCT ISNULL(Parts_EDC_ID,0))=1 THEN MAX(Parts_EDC_ID) ELSE NULL END AS Parts_Entry_Distribution_Code_Id,	
		CASE WHEN COUNT(DISTINCT ISNULL(Labour_EDC_ID,0))=1 THEN MAX(Labour_EDC_ID) ELSE NULL END AS Labour_Entry_Distribution_Code_Id,	
		CASE WHEN COUNT(DISTINCT ISNULL(Misc_EDC_ID,0))=1 THEN MAX(Misc_EDC_ID) ELSE NULL END AS Misc_Entry_Distribution_Code_Id,
		ProjTaskAmtId,SUM(Parts_Cost) AS Parts_Cost,SUM(Labour_Cost) AS Labour_Cost,SUM(Misc_Cost) AS Misc_Cost,
		SUM(Labour_Hrs) AS Labour_Hrs,Labour_Activity_Id
		FROM 
		@z_ProjTaskAmt PTA
			/*VV 12-Dec-2008*/
			LEFT JOIN
		tblJobCodes JC
			ON PTA.JobCodeId=JC.JobCodeId
		WHERE PricedJobId IS NULL
		GROUP BY PTA.JobCodeId,Health_Safety_Id,ProjTaskAmtId,JC.Description,Labour_Activity_Id
	END
	
	--Jobs which are linked to std jobs
	IF EXISTS(SELECT ProjTaskAmtId FROM @z_ProjTaskAmt WHERE PricedJobId>0)
	BEGIN
		INSERT INTO @z_TASK_OPERATION(Task_Id,Task_Operation,
		Component_Code_Id,Modifier_Code_Id,Job_Code_Id,Work_Group_Id,Health_Safety_Id,Planned_Duration,
		Cost_Bearer_Id,	Cost_Centre_Id,	Parts_Cost_Expense_Id,
		Labour_Cost_Expense_Id,	Misc_Cost_Expense_Id,
		Parts_Entry_Distribution_Code_Id,
		Labour_Entry_Distribution_Code_Id,Misc_Entry_Distribution_Code_Id,Proj_Task_Amt_Id,
		Priced_Job_id,Std_Job_Op_Id, 
		Overwrite_Costs,Parts_cost,Labour_Cost,Misc_Cost,Labour_Hrs,Std_Job_Id,Parts_Usage_Factor)
		SELECT 0 AS Task_Id,    
		SJO.StdJobOperation AS Task_Operation, SJO.ComponentCodeId as Component_Code_Id, 
		SJO.ModifierCodeId AS Modifier_Code_Id,	SJO.JobCodeId AS Job_Code_Id, 
		PTA.Work_Group_Id,PTA.Health_Safety_Id, 
		CASE SJ.Overwrite_Costs  WHEN 1 THEN Duration_Hrs ELSE SJO.DurationHours END AS Planned_Duration,
		PTA.Cost_Bearer_Id,	PTA.Cost_Centre_Id,	PTA.Parts_Cost_Expense_Id,
		PTA.Labour_Cost_Expense_Id,	PTA.Misc_Cost_Expense_Id,
		PTA.Parts_EDC_ID AS Parts_Entry_Distribution_Code_Id,
		PTA.Labour_EDC_ID AS Labour_Entry_Distribution_Code_Id,
		PTA.Misc_EDC_ID AS Misc_Entry_Distribution_Code_Id,
		PTA.ProjTaskAmtId AS Proj_Task_Amt_Id,PTA.PricedJobId AS Priced_Job_id,SJO.StdJobOperationId,
		SJ.Overwrite_Costs,
		(CASE SJ.Overwrite_Costs  WHEN 1 THEN SJ.Parts_Cost ELSE 0 END)/ERC.ExRate AS Parts_Cost , 
		(CASE SJ.Overwrite_Costs  WHEN 1 THEN SJ.Labour_Cost ELSE 0 END)/ERC.ExRate AS Labour_Cost, 		
		(CASE SJ.Overwrite_Costs  WHEN 1 THEN SJ.Misc_Cost ELSE 0 END)/ERC.ExRate AS Misc_Cost,
		CASE SJ.Overwrite_Costs  WHEN 1 THEN SJ.Labour_Hrs ELSE 0 END AS Labour_Hrs ,
		SJ.StdJobId AS Std_Job_Id,SJ.Parts_Usage_Factor		
		FROM  
		@z_ProjTaskAmt AS PTA 			
			INNER JOIN
		tblPricedJobs AS PJ 
			ON PTA.PricedJobId = PJ.PricedJobId 
			INNER JOIN
		tblStdJobs AS SJ 
			ON PJ.StdJobId = SJ.StdJobId 
			INNER JOIN
		tblStdJobOperations AS SJO 
			ON SJ.StdJobId = SJO.StdJobId
			INNER JOIN 
		tblExRateCurrencies ERC
			ON ERC.ExRateID = 0 AND ERC.CurrencyID = SJ.Currency_ID
	END

	/*drop table z_TASK_OPERATION
	select * into z_TASK_OPERATION from @z_TASK_OPERATION 
	return*/

	--Task operation parts from strategy tasks not linked to the std jobs
	INSERT INTO @z_TASK_OPERATION_PART(
	Task_Operation_Id, Part_Id, Strategy_Qty, Pct_Strategy_Probability, 
	Strategy_Unit_Price, Include_In_Total, Proj_Task_Amt_Id, Std_Job_Op_Id,Use_Credit_Price,Full_Credit,
	--AL: 03/04/09
	PartAvailabilityStatusId)
	SELECT     
	Task_Operation_Id, 
	NULL AS Part_Id, 1 AS Strategy_Qty, 100 AS Pct_Strategy_Probability, 
	Parts_Cost AS Strategy_Unit_Price, 1 AS Include_In_Total, Proj_Task_Amt_Id, Std_Job_Op_Id,
	0 AS Use_Credit_Price,0 AS Full_Credit,
	--AL: 03/04/09
	1 AS PartAvailabilityStatusId
	FROM @z_TASK_OPERATION
	WHERE (Parts_Cost>0 OR Parts_Cost<0) AND (Std_Job_Op_Id IS NULL) 

	--Task Operation labour from strategy tasks not linked to std jobs
	INSERT INTO @z_TASK_OPERATION_LABOUR(
	Task_Operation_Id,Work_Group_Id,Labour_Activity_Id,Strategy_Labour_Hrs,Strategy_Labour_Rate,Include_In_Total)
	SELECT TOPR.Task_Operation_Id,PTA.Work_Group_Id,PTA.Labour_Activity_Id,SUM(PTA.Labour_Hrs) AS Labour_Hrs,
	ISNULL(SUM(PTA.Labour_Cost)/NULLIF(SUM(PTA.Labour_Hrs),0),0) AS Strategy_Labour_Rate,1 AS Include_In_Total
	FROM
	(SELECT JobCodeId,Health_Safety_Id,ProjTaskAmtId,Work_Group_Id,
	Labour_Activity_Id,SUM(Labour_Hrs) AS Labour_Hrs,SUM(Labour_Cost) AS Labour_Cost
	FROM @z_ProjTaskAmt WHERE PricedJobId IS NULL
	GROUP BY JobCodeId,Health_Safety_Id,ProjTaskAmtId,Labour_Activity_Id,Work_Group_Id) PTA
		INNER JOIN
	@z_TASK_OPERATION TOPR
		ON PTA.ProjTaskAmtId=TOPR.Proj_Task_Amt_Id AND
		   PTA.JobCodeId=TOPR.Job_Code_Id AND
		   ISNULL(PTA.Health_Safety_Id,0)=ISNULL(TOPR.Health_Safety_Id,0) AND
		   ISNULL(PTA.Labour_Activity_Id,0)=ISNULL(TOPR.Labour_Activity_Id,0)
	WHERE TOPR.Std_Job_Op_Id IS NULL
	GROUP BY TOPR.Task_Operation_Id,PTA.Work_Group_Id,PTA.Labour_Activity_Id

	--Task Operation Misc from strategy task not linked to a std job
	INSERT INTO @z_TASK_OPERATION_MISC(
	Task_Operation_Id,Task_Operation_Misc_Desc,Misc_Category_Id,Strategy_Sell,Include_In_Total)
	SELECT
	TOPR.Task_Operation_Id,Task_Operation AS Task_Operation_Misc_Desc,
	@Def_Misc_Category_Id AS Misc_Category_Id,Misc_Cost AS Strategy_Sell,
	1 AS Include_In_Total
	FROM
	@z_TASK_OPERATION TOPR
	WHERE Std_Job_Op_Id IS NULL
	
END

ELSE IF @Std_Job_Id>0 OR @PricedJobId>0
BEGIN
	
	
	INSERT INTO @z_TASK_OPERATION(Task_Operation,
		Component_Code_Id,Modifier_Code_Id,Job_Code_Id,Planned_Duration,		
		Std_Job_Op_Id,
		Overwrite_Costs,Parts_cost,Labour_Cost,Misc_Cost,Labour_Hrs,Std_Job_Id,Parts_Usage_Factor,
		/*VV 1/11/2007*/Work_Group_Id)
		SELECT     
		SJO.StdJobOperation AS Task_Operation, SJO.ComponentCodeId as Component_Code_Id, 
		SJO.ModifierCodeId AS Modifier_Code_Id,	SJO.JobCodeId AS Job_Code_Id,

		CASE SJ.Overwrite_Costs  WHEN 1 THEN Duration_Hrs ELSE SJO.DurationHours END AS Planned_Duration,

		SJO.StdJobOperationId,
		SJ.Overwrite_Costs,
		(CASE SJ.Overwrite_Costs  WHEN 1 THEN SJ.Parts_Cost ELSE 0 END)/ERC.ExRate AS Parts_Cost , 
		(CASE SJ.Overwrite_Costs  WHEN 1 THEN SJ.Labour_Cost ELSE 0 END)/ERC.ExRate AS Labour_Cost, 		
		(CASE SJ.Overwrite_Costs  WHEN 1 THEN SJ.Misc_Cost ELSE 0 END)/ERC.ExRate AS Misc_Cost,
		CASE SJ.Overwrite_Costs  WHEN 1 THEN SJ.Labour_Hrs ELSE 0 END AS Labour_Hrs ,
		@Std_Job_Id AS Std_Job_Id,SJ.Parts_Usage_Factor,
		/*VV 1/11/2007*/
		@WorkGroupId AS Work_Group_Id
		FROM 		
		tblStdJobOperations SJO 
			INNER JOIN
		tblStdJobs SJ
			ON SJO.StdJobId=SJ.StdJobId
			INNER JOIN 
		tblExRateCurrencies ERC
			ON ERC.ExRateID = 0 AND ERC.CurrencyID = SJ.Currency_ID		
		WHERE SJO.StdJobId=@Std_Job_Id
END

--Duplicate descriptions
WHILE EXISTS(SELECT COUNT(Task_Operation_Id) FROM @z_TASK_OPERATION GROUP BY Task_Operation HAVING COUNT(Task_Operation_Id)>1)
BEGIN
	
	UPDATE TOPR
	SET TOPR.Task_Operation=TOPR.Task_Operation+'('+CAST(CTask_Operation AS varchar)+')'
	FROM 
	@z_TASK_OPERATION TOPR
		INNER JOIN
	(SELECT MAX(Task_Operation_Id) AS Task_Operation_Id,COUNT(Task_Operation_Id)-1 AS CTask_Operation
	FROM @z_TASK_OPERATION 
	GROUP BY Task_Operation 
	HAVING COUNT(Task_Operation_Id)>1) A 
		ON TOPR.Task_Operation_Id=A.Task_Operation_Id
END

IF EXISTS(SELECT Std_Job_Op_Id FROM @z_TASK_OPERATION WHERE Std_Job_Op_Id>0)
BEGIN
	--Task operation parts from std jobs
	INSERT INTO @z_TASK_OPERATION_PART(
	Task_Operation_Id, Part_Id, Strategy_Qty, Pct_Strategy_Probability, 
	Include_In_Total, Proj_Task_Amt_Id, Std_Job_Op_Id,Use_Credit_Price,Full_Credit,
	--AL: 03/04/09
	PartAvailabilityStatusId)

	SELECT  
	TOPR.Task_Operation_Id, SJOP.PartId, SJOP.Quantity AS Strategy_Qty, 
	SJOP.Probability AS Pct_Strategy_Probability, 
	CASE TOPR.Overwrite_Costs WHEN 1 THEN 0 ELSE 1 END AS Include_In_Total, 
	TOPR.Proj_Task_Amt_Id, TOPR.Std_Job_Op_Id,
	SJOP.Use_Credit_Price, SJOP.Full_Credit,
	--AL: 03/04/09
	1 AS PartAvailabilityStatusId
	FROM         
	tblStdJobOperationParts AS SJOP 
		INNER JOIN
	tblStdJobOperations AS SJO 
		ON SJOP.StdJobOperationId = SJO.StdJobOperationId 
		INNER JOIN
	@z_TASK_OPERATION AS TOPR 
		ON SJO.StdJobOperationId = TOPR.Std_Job_Op_Id

	SET @Counter=@@ROWCOUNT	
	
	--Only std jobs have partid
	IF @Counter>0
	BEGIN	
		UPDATE TOPP SET 
		Strategy_Unit_Price=(CASE WHEN TOPP.Use_Credit_Price = 0 THEN PP.Part_Sell 
								 WHEN TOPP.Full_credit = 1 THEN PP.Part_Sell - PP.Full_Credit_Sell 
								 ELSE PP.Part_Sell- PP.Partial_Credit_Sell END) * TOPR.Parts_Usage_Factor*PPA.Part_Price_Adjustment_Factor,
		SourceOfSupplyId=P.Source_Of_Supply_Id
		FROM
		@z_TASK_OPERATION TOPR
			INNER JOIN
		@z_TASK_OPERATION_PART TOPP
			ON TOPR.Task_Operation_Id=TOPP.Task_Operation_Id
			INNER JOIN	
		tblParts P 
			ON TOPP.Part_Id = P.PartId 
			INNER JOIN
		tblPartPrices PP 
			ON P.PartId = PP.PartId
			INNER JOIN
		PART_PRICE_ADJUSTMENT PPA
			ON P.Part_Type_Id=PPA.Part_Type_ID
		WHERE PP.Price_Group_ID=@SJPriceGroupID AND 
		PP.CurrencyId=@PrimCurrencyId AND 
		PPA.Fleet_ID=@FleetId

	END

	--Task Operation labour std jobs
	INSERT INTO @z_TASK_OPERATION_LABOUR(
	Task_Operation_Id,Work_Group_Id,Labour_Activity_Id,Labour_Activity,Strategy_Labour_Hrs,Strategy_Labour_Rate,
	Include_In_Total)
	SELECT TOPR.Task_Operation_Id,TOPR.Work_Group_Id,SJOL.Labour_Activity_Id,SJOL.Std_Job_Operation_Labour_Desc,
	SUM(SJOL.Labour_Hrs) AS Labour_Hrs,
	SUM(ISNULL(LR.LabourRatePerHour, SJOL.Sell_Rate)) AS Strategy_Labour_Rate,
	CASE TOPR.Overwrite_Costs WHEN 1 THEN 0 ELSE 1 END AS Include_In_Total
	FROM
	@z_TASK_OPERATION TOPR
		INNER JOIN
	STD_JOB_OPERATION_LABOUR SJOL
		ON TOPR.Std_Job_Op_Id=SJOL.Std_Job_Operation_ID
		LEFT OUTER JOIN
	LABOUR_RATE_DEF_V LR
		ON SJOL.Labour_Activity_Id=LR.LabourActivityId AND
		   LR.BranchId=@SJBranchId AND LR.CurrencyId=@PrimCurrencyId
	GROUP BY TOPR.Task_Operation_Id, TOPR.Work_Group_Id,
	SJOL.Labour_Activity_ID,Std_Job_Operation_Labour_Desc,TOPR.Overwrite_Costs

	--Task Operation Misc from std jobs
	INSERT INTO @z_TASK_OPERATION_MISC(
	Task_Operation_Id,Task_Operation_Misc_Desc,Misc_Category_Id,Strategy_Sell,Include_In_Total)
	SELECT
	TOPR.Task_Operation_Id,SJOM.Std_Job_Operation_Misc_Desc AS Task_Operation_Misc_Desc,
	SJOM.Misc_Category_Id AS Misc_Category_Id,SUM(SJOM.Sell) AS Strategy_Sell,
	CASE TOPR.Overwrite_Costs WHEN 1 THEN 0 ELSE 1 END AS Include_In_Total
	FROM
	@z_TASK_OPERATION TOPR
		INNER JOIN
	STD_JOB_OPERATION_MISC SJOM
		ON TOPR.Std_Job_Op_Id=SJOM.Std_Job_Operation_ID
	GROUP BY TOPR.Task_Operation_Id,Std_Job_Operation_Misc_Desc,
	SJOM.Misc_Category_Id,TOPR.Overwrite_Costs

	--Task operation parts from std jobs with overwrite costs set
	-- Add 1 line to the 1st operation
	IF EXISTS(SELECT Task_Operation_Id FROM @z_TASK_OPERATION WHERE Std_Job_Op_Id>0 AND Overwrite_Costs=1)
	BEGIN
		INSERT INTO @z_TASK_OPERATION_PART(
		Task_Operation_Id, Part_Id, Strategy_Qty, Pct_Strategy_Probability, 
		Include_In_Total, Proj_Task_Amt_Id, Std_Job_Op_Id,Use_Credit_Price,Full_Credit,
		Strategy_Unit_Price,
		--AL: 13/04/09
		PartAvailabilityStatusId)
		SELECT
		TOPR.Task_Operation_Id, NULL AS Part_Id, 1 AS Strategy_Qty, 
		100 AS Pct_Strategy_Probability, 1 AS Include_In_Total, 
		TOPR.Proj_Task_Amt_Id, TOPR.Std_Job_Op_Id,0 AS Use_Credit_Price,0 AS Full_Credit,
		TOPR.Parts_Cost,
		--AL: 13/04/09
		1 AS PartAvailabilityStatusId
		FROM
		@z_TASK_OPERATION TOPR
			INNER JOIN
		(SELECT  
		MIN(Task_Operation_Id) AS Task_Operation_Id
		FROM  
		@z_TASK_OPERATION 	
		WHERE Overwrite_Costs=1 AND Std_Job_Op_Id>0
		GROUP BY Std_Job_Id,Proj_Task_Amt_Id) A
			ON TOPR.Task_Operation_Id=A.Task_Operation_Id

		INSERT INTO @z_TASK_OPERATION_LABOUR(
		Task_Operation_Id,Work_Group_Id,Labour_Activity_Id,Labour_Activity,Strategy_Labour_Hrs,Strategy_Labour_Rate,
		Include_In_Total)
		SELECT
		TOPR.Task_Operation_Id,NULL AS Work_Group_Id,NULL AS Labour_Activity_Id,
		NULL AS Labour_Activity,1 AS Strategy_Labour_Hrs,TOPR.Labour_Cost AS Strategy_Labour_Rate,
		1 AS Include_In_Total
		FROM
		@z_TASK_OPERATION TOPR
			INNER JOIN
		(SELECT  
		MIN(Task_Operation_Id) AS Task_Operation_Id
		FROM  
		@z_TASK_OPERATION 	
		WHERE Overwrite_Costs=1 AND Std_Job_Op_Id>0
		GROUP BY Std_Job_Id,Proj_Task_Amt_Id) A
			ON TOPR.Task_Operation_Id=A.Task_Operation_Id

		INSERT INTO @z_TASK_OPERATION_MISC(
		Task_Operation_Id,Task_Operation_Misc_Desc,Misc_Category_Id,Strategy_Sell,Include_In_Total)
		SELECT
		TOPR.Task_Operation_Id,TOPR.Task_Operation AS Task_Operation_Misc_Desc,
		@Def_Misc_Category_Id AS Misc_Category_Id,TOPR.Misc_Cost AS Strategy_Sell,
		1 AS Include_In_Total
		FROM
		@z_TASK_OPERATION TOPR
			INNER JOIN
		(SELECT  
		MIN(Task_Operation_Id) AS Task_Operation_Id
		FROM  
		@z_TASK_OPERATION 	
		WHERE Overwrite_Costs=1 AND Std_Job_Op_Id>0
		GROUP BY Std_Job_Id,Proj_Task_Amt_Id) A
			ON TOPR.Task_Operation_Id=A.Task_Operation_Id
	END

END

/*VV AmtMobile 
Add checksheets for the operations created from standard jobs
*/
IF EXISTS(SELECT Task_Operation_Id FROM @z_TASK_OPERATION WHERE Std_Job_Op_Id>0)
BEGIN
	
	INSERT INTO #z_EW_WORKORDER(TaskOperationId,EWTitle,UniqueKey,EWTemplateId)
	SELECT O.Task_Operation_Id AS TaskOperationId, E.EWTitle,NEWID() AS UniqueKey,
	E.EWTemplateId 
	FROM 
	EW_TEMPLATE E
		INNER JOIN
	STD_JOB_OPERATION_EW_TEMPLATE J
		ON E.EWTemplateId=J.EWTemplateId
		INNER JOIN
	@z_TASK_OPERATION O
		ON J.StdJobOperationId=O.Std_Job_Op_Id
	
END

/* VV AmtMobile
Add checksheets from ew templates attached to the strategy task jobs. If there are standard
jobs attached to the strategy task jobs, add checksheets from strategy jobs only to the first
operation for the strategy task job
*/
IF EXISTS(SELECT Task_Operation_Id FROM @z_TASK_OPERATION WHERE Proj_Task_Amt_Id>0)
BEGIN
INSERT INTO #z_EW_WORKORDER(TaskOperationId,EWTitle,UniqueKey,EWTemplateId)
	SELECT O.Task_Operation_Id AS TaskOperationId, E.EWTitle,NEWID() AS UniqueKey,
	E.EWTemplateId 
	FROM 
	EW_TEMPLATE E
		INNER JOIN
	STRATEGY_TASK_JOB_EW_TEMPLATE STJ
		ON E.EWTemplateId=STJ.EWTemplateId
		INNER JOIN
	(SELECT Proj_Task_Amt_Id,MIN(Task_Operation_Id) AS Task_Operation_Id 
	FROM @z_TASK_OPERATION WHERE Proj_Task_Amt_Id>0 GROUP BY Proj_Task_Amt_Id) O
		ON STJ.ProjTaskAmtId=O.Proj_Task_Amt_Id
END
	
INSERT INTO #z_EW_WORKSTEP(EWWorkorderId,EWStepTemplateId,Sequence,EWWorkstepTitle,
ComponentCodeId,CMCodeId,Instructions,DocumentGUID,DocumentExt,Safety,Environmental,
UniqueKey)	

SELECT E.EWWorkorderId,S.EWStepTemplateId,S.Sequence,S.EWStepTitle AS EWWorkstepTitle,
S.ComponentCodeId,S.CMCodeId,S.Instructions,
CASE ISNULL(S.DocumentGUID,'') WHEN '' THEN NULL ELSE NEWID() END AS DocumentGUID,
S.DocumentExt,S.Safety,
S.Enviromental,NEWID() AS UniqueKey
FROM
EW_WORKSTEP_TEMPLATE S
	INNER JOIN
#z_EW_WORKORDER E
	ON S.EWTemplateId=E.EWTemplateId


IF @TaskDefaults=1
BEGIN
	--Update Task with codes from the first operation
	SELECT @TaskOperationId=MIN(Task_Operation_Id) FROM @z_Task_Operation

	IF ISNULL(@TaskOperationId,0)<>0
	BEGIN
		UPDATE T
		SET T.Cost_Bearer_Id=ISNULL(O.Cost_Bearer_Id,@Cost_Bearer_id),
		T.Cost_Centre_Id=ISNULL(O.Cost_Centre_Id,@Cost_Centre_Id),
		T.Part_Cost_Expense_Id=ISNULL(O.Parts_Cost_Expense_Id,@Parts_Cost_Expense_Id),
		T.Labour_Cost_Expense_Id=ISNULL(O.Labour_Cost_Expense_Id,@Labour_Cost_Expense_Id),
		T.Misc_Cost_Expense_Id=ISNULL(O.Misc_Cost_Expense_Id,@Misc_Cost_Expense_Id),
		T.Part_Entry_Distribution_Code_Id=ISNULL(O.Parts_Entry_Distribution_Code_Id,@Part_Entry_Distribution_Code_Id),
		T.Labour_Entry_Distribution_Code_Id=ISNULL(O.Labour_Entry_Distribution_Code_Id,@Labour_Entry_Distribution_Code_Id),
		T.Misc_Entry_Distribution_Code_Id=ISNULL(O.Misc_Entry_Distribution_Code_Id,@Misc_Entry_Distribution_Code_Id),
		/*VV 1/11/2007*/
		T.Work_Group_Id=ISNULL(O.Work_Group_Id,@WorkGroupId),
		T.Def_Work_Group_Id=ISNULL(O.Work_Group_Id,@WorkGroupId)
		FROM
		@z_TASK T
			CROSS JOIN
		(SELECT Cost_Bearer_Id,Cost_Centre_Id,Parts_Cost_Expense_Id,Labour_Cost_Expense_Id,Misc_Cost_Expense_Id,
		Parts_Entry_Distribution_Code_Id,Labour_Entry_Distribution_Code_Id,Misc_Entry_Distribution_Code_Id,
		/*VV 1/11/2007*/Work_Group_Id
		FROM @z_Task_Operation WHERE Task_Operation_Id=@TaskOperationId) O
	END
END

/*VV CR8294*/
UPDATE O SET
O.Work_Group_Id=ISNULL(ISNULL(O.Work_Group_Id,T.Work_Group_Id),/*VV CR8498*/@WorkGroupId),
O.Cost_Bearer_Id =ISNULL(ISNULL(O.Cost_Bearer_Id,T.Cost_Bearer_Id),/*VV CR8498*/@Cost_Bearer_id),
O.Cost_Centre_Id =ISNULL(ISNULL(O.Cost_Centre_Id,T.Cost_Centre_Id),/*VV CR8498*/@Cost_Centre_Id),
O.Parts_Cost_Expense_Id  =ISNULL(ISNULL(O.Parts_Cost_Expense_Id ,T.Part_Cost_Expense_Id),/*VV CR8498*/@Parts_Cost_Expense_Id),
O.Labour_Cost_Expense_Id =ISNULL(ISNULL(O.Labour_Cost_Expense_Id,T.Labour_Cost_Expense_Id),/*VV CR8498*/@Labour_Cost_Expense_Id),
O.Misc_Cost_Expense_Id=ISNULL(ISNULL(O.Misc_Cost_Expense_Id,T.Misc_Cost_Expense_Id),/*VV CR8498*/@Misc_Cost_Expense_Id)
FROM
@z_TASK_OPERATION O
	LEFT JOIN
@z_TASK T
	ON O.Task_Id=T.Task_Id

UPDATE L SET
L.CostBearerID=ISNULL(L.CostBearerID,O.Cost_Bearer_Id),
L.CostCentreID =ISNULL(L.CostCentreID,O.Cost_Centre_Id),
L.ExpenseElementID =ISNULL(L.ExpenseElementID,O.Labour_Cost_Expense_Id ),
L.Work_Group_ID =ISNULL(L.Work_Group_ID,O.Work_Group_Id)
FROM
@z_TASK_OPERATION_LABOUR L
	INNER JOIN
@z_TASK_OPERATION O
	ON L.Task_Operation_Id=O.Task_Operation_Id

UPDATE P SET
P.CostBearerID=ISNULL(P.CostBearerID,O.Cost_Bearer_Id),
P.CostCentreID =ISNULL(P.CostCentreID,O.Cost_Centre_Id),
P.ExpenseElementID =ISNULL(P.ExpenseElementID,O.Parts_Cost_Expense_Id),
P.WorkGroupID =ISNULL(P.WorkGroupID,O.Work_Group_Id)
FROM
@z_TASK_OPERATION_PART P
	INNER JOIN
@z_TASK_OPERATION O
	ON P.Task_Operation_Id=O.Task_Operation_Id

UPDATE M SET
M.CostBearerID=ISNULL(M.CostBearerID,O.Cost_Bearer_Id),
M.CostCentreID =ISNULL(M.CostCentreID,O.Cost_Centre_Id),
M.ExpenseElementID =ISNULL(M.ExpenseElementID,O.Misc_Cost_Expense_Id),
M.WorkGroupID =ISNULL(M.WorkGroupID,O.Work_Group_Id)
FROM
@z_TASK_OPERATION_MISC M
	INNER JOIN
@z_TASK_OPERATION O
	ON M.Task_Operation_Id=O.Task_Operation_Id


--AL: 06/04/10
DECLARE @PartCount int

IF ISNULL(@AutoLookupPartsReadyStatus,0)<>0
BEGIN
	SELECT @PartCount=COUNT(*)
	FROM
		(SELECT CAST(CASE WHEN Pct_Strategy_Probability<100.00 THEN 0.00 
				ELSE Strategy_Qty END AS float) *
				CAST(Include_In_Total AS float) AS Planned_Qty
		FROM @z_TASK_OPERATION_PART)P
	WHERE Planned_Qty>0
	
	UPDATE @z_TASK
	SET PartsStatusRequired=CASE WHEN ISNULL(@PartCount,0)=0 THEN 0 ELSE 1 END
END


IF @Add=1
BEGIN
	--AL: 27/03/09
	IF @Task_Mode_Id=@Task_Mode_AW
		BEGIN
		--AL: 26/03/09 - checks
		IF ISNULL(@Component_Code_ID,0)=0
			SET @Message='Component Code is required for work order to be linked to a task.'
		ELSE IF ISNULL(@Task_Type_ID,0)=0
			SET @Message='Task Type is required for work order to be linked to a task.'
		ELSE 
		BEGIN
			DECLARE @TotalSell float,@PartsQty float,@LabourHrs float

			--AL: 03/04/09
			SELECT	@TotalSell=ISNULL(SUM(TOOP.ActualTotalSell), 0)+
						ISNULL(SUM(TOOL.ActualTotalSell),0)+ 
						ISNULL(SUM(TOOM.Actual_Sell), 0), 
--					@TotalSell=ISNULL(SUM(TOOP.Actual_Qty * TOOP.Actual_Unit_Price), 0)+
--						ISNULL(SUM(TOOL.Actual_Labour_Hrs * TOOL.Actual_Labour_Rate),0)+ 
--						ISNULL(SUM(TOOM.Actual_Sell), 0), 
					@PartsQty=ISNULL(SUM(TOOP.Actual_Qty), 0),
					@LabourHrs=ISNULL(SUM(TOOL.Actual_Labour_Hrs), 0)
			FROM         
					TASK AS T LEFT OUTER JOIN
					TASK_OPERATION AS TOO ON T.Task_ID = TOO.Task_Id LEFT OUTER JOIN
					TASK_OPERATION_PART AS TOOP ON TOO.Task_Operation_Id = TOOP.Task_Operation_Id LEFT OUTER JOIN
					TASK_OPERATION_MISC AS TOOM ON TOO.Task_Operation_Id = TOOM.Task_Operation_Id LEFT OUTER JOIN
					TASK_OPERATION_LABOUR AS TOOL ON TOO.Task_Operation_Id = TOOL.Task_Operation_Id
			WHERE  
					(T.Task_ID = @TaskId)

			IF @Task_Status_ID=5 AND (ISNULL(@TotalSell,0)<>0 OR ISNULL(@PartsQty,0)<>0 OR ISNULL(@LabourHrs,0)<>0)
				SET @Message='Cannot Abandon Task if there are Actual costs, labour hours or parts'
		END

		IF ISNULL(@Message,'')<>''	
			RETURN

	END



	SET XACT_ABORT ON
	BEGIN TRANSACTION 

	--Add Task
	INSERT INTO TASK(
	Description, 		
	Task_Status_ID, 
	Eqp_Plan_ID, 
	Event_Id,
	Task_Type_ID, 
	Component_Code_ID, 
	Modifier_ID, 
	Application_Code_ID, 
	Occurrence_Type_Id, 
	Priority_ID, 
	Source_ID, 
	Task_Mode_ID, 
	PartsStatusRequired, 		
	PartsStatusOrdered, 		
	PartsStatusReady, 		
	Strategy_Usage, 
	Strategy_QUOM_ID, 
	Strategy_Proj_Task_Opt_ID, 
	Planned_Proj_Task_Opt_ID, 
	Strategy_Date, 
	Strategy_Locked, 		 
	Strategy_Repair_Description, 
	Cost_Bearer_ID, 		
	Cause_Id,
	Symptom_Id,		
	Repair_Code_Id,
	Final_Change,
	Risk_Life_Left, 
	Strategy_Frequency,
	Last_Performed, 
	Last_Scheduled, 
	Last_Performed_Date,
	Last_Scheduled_Date,
	Site_Id,
	Cost_Centre_Id, 
	Branch_Id,
	Part_Entry_Distribution_Code_Id, 
	Labour_Entry_Distribution_Code_Id, 
	Misc_Entry_Distribution_Code_Id,
	Task_Authorised,
	Customer_Id,
	Parts_Cost_Expense_Id, 
	Labour_Cost_Expense_Id, 
	Misc_Cost_Expense_Id, 
	AMTPlanningModeId,
	Specific_Operation_Codes,
	Warranty_Days,
	Warranty_Usage,
	ChangeoutCategoryId,
	/*VV 1/11/2007*/
	Work_Group_Id,
	Def_Work_Group_Id,
	Primary_Cause,
	--AL: 20/02/09
	Expected_Duration,
	Symptom_Notes,
	ConditionMonitoringIntervention,
	/*VV CR8449*/
	Last_Mod_By_User_ID,
	Last_Mod_Date,
	Create_By_User_ID,
	Create_Date,
	--AL: 29/03/10
	Health_Safety_ID,LastNotified
	)

	SELECT
	T.Description, 		
	T.Task_Status_ID, 
	T.Eqp_Plan_ID,
	NULLIF(@EventId,0), 
	T.Task_Type_ID, 
	T.Component_Code_ID, 
	T.Modifier_ID, 
	T.Application_Code_ID, 
	T.Occurrence_Type_Id, 
	T.Priority_ID, 
	T.Source_ID, 
	T.Task_Mode_ID, 
	T.PartsStatusRequired,
	T.PartsStatusOrdered,
	T.PartsStatusReady,
	T.Strategy_Usage, 
	T.Strategy_QUOM_ID, 
	NULLIF(T.Strategy_Proj_Task_Opt_ID,0) AS Strategy_Proj_Task_Opt_ID,
	NULLIF(T.Planned_Proj_Task_Opt_ID,0) AS  Planned_Proj_Task_Opt_ID,
	T.Strategy_Date, 
	ISNULL(T.Strategy_Locked, 0) AS Strategy_Locked,	 
	ISNULL(T.Strategy_Repair_Description,''),
	T.Cost_Bearer_ID, 		
	T.Cause_Id,
	T.Symptom_Id,		
	T.Repair_Code_Id,
	ISNULL(@Final_Change,0) AS Final_Change,
	ISNULL(@Risk_Life_Left,0) AS Risk_Life_Left, 
	ISNULL(@Strategy_Frequency,0) AS Strategy_Frequency,
	@Last_Performed AS  Last_Performed, 
	@Last_Scheduled AS Last_Scheduled, 
	@Last_Performed_Date AS Last_Performed_Date,
	@Last_Scheduled_Date AS Last_Scheduled_Date,
	@Site_Id AS Site_Id,
	T.Cost_Centre_Id, 
	@Branch_Id AS Branch_Id,
	T.Part_Entry_Distribution_Code_Id, 
	T.Labour_Entry_Distribution_Code_Id, 
	T.Misc_Entry_Distribution_Code_Id,

	--AL: 03/02/09
	CASE @AuthorisationMode
		WHEN @AuthModeNone THEN 1
		WHEN @AuthModeAdvanced THEN 0
		ELSE CASE WHEN ISNULL(T.Strategy_Proj_Task_Opt_ID,0)>0 AND ISNULL(@EventId,0)<1 THEN 1 ELSE 0 END --AL: 11/02/09
	END AS Task_Authorised,

	T.Customer_Id,
	T.Part_Cost_Expense_Id AS Parts_Cost_Expense_Id, 
	T.Labour_Cost_Expense_Id, 
	T.Misc_Cost_Expense_Id, 
	T.AMTPlanningModeId,
	T.Specific_Operation_Codes,
	ISNULL(T.Warranty_Days,0) AS Warranty_Days,
	ISNULL(T.Warranty_Usage,0) AS Warranty_Usage,
	@ChangeoutCategoryId AS ChangeoutCategoryId,
	/*VV 1/11/2007*/
	T.Work_Group_Id,
	T.Def_Work_Group_Id,
	/*KN 12 Feb 2007*/
	@IsPrimaryTask,
	--AL: 20/02/09
	T.Expected_Duration,
	@WOSymptoms,
	CASE WHEN ISNULL(@RCMRuleId,0) > 0 AND ISNULL(@RCMConditionMonitoringId,0) > 0 THEN 1 ELSE 0 END,
	/*VV CR8449*/
	@UserId AS Last_Mod_By_User_ID,
	GETDATE() AS Last_Mod_Date,
	@UserId AS Create_By_User_ID,
	GETDATE() AS Create_Date,
	--AL: 29/03/10
	T.Health_Safety_ID,GETDATE()
	
	FROM @z_TASK T

	SET @TaskId=SCOPE_IDENTITY()

	--Library documents
	IF EXISTS(SELECT Work_Scope_Document_Id FROM @z_TASK_DOCUMENT)
	BEGIN
		INSERT INTO TASK_DOCUMENT(Task_Id,Work_Scope_Document_Id)
		SELECT @TaskId AS Task_Id,Work_Scope_Document_Id
		FROM @z_TASK_DOCUMENT
	END

	--VV CR8035
	IF EXISTS(SELECT PTED.ProjTaskExternalDocumentId FROM 
		PROJ_TASK_EXTERNAL_DOCUMENT PTED
			INNER JOIN
		tblProjTaskOpts PTO
			ON PTO.ProjTaskOptId=@Proj_Task_Opt_Id AND PTED.ProjTaskId=PTO.ProjTaskId)
	BEGIN
		INSERT INTO TASK_EXTERNAL_DOCUMENT(TaskId,DocumentLink,DocumentName)
		SELECT @TaskId AS TaskId, PTED.DocumentLink,PTED.DocumentName FROM
		PROJ_TASK_EXTERNAL_DOCUMENT PTED
			INNER JOIN
		tblProjTaskOpts PTO
			ON PTO.ProjTaskOptId=@Proj_Task_Opt_Id AND PTED.ProjTaskId=PTO.ProjTaskId
	END


	--Check if we need to add operations
	SELECT @OpCount=COUNT(Task_Operation_Id) FROM @z_TASK_OPERATION

	SET @OpCount=ISNULL(@OpCount,0)

	IF @OpCount>0 
	BEGIN

		--Add Operations
		INSERT INTO TASK_OPERATION(
		Task_Id, SortOrder,
		Task_Operation,Operation_Instructions,Planned_Duration,
		Actual_Duration,Cost_Bearer_Id,Cost_Centre_Id, 
		Parts_Cost_Expense_Id, Labour_Cost_Expense_Id, Misc_Cost_Expense_Id,
		Parts_Entry_Distribution_Code_Id,Labour_Entry_Distribution_Code_Id,
		Misc_Entry_Distribution_Code_Id,Component_Code_Id, 
		Modifier_Code_Id,Job_Code_Id, Work_Group_Id, Health_Safety_Id, 
		Proj_Task_Amt_Id,Std_Job_Op_Id,/*VV AmtMobile*/UniqueKey)
		SELECT     
		@TaskId AS Task_Id, ABS(O.Task_Operation_Id) AS SortOrder,
		O.Task_Operation,O.Operation_Instructions,O.Planned_Duration,
		O.Actual_Duration,O.Cost_Bearer_Id,O.Cost_Centre_Id, 
		O.Parts_Cost_Expense_Id, O.Labour_Cost_Expense_Id, O.Misc_Cost_Expense_Id,
		O.Parts_Entry_Distribution_Code_Id,O.Labour_Entry_Distribution_Code_Id,
		O.Misc_Entry_Distribution_Code_Id,O.Component_Code_Id, 
		O.Modifier_Code_Id,O.Job_Code_Id, O.Work_Group_Id, O.Health_Safety_Id, 
		O.Proj_Task_Amt_Id,O.Std_Job_Op_Id,/*VV AmtMobile*/O.UniqueKey
		FROM @z_TASK_OPERATION O
		
		--select @TaskId return
		--Update the temp table for task operations with the new id
		UPDATE Z
		SET NewTaskOpId=O.Task_Operation_Id
		FROM
		@z_TASK_OPERATION Z 
			INNER JOIN
		TASK_OPERATION O 
			ON O.Task_Id=@TaskId AND -Z.Task_Operation_Id=O.SortOrder

		--select * FROM @z_TASK_OPERATION return

		--AL: 07/04/09
		DECLARE @PrimaryCurrencyId int,@FinPeriod int
		SELECT TOP 1 @PrimaryCurrencyId = CurrencyId FROM tblCurrencies WHERE ISNULL(PrimaryCurr, 0) <> 0
		SET	@FinPeriod=dbo.TASK_JOBDATE_F(@TaskId,0,2)	--AL: 08/04/09

		IF EXISTS(SELECT Task_Operation_Part_id FROM @z_TASK_OPERATION_PART)	
		BEGIN

			INSERT INTO TASK_OPERATION_PART(Task_Operation_Id,Part_Number,
			Part_Description,Strategy_Qty, Pct_Strategy_Probability, 
			Strategy_Unit_Price,Planned_Qty,Planned_Unit_Price,Supplier_Id, Include_In_Total,		
			IsEditable,Last_Mod_By_User_ID,Last_Mod_Date,Create_By_User_ID,
			Create_Date,SourceOfSupplyId,
			--AL: 03/04/09
			ActualTotalSell,
			ActualTotalCost,
			--AL: 07/04/09
			FinPeriod,CurrencyId,ExchangeRate,
			/*VV CR8294*/
			CostBearerID,CostCentreID ,ExpenseElementID ,WorkGroupID )

			SELECT     
			O.NewTaskOpId AS Task_Operation_Id,PA.Part AS Part_Number,
			ISNULL(PA.PartDescription,@DefDescription) AS Part_Description,
			P.Strategy_Qty, P.Pct_Strategy_Probability, P.Strategy_Unit_Price,	
			CAST(CASE WHEN P.Pct_Strategy_Probability<100.00 THEN 0.00 
			ELSE P.Strategy_Qty END AS float) *
			CAST(P.Include_In_Total AS float) AS Planned_Qty,
			Strategy_Unit_Price AS Planned_Unit_Price,	
			P.Supplier_Id, P.Include_In_Total,		
			@IsEditable AS IsEditable,
			@UserId AS Last_Mod_By_User_ID,GETDATE() AS Last_Mod_Date, 
			@UserId AS Create_By_User_ID,GETDATE() AS Create_Date,
			P.SourceOfSupplyId,
			--AL: 03/04/09
			0 AS TotalActualSell,
			CASE WHEN ISNULL(@ManualEntryActualsParts,1)=3 THEN NULL ELSE 0 END AS ActualTotalCost,
			--AL: 07/04/09
			@FinPeriod,@PrimaryCurrencyId,1,
			/*VV CR8294*/
			P.CostBearerID,P.CostCentreID ,P.ExpenseElementID ,P.WorkGroupID

			FROM   	 
			@z_TASK_OPERATION O 		
				INNER JOIN
			@z_TASK_OPERATION_PART P 
				ON O.Task_Operation_Id = P.Task_Operation_Id
				LEFT OUTER JOIN
			tblParts PA
				ON P.Part_Id=PA.PartId
				
			
		END	

		--Operation labour
		IF EXISTS(SELECT Task_Operation_Labour_id FROM @z_TASK_OPERATION_LABOUR)	
		BEGIN
			INSERT INTO TASK_OPERATION_LABOUR(
			Task_Operation_Id, Labour_Activity,Strategy_Labour_Hrs,
			Strategy_Labour_Rate,
			Labour_Qty,Planned_Labour_Hrs,
			Planned_Labour_Rate,
			Work_Group_Id,Labour_Activity_Id, Include_In_Total, 
			Create_By_User_Id,Create_Date,
			Last_Mod_By_User_Id,Last_Mod_Date,
			IsEditable,
			--AL: 03/04/09
			ActualTotalSell,
			ActualTotalCost,
			--AL: 07/04/09
			FinPeriod,CurrencyId,ExchangeRate,
			/*VV CR8294*/
			CostBearerID,CostCentreID ,ExpenseElementID)

			SELECT
			O.NewTaskOpId AS Task_Operation_Id, L.Labour_Activity,L.Strategy_Labour_Hrs,
			L.Strategy_Labour_Rate,
			1 AS Planned_Qty,
			L.Strategy_Labour_Hrs *
			CAST(L.Include_In_Total As float) AS Planned_Labour_Hrs,
			L.Strategy_Labour_Rate AS Planned_Labour_Rate,
			L.Work_Group_Id,L.Labour_Activity_Id, L.Include_In_Total, 
			@UserId AS Create_By_User_Id,GETDATE() AS Create_Date,
			@UserId AS Last_Mod_By_User_Id,GETDATE() AS Last_Mod_Date,
			@IsEditable AS IsEditable,
			--AL: 03/04/09
			0 AS TotalActualSell,
			CASE WHEN ISNULL(@ManualEntryActualsLabour,1)=3 THEN NULL ELSE 0 END AS ActualTotalCost,
			--AL: 07/04/09
			@FinPeriod,@PrimaryCurrencyId,1,
			/*VV 8294*/
			L.CostBearerID,L.CostCentreID ,L.ExpenseElementID

			FROM 
			@z_TASK_OPERATION O 		
				INNER JOIN
			@z_TASK_OPERATION_LABOUR L
				ON O.Task_Operation_Id = L.Task_Operation_Id
		END
		--Operation misc
		IF EXISTS(SELECT Task_Operation_Misc_Id FROM @z_TASK_OPERATION_MISC)	
		BEGIN
			INSERT INTO TASK_OPERATION_MISC(
			Task_Operation_Id,Task_Operation_Misc_Desc,Strategy_Sell,
			Planned_Sell,Misc_Category_Id,Include_In_Total, Supplier_Id, IsEditable,
			--AL: 03/04/09
			Actual_Sell,ActualCost,
			--AL: 07/04/09
			FinPeriod,CurrencyId,ExchangeRate,
			/*VV 8294*/
			CostBearerID,CostCentreID ,ExpenseElementID ,WorkGroupID)

			SELECT
			O.NewTaskOpId AS Task_Operation_Id,
			M.Task_Operation_Misc_Desc,
			M.Strategy_Sell,
			M.Strategy_Sell*CAST(M.Include_In_Total AS float) AS Planned_Sell,
			M.Misc_Category_Id, M.Include_In_Total, M.Supplier_Id, 
			@IsEditable AS IsEditable,
			--AL: 03/04/09
			0 AS Actual_Sell,
			CASE WHEN ISNULL(@ManualEntryActualsMisc,1)=3 THEN NULL ELSE 0 END AS ActualCost,
			--AL: 07/04/09
			@FinPeriod,@PrimaryCurrencyId,1,
			/*VV 8294*/
			M.CostBearerID,M.CostCentreID ,M.ExpenseElementID ,M.WorkGroupID

			FROM 
			@z_TASK_OPERATION O 		
				INNER JOIN
			@z_TASK_OPERATION_MISC m
				ON O.Task_Operation_Id = M.Task_Operation_Id
		END
		
		/*VV AmtMobile*/
		IF EXISTS(SELECT * FROM #z_EW_WORKORDER)
		BEGIN
			INSERT INTO EW_WORKORDER(TaskOperationId,EWTitle,UniqueKey,LastModByUserId,LastModDate)
			SELECT O.Task_Operation_Id AS TaskOperationId,E.EWTitle,E.UniqueKey,
			@UserId AS LastModByUserId, GETDATE() AS LastModDate 
			FROM 
			#z_EW_WORKORDER E
				INNER JOIN
			@z_TASK_OPERATION Z
				ON E.TaskOperationId=Z.Task_Operation_Id
				INNER JOIN
			TASK_OPERATION O
				ON Z.UniqueKey=O.UniqueKey
				
			
			INSERT INTO EW_WORKSTEP(EWWorkorderId,EWStepTemplateId,Sequence,EWWorkstepTitle,
			ComponentCodeId,CMCodeId,Instructions,DocumentGUID,DocumentExt,Safety,Environmental,
			UniqueKey,LastModByUserId,LastModDate)
			SELECT EW.EWWorkorderId,S.EWStepTemplateId,S.Sequence,S.EWWorkstepTitle,S.ComponentCodeId,
			S.CMCodeId,S.Instructions,S.DocumentGUID,S.DocumentExt,S.Safety,S.Environmental,
			S.UniqueKey,@UserId AS LastModByUserId, GETDATE() AS LastModDate 
			FROM 
			#z_EW_WORKSTEP S
				INNER JOIN
			#z_EW_WORKORDER E
				ON S.EWWorkorderId=E.EWWorkorderId
				INNER JOIN
			EW_WORKORDER EW
				ON E.UniqueKey=EW.UniqueKey
				
			SET @CopyEWTemplateFiles=1
		END
	END
	
	--AL: 09/02/09
	EXEC TASK_OPERATION_CHECK_ADD_P @TaskID=@TaskID,@IsEditable=@IsEditable,@UserId=@UserId

	--AL: 19/03/09
	IF @Task_Mode_Id=@Task_Mode_AW
		EXEC TASK_AUTO_CREATE_WO_P @TaskID =@TaskID,@Message=@Message OUTPUT

	COMMIT TRANSACTION 
	--Note: if there is a problem, AMTData will abort the transaction

END--IF @Add=1

IF @Add=0
BEGIN
	/*VV 27-Apr-2009*/
	EXEC AMT_TYPED_VARIABLE_GET_P @Value_Name='ExternalDocumentSystem',  @Varchar_Value=@ExternalDocumentSystem OUTPUT
	/*VV 30-Apr-2009*/
	EXEC AMT_TYPED_VARIABLE_GET_P @Value_Name='ExtDocUseClientCredentials',  @Varchar_Value=@ExtDocUseClientCredentials OUTPUT
	
	IF @TaskDefaults=1
	BEGIN
		SELECT     
		@CompanyCode=D.Company_Code
		FROM 
		@z_TASK T INNER JOIN 
		tblEqpPlans AS EP ON EP.EqpPlanId=T.Eqp_Plan_Id INNER JOIN
		tblFleets AS F ON EP.FleetId = F.FleetId INNER JOIN
		tblSites AS S ON F.SiteId = S.SiteId INNER JOIN
		tblDealers AS D INNER JOIN
		tblBranches AS B ON D.DealerId = B.DealerId ON S.BranchId = B.BranchId

		--AL: 29/08/08
		DECLARE @WarrantyParts bit
		DECLARE @count int

		SELECT	@count=COUNT(*)
		FROM    PARTS_POTENTIAL_WARRANTY AS PPW INNER JOIN
				(SELECT	W.PureWONumber AS WorkorderNo, REPLACE(REPLACE(W.WorkOrderNumber, W.PureWONumber, ''), '-', '') AS SegmentNo--,P.Part_Number
				 FROM	TASK AS T INNER JOIN
						tblWorkOrders AS W ON T.Work_Order_ID = W.WorkOrderId --INNER JOIN
		--                TASK_OPERATION AS O ON T.Task_ID = O.Task_Id INNER JOIN
		--                TASK_OPERATION_PART AS P ON O.Task_Operation_Id = P.Task_Operation_Id
				 WHERE      (T.Task_ID = @Taskid)) AS A ON PPW.WorkorderNo = A.WorkorderNo 
															AND PPW.SegmentNo = A.SegmentNo  
		--													AND PPW.PartNumber = A.Part_Number 

		SET @WarrantyParts=CASE WHEN ISNULL(@count,0)=0 THEN 0 ELSE 1 END


		SELECT
		T.Task_ID, TT.Code + ' - ' + TT.Description AS [Task Type], 
		CC.Code + ' - ' + CC.Description AS [Component Code], 
		MC.Code + ' - ' + MC.Description AS [Modifier Code], T.Description AS [Backlog Description], 
		TS.Description AS [Task Status], P.Description AS Priority, 
		T.Task_Status_ID, 
		T.Eqp_Plan_ID, 
		T.Task_Type_ID, T.Component_Code_ID, T.Modifier_ID, T.Application_Code_ID, 
		T.Occurrence_Type_Id, 
		T.Priority_ID, T.Source_ID, 
		T.Task_Mode_ID, --T.Parts_Resources_Identified, 
		T.PartsStatusRequired,
		T.PartsStatusOrdered,
		T.PartsStatusReady,
		AC.Code + ' - ' + AC.Description AS Application_Code, C.Description AS Cause, 
		EP.EqpPlan, 
		OT.OccurrenceType + ' - ' + OT.OccurrenceTypeDesc AS Occurrence_Type, 
		JC.Code+' - '+JC.Description AS Repair_Code, S.Description AS Source, 
		SY.Description AS Symptom,
		T.Strategy_Usage, T.Strategy_QUOM_ID, 

		CONVERT(varchar,ROUND(T.Strategy_Usage, 0)) + ' ' + CASE WHEN T.Strategy_QUOM_ID IS NULL THEN 'Days' 
		ELSE QUOMS.UOMShortDesc END AS StrategyUsageDisplay, 

		T.Strategy_Proj_Task_Opt_ID, T.Planned_Proj_Task_Opt_ID, 
		T.Strategy_Date,
		T.Strategy_Locked,

		CASE WHEN T.Strategy_QUOM_ID IS NULL THEN 'Days' ELSE QUOMS.UOMShortDesc END AS QUOM_Display, 
		E.ModelId, M.Model, 
		T.Strategy_Repair_Description, 
		T.Strategy_Part_Num,
		T.Cost_Bearer_ID, 
		CB.CostBearer, 
		T.Cause_Id,T.Symptom_Id,
		C.Description AS Cause,SY.Description AS Symptom,
		T.Repair_Code_Id,JC.Code+' - '+JC.Description AS Repair_Code, 
		--new fields
		 
		ISNULL(@Final_Change,0) AS Final_Change,ISNULL(@Risk_Life_Left,0) AS Risk_Life_Left, 
		ISNULL(@Strategy_Frequency,0) AS Strategy_Frequency,@Last_Performed AS  Last_Performed, 
		@Last_Scheduled AS Last_Scheduled, @Last_Performed_Date AS Last_Performed_Date,
		@Last_Scheduled_Date AS Last_Scheduled_Date,@Site_Id AS Site_Id,@Site AS Site,
		T.Cost_Centre_Id, Cost_Centre_Code+' - '+Cost_Centre_Desc AS Cost_Centre,
		@Branch_Id AS Branch_Id,@Branch AS Branch,
		T.Part_Entry_Distribution_Code_Id, 
		EDC.EDC_Id + ' - ' + EDC.Journal_Description + ' : ' + EDC.Debit_Account + '.' + EDC.Debit_Account_Suffix AS Parts_EDC,
		T.Labour_Entry_Distribution_Code_Id, 
		LEDC.EDC_Id + ' - ' + LEDC.Journal_Description + ' : ' + LEDC.Debit_Account + '.' + LEDC.Debit_Account_Suffix AS Labour_EDC,
		T.Misc_Entry_Distribution_Code_Id,
		MEDC.EDC_Id + ' - ' + MEDC.Journal_Description + ' : ' + MEDC.Debit_Account + '.' + MEDC.Debit_Account_Suffix AS Misc_EDC,

		--AL: 03/02/09
		CASE @AuthorisationMode
			WHEN @AuthModeNone THEN 1
			WHEN @AuthModeAdvanced THEN 0
			ELSE CASE WHEN T.Strategy_Proj_Task_Opt_ID>0 THEN 1 ELSE 0 END 
		END AS Task_Authorised,

		ISNULL(@ProjTaskId,0) AS ProjTaskId, 
		CASE WHEN ISNULL(@ProjTaskId,0)>0 THEN @Description ELSE '' END AS StrategyTask,
		@PartsAvailableFromERP AS PartsAvailableFromERP,
		T.Customer_Id,CU.Customer,
		T.Part_Cost_Expense_Id AS Parts_Cost_Expense_Id, CEP.Cost_Expense_Code+' - '+CEP.Cost_Expense_Desc AS Parts_Cost_Expense,
		T.Labour_Cost_Expense_Id, CEL.Cost_Expense_Code+' - '+CEL.Cost_Expense_Desc AS Labour_Cost_Expense,
		T.Misc_Cost_Expense_Id, 
		CEM.Cost_Expense_Code+' - '+CEM.Cost_Expense_Desc AS Misc_Cost_Expense,
		@CompanyCode AS CompanyCode,T.AMTPlanningModeId,T.Specific_Operation_Codes,
		@ChooseWODate AS ChooseWODate,@WOCreationDateFutureONLY AS WOCreationDateFutureONLY,
		T.ChangeoutCategoryId, CHC.Code as ChangeoutCategory, @LifeConfirmed AS LifeConfirmed,
		/*VV 1/11/2007*/
		T.Work_Group_Id,WG1.Description AS WorkGroupDisplay,T.Def_Work_Group_Id,WG2.Description AS Def_Work_Group,
		/*KN 21APR2008*/
		@IsOverwriteLife As IsOverwriteLife,
		/*AL 29AUG2008*/
		@WarrantyParts AS WarrantyParts,
		@WOCreateFromPO AS WOCreateFromPO,
		/*AL 03/02/09*/
		@ACWManualWOClosure AS ManualWOClosure,
		@AuthorisationMode AS AuthorisationMode,
		@AuthorisationTolerancePct AS AuthorisationTolerancePct,

		@FeedbackPartsTab AS FeedbackPartsTab,	--AL: 10/02/09
		@FeedbackLabourTab AS FeedbackLabourTab,	--AL: 10/02/09
		@FeedbackMiscTab AS FeedbackMiscTab,	--AL: 10/02/09
		
		T.Expected_Duration,	--AL: 20/02/09


		--AL: 10/03/09
		@ManualEntryActualsParts AS ManualEntryActualsParts,
		@ManualEntryActualsLabour AS ManualEntryActualsLabour,
		@ManualEntryActualsMisc AS ManualEntryActualsMisc,
		@OpEditionPartsStockCode AS OpEditionPartsStockCode,
		@OpEditionPartsCB AS OpEditionPartsCB,
		@OpEditionPartsCC AS OpEditionPartsCC,
		@OpEditionPartsEE AS OpEditionPartsEE,
		@OpEditionPartsWG AS OpEditionPartsWG,
		@OpEditionLabourCB AS OpEditionLabourCB,
		@OpEditionLabourCC AS OpEditionLabourCC,
		@OpEditionLabourEE AS OpEditionLabourEE,
		--@OpEditionLabourWG AS OpEditionLabourWG,
		@OpEditionMiscCB AS OpEditionMiscCB,
		@OpEditionMiscCC AS OpEditionMiscCC,
		@OpEditionMiscEE AS OpEditionMiscEE,
		@OpEditionMiscWG AS OpEditionMiscWG, 
		@ShowOPParts_LookupPartsDetails AS ShowOPParts_LookupPartsDetails,
		@ShowOPParts_SearchPurchaseHistory AS ShowOPParts_SearchPurchaseHistory,
		@ShowOPParts_AssignSupplier AS ShowOPParts_AssignSupplier,
		@ShowOPParts_InventorySearch AS ShowOPParts_InventorySearch,
		@ShowOPParts_InventoryValidation AS ShowOPParts_InventoryValidation,
		@ShowOPParts_PartsBookLookup AS ShowOPParts_PartsBookLookup,
		@ShowPOAssignNo AS ShowPOAssignNo,
		@ShowPOActions AS ShowPOActions,
		--AL: 03/04/09
		@OpEditionPlanStatus AS OpEditionPlanStatus,
		--AL: 22/04/09
		PG.Price_Group_ID AS PriceGroupID,PG.Price_Group AS PriceGroup,
		CUR.CurrencyID AS PrimaryCurrencyID,CUR.CurrencyDesc AS PrimaryCurrency,
		/*VV 27-Apr-2009*/
		@ExternalDocumentSystem AS ExternalDocumentSystem,
		/*VV 30-Apr-2009*/
		@ExtDocUseClientCredentials AS ExtDocUseClientCredentials,
		--AL: 29/03/10
		T.Health_Safety_ID,HS.Health_Safety,HS.AuditableRecord as HealthSafetyAuditable, GETDATE() AS LastNotified,
		--AL: 31/03/10
		@AutoLookupPartsReadyStatus AS AutoLookupPartsReadyStatus,
		AuthorisationRequestByID,NULL AS AuthorisationRequestBy,AuthorisationRequestDate,
		CONVERT(BIT,0) AS ResourceStatusReady,
		@CreatePOModeAllowCreateERPWO AS CreatePOModeAllowCreateERPWO
		
		FROM         
		@z_TASK T
			INNER JOIN
		tblEqpPlans EP
			ON T.Eqp_Plan_Id=EP.EqpPlanId
			INNER JOIN
		tblEquipment E
			ON EP.EquipmentId=E.EquipmentId
			INNER JOIN
		tblModels M
			ON E.ModelId=M.ModelId
			INNER JOIN
		tblTaskTypes TT
			ON T.Task_Type_Id=TT.TaskTypeId
			INNER JOIN
		tblComponentCodes CC
			ON T.Component_Code_Id=CC.ComponentCodeId
			INNER JOIN
		tblModifierCodes MC
			ON T.Modifier_ID=MC.ModifierId
			INNER JOIN
		tblApplicationCodes AC
			ON T.Application_Code_ID=AC.ApplicationCodeId
			INNER JOIN
		tblOccurrenceTypes OT
			ON T.Occurrence_Type_Id=OT.OccurrenceTypeId
			INNER JOIN
		PRIORITY P
			ON T.Priority_ID=P.Priority_ID	
			INNER JOIN
		TASK_STATUS TS
			ON T.Task_Status_ID=TS.Task_Status_ID
			INNER JOIN
		SYMPTOM SY
			ON T.Symptom_ID=SY.Symptom_ID
			INNER JOIN
		CAUSE C
			ON T.Cause_ID=C.Cause_ID
			INNER JOIN
		tblJobCodes JC
			ON T.Repair_Code_Id=JC.JobCodeId	
			LEFT OUTER JOIN
		SOURCE S
			ON T.Source_ID=S.Source_ID
			LEFT OUTER JOIN
		COST_CENTRE COC
			ON T.Cost_Centre_Id=COC.Cost_Centre_Id
			LEFT OUTER JOIN
		tblCostBearers CB
			ON T.Cost_Bearer_Id=CB.CostBearerId
			LEFT OUTER JOIN
		ENTRY_DISTRIBUTION_CODE EDC
			ON T.Part_Entry_Distribution_Code_Id=EDC.Id
			LEFT OUTER JOIN
		ENTRY_DISTRIBUTION_CODE LEDC
			ON T.Labour_Entry_Distribution_Code_Id=LEDC.Id
			LEFT OUTER JOIN
		ENTRY_DISTRIBUTION_CODE MEDC
			ON T.Misc_Entry_Distribution_Code_Id=MEDC.Id
			LEFT OUTER JOIN
		COST_EXPENSE CEP
			ON T.Part_Cost_Expense_Id=CEP.Cost_Expense_Id
			LEFT OUTER JOIN
		COST_EXPENSE CEL
			ON T.Labour_Cost_Expense_Id=CEL.Cost_Expense_Id
			LEFT OUTER JOIN
		COST_EXPENSE CEM
			ON T.Misc_Cost_Expense_Id=CEM.Cost_Expense_Id
			LEFT OUTER JOIN
		tblCustomers CU
			ON T.Customer_Id=CU.CustomerId
			LEFT OUTER JOIN
		WORK_GROUP WG1
			ON T.Work_Group_id=WG1.Work_Group_Id
			LEFT OUTER JOIN
		WORK_GROUP WG2
			ON T.Def_Work_Group_id=WG2.Work_Group_Id
			LEFT OUTER JOIN
		tblQUOMs QUOMS
			ON  T.Strategy_QUOM_ID=QUOMS.QUOMId
			LEFT OUTER JOIN
		CHANGEOUT_CATEGORY CHC
			ON T.ChangeoutCategoryId = CHC.ChangeoutCategoryId
		--AL: 29/03/10
			LEFT OUTER JOIN
		HEALTH_SAFETY HS
			ON T.Health_Safety_Id = HS.Health_Safety_Id
		
		--AL: 22/04/09
		INNER JOIN
	tblFleets F 
		ON EP.FleetID=F.FleetID
		INNER JOIN
	PRICE_GROUP PG
		ON F.Price_Group_ID=PG.Price_Group_ID
		CROSS JOIN
		(SELECT TOP 1 CurrencyID,CurrencyDesc FROM tblCurrencies WHERE PrimaryCurr<>0) AS CUR

	--Library

	SELECT
	WSD.Work_Scope_Document_Id,dbo.DOCUMENT_SOURCE_F(1) AS Source,
	WSD.Document_Name, WSD.Document_File_Name,1 AS SourceId
	FROM
	@z_TASK_DOCUMENT TD
		INNER JOIN
	WORK_SCOPE_DOCUMENT WSD
		ON TD.Work_Scope_Document_Id=WSD.Work_Scope_Document_Id

	/*VV CR8035*/
	UNION ALL
	
	SELECT 0 AS Work_Scope_Document_Id,dbo.DOCUMENT_SOURCE_F(0) AS Source,
		PTED.DocumentName AS Document_Name, PTED.DocumentLink AS Document_File_Name,0 AS SourceId
	FROM 
	PROJ_TASK_EXTERNAL_DOCUMENT PTED
		INNER JOIN
	tblProjTaskOpts PTO
		ON PTO.ProjTaskOptId=@Proj_Task_Opt_Id AND PTED.ProjTaskId=PTO.ProjTaskId


	--VV 2-Apr-2009 added attached documents
	SELECT [FileName] FROM 
	ATTACHED_DOCUMENT_TASK ADT
		INNER JOIN
	@z_TASK T
		ON ADT.TaskId=T.Task_Id
		

	END --IF @TaskDefaults=1


	--Task Operations

	SELECT
	ABS(TOPR.Task_Operation_Id) AS SortOrder,TOPR.Task_Operation,CC.Code + ' - ' + CC.Description AS Component_Code,
	MC.Code + ' - ' + MC.Description AS Modifier_Code,JC.Code+' - '+JC.Description AS Job_Code ,
	WG.Description AS Work_Group,HS.Health_Safety,TOPR.Operation_Instructions,
	CAST(0 AS float) AS OperationOffset,CAST(NULL AS datetime) AS StartTime,
	CAST(NULL AS datetime) AS EndTime,
	TOPR.Planned_Duration,ISNULL(A.LabourDuration,0) AS LabourDuration,
	TOPR.Actual_Duration,
	CAST((CASE WHEN EXISTS(SELECT P.Task_Operation_Id FROM @z_TASK_OPERATION_PART P
	WHERE P.Task_Operation_Id=TOPR.Task_Operation_Id AND P.Strategy_Qty>0) THEN 1 
	ELSE 0 END) AS bit) AS P,
	CAST((CASE WHEN A.LabourDuration IS NOT NULL THEN 1 ELSE 0 END) AS bit) AS L,
	CAST((CASE WHEN EXISTS(SELECT M.Task_Operation_Id FROM @z_TASK_OPERATION_MISC M
	WHERE M.Task_Operation_Id=TOPR.Task_Operation_Id) THEN 1 ELSE 0 END) AS bit) AS M,
	CAST(0 AS float) AS TotalLH,CB.CostBearer,
	COC.Cost_Centre_Code+' - '+COC.Cost_Centre_Desc AS Cost_Centre,
	CEP.Cost_Expense_Code+' - '+CEP.Cost_Expense_Desc AS Parts_Cost_Expense,
	CEL.Cost_Expense_Code+' - '+CEL.Cost_Expense_Desc AS Labour_Cost_Expense,
	CEM.Cost_Expense_Code+' - '+CEM.Cost_Expense_Desc AS Misc_Cost_Expense, 
	EDCP.EDC_Id + ' - ' + EDCP.Journal_Description + ' : ' + EDCP.Debit_Account + '.' + EDCP.Debit_Account_Suffix AS Parts_EDC,
	EDCL.EDC_Id + ' - ' + EDCL.Journal_Description + ' : ' + EDCL.Debit_Account + '.' + EDCL.Debit_Account_Suffix AS Labour_EDC,
	EDCM.EDC_Id + ' - ' + EDCM.Journal_Description + ' : ' + EDCM.Debit_Account + '.' + EDCM.Debit_Account_Suffix AS Misc_EDC, 
	CAST(0 AS float) AS TotalP,CAST(0 AS float) AS TotalL,
	CAST(0 AS float) AS TotalM,CAST(0 AS float) AS TotalPLM,
	TOPR.Task_Operation_Id, 
	TOPR.Cost_Bearer_Id, 
	TOPR.Cost_Centre_Id, 
	TOPR.Parts_Cost_Expense_Id, TOPR.Labour_Cost_Expense_Id, TOPR.Misc_Cost_Expense_Id,
	TOPR.Parts_Entry_Distribution_Code_Id, 
	TOPR.Labour_Entry_Distribution_Code_Id,
	TOPR.Misc_Entry_Distribution_Code_Id,
	TOPR.Task_Id,TOPR.Component_Code_Id, 
	TOPR.Modifier_Code_Id,  
	TOPR.Job_Code_Id, TOPR.Work_Group_Id, TOPR.Health_Safety_Id, TOPR.Proj_Task_Amt_Id,
	TOPR.Std_Job_Op_Id,CONVERT(varchar(25), TOPR.Last_Mod_Date, 21) AS Last_Mod_Date
	FROM  
	@z_TASK_OPERATION TOPR
		INNER JOIN
	tblComponentCodes CC
		ON TOPR.Component_Code_Id=CC.ComponentCodeId
		INNER JOIN
	tblModifierCodes MC
		ON TOPR.Modifier_Code_Id=MC.ModifierId
		/*VV 12-Dec-2008*/
		LEFT JOIN
	tblJobCodes JC
		ON TOPR.Job_Code_Id=JC.JobCodeId	
		LEFT OUTER JOIN
	WORK_GROUP WG
		ON TOPR.Work_Group_Id=WG.Work_Group_Id
		LEFT OUTER JOIN
	HEALTH_SAFETY HS
		ON TOPR.Health_Safety_Id=HS.Health_Safety_Id
		LEFT OUTER JOIN
	tblCostBearers CB
		ON TOPR.Cost_Bearer_Id=CB.CostBearerId
		LEFT OUTER JOIN
	COST_CENTRE COC
		ON TOPR.Cost_Centre_Id=COC.Cost_Centre_Id
		LEFT OUTER JOIN
	COST_EXPENSE CEP
		ON TOPR.Parts_Cost_Expense_Id=CEP.Cost_Expense_Id
		LEFT OUTER JOIN
	COST_EXPENSE CEL
		ON TOPR.Labour_Cost_Expense_Id=CEL.Cost_Expense_Id
		LEFT OUTER JOIN
	COST_EXPENSE CEM
		ON TOPR.Misc_Cost_Expense_Id=CEM.Cost_Expense_Id
		LEFT OUTER JOIN
	ENTRY_DISTRIBUTION_CODE EDCP
		ON TOPR.Parts_Entry_Distribution_Code_Id=EDCP.Id
		LEFT OUTER JOIN
	ENTRY_DISTRIBUTION_CODE EDCL
		ON TOPR.Labour_Entry_Distribution_Code_Id=EDCL.Id
		LEFT OUTER JOIN
	ENTRY_DISTRIBUTION_CODE EDCM
		ON TOPR.Misc_Entry_Distribution_Code_Id=EDCM.Id	
		LEFT OUTER JOIN
	(SELECT TOLA.Task_Operation_Id,SUM(Planned_Labour_Hrs) AS LabourDuration
	FROM 
	TASK_OPERATION_LABOUR TOLA
		INNER JOIN 
	@z_TASK_OPERATION TOPE
		ON TOLA.Task_Operation_Id=TOPE.Task_Operation_Id
	GROUP BY TOLA.Task_Operation_Id) A
		ON TOPR.Task_Operation_Id=A.Task_Operation_Id


	--Task Operation Part
	SELECT     
	P.Part AS Part_Number,
	NULLIF(ISNULL(P.PartDescription,@DefDescription),'') AS Part_Description,
	SOS.Sos_Code+' - '+SOS.Sos_description AS Source_Of_Supply,
	'' AS StockCode,	--AL: 10/03/09
	TOPA.Strategy_Qty, TOPA.Pct_Strategy_Probability, TOPA.Strategy_Unit_Price,
	CAST(TOPA.Include_In_Total AS float)*TOPA.Strategy_Qty*TOPA.Pct_Strategy_Probability*
	TOPA.Strategy_Unit_Price/100.00 AS StrategyTotal,
	CAST('' AS varchar(50)) AS POCounter,	--AL: 10/03/09
	CAST('' AS varchar(20)) AS Purchase_Order_Number,
	NULLIF(S.Supplier_Name,'') AS Supplier,
	CAST(CASE WHEN TOPA.Pct_Strategy_Probability<100.00 THEN 0.00 
	ELSE TOPA.Strategy_Qty END AS float)*
	CAST(TOPA.Include_In_Total AS float) AS Planned_Qty,
	TOPA.Strategy_Unit_Price AS Planned_Unit_Price,
	CASE WHEN TOPA.Pct_Strategy_Probability<100.00 THEN 0 ELSE TOPA.Strategy_Qty END *
	CAST(TOPA.Include_In_Total AS float)*
	TOPA.Strategy_Unit_Price AS PlannedTotal,
	CAST('' AS varchar(25)) AS PlanStatus,
	--AL: 03/04/09
	CAST(1 AS int) AS PartAvailabilityStatusId,PAS.PartAvailabilityStatus,
	CAST(NULL AS datetime) AS ExpectedAvailabilityDate,
	CAST(0 AS bit) AS Reserved,
	
	CAST('' AS varchar(500)) AS Notes, CAST(0 AS float) AS Actual_Qty, 
	CAST(0 AS float) AS Actual_Unit_Price,
	CAST(0 AS float) AS ActualTotal,
	/* VV CR8294
	CAST('' AS varchar(100)) AS OPCostBearer,		--AL: 10/03/09
	CAST('' AS varchar(100)) AS OPCostCentre,		--AL: 10/03/09
	CAST('' AS varchar(100)) AS OPExpenseElement,	--AL: 10/03/09
	CAST('' AS varchar(100)) AS OPWorkGroup,		--AL: 10/03/09
	*/
	CB.CostBearer AS OPCostBearer,	
	CC.Cost_Centre_Code + ' - ' + CC.Cost_Centre_Desc AS OPCostCentre,		
	EE.Cost_Expense_Code + ' - ' + EE.Cost_Expense_Desc AS OPExpenseElement,		
	WG.Description AS OPWorkGroup,

	TOPA.Task_Operation_Part_Id, TOPA.Task_Operation_Id,
	TOPA.Supplier_Id, TOPA.Include_In_Total,
	CONVERT(varchar(25), GETDATE(), 21) AS Last_Mod_Date,


	@IsEditable AS IsEditable,
	CAST(NULL AS datetime) AS Delivery_Date,
	TOPR.Proj_Task_Amt_Id,TOPR.Std_Job_Op_Id,
	TOPA.SourceOfSupplyId,
	
	/* VV CR8294
	--AL: 10/03/09
	CAST(NULL AS INT) AS OPCostBearerID,CAST(NULL AS INT) AS OPCostCentreID,
	CAST(NULL AS INT) AS OPExpenseElementID,CAST(NULL AS INT) AS OPWorkGroupID,
	*/

	TOPA.CostBearerID AS OPCostBearerID,TOPA.CostCentreID AS OPCostCentreID,
	TOPA.ExpenseElementID AS OPExpenseElementID,TOPA.WorkGroupID AS OPWorkGroupID,

	'' AS PartsOrderDetails,

	--AL: 16/03/09
	CAST(0 AS bit) AS InvNotFound,SOS.Sos_description AS SOSDescription,

	CAST(0 as int) AS PlanStatusId

	FROM   
	@z_TASK_OPERATION TOPR
		INNER JOIN      
	@z_TASK_OPERATION_PART TOPA	
		ON TOPR.Task_Operation_Id=TOPA.Task_Operation_Id
		LEFT OUTER JOIN
	tblParts P
		ON TOPA.Part_Id=P.PartId
		LEFT OUTER JOIN
	SUPPLIER S
		ON TOPA.Supplier_Id=S.Supplier_Id
		LEFT OUTER JOIN
	SOURCE_OF_SUPPLY SOS
		ON TOPA.SourceOfSupplyId=SOS.Source_Of_Supply_Id
	--AL: 03/04/09
		LEFT OUTER JOIN
	PART_AVAILABILITY_STATUS PAS
		ON TOPA.PartAvailabilityStatusId=PAS.PartAvailabilityStatusId
		/*VV CR8294*/
		LEFT OUTER JOIN
	tblCostBearers CB 
		ON TOPA.CostBearerID=CB.CostBearerID
		LEFT OUTER JOIN
	COST_CENTRE CC
		ON TOPA.CostCentreID=CC.Cost_Centre_ID
		LEFT OUTER JOIN
	COST_EXPENSE EE
		ON TOPA.ExpenseElementID=EE.Cost_Expense_ID
		LEFT OUTER JOIN
	WORK_GROUP WG
		ON TOPA.WorkGroupID=WG.Work_Group_ID

	--Task operation Labour

	SELECT  
	WG.Description AS Work_Group,
	LA.ActivityCode+' - '+LA.LabourActivity AS LabourActivityDesc,
	TOL.Labour_Activity,TOL.Strategy_Labour_Hrs,TOL.Strategy_Labour_Rate,
	TOL.Strategy_Labour_Hrs*TOL.Strategy_Labour_Rate*
	CAST(TOL.Include_In_Total AS float) AS StrategyTotal,
	CAST(1 AS float) AS Planned_Qty,
	CAST('' AS varchar(100)) AS Employee,
	TOL.Strategy_Labour_Hrs AS Planned_Labour_Hrs,
	CAST(0 AS float) AS Labour_Offset, 
	CAST(NULL AS datetime) AS StartTime,
	CAST(NULL AS datetime) AS EndTime,
	CAST('' AS varchar(500)) AS Instructions,
	TOL.Strategy_Labour_Rate AS Planned_Labour_Rate,
	TOL.Strategy_Labour_Hrs*TOL.Strategy_Labour_Rate*
	CAST(TOL.Include_In_Total AS float) AS PlannedTotal,
	CAST(0 AS float) AS Actual_Labour_Hrs,CAST(0 AS float) AS Actual_Labour_Rate,
	CAST(0 AS float) AS ActualTotal,
	/* VV CR8294
	CAST('' AS varchar(100)) AS OPCostBearer,		--AL: 10/03/09
	CAST('' AS varchar(100)) AS OPCostCentre,		--AL: 10/03/09
	CAST('' AS varchar(100)) AS OPExpenseElement,	--AL: 10/03/09
	--CAST('' AS varchar(100)) AS OPWorkGroup,		--AL: 10/03/09
	*/
	CB.CostBearer AS OPCostBearer,	
	CC.Cost_Centre_Code + ' - ' + CC.Cost_Centre_Desc AS OPCostCentre,		
	EE.Cost_Expense_Code + ' - ' + EE.Cost_Expense_Desc AS OPExpenseElement,
	TOL.Task_Operation_Labour_Id, TOL.Task_Operation_Id, 
	TOL.Work_Group_Id, 
	TOL.Labour_Activity_Id, 
	TOL.Include_In_Total,    
	CAST(0 AS int) AS Employee_Id,   
	CONVERT(varchar(25), GETDATE(), 21) AS Last_Mod_Date,
	@IsEditable AS IsEditable,TOPR.Proj_Task_Amt_Id,TOPR.Std_Job_Op_Id,
	CAST(0 AS bit) AS S_Conf,
	/* VV CR8294
	--AL: 10/03/09
	CAST(NULL AS INT) AS OPCostBearerID,CAST(NULL AS INT) AS OPCostCentreID,
	CAST(NULL AS INT) AS OPExpenseElementID--,CAST(NULL AS INT) AS OPWorkGroupID	
	*/
	TOL.CostBearerID AS OPCostBearerID,TOL.CostCentreID AS OPCostCentreID,
	TOL.ExpenseElementID AS OPExpenseElementID
	FROM 
	@z_TASK_OPERATION TOPR
		INNER JOIN  
	@z_TASK_OPERATION_LABOUR TOL
		ON TOPR.Task_Operation_Id=TOL.Task_Operation_Id
		LEFT OUTER JOIN
	WORK_GROUP WG
		ON TOL.Work_Group_Id=WG.Work_Group_Id
		LEFT OUTER JOIN
	tblLabourActivities LA
		ON TOL.Labour_Activity_Id=LA.LabourActivityId
		/*VV CR8294*/
		LEFT OUTER JOIN
	tblCostBearers CB 
		ON TOL.CostBearerID=CB.CostBearerID
		LEFT OUTER JOIN
	COST_CENTRE CC
		ON TOL.CostCentreID=CC.Cost_Centre_ID
		LEFT OUTER JOIN
	COST_EXPENSE EE
		ON TOL.ExpenseElementID=EE.Cost_Expense_ID

	-- Task Operation Misc
	SELECT  
	TOPM.Task_Operation_Misc_Desc,MC.Misc_Category,
	TOPM.Strategy_Sell*CAST(TOPM.Include_In_Total AS float) AS StrategyTotal,
	CAST('' AS varchar(50)) AS POCounter,	--AL: 10/03/09
	CAST('' AS varchar(20)) AS Purchase_Order_Number,S.Supplier_Name AS Supplier,
	TOPM.Strategy_Sell*CAST(TOPM.Include_In_Total AS float) AS PlannedTotal,CAST('' AS varchar(1000)) AS Notes,
	CAST(0 AS float) AS ActualTotal,

	/* VV CR8294
	CAST('' AS varchar(100)) AS OPCostBearer,		--AL: 10/03/09
	CAST('' AS varchar(100)) AS OPCostCentre,		--AL: 10/03/09
	CAST('' AS varchar(100)) AS OPExpenseElement,	--AL: 10/03/09
	CAST('' AS varchar(100)) AS OPWorkGroup,		--AL: 10/03/09
	*/
	CB.CostBearer AS OPCostBearer,	
	CC.Cost_Centre_Code + ' - ' + CC.Cost_Centre_Desc AS OPCostCentre,		
	EE.Cost_Expense_Code + ' - ' + EE.Cost_Expense_Desc AS OPExpenseElement,		
	WG.Description AS OPWorkGroup,
	TOPM.Task_Operation_Misc_Id, TOPM.Task_Operation_Id,
	TOPM.Misc_Category_Id, TOPM.Include_In_Total, TOPM.Supplier_Id, 
	CONVERT(varchar(25), GETDATE(), 21) AS Last_Mod_Date,
	@IsEditable AS IsEditable,TOPR.Proj_Task_Amt_Id,TOPR.Std_Job_Op_Id,

	/* VV CR8294
	--AL: 10/03/09
	CAST(NULL AS INT) AS OPCostBearerID,CAST(NULL AS INT) AS OPCostCentreID,
	CAST(NULL AS INT) AS OPExpenseElementID,CAST(NULL AS INT) AS OPWorkGroupID	
	*/
	TOPM.CostBearerID AS OPCostBearerID,TOPM.CostCentreID AS OPCostCentreID,
	TOPM.ExpenseElementID AS OPExpenseElementID,TOPM.WorkGroupID AS OPWorkGroupID
	FROM   
	@z_TASK_OPERATION TOPR
		INNER JOIN        
	@z_TASK_OPERATION_MISC TOPM
		ON TOPR.Task_Operation_Id=TOPM.Task_Operation_Id
		LEFT OUTER JOIN
	MISC_CATEGORY MC
		ON TOPM.Misc_Category_Id=MC.Misc_Category_Id
		LEFT OUTER JOIN
	SUPPLIER S
		ON TOPM.Supplier_Id=S.Supplier_Id
		/*VV CR8294*/
		LEFT OUTER JOIN
	tblCostBearers CB 
		ON TOPM.CostBearerID=CB.CostBearerID
		LEFT OUTER JOIN
	COST_CENTRE CC
		ON TOPM.CostCentreID=CC.Cost_Centre_ID
		LEFT OUTER JOIN
	COST_EXPENSE EE
		ON TOPM.ExpenseElementID=EE.Cost_Expense_ID
		LEFT OUTER JOIN
	WORK_GROUP WG
		ON TOPM.WorkGroupID=WG.Work_Group_ID
		
END 
	
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[TASK_CHECK_STRATEGY_DETAILS_P]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[TASK_CHECK_STRATEGY_DETAILS_P]
GO

create      PROCEDURE [dbo].[TASK_CHECK_STRATEGY_DETAILS_P]
/******************************************************************************
	File: 
	Name: TASK_CHECK_STRATEGY_DETAILS_P


	Called By: n/a
	Desc:
	If select codes (Task Type, Component Code, Modifier Code, Application Code) 
	such that these now match a strategy Task in AMT, then:
	-	If this strategy task already exists in Equipment Status then 
		disallow the save of the task and give the user a message.
	-	If the strategy task does not exist in EQS AND 
		the Occurrence Type has not been set or 
		the Occurrence type = the Occurrence type from tblProjTasks 
		THEN populate the Occurrence Type and other Strategy Task fields 
		with the data from table tblProjTasks 
		(ie call an update for the relevant Projected Task)
	-	If the strategy task does not exist in EQS AND the Occurrence Type 
		IS NOT the same as the occurrence type from tblProjTasks THEN 
		populate the Occurrence Type and other Strategy Task fields with 
		the data from table tblProjTasks, 
		
		- 12-Apr-2007 VV This was taken out. Discussed with GE

		SAVE the record, and then with the record still open give the user 
		a message to reselect the Occurrence type.  
		This will force the user to select a valid Occurrence type. 

             
	Auth: Veronika Vasylyeva
	Date: 12 NOV 2002
*******************************************************************************
		Change History
*******************************************************************************
Date:		Author:		Description:
--------	--------	----------------------------------------
26 Aug 11	V Vasylyeva	#2351 : set occurrence type to the default
18 Mar 11	V Vasylyeva	#1427: Do not include IP workorders into check if created for the consistency 
						with strategy task creating maintaining
09 Dec 09	AL			CR8556: FMG Change - can have multiple strategy tasks at the same time
13 May 09	V Vasylyeva	CR8036: If NextOccDate is null - take the earliest occurrence date for the strategy task 
								(tblProjTaskOccs). 	if there are no future occurrencies - set the end date of equipment
28 Oct 08	V Vasylyeva	CR7599: Added check for unscheduled tasks,
						Set also all strategy details to NULL if strategy task does not exist
12 Jun 08	AL			Changed Repair Description size
21 Feb 08	AL			Changed PlanDateLocked to ReviewStatusID
12 Jun 07	V Vasylyeva	Added @CheckOccType,@GetLabourHrs
11 Apr 07	V Vasylyeva	Added @FinalChange,@RiskLifeLeft,@StrategyFrequency,@LastPerformed ,
						@LastScheduled,@LastPerformedDate,@LastScheduledDate
						Took out the changing of occurrence type to the planned option
						occurrence type and warning.
13 Apr 04	V Vasylyeva	Removed Task planned
16 Sep 03	H Singh		new field added in update and insert statements - Strategy_Repair_Description
30-Jan-2003	V Vasylyeva	Added an input parameter @CheckIfCreated to 
				indicate do we need to check if the strategy task
				has already been created in EQS. This parameter
				is set to 0 - do not check if the completed task
				is checked. This parameter shall be set to 1 - check
				if the task has status YTS, InProgress or Outstanding
*******************************************************************************/
	
@Task_ID int=Null,
@Eqp_Plan_ID int,
@CheckIfCreated bit,
@Task_Type_ID int OUTPUT,
@Component_Code_ID int OUTPUT,
@Application_Code_ID int OUTPUT,
@Modifier_ID int OUTPUT,
@Occurrence_Type_Id int OUTPUT,
@Expected_Duration float=NULL OUTPUT,
@Expected_Labor_Hours float=NULL OUTPUT,
@Strategy_Usage float=NULL OUTPUT,
@Strategy_Repair_Description varchar(MAX)=null OUTPUT,
@Strategy_QUOM_ID int=NULL OUTPUT,
@Proj_Task_Opt_ID int=NULL OUTPUT,
@Strategy_Date datetime=NULL OUTPUT,
@Strategy_Locked bit=0 OUTPUT,
@Message varchar(2000)=NULL OUTPUT,
@FinalChange float =0 OUTPUT,
@RiskLifeLeft float =0 OUTPUT,
@StrategyFrequency float =0 OUTPUT,
@LastPerformed float=0 OUTPUT,
@LastScheduled float =0 OUTPUT,
@LastPerformedDate datetime=NULL OUTPUT,
@LastScheduledDate datetime=NULL OUTPUT,
@ProjTaskId int=0 OUTPUT,
@CheckOccType bit=1,
@GetLabourHrs bit=1

AS



DECLARE @Task_Status_Outstanding int
DECLARE @Task_Status_YTS int
DECLARE @Task_Status_InProgress int
DECLARE @ProjTypeCurrent int
DECLARE @LastOcc float
DECLARE @UseSchedulingSystemLastOcc bit
DECLARE @First float
DECLARE @EndUsage float
DECLARE @EndDate datetime
DECLARE @Counter int


SET @Task_Status_Outstanding =1
SET @Task_Status_YTS =6
SET @Task_Status_InProgress =2

SET @CheckIfCreated=ISNULL(@CheckIfCreated,0)
SET @ProjTypeCurrent=1

--If the validation is performing for a new task set task_id=0
SET @Task_ID=ISNULL(@Task_ID,0)

--AMT variables
SELECT @UseSchedulingSystemLastOcc=UseSchedulingSystemLastOcc FROM AMT_VARIABLE

SET @ProjTaskId=ISNULL(@ProjTaskId,0)

--Find a strategy task with the selected codes if exists
IF @ProjTaskId>0
BEGIN
	SELECT 
	@Component_Code_ID=PT.ComponentCodeId,
	@Modifier_ID=PT.ModifierId,
	@Task_Type_ID=PT.TaskTypeId,
	@Application_Code_ID=PT.ApplicationCodeId,
	@Strategy_Repair_Description=ISNULL(NOS.Repair_Description, ''),
	@Strategy_Usage =PT.NextOcc,
	@Strategy_QUOM_ID=PT.UsageQUOMId,
	@Strategy_Date =PT.NextOccDate,
	@Strategy_Locked=CASE WHEN PT.ReviewStatusID=3 THEN CONVERT(BIT,1) ELSE CONVERT(BIT,0) END,
	@LastPerformed =CASE WHEN @UseSchedulingSystemLastOcc =1 AND SchedulingTaskId>0 THEN Ext_Last_Occ ELSE AMT_WO_Last_Occ END,
	@LastScheduled =CASE WHEN @UseSchedulingSystemLastOcc =1 AND SchedulingTaskId>0 THEN Ext_Last_Sched_Occ ELSE AMT_Last_Sched_Occ END,
	@LastPerformedDate=CASE WHEN @UseSchedulingSystemLastOcc =1 AND SchedulingTaskId>0 THEN Ext_Last_Occ_Date ELSE AMT_WO_Last_Occ_Date END,
	@LastScheduledDate=CASE WHEN @UseSchedulingSystemLastOcc =1 AND SchedulingTaskId>0 THEN Ext_Last_Sched_Date ELSE AMT_Last_Sched_Date END, 
	@LastOcc=PT.LastOcc,
	@EndUsage=CASE WHEN ISNULL(EPR.EndQUOMId,0)=ISNULL(PT.UsageQUOMId,0) THEN EPR.EndUsage 
				   ELSE dbo.GET_EQP_PROJ_END_USAGE_F(EPR.EqpProjId, PT.UsageQUOMID,EPR.EndDate) END,
	@EndDate=EPR.EndDate
	FROM         
	tblProjTasks PT
		INNER JOIN
	tblEqpProjs EPR
		ON PT.EqpProjId = EPR.EqpProjId AND PT.EqpPlanId = EPR.EqpPlanId 
		LEFT OUTER JOIN
	NEXT_OCC_STRATEGY NOS 
		ON PT.ProjTaskId = NOS.Proj_Task_Id
	WHERE 
	(PT.ProjTaskId=@ProjTaskId) AND
	(EPR.Projection_Type_Id =@ProjTypeCurrent) AND
	(PT.EqpPlanId=@Eqp_Plan_ID)
	/*VV 28-Oct-08*/AND (PT.Unscheduled=0)
	
	SET @Counter=@@ROWCOUNT

	IF @Counter=0 SET @ProjTaskId=0
	

END--IF @ProjTaskId>0
ELSE
BEGIN
	SELECT 
	@ProjTaskId=PT.ProjTaskId,
	@Strategy_Repair_Description=ISNULL(NOS.Repair_Description, ''),
	@Strategy_Usage =PT.NextOcc,
	@Strategy_QUOM_ID=PT.UsageQUOMId,
	@Strategy_Date =PT.NextOccDate,
	@Strategy_Locked=CASE WHEN PT.ReviewStatusID=3 THEN CONVERT(BIT,1) ELSE CONVERT(BIT,0) END,
	@LastPerformed =CASE WHEN @UseSchedulingSystemLastOcc =1 AND SchedulingTaskId>0 THEN Ext_Last_Occ ELSE AMT_WO_Last_Occ END,
	@LastScheduled =CASE WHEN @UseSchedulingSystemLastOcc =1 AND SchedulingTaskId>0 THEN Ext_Last_Sched_Occ ELSE AMT_Last_Sched_Occ END,
	@LastPerformedDate=CASE WHEN @UseSchedulingSystemLastOcc =1 AND SchedulingTaskId>0 THEN Ext_Last_Occ_Date ELSE AMT_WO_Last_Occ_Date END,
	@LastScheduledDate=CASE WHEN @UseSchedulingSystemLastOcc =1 AND SchedulingTaskId>0 THEN Ext_Last_Sched_Date ELSE AMT_Last_Sched_Date END, 
	@LastOcc=PT.LastOcc,
	@EndUsage=CASE WHEN ISNULL(EPR.EndQUOMId,0)=ISNULL(PT.UsageQUOMId,0) THEN EPR.EndUsage 
				   ELSE dbo.GET_EQP_PROJ_END_USAGE_F(EPR.EqpProjId, PT.UsageQUOMID,EPR.EndDate) END,
	@EndDate=EPR.EndDate
	FROM         
	tblProjTasks PT
		INNER JOIN
	tblEqpProjs EPR
		ON PT.EqpProjId = EPR.EqpProjId AND PT.EqpPlanId = EPR.EqpPlanId 
		LEFT OUTER JOIN
	NEXT_OCC_STRATEGY NOS 
		ON PT.ProjTaskId = NOS.Proj_Task_Id
	WHERE 
	(EPR.Projection_Type_Id =@ProjTypeCurrent) AND
	(PT.EqpPlanId=@Eqp_Plan_ID) AND
	(PT.ComponentCodeId=@Component_Code_ID) AND
	(PT.ModifierId=@Modifier_ID) AND
	(PT.TaskTypeId=@Task_Type_ID) AND
	(PT.ApplicationCodeId=@Application_Code_ID) AND
	/*VV 28-Oct-08*/(PT.Unscheduled=0)
END

--If the strategy task does not exist return
IF ISNULL(@ProjTaskId,0)=0 
BEGIN
	/*VV 28-Oct-2008 Set also all strategy details to NULL before return*/
	SET @Proj_Task_Opt_ID=NULL
	SET @Strategy_Usage =0
	SET @Strategy_Repair_Description =''
	SET @Strategy_QUOM_ID =NULL
	SET @Strategy_Date =NULL
	SET @Strategy_Locked =0
	SET @FinalChange  =0
	SET @RiskLifeLeft  =0
	SET @StrategyFrequency  =0
	SET @LastPerformed =NULL
	SET @LastScheduled  =NULL
	SET @LastPerformedDate =NULL
	SET @LastScheduledDate =NULL

	RETURN

END

--Check if the strategy task exists in EQS

--AL: 09/12/09
DECLARE @MaxPlanningWOtoCreate int
SELECT @MaxPlanningWOtoCreate=ISNULL(Varchar_Value,1) FROM AMT_TYPED_VARIABLE WHERE Value_Name ='MaxPlanningWOtoCreate'


IF @CheckIfCreated=1 AND ISNULL(@MaxPlanningWOtoCreate,1) = 1
BEGIN
	IF EXISTS(SELECT TASK.Task_Id
		FROM    
		TASK INNER JOIN
		tblProjTaskOpts ON TASK.Strategy_Proj_Task_Opt_ID = tblProjTaskOpts.ProjTaskOptId 
		INNER JOIN
		tblProjTasks ON tblProjTaskOpts.ProjTaskId = tblProjTasks.ProjTaskId
		WHERE (TASK.Task_ID<>@Task_ID) AND
		(TASK.Task_Status_ID = @Task_Status_Outstanding OR
		TASK.Task_Status_ID = @Task_Status_YTS /* VV #1427 OR
		TASK.Task_Status_ID = @Task_Status_InProgress*/) AND 	
		(tblProjTasks.ProjTaskId=@ProjTaskId))
	
		BEGIN		
			-- - If this strategy task already exists in Equipment Status then 
			-- disallow the save of the task and give the user a message.
			SET @Task_Type_ID =NULL
			SET @Component_Code_ID =NULL
			SET @Application_Code_ID =NULL
			SET @Modifier_ID =NULL			
			
			SET @Message='Cannot save. This strategy task has already been created.'
			RETURN
		END
END

--Check Occurence type
IF @CheckOccType=1
BEGIN
	--select the option for Occurrence_Type_Id
	--If the occurence type the user selected does not match the projected
	-- task options use the planned option 

	SELECT @Proj_Task_Opt_ID=ProjTaskOptId FROM tblProjTaskOpts 
	WHERE (ProjTaskId=@ProjTaskId) /*VV #2351 AND (OccurrenceTypeId=@Occurrence_Type_Id)*/

END

IF @Proj_Task_Opt_ID IS NULL
BEGIN
	-- 12-Apr-2007 VV Discussed with GE. The warning message to reselect occurence type 
	--was taken out. Occurrence type is not taken from the default option in this case.

	--SET @Message='The strategy task was saved with the planned option details. Please reselect the Occurence Type.'
	SELECT @Proj_Task_Opt_ID = ProjTaskOptId FROM tblProjTaskOpts 
	WHERE (ProjTaskId=@ProjTaskId) /*VV #2351 AND (PlannedOption>0 OR PlannedOption<0)*/
END

--Final change usage
SELECT @FinalChange=MAX(OccUsage) FROM tblProjTaskOccs WHERE ProjTaskId=@ProjTaskId

SELECT @StrategyFrequency =Frequency,@First=[First] FROM tblProjTaskOpts WHERE ProjTaskOptId=@Proj_Task_Opt_ID

SET @FinalChange=ISNULL(ISNULL(@FinalChange,@LastOcc),@First)

--SET @RiskLifeLeft =100.00*(@StrategyFrequency-(@EndUsage - @FinalChange ))/NULLIF(@StrategyFrequency,0)
SET @RiskLifeLeft =dbo.RISK_LIFE_LEFT_F(@StrategyFrequency,@EndUsage,@FinalChange)

IF @GetLabourHrs=1
BEGIN	
	--Select the strategy details
	SELECT  @Expected_Labor_Hours=SUM(LaborHours), @Expected_Duration=SUM(Duration) 
	FROM tblProjTaskAmts WHERE ProjTaskOptId=@Proj_Task_Opt_ID
END

--VV 13-May-2009 CR8036
IF @Strategy_Date IS NULL
BEGIN
	/*If NextOccDate is null - take the earliest occurrence date for the strategy task (tblProjTaskOccs) 
	if there are no future occurrencies - set the end date.*/
	SELECT @Strategy_Date=MIN(OccDate),@Strategy_Usage=MIN(OccUsage )
	FROM tblProjTaskOccs WHERE ProjTaskId=@ProjTaskId
END

SET @Strategy_Date=ISNULL(@Strategy_Date,@EndDate)
SET @Strategy_Usage=ISNULL(@Strategy_Usage,@EndUsage)

GO


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STRATEGY_TASK_CREATING_MAINTAINING_P]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STRATEGY_TASK_CREATING_MAINTAINING_P]
GO

create    Procedure [dbo].[STRATEGY_TASK_CREATING_MAINTAINING_P] 
/******************************************************************************
	File:
	Name: STRATEGY_TASK_CREATING_MAINTAINING_P

	Called By: usp_Plan_Run_Calc

	Desc: The ADD and UPDATE is a part of the planning routine.  
	Thus every time the Strategy-planning routine is run it should 
	do a check to see if the specific task is in the EQS-Task table.  
	IF not, an ADD should be done, otherwise an UPDATE should be performed.

	Note, once the Task has a status of anything other than outstanding or YTS 
	then no update is to take place. 

	
	This was changed 24 Nov 2003 The task is updated even if the changes were made 
	to Planned_Proj_Task_Opt_ID
	Note, only update if Planned_Proj_Task_Opt_ID=Strategy_Proj_Task_Opt_ID  
	AND the task is YTS or Outstanding. (Discussed with Robbie)

	******************************************************************

	
	SP takes 3 input parameters @ProjTaskId,@EqpProjId,@EqpPlanId

	Depending on which parameter is supplied the update/insert 
	will affect the records for ProjTaskId,EqpProjId or EqpPlanId.

	If @ProjTaskId is not null - the records for ProjTaskId=@ProjTaskId
	will be processed.
	If @EqpProjId is not null and @ProjTaskId is null  - the records for EqpProjId=@EqpProjId
	will be processed.
	If @EqpPlanId is not null and @EqpProjId is null and @ProjTaskId is null  - 
	the records for EqpPlanId=@EqpPlanId will be processed.
	If all parameters are NULL the all records will be processed.

	Auth: Veronika Vasylyeva
	Date: 23-OCT-2002
*******************************************************************************
		Change History
*******************************************************************************
	Date:		Author:		Description:
	--------	--------	----------------------------------------
	25 Aug 11	V Vasylyeva	#2351: Create backlogs with default Occurrence type
	 9 Jun 11	V Vasylyeva	#1907: changed length of repair description
	 2 May 11	V Vasylyeva	#1641: changed  ANSI_WARNINGS settings
	14 Feb 11	V Vasylyeva	AmtMobile
	15 Dec 10	V Vasylyeva	#1028 EXEC STD_JOB_OPERATION_ADD_MISSING_P
	13 Aug 10	V Vasylyeva	#187: For Manual Authorisation the Authorised should be set = FALSE
	20 Jul 10	V Vasylyeva	CR9048: Changed queries. Took our recursion
	08 Apr 10	AL			CR8869: TASK_PARTS_READY_STATUS_UPDATE_P only for qty >0
	06 Apr 10	AL			CR8869: implemented logic from TASK_PARTS_READY_STATUS_UPDATE_P
	29 Mar 10	AL			CR8865: Populate Health and Safety
	23 Feb 10	AL			changed condition to create missing occurrences when having many in the past
	11 Jan 10	V Vasylyeva	CR8694: Insert 0 if parts price is missing
	09 Dec 09	AL			CR8556: FMG Change - can have multiple strategy tasks at the same time
	10-Sep-2009	AL			CR8387: always have parts required set	
	17 Jul 09	AL			CR8319: Do not modify authorisation of existing backlogs
	30 Jun 09	V Vasylyeva	CR8294 When a new Workorder is CREATED from a Standard Job, the Cost Bearer, 
							Expense Element, Cost Centre and Workgroup fields are not populated. 
							This is also the case when a Workorder is CREATED automatically from a 
							Strategy Task that is linked to Standard Job(s).
	12-May-09	V Vasylyeva			CR8096: tblLabourRates -->LABOUR_RATE_DEF_V
	 3-May-09	VV			CR8035: Library links
	08 Apr 09	AL			CR7933: fixed finperiod
	07 Apr 09	AL			CR7933: populate TO P/L/M finperiod and currencyID + exchangeRate
	06/04/09	AL			Fixed collation
	04 Apr 09	A Lassaun.	CR7933: ManualEntryActuals* as int
	03 Apr 09	A Lassaun.	CR7933: populate new fields
	26 Mar 09	A Lassaun.	CR7932: ACW changes: have checks before call (none required here) + call it as bulk in replan
	19 Mar 09	A Lassaun.	CR7933: ACW changes
	 2 Mar 09	V Vasylyeva	CR7910: Library documents fix
	10 Feb 09	A Lassaun.	CR7845: added @CreatedTaskID to check if op/lab are created
	03 Feb 09	A Lassaun.	CR7844: changes in task authorisation
	11 Dec 08	V Vasylyeva	CR7787 Backlogs are not created if strategy tasks have empty job codes
	27 Nov 08	V Vasylyeva	CR7748 Enable/Disable Strategy EQS tasks creations depending on AMT settings
	24 Oct 08	VV			CR7244 Changed linking of the library documents
	12 Jun 08	AL			Changed Repair Description size
	 1 Nov 07	V Vasylyeva	Added default work groups
	15 Oct 07	V Vasylyeva	Added Task_Header_Id, Changed Cost_Allocation_Id to
							Cost_Allocation_Details_Id
	08 Oct 2007	KN			Added  "ChangeoutCategory" to TASK
	22 Aug 07	V Vasylyeva	Added ISNULL to Risk_Life_Left
	13 Aug 07	V Vasylyeva	Added Warranty_Days,Warranty_Usage
	 8 Aug 07	V Vasylyeva	Added Task_Authorised to update
	25 Jun 07	V Vasylyeva	Changes for new planning. This sp is run for 
							proj task or for all real equipment
	18 Jun 07	A Lassaun.	only calling TASK_GET_DEFAULTS_P with required and named parameters
	24 Jan 07	V Vasylyeva	added performed_by_Date 
	27 Oct 05	V Vasylyeva	Repair code changes: 
					If a proj task opt has 1 job then repair code=proj job. job code
					If a proj task opt has more than 1 job then repair code= default repair code
	13 Oct 05	V Vasylyeva	Added Cost bearer
	14 Apr 05	V Vasylyeva	Added back the call to STRATEGY_TASK_MAINT_P
	07 Dec 04	V Vasylyeva	Removed call to STRATEGY_TASK_MAINT_P
							Added Task_Header_ID
	06 Jul 04	V Vasylyeva	Removed update for Expected_Duration, Expected_Labor_Hours
	24 Jun 04	V Vasylyeva	Removed update for Last_Mod_Date
	13 Apr 04	V Vasylyeva	Removed Task_Planned
	06 Feb 04	V Vasylyeva	new task defaults
	11 Dec 03	V Vasylyeva	Added STRATEGY_TASK_MAINT_P
	24 Nov 03	V Vasylyeva	Changing of the requirements. 
	16 Sep 03	H Singh		new field added in update and insert statements - Strategy_Repair_Description
	12-May-2003  ML  Change changed Stored procedure call to get task defaults
	24-Jan-2003	V Vasylyeva	Changes to the default Repair_Code_ID
    18-Nov-2002	V Vasylyeva	Add Set Nocount
*******************************************************************************/
	/* Param List */


    @ProjTaskId int=NULL,
	@CreatedTaskID varchar(MAX)=''	OUTPUT,
	@CopyEWTemplateFiles bit=0 OUTPUT
    
AS

SET NOCOUNT ON
-- VV 1641 SET ANSI_WARNINGS OFF  

SET ANSI_WARNINGS ON

DECLARE @TaskStatusO int
DECLARE @TaskStatusYTS int
DECLARE @TaskModeGT int
DECLARE @TaskModeA int

--Variables for TASK defaults
DECLARE @Symptom_ID int
DECLARE @Cause_ID int
DECLARE @Repair_Code_ID int
DECLARE @Priority_ID int 
DECLARE @Source_ID int

DECLARE @PartsStatusRequired bit
DECLARE @PartsStatusOrdered bit
DECLARE @PartsStatusReady bit
DECLARE @Def_Misc_Category_Id int
DECLARE @SpecificOpCodes bit

DECLARE @Counter int
DECLARE @UseSchedulingSystemLastOcc bit
DECLARE @DefDescription varchar(50)

DECLARE @ChangeoutCategoryId INT
SELECT @ChangeoutCategoryId = ChangeoutCategoryId FROM CHANGEOUT_CATEGORY WHERE DefaultRecord = 1

/*VV #2351 */
DECLARE @OccurrenceTypeId int
SELECT @OccurrenceTypeId=OccurrenceTypeId FROM tblOccurrenceTypes WHERE Default_Record=1

--AL: 29/03/10
DECLARE @Health_Safety_ID INT
SELECT @Health_Safety_ID = Health_Safety_ID FROM HEALTH_SAFETY WHERE DefaultRecord <> 0


SET @TaskStatusO=1
SET @TaskStatusYTS=6
SET @TaskModeGT=1
SET @TaskModeA=2

SET @ProjTaskId=ISNULL(@ProjTaskId,0)
SET @SpecificOpCodes=1

SET @DefDescription='Various'

--VV 27-Nov-2008	/	AL: 03/02/09
DECLARE @AutoCreateEQSTask bit
DECLARE @AuthorisationMode INT	


SELECT TOP 1 @AutoCreateEQSTask=AutoCreateEQSTask, @UseSchedulingSystemLastOcc=UseSchedulingSystemLastOcc,
	@AuthorisationMode=AuthorisationMode
FROM AMT_VARIABLE

DECLARE @AuthModeNone int, @AuthModeSimple int, @AuthModeAdvanced int
SET @AuthModeNone=0
SET @AuthModeSimple=1
SET @AuthModeAdvanced=2

IF ISNULL(@AutoCreateEQSTask,0)=0 RETURN

--AL: 03/04/09
DECLARE @ManualEntryActualsParts int,@ManualEntryActualsLabour int, @ManualEntryActualsMisc int, @MaxPlanningWOtoCreate int

SELECT 
	@ManualEntryActualsParts = CASE WHEN Value_Name = 'ManualEntryActualsParts' THEN Varchar_Value  ELSE  @ManualEntryActualsParts END ,
	@ManualEntryActualsLabour = CASE WHEN Value_Name = 'ManualEntryActualsLabour' THEN Varchar_Value  ELSE   @ManualEntryActualsLabour END ,
	@ManualEntryActualsMisc = CASE WHEN Value_Name = 'ManualEntryActualsMisc' THEN Varchar_Value  ELSE   @ManualEntryActualsMisc END, 
	@MaxPlanningWOtoCreate = CASE WHEN Value_Name = 'MaxPlanningWOtoCreate' THEN Varchar_Value  ELSE   @MaxPlanningWOtoCreate END 
FROM 
	AMT_TYPED_VARIABLE
WHERE Value_Name IN (
'ManualEntryActualsParts' ,
'ManualEntryActualsLabour',
'ManualEntryActualsMisc' ,
'MaxPlanningWOtoCreate'
)

--AL: 07/04/09
DECLARE @PrimaryCurrencyId int
SELECT TOP 1 @PrimaryCurrencyId = CurrencyId FROM tblCurrencies WHERE ISNULL(PrimaryCurr, 0) <> 0


--##### 1: DELETE EQS backlogs which are no more the strategy tasks
EXEC STRATEGY_TASK_MAINT_P @ProjTaskId=@ProjTaskId

/*VV	#1028*/
 EXEC STD_JOB_OPERATION_ADD_MISSING_P
 
--##### 2: UPDATE existing EQS backlogs
--Note, once the Task has a status of anything other than outstanding or YTS 
--then no update is to take place.

CREATE TABLE #z_ProjTask(ProjTaskId int,TaskId int,QUOMId int,NextOcc float,
PlanTaskOptId int,NextOccDate datetime,PlanDateLocked bit,
StrategyRepairDescr varchar(1000)/*VV #1907 varchar(100)*/ COLLATE DATABASE_DEFAULT,LastOcc float,[First] float,
Frequency float,Last_Performed float,Last_Scheduled float,
Last_Performed_Date datetime,Last_Scheduled_Date datetime,
EndUsage float, 

--AL: 09/12/09
EndDate datetime,
EqpPlanID int,
ComponentCodeId int,
ModifierId int,
TaskTypeId int,
ApplicationCodeId int,
OccurrenceTypeId int,
TaskDescription varchar(500) COLLATE DATABASE_DEFAULT,
Warranty_Period_Days float,
Warranty_Period_Usage float,
Task_Header_Id int,
Level int,
PlanLeadDate float, 
PlanOccs int,
TDKey varchar(50) COLLATE DATABASE_DEFAULT
PRIMARY KEY(ProjTaskId,TaskId))

IF @ProjTaskId>0
BEGIN
	INSERT INTO #z_ProjTask(ProjTaskId ,TaskId ,QUOMId ,NextOcc ,PlanTaskOptId ,
	NextOccDate ,PlanDateLocked ,StrategyRepairDescr ,LastOcc ,[First] ,Frequency ,
	Last_Performed ,Last_Scheduled ,Last_Performed_Date ,Last_Scheduled_Date ,
	EndUsage,EndDate,EqpPlanID,ComponentCodeId,ModifierId,TaskTypeId,ApplicationCodeId,OccurrenceTypeId,
	TaskDescription,Warranty_Period_Days,Warranty_Period_Usage,Task_Header_Id,
	Level,PlanLeadDate, PlanOccs/*VV CR9048,TDKey */)

	SELECT STU.ProjTaskId ,T.Task_Id ,STU.UsageQUOMId ,STU.NextOcc ,STU.PlanTaskOptId ,
	STU.NextOccDate ,STU.PlanDateLocked ,STU.StrategyRepairDescr ,STU.LastOcc ,
	STU.[First] ,STU.Frequency ,
	CASE WHEN @UseSchedulingSystemLastOcc =1 AND STU.SchedulingTaskId>0 THEN STU.Ext_Last_Occ ELSE STU.AMT_WO_Last_Occ END AS Last_Performed,
	CASE WHEN @UseSchedulingSystemLastOcc =1 AND STU.SchedulingTaskId>0 THEN STU.Ext_Last_Sched_Occ ELSE STU.AMT_Last_Sched_Occ END AS Last_Scheduled,
	CASE WHEN @UseSchedulingSystemLastOcc =1 AND STU.SchedulingTaskId>0 THEN STU.Ext_Last_Occ_Date ELSE STU.AMT_WO_Last_Occ_Date END AS Last_Performed_Date,
	CASE WHEN @UseSchedulingSystemLastOcc =1 AND STU.SchedulingTaskId>0 THEN STU.Ext_Last_Sched_Date ELSE STU.AMT_Last_Sched_Date END AS Last_Scheduled_Date,
	CASE WHEN ISNULL(STU.EndQUOMId,0)=ISNULL(STU.UsageQUOMId,0) THEN STU.EndUsage 
	ELSE dbo.GET_EQP_PROJ_END_USAGE_F(STU.EqpProjId, STU.UsageQUOMID,STU.EndDate) END AS EndUsage,
	--AL: 09/12/09
	STU.EndDate,STU.EqpPlanID,STU.ComponentCodeId,STU.ModifierId,STU.TaskTypeId,STU.ApplicationCodeId,
	@OccurrenceTypeId AS OccurrenceTypeId, /*VV #2351 STU.OccurrenceTypeId,*/
	STU.TaskDescription,STU.Warranty_Period_Days,STU.Warranty_Period_Usage,STU.Task_Header_Id,
	/*VV CR9048 1 AS Level, */
	ROW_NUMBER() OVER(PARTITION BY T.Strategy_Proj_Task_Opt_ID ORDER BY T.Strategy_Date,T.Task_Id ASC) AS Level, 
	STU.PlanLeadDate, 1 AS PlanOccs
	/*VV CR9048,
	CONVERT(VARCHAR,T.Strategy_Date,121)+CONVERT(VARCHAR,T.Task_Id) AS TDKey*/

	FROM
	TASK T 
		INNER JOIN 
	tblProjTaskOpts PTO 
		ON T.Strategy_Proj_Task_Opt_ID = PTO.ProjTaskOptId 
		INNER JOIN
	STRATEGY_TASK_UPDATE_V STU 
		ON PTO.ProjTaskId = STU.ProjTaskId
	WHERE STU.ProjTaskId=@ProjTaskId AND	
	(T.Task_Status_ID=@TaskStatusO OR T.Task_Status_ID=@TaskStatusYTS )
	ORDER BY STU.ProjTaskId ,/*VV CR9048*/T.Strategy_Date,T.Task_Id

END
ELSE
BEGIN
	INSERT INTO #z_ProjTask(ProjTaskId ,TaskId ,QUOMId ,NextOcc ,PlanTaskOptId ,
	NextOccDate ,PlanDateLocked ,StrategyRepairDescr ,LastOcc ,[First] ,Frequency ,
	Last_Performed ,Last_Scheduled ,Last_Performed_Date ,Last_Scheduled_Date ,
	EndUsage,EndDate,EqpPlanID,ComponentCodeId,ModifierId,TaskTypeId,ApplicationCodeId,OccurrenceTypeId,
	TaskDescription,Warranty_Period_Days,Warranty_Period_Usage,Task_Header_Id,
	Level,PlanLeadDate, PlanOccs/*VV CR9048 ,TDKey*/ )

	SELECT STU.ProjTaskId ,T.Task_Id ,STU.UsageQUOMId ,STU.NextOcc ,STU.PlanTaskOptId ,
	STU.NextOccDate ,STU.PlanDateLocked ,STU.StrategyRepairDescr ,STU.LastOcc ,
	STU.[First] ,STU.Frequency ,
	CASE WHEN @UseSchedulingSystemLastOcc =1 AND STU.SchedulingTaskId>0 THEN STU.Ext_Last_Occ ELSE STU.AMT_WO_Last_Occ END AS Last_Performed,
	CASE WHEN @UseSchedulingSystemLastOcc =1 AND STU.SchedulingTaskId>0 THEN STU.Ext_Last_Sched_Occ ELSE STU.AMT_Last_Sched_Occ END AS Last_Scheduled,
	CASE WHEN @UseSchedulingSystemLastOcc =1 AND STU.SchedulingTaskId>0 THEN STU.Ext_Last_Occ_Date ELSE STU.AMT_WO_Last_Occ_Date END AS Last_Performed_Date,
	CASE WHEN @UseSchedulingSystemLastOcc =1 AND STU.SchedulingTaskId>0 THEN STU.Ext_Last_Sched_Date ELSE STU.AMT_Last_Sched_Date END AS Last_Scheduled_Date,
	CASE WHEN ISNULL(STU.EndQUOMId,0)=ISNULL(STU.UsageQUOMId,0) THEN STU.EndUsage 
	ELSE dbo.GET_EQP_PROJ_END_USAGE_F(STU.EqpProjId, STU.UsageQUOMID,STU.EndDate) END AS EndUsage ,
	--AL: 09/12/09
	STU.EndDate,STU.EqpPlanID,STU.ComponentCodeId,STU.ModifierId,STU.TaskTypeId,STU.ApplicationCodeId,
	/* VV #2351 STU.OccurrenceTypeId,*/
	@OccurrenceTypeId AS OccurrenceTypeId,
	STU.TaskDescription,STU.Warranty_Period_Days,STU.Warranty_Period_Usage,STU.Task_Header_Id,
	/*VV CR9048 1 AS Level, */
	ROW_NUMBER() OVER(PARTITION BY T.Strategy_Proj_Task_Opt_ID ORDER BY T.Strategy_Date,T.Task_Id ASC) AS Level, 
	STU.PlanLeadDate, 1 AS PlanOccs
	/*VV CR9048 CONVERT(VARCHAR,T.Strategy_Date,121)+CONVERT(VARCHAR,T.Task_Id) AS TDKey*/

	FROM
	TASK T 
		INNER JOIN 
	tblProjTaskOpts PTO 
		ON T.Strategy_Proj_Task_Opt_ID = PTO.ProjTaskOptId 
		INNER JOIN
	STRATEGY_TASK_UPDATE_V STU 
		ON PTO.ProjTaskId = STU.ProjTaskId
	WHERE 		
	(T.Task_Status_ID=@TaskStatusO OR T.Task_Status_ID=@TaskStatusYTS )
	ORDER BY STU.ProjTaskId ,/*VV CR9048*/T.Strategy_Date,T.Task_Id
END

SET @Counter=@@ROWCOUNT;

IF @Counter>0
BEGIN
	--AL: 09/12/09: Set the nextocc properly in order when having multiple backlogs
	IF ISNULL(@MaxPlanningWOtoCreate,1)>1 /*VV CR9048 uncommented if*/
	BEGIN
		/*VV CR9048 Changed query
		--set sort orders of all the occurrences (by TDKey)
		WITH PTCTE(ProjTaskId,TDKey,Level)
		AS
		(
			SELECT	ProjTaskId,MIN(TDKey) AS TDKey,Level
			FROM	#z_ProjTask  
			GROUP BY ProjTaskId,Level
			UNION ALL
			SELECT	PT.ProjTaskId,PT.TDKey,CTE.Level+1
			FROM 
					#z_ProjTask AS PT INNER JOIN 
					PTCTE AS CTE ON PT.ProjTaskId=CTE.ProjTaskId AND PT.TDKey>CTE.TDKey
		)

		--Set the order by StrategyDate/TaskID (already existing ones)
		--For records with SortOrder>1 then do not set PlanDateLocked and StrategyRepairDescr (not in long term planning)
		--Replace the NextOcc(Date) for records with SortOrder>1 with the data from the tblProjTaskOccs for the (sortorder)th record
		--If sortorder>number of future occurrences then set NextOcc(Date) to end equipment term
		UPDATE PT 
		SET Level=CTE.Level,
			NextOcc=CASE WHEN CTE.Level = 1 THEN NextOcc ELSE  
				CASE WHEN OCCS.Records<CTE.Level THEN EndUsage ELSE OCCS.OccUsage END
					END,
			NextOccDate=CASE WHEN CTE.Level = 1 THEN NextOccDate ELSE  
				CASE WHEN OCCS.Records<CTE.Level THEN EndDate ELSE OCCS.OccDate END
					END,
--			PlanDateLocked=CASE WHEN CTE.Level = 1 THEN PlanDateLocked ELSE 0 END,
--			StrategyRepairDescr=CASE WHEN CTE.Level = 1 THEN StrategyRepairDescr ELSE '' END,
			PlanOccs=MAXOCC.OccNumber
		FROM
			#z_ProjTask PT INNER JOIN
			
			(SELECT ProjTaskId,CONVERT(INT,RIGHT(TDKey,LEN(TDKey)-23))AS TaskId,Level	--23=len(date)
			FROM
				(SELECT	ProjTaskId,TDKey,MAX(Level)AS Level
				FROM PTCTE
				GROUP BY ProjTaskId,TDKey)A
			) CTE ON PT.TaskId=CTE.TaskId OUTER APPLY
			
			(SELECT	MAX(ProjTaskID) AS ProjTaskID,MAX(OccDate) AS OccDate,MAX(OccUsage) AS OccUsage,Count(*) AS Records
			FROM
				(SELECT  Top (CTE.Level) ProjTaskID,OccDate,OccUsage
				FROM
					tblProjTaskOccs OCC
				WHERE
					ProjTaskID=PT.ProjTaskId
				ORDER BY OccDate)A)OCCS OUTER APPLY

			(SELECT Count(*) AS OccNumber
			FROM 
				tblProjTaskOccs
			WHERE 
				ProjTaskID=PT.ProjTaskId
				AND CAST(OccDate AS float)<=PT.PlanLeadDate)MAXOCC
				*/
				
		UPDATE PT 
		SET NextOcc=CASE WHEN PT.Level = 1 THEN NextOcc ELSE  
				CASE WHEN OCCS.Records<PT.Level THEN EndUsage ELSE OCCS.OccUsage END
					END,
			NextOccDate=CASE WHEN PT.Level = 1 THEN NextOccDate ELSE  
				CASE WHEN OCCS.Records<PT.Level THEN EndDate ELSE OCCS.OccDate END
					END,
			PlanOccs=MAXOCC.OccNumber
		FROM
			#z_ProjTask PT
			
			 OUTER APPLY
			
			(SELECT	MAX(ProjTaskID) AS ProjTaskID,MAX(OccDate) AS OccDate,MAX(OccUsage) AS OccUsage,Count(*) AS Records
			FROM
				(SELECT  Top (PT.Level) ProjTaskID,OccDate,OccUsage
				FROM
					tblProjTaskOccs OCC
				WHERE
					ProjTaskID=PT.ProjTaskId
				ORDER BY OccDate)A)OCCS 
				
			OUTER APPLY

			(SELECT Count(*) AS OccNumber
			FROM 
				tblProjTaskOccs
			WHERE 
				ProjTaskID=PT.ProjTaskId
				AND CAST(OccDate AS float)<=PT.PlanLeadDate)MAXOCC


	END

	--SELECT * FROM #z_ProjTask

	UPDATE T SET
	/*T.Occurrence_Type_Id=STU.OccurrenceTypeId, 26-Jun-07 VV took out Occurrence_Type update discussed with G.E.*/
	T.Strategy_Usage=Z.NextOcc,
	T.Strategy_QUOM_ID=Z.QUOMId,
	T.Strategy_Proj_Task_Opt_ID=Z.PlanTaskOptId,
	T.Planned_Proj_Task_Opt_ID=Z.PlanTaskOptId,
	T.Strategy_Date=Z.NextOccDate,
	T.Performed_By_Date=ISNULL(Z.NextOccDate,T.Performed_By_Date),
	T.Strategy_Locked=Z.PlanDateLocked,
	T.Strategy_Repair_Description=Z.StrategyRepairDescr,
	T.Final_Change=ISNULL(ISNULL(A.FinalChange,Z.LastOcc),Z.[First]),
	T.Risk_Life_Left=ISNULL(dbo.RISK_LIFE_LEFT_F(Z.Frequency,Z.EndUsage,ISNULL(ISNULL(A.FinalChange,Z.LastOcc),Z.[First])),0),
	T.Strategy_Frequency=Z.Frequency,
	T.Last_Performed =Z.Last_Performed,
	T.Last_Scheduled =Z.Last_Scheduled,
	T.Last_Performed_Date=Z.Last_Performed_Date,
	T.Last_Scheduled_Date=Z.Last_Scheduled_Date
	--AL: 17/07/09: remove authorisation section

	FROM
	TASK T 
		INNER JOIN 	#z_ProjTask Z 
		ON T.Task_ID = Z.TaskId 
		LEFT OUTER JOIN
	(SELECT PTOC.ProjTaskId,MAX(PTOC.OccUsage) AS FinalChange FROM 
	tblProjTaskOccs PTOC INNER JOIN #z_ProjTask Z
		ON PTOC.ProjTaskId=Z.ProjTaskId
	GROUP BY PTOC.ProjTaskId) A
		ON Z.ProjTaskId=A.ProjTaskId

	--If @ProjTaskId was supplied and update took place we do not need to insert record
	IF ISNULL(@MaxPlanningWOtoCreate,1)=1 AND @ProjTaskId>0 RETURN	--AL: 03/12/09
END
		


--##### 3: CREATE NEW EQS backlogs
--Note: if allowing multiple backlogs then we need to get all occurrences for proj tasks with NO backlog
-- AND all MISSING occurrences for proj tasks already having backlogs

--Select strategy defaults
SELECT @Symptom_ID=Symptom_ID FROM SYMPTOM WHERE Strategy_Default = 1	
SELECT @Cause_ID=Cause_ID FROM CAUSE WHERE Strategy_Default = 1	

--SELECT other DEFAULTS   
IF @Symptom_ID IS NULL SELECT @Symptom_ID=Symptom_ID FROM SYMPTOM WHERE Default_Record = 1
IF @Cause_ID IS NULL SELECT @Cause_ID=Cause_ID FROM CAUSE WHERE Default_Record = 1

SELECT @Repair_Code_ID=Repair_Code_ID FROM REPAIR_CODE WHERE Default_Record = 1
SELECT @Source_Id= Source_Id FROM SOURCE where Default_Record = 1
SELECT @Priority_ID=Priority_ID FROM PRIORITY WHERE Default_Record = 1
SELECT @Def_Misc_Category_Id=Misc_Category_Id FROM MISC_CATEGORY WHERE Default_Record=1
--SET @Parts_Resources_Identified=0
SET @PartsStatusRequired=1	--AL: 10/09/09
SET @PartsStatusOrdered=0
SET @PartsStatusReady=0

CREATE TABLE #z_TASK(ProjTaskOptId int,ProjTaskId int,TaskId int IDENTITY(1,1),NewTaskId int,
QUOMId int,NextOcc float,NextOccDate datetime,PlanDateLocked bit,
StrategyRepairDescr varchar(MAX) COLLATE DATABASE_DEFAULT,LastOcc float,[First] float,Frequency float,	--AL: 12/06/08
Last_Performed float,Last_Scheduled float,Last_Performed_Date datetime,
Last_Scheduled_Date datetime,EndUsage float, SiteId int, BranchId int, Cost_Bearer_ID int, 
Cost_Centre_ID int, Parts_Entry_Distribution_Code_Id int, 
Labour_Entry_Distribution_Code_Id int,Misc_Entry_Distribution_Code_Id int, 
Customer_Id int, Advanced_Planning int, Price_Group_ID int,ManufacturerId int,
ComponentCodeId int,ModifierId int,ApplicationCodeId int,OccurrenceTypeId int,
TaskTypeId int,FleetId int,TaskModeId int,EqpPlanId int,[Description] varchar(500) COLLATE DATABASE_DEFAULT,
ModelId int,Warranty_Days float,Warranty_Usage float,Task_Header_Id int,
/*VV 1/11/2007*/
Work_Group_Id int,Def_Work_Group_Id int,
--AL: 09/12/09
MaxLevel int,PlanOccs int,
--AL: 06/04/10
PartsStatusRequired bit
PRIMARY KEY(ProjTaskOptId,ProjTaskId,NextOccDate))


CREATE TABLE #z_ProjTaskAmt (
	ProjTaskAmtId int,
	ProjTaskOptId int,
	Cost_Allocation_Id int,
	PricedJobId int, 
	JobCodeId int, 
	Duration float, 
	Work_Group_Id int, 
	Health_Safety_Id int, 
	Misc_Cost_Expense_ID int, 
    Labour_Cost_Expense_ID int, 
	Cost_Bearer_ID int, 
	Parts_Cost_Expense_ID int, 
	Parts_EDC_ID int, 
	Labour_EDC_ID int, 
	Misc_EDC_ID int,
	Cost_Centre_Id int,
	Parts_Cost float,
	Labour_Cost float,
	Misc_Cost float,
	Labour_Hrs float,
	Labour_Activity_Id int
	PRIMARY KEY (ProjTaskOptId,ProjTaskAmtId,Cost_Allocation_Id))

--Task Operations
CREATE TABLE #z_TASK_OPERATION (
	Task_Operation_Id int IDENTITY(1,1),
	Task_Id int,	
	Task_Operation varchar(200) COLLATE DATABASE_DEFAULT,
	Component_Code_Id int,
	Modifier_Code_Id int,
	Job_Code_Id int,
	Work_Group_Id int,
	Health_Safety_Id int,
	Planned_Duration float,
	Cost_Bearer_Id int,
	Cost_Centre_Id int,
	Parts_Cost_Expense_Id int,
	Labour_Cost_Expense_Id int,
	Misc_Cost_Expense_Id int,
	Parts_Entry_Distribution_Code_Id int,
	Labour_Entry_Distribution_Code_Id int,
	Misc_Entry_Distribution_Code_Id int,
	Proj_Task_Amt_Id int,
	Priced_Job_id int,
	Std_Job_Op_Id int,
	Parts_Cost float,
	Labour_Cost float,
	Misc_Cost float,
	Labour_Hrs float,
	Labour_Activity_Id int,
	Overwrite_Costs bit DEFAULT 0,
	Std_Job_Id int,
	Parts_Usage_Factor float,
	NewTaskOpId int,
	SortOrder int
	PRIMARY KEY(Task_Operation_Id))

--Task Operation Parts
CREATE TABLE #z_TASK_OPERATION_PART(
Task_Operation_Part_Id int IDENTITY(1,1), 
Task_Operation_Id int, 
Part_Id int, 
Strategy_Qty float, 
Pct_Strategy_Probability float, 
Strategy_Unit_Price float, 
Include_In_Total bit, 
Proj_Task_Amt_Id int, 
Std_Job_Op_Id int,
Use_Credit_Price bit,
Full_Credit bit,
/*VV CR8294*/
CostBearerID int,
CostCentreID int,
ExpenseElementID int,
WorkGroupID int
PRIMARY KEY(Task_Operation_Part_Id))

--Task operation labour
CREATE TABLE #z_TASK_OPERATION_LABOUR(
Task_Operation_Labour_Id int IDENTITY(1,1),
Task_Operation_Id int ,
Work_Group_Id int,
Labour_Activity_Id int,
Labour_Activity varchar(50)  COLLATE DATABASE_DEFAULT,
Include_In_Total bit,
Strategy_Labour_Hrs float  ,
Strategy_Labour_Rate float,
/*VV CR8294*/
CostBearerID int,
CostCentreID int,
ExpenseElementID int
PRIMARY KEY(Task_Operation_Labour_Id)) 

--Task operation misc
CREATE TABLE #z_TASK_OPERATION_MISC(
Task_Operation_Misc_Id int IDENTITY(1,1),
Task_Operation_Id int,
Task_Operation_Misc_Desc varchar(200) COLLATE DATABASE_DEFAULT,
Misc_Category_Id int,
Strategy_Sell float,
Include_In_Total bit,
/*VV CR8294*/
CostBearerID int,
CostCentreID int,
ExpenseElementID int,
WorkGroupID int
PRIMARY KEY(Task_Operation_Misc_Id))

/*VV AmtMobile*/
CREATE TABLE #z_EW_WORKORDER(EWWorkorderId int IDENTITY(-1,-1),TaskOperationId int,
EWTitle	varchar(200) COLLATE DATABASE_DEFAULT, UniqueKey varchar(50) COLLATE DATABASE_DEFAULT,
EWTemplateId int)

CREATE TABLE #z_EW_WORKSTEP(
	EWWorkstepId int IDENTITY(-1,-1),
	EWWorkorderId int,
	EWStepTemplateId int,
	Sequence int,
	EWWorkstepTitle varchar(200) COLLATE DATABASE_DEFAULT,
	ComponentCodeId int,
	CMCodeId int,
	Instructions varchar(1000) COLLATE DATABASE_DEFAULT,
	DocumentGUID varchar(50) COLLATE DATABASE_DEFAULT,
	DocumentExt varchar(50) COLLATE DATABASE_DEFAULT,
	Safety bit,
	Environmental bit,
	UniqueKey varchar(50) COLLATE DATABASE_DEFAULT
	)


--##### 3a: List proj tasks with no backlog
IF @ProjTaskId=0
BEGIN
	INSERT INTO #z_TASK(ProjTaskOptId,ProjTaskId,QUOMId,NextOcc,NextOccDate,
	PlanDateLocked,StrategyRepairDescr,LastOcc,[First],Frequency,Last_Performed,
	Last_Scheduled,Last_Performed_Date,Last_Scheduled_Date,EndUsage, SiteId, BranchId, 
	Cost_Bearer_ID, Cost_Centre_ID, Parts_Entry_Distribution_Code_Id, 
	Labour_Entry_Distribution_Code_Id,Misc_Entry_Distribution_Code_Id, 
	Customer_Id, Advanced_Planning, Price_Group_ID,ManufacturerId,ComponentCodeId,ModifierId,
	ApplicationCodeId,OccurrenceTypeId,TaskTypeId,FleetId,TaskModeId,EqpPlanId,[Description],
	ModelId,Warranty_Days,Warranty_Usage,Task_Header_Id,
	/*VV 1/11/2007*/Work_Group_Id ,Def_Work_Group_Id,
	--AL: 09/12/09
	MaxLevel,PlanOccs)

	SELECT ST.ProjTaskOptId,ST.ProjTaskId,ST.UsageQUOMId,ST.NextOcc,ST.NextOccDate,
	ST.PlanDateLocked,ST.StrategyRepairDescr,ST.LastOcc,ST.[First],ST.Frequency,
	CASE WHEN @UseSchedulingSystemLastOcc =1 AND ST.SchedulingTaskId>0 THEN ST.Ext_Last_Occ ELSE ST.AMT_WO_Last_Occ END AS Last_Performed,
	CASE WHEN @UseSchedulingSystemLastOcc =1 AND ST.SchedulingTaskId>0 THEN ST.Ext_Last_Sched_Occ ELSE ST.AMT_Last_Sched_Occ END AS Last_Scheduled,
	CASE WHEN @UseSchedulingSystemLastOcc =1 AND ST.SchedulingTaskId>0 THEN ST.Ext_Last_Occ_Date ELSE ST.AMT_WO_Last_Occ_Date END AS Last_Performed_Date,
	CASE WHEN @UseSchedulingSystemLastOcc =1 AND ST.SchedulingTaskId>0 THEN ST.Ext_Last_Sched_Date ELSE ST.AMT_Last_Sched_Date END AS Last_Scheduled_Date,
	CASE WHEN ISNULL(ST.EndQUOMId,0)=ISNULL(ST.UsageQUOMId,0) THEN ST.EndUsage 
	ELSE dbo.GET_EQP_PROJ_END_USAGE_F(ST.EqpProjId, ST.UsageQUOMID,ST.EndDate) END AS EndUsage,
	ST.SiteId, ST.BranchId,ST.Default_Cost_Bearer_ID, ST.Cost_Centre_ID, ST.Parts_Entry_Distribution_Code_Id, 
	ST.Labour_Entry_Distribution_Code_Id,ST.Misc_Entry_Distribution_Code_Id, 
	ST.Customer_Id, ST.Advanced_Planning AS AmtPlanningModeId, ST.Price_Group_ID,
	ST.ManufacturerId,ST.ComponentCodeId,ST.ModifierId,ST.ApplicationCodeId,
	/*VV #2351 ST.OccurrenceTypeId,*/@OccurrenceTypeId AS OccurrenceTypeId,ST.TaskTypeId,ST.FleetId,
	CASE ST.Enable_Auto_WO_Create WHEN 1 THEN @TaskModeA ELSE @TaskModeGT END,
	ST.EqpPlanId,ST.[Description],ST.ModelId,ST.Warranty_Period_Days,
	ST.Warranty_Period_Usage,ST.Task_Header_Id,/*VV 1/11/2007*/
	WG.Work_Group_Id,WG.Work_Group_Id AS Def_Work_Group_Id,
	--AL: 09/12/09
	0 AS MaxLevel,CASE WHEN MAXOCC.OccNumber>@MaxPlanningWOtoCreate THEN @MaxPlanningWOtoCreate ELSE MAXOCC.OccNumber END AS PlanOccs

	FROM
	STRATEGY_TASK_CREATE_V ST
		LEFT OUTER JOIN
	#z_ProjTask PT
		ON ST.ProjTaskId=PT.ProjTaskId
		/*VV 1/11/2007*/
		LEFT OUTER JOIN
	WORK_GROUP WG
		ON ST.SiteId=WG.Site_Id AND /*VV CR9048*/WG.Default_Record=1

	--AL: 09/12/09
	OUTER APPLY
	(SELECT Count(*) AS OccNumber
	FROM 
		tblProjTaskOccs
	WHERE 
		ProjTaskID=ST.ProjTaskId
		AND CAST(OccDate AS float)<=ST.PlanLeadDate)MAXOCC

	WHERE PT.ProjTaskId IS NULL
	/*VV CR9048
	AND (WG.Default_Record=1 OR WG.Default_Record IS NULL)*/
END
ELSE
BEGIN
	INSERT INTO #z_TASK(ProjTaskOptId,ProjTaskId,QUOMId,NextOcc,NextOccDate,
	PlanDateLocked,StrategyRepairDescr,LastOcc,[First],Frequency,Last_Performed,
	Last_Scheduled,Last_Performed_Date,Last_Scheduled_Date,EndUsage, SiteId, BranchId, 
	Cost_Bearer_ID, Cost_Centre_ID, Parts_Entry_Distribution_Code_Id, 
	Labour_Entry_Distribution_Code_Id,Misc_Entry_Distribution_Code_Id, 
	Customer_Id, Advanced_Planning, Price_Group_ID,ManufacturerId,ComponentCodeId,ModifierId,
	ApplicationCodeId,OccurrenceTypeId,TaskTypeId,FleetId,TaskModeId,EqpPlanId,[Description],
	ModelId,Warranty_Days,Warranty_Usage,Task_Header_Id,/*VV 1/11/2007*/Work_Group_Id ,Def_Work_Group_Id,
	--AL: 09/12/09
	MaxLevel,PlanOccs)

	SELECT ST.ProjTaskOptId,ST.ProjTaskId,ST.UsageQUOMId,ST.NextOcc,ST.NextOccDate,
	ST.PlanDateLocked,ST.StrategyRepairDescr,ST.LastOcc,ST.[First],ST.Frequency,
	CASE WHEN @UseSchedulingSystemLastOcc =1 AND ST.SchedulingTaskId>0 THEN ST.Ext_Last_Occ ELSE ST.AMT_WO_Last_Occ END AS Last_Performed,
	CASE WHEN @UseSchedulingSystemLastOcc =1 AND ST.SchedulingTaskId>0 THEN ST.Ext_Last_Sched_Occ ELSE ST.AMT_Last_Sched_Occ END AS Last_Scheduled,
	CASE WHEN @UseSchedulingSystemLastOcc =1 AND ST.SchedulingTaskId>0 THEN ST.Ext_Last_Occ_Date ELSE ST.AMT_WO_Last_Occ_Date END AS Last_Performed_Date,
	CASE WHEN @UseSchedulingSystemLastOcc =1 AND ST.SchedulingTaskId>0 THEN ST.Ext_Last_Sched_Date ELSE ST.AMT_Last_Sched_Date END AS Last_Scheduled_Date,
	CASE WHEN ISNULL(ST.EndQUOMId,0)=ISNULL(ST.UsageQUOMId,0) THEN ST.EndUsage 
	ELSE dbo.GET_EQP_PROJ_END_USAGE_F(ST.EqpProjId, ST.UsageQUOMID,ST.EndDate) END AS EndUsage,
	ST.SiteId, ST.BranchId,ST.Default_Cost_Bearer_ID, ST.Cost_Centre_ID, ST.Parts_Entry_Distribution_Code_Id, 
	ST.Labour_Entry_Distribution_Code_Id,ST.Misc_Entry_Distribution_Code_Id, 
	ST.Customer_Id, ST.Advanced_Planning AS AmtPlanningModeId, ST.Price_Group_ID,
	ST.ManufacturerId,ST.ComponentCodeId,ST.ModifierId,ST.ApplicationCodeId,
	/*VV #2351 ST.OccurrenceTypeId*/@OccurrenceTypeId AS OccurrenceTypeId,ST.TaskTypeId,ST.FleetId,
	CASE ST.Enable_Auto_WO_Create WHEN 1 THEN @TaskModeA ELSE @TaskModeGT END,
	ST.EqpPlanId,ST.[Description],ST.ModelId,ST.Warranty_Period_Days,ST.Warranty_Period_Usage,ST.Task_Header_Id,
	/*VV 1/11/2007*/
	WG.Work_Group_Id,WG.Work_Group_Id AS Def_Work_Group_Id,
	--AL: 09/12/09
	0 AS MaxLevel,CASE WHEN MAXOCC.OccNumber>@MaxPlanningWOtoCreate THEN @MaxPlanningWOtoCreate ELSE MAXOCC.OccNumber END AS PlanOccs

	FROM
	STRATEGY_TASK_CREATE_V ST	
		/*VV 1/11/2007*/
		LEFT OUTER JOIN
	WORK_GROUP WG
		ON ST.SiteId=WG.Site_Id	AND /*VV CR9048*/WG.Default_Record=1	
		/*VV CR9048*/
		LEFT OUTER JOIN
	#z_ProjTask PT
		ON ST.ProjTaskId=PT.ProjTaskId
	--AL: 09/12/09
	OUTER APPLY
	(SELECT Count(*) AS OccNumber
	FROM 
		tblProjTaskOccs
	WHERE 
		ProjTaskID=ST.ProjTaskId
		AND CAST(OccDate AS float)<=ST.PlanLeadDate)MAXOCC

	WHERE ST.ProjTaskId =@ProjTaskId AND PT.ProjTaskId IS NULL

END

--AL: 09/12/09
IF ISNULL(@MaxPlanningWOtoCreate,1)>1
BEGIN
	--##### 3b: maintenance
	SELECT * INTO #z_TASK1 FROM #z_TASK
	TRUNCATE TABLE #z_TASK

	--##### 3c: add proj tasks with existing backlogs but missing occurrences
	INSERT INTO #z_TASK1(ProjTaskOptId,ProjTaskId,QUOMId,NextOcc,NextOccDate,
	PlanDateLocked,StrategyRepairDescr,LastOcc,[First],Frequency,Last_Performed,
	Last_Scheduled,Last_Performed_Date,Last_Scheduled_Date,EndUsage, SiteId, BranchId, 
	Cost_Bearer_ID, Cost_Centre_ID, Parts_Entry_Distribution_Code_Id, 
	Labour_Entry_Distribution_Code_Id,Misc_Entry_Distribution_Code_Id, 
	Customer_Id, Advanced_Planning, Price_Group_ID,ManufacturerId,ComponentCodeId,ModifierId,
	ApplicationCodeId,OccurrenceTypeId,TaskTypeId,FleetId,TaskModeId,EqpPlanId,[Description],
	ModelId,Warranty_Days,Warranty_Usage,Task_Header_Id, Work_Group_Id ,Def_Work_Group_Id,
	MaxLevel,PlanOccs)

	SELECT	PT.PlanTaskOptID AS ProjTaskOptID,PT.ProjTaskID,PT.QUOMID,
			MIN(PT.NextOcc) AS NextOcc,MIN(PT.NextOccDate) AS NextOccDate,
			0 AS PlanDateLocked,'' AS StrategyRepairDescr,
			PT.LastOcc,PT.First,PT.Frequency,PT.Last_Performed,PT.Last_Scheduled,
			PT.Last_Performed_Date,PT.Last_Scheduled_Date,PT.EndUsage,
			F.SiteId, S.BranchId, EP.Default_Cost_Bearer_ID, EP.Cost_Centre_ID, 
			EP.Parts_Entry_Distribution_Code_Id, EP.Labour_Entry_Distribution_Code_Id, 
			EP.Misc_Entry_Distribution_Code_Id, EP.Customer_Id,EP.Advanced_Planning AS AmtPlanningModeId,
			F.Price_Group_ID,E.ManufacturerId,PT.ComponentCodeId,PT.ModifierId,PT.ApplicationCodeId,
			/*VV 2351 PT.OccurrenceTypeId*/@OccurrenceTypeId AS OccurrenceTypeId,
			PT.TaskTypeId,EP.FleetId,CASE B.Enable_Auto_WO_Create WHEN 1 THEN @TaskModeA ELSE @TaskModeGT END AS AWC,
			PT.EqpPlanId,PT.TaskDescription AS [Description],E.ModelId,PT.Warranty_Period_Days,PT.Warranty_Period_Usage,
			PT.Task_Header_Id,WG.Work_Group_Id,WG.Work_Group_Id AS Def_Work_Group_Id,
			A2.MaxLevel,A2.PlanOccs
	FROM
		(SELECT projtaskID,MaxLevel,CASE WHEN PlanOccs>@MaxPlanningWOtoCreate THEN @MaxPlanningWOtoCreate ELSE PlanOccs END AS PlanOccs
		FROM
			(SELECT projtaskID,MAX(Level) AS MaxLevel,MAX(PlanOccs) AS PlanOccs 
			FROM #z_ProjTask
			GROUP BY projtaskID)A1
		)A2 INNER JOIN
		
		#z_ProjTask PT ON A2.ProjTaskID=PT.ProjTaskID  INNER JOIN
		tblEqpPlans AS EP ON PT.EqpPlanId = EP.EqpPlanId INNER JOIN
		tblFleets AS F ON EP.FleetId = F.FleetId INNER JOIN
		tblSites AS S ON F.SiteId = S.SiteId INNER JOIN
		tblBranches AS B ON S.BranchId = B.BranchId INNER JOIN
		tblEquipment AS E ON EP.EquipmentId = E.EquipmentId LEFT OUTER JOIN
		WORK_GROUP WG ON F.SiteId=WG.Site_Id
	WHERE 
		A2.MaxLevel<A2.PlanOccs		
		AND (WG.Default_Record=1 OR WG.Default_Record IS NULL) 
	GROUP BY
		A2.MaxLevel,A2.PlanOccs,
		PT.PlanTaskOptID,PT.ProjTaskID,PT.QUOMID,
		PT.LastOcc,PT.First,PT.Frequency,PT.Last_Performed,PT.Last_Scheduled,
		PT.Last_Performed_Date,PT.Last_Scheduled_Date,PT.EndUsage,
		F.SiteId, S.BranchId, EP.Default_Cost_Bearer_ID, EP.Cost_Centre_ID, 
		EP.Parts_Entry_Distribution_Code_Id, EP.Labour_Entry_Distribution_Code_Id, 
		EP.Misc_Entry_Distribution_Code_Id, EP.Customer_Id,EP.Advanced_Planning,
		F.Price_Group_ID,E.ManufacturerId,PT.ComponentCodeId,PT.ModifierId,PT.ApplicationCodeId,
		/*VV #2351 PT.OccurrenceTypeId,*/PT.TaskTypeId,EP.FleetId,
		CASE B.Enable_Auto_WO_Create WHEN 1 THEN @TaskModeA ELSE @TaskModeGT END,
		PT.EqpPlanId,PT.TaskDescription,E.ModelId,PT.Warranty_Period_Days,PT.Warranty_Period_Usage,
		PT.Task_Header_Id,WG.Work_Group_Id,WG.Work_Group_Id

	--##### 3d: add all missing occurences
	INSERT INTO #z_TASK(ProjTaskOptId,ProjTaskId,QUOMId,NextOcc,NextOccDate,
	PlanDateLocked,StrategyRepairDescr,LastOcc,[First],Frequency,Last_Performed,
	Last_Scheduled,Last_Performed_Date,Last_Scheduled_Date,EndUsage, SiteId, BranchId, 
	Cost_Bearer_ID, Cost_Centre_ID, Parts_Entry_Distribution_Code_Id, 
	Labour_Entry_Distribution_Code_Id,Misc_Entry_Distribution_Code_Id, 
	Customer_Id, Advanced_Planning, Price_Group_ID,ManufacturerId,ComponentCodeId,ModifierId,
	ApplicationCodeId,OccurrenceTypeId,TaskTypeId,FleetId,TaskModeId,EqpPlanId,[Description],
	ModelId,Warranty_Days,Warranty_Usage,Task_Header_Id, Work_Group_Id ,Def_Work_Group_Id,
	MaxLevel,PlanOccs)

	SELECT	T.ProjTaskOptId,T.ProjTaskId,T.QUOMId,
			CASE WHEN A.level = 1 AND A.OccDate>getdate() THEN T.NextOcc ELSE A.OccUsage END AS NextOcc,	--AL: 23/02/10
			CASE WHEN A.level = 1 AND A.OccDate>getdate() THEN T.NextOccDate ELSE A.OccDate END AS NextOccDate,	--AL: 23/02/10
			CASE WHEN A.level = 1 THEN T.PlanDateLocked ELSE 0 END AS PlanDateLocked,
			CASE WHEN A.level = 1 THEN T.StrategyRepairDescr ELSE '' END AS StrategyRepairDescr,
			T.LastOcc,T.[First],T.Frequency,T.Last_Performed,
			T.Last_Scheduled,T.Last_Performed_Date,T.Last_Scheduled_Date,T.EndUsage, T.SiteId, T.BranchId, 
			T.Cost_Bearer_ID, T.Cost_Centre_ID, T.Parts_Entry_Distribution_Code_Id, 
			T.Labour_Entry_Distribution_Code_Id,T.Misc_Entry_Distribution_Code_Id, 
			T.Customer_Id, T.Advanced_Planning, T.Price_Group_ID,T.ManufacturerId,T.ComponentCodeId,T.ModifierId,
			T.ApplicationCodeId,T.OccurrenceTypeId,T.TaskTypeId,T.FleetId,T.TaskModeId,T.EqpPlanId,T.[Description],
			T.ModelId,T.Warranty_Days,T.Warranty_Usage,T.Task_Header_Id, T.Work_Group_Id ,T.Def_Work_Group_Id,
			A.Level,T.PlanOccs
	FROM 
		#z_TASK1 T  CROSS APPLY

		(SELECT TOP (ISNULL(NULLIF(T.PlanOccs,0),1)) rank() OVER (ORDER BY OccDate) AS level,OccDate,OccUsage 
		FROM tblProjTaskOccs 
		WHERE ProjTaskId = T.ProjTaskId
		ORDER BY level)A
	WHERE
		A.Level>T.MaxLevel

	DROP TABLE #z_TASK1
END

--SELECT * FROM #z_TASK


--##### 3c: do the rest
INSERT INTO #z_ProjTaskAmt(ProjTaskAmtId,ProjTaskOptId,Cost_Allocation_Id,PricedJobId, 
JobCodeId, Duration, Work_Group_Id, Health_Safety_Id, Misc_Cost_Expense_ID, 
Labour_Cost_Expense_ID, Cost_Bearer_ID, Parts_Cost_Expense_ID, Parts_EDC_ID, Labour_EDC_ID, 
Misc_EDC_ID,Cost_Centre_Id,Parts_cost,Labour_Cost,Misc_Cost,Labour_Hrs,Labour_Activity_Id)

SELECT PTA.ProjTaskAmtId,PTA.ProjTaskOptId,ISNULL(PTA.Cost_Allocation_Details_Id,0) AS Cost_Allocation_Id,	
PTA.PricedJobId, PTA.JobCodeId, 
PTA.Duration, 
/*VV 1/11/2007*/
ISNULL(PTA.Work_Group_Id,T.Work_Group_Id) AS Work_Group_Id, 
PTA.Health_Safety_Id, PTA.Misc_Cost_Expense_ID, 
PTA.Labour_Cost_Expense_ID, PTA.Cost_Bearer_ID, PTA.Parts_Cost_Expense_ID, 
PTA.Parts_EDC_ID, PTA.Labour_EDC_ID,PTA.Misc_EDC_ID,PTA.Cost_Centre_Id,	
PTA.PartsCost* CPE.CumPartsEscalation/ ERC.ExRate AS Parts_Cost,
PTA.TotalLabourCost * CE.CumLaborEscalation/ ERC.ExRate AS Labour_Cost,
PTA.TotalMiscCost * CE.CumMiscEscalation / ERC.ExRate AS Misc_Cost,
PTA.LaborHours,PTA.Labour_Activity_Id
FROM 
--AL: 09/12/09
(SELECT ProjTaskOptId,Work_Group_Id,ManufacturerId FROM #z_TASK GROUP BY ProjTaskOptId,Work_Group_Id,ManufacturerId) T
	INNER JOIN
PROJ_TASK_AMT_COST_1_V PTA
	ON T.ProjTaskOptId=PTA.ProjTaskOptId
	INNER JOIN 
tblCostEscalations CE
	ON PTA.Pricing_Date >= CE.EscalationDate AND PTA.Pricing_Date < CE.EndDate
	INNER JOIN 
tblCostPartsEscalations CPE
	ON CE.CostEscalationId = CPE.CostEscalationId AND CPE.ManufacturerId = T.ManufacturerId			
	INNER JOIN 
tblExRateCurrencies ERC
	ON ERC.ExRateID = 0 AND ERC.CurrencyID = PTA.CurrencyID

--Proj jobs not liked to the std jobs
IF EXISTS(SELECT ProjTaskAmtId FROM #z_ProjTaskAmt WHERE PricedJobId IS NULL)
BEGIN
	INSERT INTO #z_TASK_OPERATION(Task_Id,Task_Operation,Component_Code_Id,Modifier_Code_Id,Job_Code_Id,
	Work_Group_Id,Health_Safety_Id,Planned_Duration,Cost_Bearer_Id,	Cost_Centre_Id,	
	Parts_Cost_Expense_Id,Labour_Cost_Expense_Id,	Misc_Cost_Expense_Id,
	Parts_Entry_Distribution_Code_Id,Labour_Entry_Distribution_Code_Id,
	Misc_Entry_Distribution_Code_Id,Proj_Task_Amt_Id,Parts_cost,Labour_Cost,Misc_Cost,
	Labour_Hrs,Labour_Activity_Id)
	SELECT T.TaskId, CC.Description + /*VV 11-Dec-2008*/ISNULL(' - '+JC.Description,'') AS Task_Operation,
	T.ComponentCodeId,T.ModifierId,PTA.JobCodeId,
	/*VV 1/11/2007*/
	ISNULL(CASE WHEN COUNT(DISTINCT ISNULL(PTA.Work_Group_Id,0))=1 THEN MAX(PTA.Work_Group_Id) ELSE NULL END,T.Work_Group_Id) AS Work_Group_Id,		
	PTA.Health_Safety_Id,SUM(Duration) AS Planned_Duration,
	CASE WHEN COUNT(DISTINCT ISNULL(PTA.Cost_Bearer_Id,0))=1 THEN MAX(PTA.Cost_Bearer_Id) ELSE NULL END AS Cost_Bearer_Id,	
	CASE WHEN COUNT(DISTINCT ISNULL(PTA.Cost_Centre_Id,0))=1 THEN MAX(PTA.Cost_Centre_Id) ELSE NULL END AS Cost_Centre_Id,	
	CASE WHEN COUNT(DISTINCT ISNULL(PTA.Parts_Cost_Expense_Id,0))=1 THEN MAX(PTA.Parts_Cost_Expense_Id) ELSE NULL END AS Parts_Cost_Expense_Id,
	CASE WHEN COUNT(DISTINCT ISNULL(PTA.Labour_Cost_Expense_Id,0))=1 THEN MAX(PTA.Labour_Cost_Expense_Id) ELSE NULL END AS Labour_Cost_Expense_Id,	
	CASE WHEN COUNT(DISTINCT ISNULL(PTA.Misc_Cost_Expense_Id,0))=1 THEN MAX(PTA.Misc_Cost_Expense_Id) ELSE NULL END AS Misc_Cost_Expense_Id,	
	CASE WHEN COUNT(DISTINCT ISNULL(PTA.Parts_EDC_ID,0))=1 THEN MAX(PTA.Parts_EDC_ID) ELSE NULL END AS Parts_Entry_Distribution_Code_Id,	
	CASE WHEN COUNT(DISTINCT ISNULL(PTA.Labour_EDC_ID,0))=1 THEN MAX(PTA.Labour_EDC_ID) ELSE NULL END AS Labour_Entry_Distribution_Code_Id,	
	CASE WHEN COUNT(DISTINCT ISNULL(PTA.Misc_EDC_ID,0))=1 THEN MAX(PTA.Misc_EDC_ID) ELSE NULL END AS Misc_Entry_Distribution_Code_Id,
	PTA.ProjTaskAmtId,SUM(PTA.Parts_Cost) AS Parts_Cost,SUM(PTA.Labour_Cost) AS Labour_Cost,
	SUM(PTA.Misc_Cost) AS Misc_Cost,SUM(PTA.Labour_Hrs) AS Labour_Hrs,PTA.Labour_Activity_Id
	FROM 
	tblComponentCodes CC
		INNER JOIN
	#z_Task T
		ON CC.ComponentCodeId=T.ComponentCodeId
		INNER JOIN
	#z_ProjTaskAmt PTA
		ON T.ProjTaskOptId=PTA.ProjTaskOptId
		LEFT JOIN /*VV 11-Dec-2008*/
	tblJobCodes JC
		ON PTA.JobCodeId=JC.JobCodeId
	WHERE PricedJobId IS NULL
	GROUP BY T.TaskId,T.ComponentCodeId,T.ModifierId,PTA.JobCodeId,Health_Safety_Id,
	ProjTaskAmtId,JC.Description,Labour_Activity_Id,CC.Description,
	/*VV 1/11/2007*/T.Work_Group_Id
END

--Jobs which are linked to std jobs
IF EXISTS(SELECT ProjTaskAmtId FROM #z_ProjTaskAmt WHERE PricedJobId>0)
BEGIN
	INSERT INTO #z_TASK_OPERATION(Task_Id,Task_Operation,
	Component_Code_Id,Modifier_Code_Id,Job_Code_Id,Work_Group_Id,Health_Safety_Id,Planned_Duration,
	Cost_Bearer_Id,	Cost_Centre_Id,	Parts_Cost_Expense_Id,
	Labour_Cost_Expense_Id,	Misc_Cost_Expense_Id,
	Parts_Entry_Distribution_Code_Id,
	Labour_Entry_Distribution_Code_Id,Misc_Entry_Distribution_Code_Id,Proj_Task_Amt_Id,
	Priced_Job_id,Std_Job_Op_Id, 
	Overwrite_Costs,Parts_cost,Labour_Cost,Misc_Cost,Labour_Hrs,Std_Job_Id,Parts_Usage_Factor)
	SELECT T.TaskId,    
	SJO.StdJobOperation AS Task_Operation, SJO.ComponentCodeId as Component_Code_Id, 
	SJO.ModifierCodeId AS Modifier_Code_Id,	SJO.JobCodeId AS Job_Code_Id, 
	PTA.Work_Group_Id,PTA.Health_Safety_Id, 
	CASE SJ.Overwrite_Costs  WHEN 1 THEN Duration_Hrs ELSE SJO.DurationHours END AS Planned_Duration,
	PTA.Cost_Bearer_Id,	PTA.Cost_Centre_Id,	PTA.Parts_Cost_Expense_Id,
	PTA.Labour_Cost_Expense_Id,	PTA.Misc_Cost_Expense_Id,
	PTA.Parts_EDC_ID AS Parts_Entry_Distribution_Code_Id,
	PTA.Labour_EDC_ID AS Labour_Entry_Distribution_Code_Id,
	PTA.Misc_EDC_ID AS Misc_Entry_Distribution_Code_Id,
	PTA.ProjTaskAmtId AS Proj_Task_Amt_Id,PTA.PricedJobId AS Priced_Job_id,SJO.StdJobOperationId,
	SJ.Overwrite_Costs,
	(CASE SJ.Overwrite_Costs  WHEN 1 THEN SJ.Parts_Cost ELSE 0 END)/ERC.ExRate AS Parts_Cost , 
	(CASE SJ.Overwrite_Costs  WHEN 1 THEN SJ.Labour_Cost ELSE 0 END)/ERC.ExRate AS Labour_Cost, 		
	(CASE SJ.Overwrite_Costs  WHEN 1 THEN SJ.Misc_Cost ELSE 0 END)/ERC.ExRate AS Misc_Cost,
	CASE SJ.Overwrite_Costs  WHEN 1 THEN SJ.Labour_Hrs ELSE 0 END AS Labour_Hrs ,
	SJ.StdJobId AS Std_Job_Id,SJ.Parts_Usage_Factor		
	FROM  
	#z_Task T
		INNER JOIN       
	#z_ProjTaskAmt AS PTA 
		ON T.ProjTaskOptId=PTA.ProjTaskOptId
		INNER JOIN
	tblPricedJobs AS PJ 
		ON PTA.PricedJobId = PJ.PricedJobId 
		INNER JOIN
	tblStdJobs AS SJ 
		ON PJ.StdJobId = SJ.StdJobId 
		INNER JOIN
	tblStdJobOperations AS SJO 
		ON SJ.StdJobId = SJO.StdJobId
		INNER JOIN 
	tblExRateCurrencies ERC
		ON ERC.ExRateID = 0 AND ERC.CurrencyID = SJ.Currency_ID
END


--Task operation parts from strategy tasks not linked to the std jobs
INSERT INTO #z_TASK_OPERATION_PART(
Task_Operation_Id, Part_Id, Strategy_Qty, Pct_Strategy_Probability, 
Strategy_Unit_Price, Include_In_Total, Proj_Task_Amt_Id, Std_Job_Op_Id,Use_Credit_Price,
Full_Credit)
SELECT     
Task_Operation_Id, 
NULL AS Part_Id, 1 AS Strategy_Qty, 100 AS Pct_Strategy_Probability, 
/*VV 11/01/10*/ISNULL(Parts_Cost,0) AS Strategy_Unit_Price, 1 AS Include_In_Total, Proj_Task_Amt_Id, Std_Job_Op_Id,
0 AS Use_Credit_Price,0 AS Full_Credit
FROM #z_TASK_OPERATION
WHERE (Parts_Cost>0 OR Parts_Cost<0) AND (Std_Job_Op_Id IS NULL) 	

--Task Operation labour from strategy tasks not linked to std jobs
INSERT INTO #z_TASK_OPERATION_LABOUR(
Task_Operation_Id,Work_Group_Id,Labour_Activity_Id,Strategy_Labour_Hrs,Strategy_Labour_Rate,Include_In_Total)
SELECT TOPR.Task_Operation_Id,PTA.Work_Group_Id,PTA.Labour_Activity_Id,SUM(PTA.Labour_Hrs) AS Labour_Hrs,
ISNULL(SUM(PTA.Labour_Cost)/NULLIF(SUM(PTA.Labour_Hrs),0),0) AS Strategy_Labour_Rate,
1 AS Include_In_Total
FROM
(SELECT JobCodeId,Health_Safety_Id,ProjTaskAmtId,Work_Group_Id,
Labour_Activity_Id,SUM(Labour_Hrs) AS Labour_Hrs,SUM(Labour_Cost) AS Labour_Cost
FROM #z_ProjTaskAmt WHERE PricedJobId IS NULL
GROUP BY JobCodeId,Health_Safety_Id,ProjTaskAmtId,Labour_Activity_Id,Work_Group_Id) PTA
	INNER JOIN
#z_TASK_OPERATION TOPR
	ON PTA.ProjTaskAmtId=TOPR.Proj_Task_Amt_Id AND
	   PTA.JobCodeId=TOPR.Job_Code_Id AND
	   ISNULL(PTA.Health_Safety_Id,0)=ISNULL(TOPR.Health_Safety_Id,0) AND
	   ISNULL(PTA.Labour_Activity_Id,0)=ISNULL(TOPR.Labour_Activity_Id,0)
WHERE TOPR.Std_Job_Op_Id IS NULL
GROUP BY TOPR.Task_Operation_Id,PTA.Work_Group_Id,PTA.Labour_Activity_Id

--Task Operation Misc from strategy task not linked to a std job
INSERT INTO #z_TASK_OPERATION_MISC(
Task_Operation_Id,Task_Operation_Misc_Desc,Misc_Category_Id,Strategy_Sell,Include_In_Total)
SELECT
TOPR.Task_Operation_Id,Task_Operation AS Task_Operation_Misc_Desc,
@Def_Misc_Category_Id AS Misc_Category_Id,Misc_Cost AS Strategy_Sell,
1 AS Include_In_Total
FROM
#z_TASK_OPERATION TOPR
WHERE Std_Job_Op_Id IS NULL

IF EXISTS(SELECT Std_Job_Op_Id FROM #z_TASK_OPERATION WHERE Std_Job_Op_Id>0)
BEGIN
	--Parts from std jobs
	INSERT INTO #z_TASK_OPERATION_PART(
	Task_Operation_Id, Part_Id, Strategy_Qty, Pct_Strategy_Probability, 
	Include_In_Total, Proj_Task_Amt_Id, Std_Job_Op_Id,Use_Credit_Price,Full_Credit)

	SELECT  
	TOPR.Task_Operation_Id, SJOP.PartId, SJOP.Quantity AS Strategy_Qty, 
	SJOP.Probability AS Pct_Strategy_Probability, 
	CASE TOPR.Overwrite_Costs WHEN 1 THEN 0 ELSE 1 END AS Include_In_Total, 
	TOPR.Proj_Task_Amt_Id, TOPR.Std_Job_Op_Id,
	SJOP.Use_Credit_Price, SJOP.Full_Credit
	FROM         
	tblStdJobOperationParts AS SJOP 
		INNER JOIN
	tblStdJobOperations AS SJO 
		ON SJOP.StdJobOperationId = SJO.StdJobOperationId 
		INNER JOIN
	#z_TASK_OPERATION AS TOPR 
		ON SJO.StdJobOperationId = TOPR.Std_Job_Op_Id

	SET @Counter=@@ROWCOUNT	

	--Only std jobs have partid
	IF @Counter>0
	BEGIN	
		UPDATE TOPP SET 
		Strategy_Unit_Price=(CASE WHEN TOPP.Use_Credit_Price = 0 THEN PP.Part_Sell 
								 WHEN TOPP.Full_credit = 1 THEN PP.Part_Sell - PP.Full_Credit_Sell 
								 ELSE PP.Part_Sell- PP.Partial_Credit_Sell END) * TOPR.Parts_Usage_Factor*PPA.Part_Price_Adjustment_Factor
		FROM
		#z_TASK T
			INNER JOIN
		#z_TASK_OPERATION TOPR
			ON T.TaskId=TOPR.Task_Id
			INNER JOIN
		#z_TASK_OPERATION_PART TOPP
			ON TOPR.Task_Operation_Id=TOPP.Task_Operation_Id
			INNER JOIN	
		tblParts P 
			ON TOPP.Part_Id = P.PartId 
			INNER JOIN
		tblPartPrices PP 
			ON P.PartId = PP.PartId
			INNER JOIN
		PART_PRICE_ADJUSTMENT PPA
			ON P.Part_Type_Id=PPA.Part_Type_ID
		WHERE PP.Price_Group_ID=T.Price_Group_ID AND 
		PP.CurrencyId=@PrimaryCurrencyId AND 
		PPA.Fleet_ID=T.FleetId

	END

	--Task Operation labour std jobs
	INSERT INTO #z_TASK_OPERATION_LABOUR(
	Task_Operation_Id,Work_Group_Id,Labour_Activity_Id,Labour_Activity,Strategy_Labour_Hrs,
	Strategy_Labour_Rate,Include_In_Total)
	SELECT TOPR.Task_Operation_Id,TOPR.Work_Group_Id,SJOL.Labour_Activity_Id,
	SJOL.Std_Job_Operation_Labour_Desc,SUM(SJOL.Labour_Hrs) AS Labour_Hrs,
	SUM(ISNULL(LR.LabourRatePerHour, SJOL.Sell_Rate)) AS Strategy_Labour_Rate,
	CASE TOPR.Overwrite_Costs WHEN 1 THEN 0 ELSE 1 END AS Include_In_Total
	FROM
	#z_TASK T
		INNER JOIN
	#z_TASK_OPERATION TOPR
		ON T.TaskId=TOPR.Task_Id
		INNER JOIN
	STD_JOB_OPERATION_LABOUR SJOL
		ON TOPR.Std_Job_Op_Id=SJOL.Std_Job_Operation_ID
		LEFT OUTER JOIN
	LABOUR_RATE_DEF_V LR
		ON SJOL.Labour_Activity_Id=LR.LabourActivityId AND
		   LR.BranchId=T.BranchId AND LR.CurrencyId=@PrimaryCurrencyId
	GROUP BY TOPR.Task_Operation_Id, TOPR.Work_Group_Id,
	SJOL.Labour_Activity_ID,Std_Job_Operation_Labour_Desc,TOPR.Overwrite_Costs

	--Task Operation Misc from std jobs
	INSERT INTO #z_TASK_OPERATION_MISC(
	Task_Operation_Id,Task_Operation_Misc_Desc,Misc_Category_Id,Strategy_Sell,Include_In_Total)
	SELECT
	TOPR.Task_Operation_Id,SJOM.Std_Job_Operation_Misc_Desc AS Task_Operation_Misc_Desc,
	SJOM.Misc_Category_Id AS Misc_Category_Id,SUM(SJOM.Sell) AS Strategy_Sell,
	CASE TOPR.Overwrite_Costs WHEN 1 THEN 0 ELSE 1 END AS Include_In_Total
	FROM
	#z_TASK_OPERATION TOPR
		INNER JOIN
	STD_JOB_OPERATION_MISC SJOM
		ON TOPR.Std_Job_Op_Id=SJOM.Std_Job_Operation_ID
	GROUP BY TOPR.Task_Operation_Id,Std_Job_Operation_Misc_Desc,
	SJOM.Misc_Category_Id,TOPR.Overwrite_Costs
END

--Task operation parts from std jobs with overwrite costs set
-- Add 1 line to the 1st operation
IF EXISTS(SELECT Task_Operation_Id FROM #z_TASK_OPERATION WHERE Std_Job_Op_Id>0 AND Overwrite_Costs=1)
BEGIN
	INSERT INTO #z_TASK_OPERATION_PART(
	Task_Operation_Id, Part_Id, Strategy_Qty, Pct_Strategy_Probability, 
	Include_In_Total, Proj_Task_Amt_Id, Std_Job_Op_Id,Use_Credit_Price,Full_Credit,
	Strategy_Unit_Price)
	SELECT
	TOPR.Task_Operation_Id, NULL AS Part_Id, 1 AS Strategy_Qty, 
	100 AS Pct_Strategy_Probability, 1 AS Include_In_Total, 
	TOPR.Proj_Task_Amt_Id, TOPR.Std_Job_Op_Id,0 AS Use_Credit_Price,0 AS Full_Credit,
	/*VV 11/01/10*/ISNULL(TOPR.Parts_Cost,0) AS Strategy_Unit_Price
	FROM
	#z_TASK_OPERATION TOPR
		INNER JOIN
	(SELECT  Task_Id,
	MIN(Task_Operation_Id) AS Task_Operation_Id
	FROM  
	#z_TASK_OPERATION 	
	WHERE Overwrite_Costs=1 AND Std_Job_Op_Id>0
	GROUP BY Task_Id,Std_Job_Id,Proj_Task_Amt_Id) A
		ON TOPR.Task_Operation_Id=A.Task_Operation_Id

	INSERT INTO #z_TASK_OPERATION_LABOUR(
	Task_Operation_Id,Work_Group_Id,Labour_Activity_Id,Labour_Activity,Strategy_Labour_Hrs,Strategy_Labour_Rate,
	Include_In_Total)
	SELECT
	TOPR.Task_Operation_Id,NULL AS Work_Group_Id,NULL AS Labour_Activity_Id,
	NULL AS Labour_Activity,1 AS Strategy_Labour_Hrs,TOPR.Labour_Cost AS Strategy_Labour_Rate,
	1 AS Include_In_Total
	FROM
	#z_TASK_OPERATION TOPR
		INNER JOIN
	(SELECT  Task_Id,
	MIN(Task_Operation_Id) AS Task_Operation_Id
	FROM  
	#z_TASK_OPERATION 	
	WHERE Overwrite_Costs=1 AND Std_Job_Op_Id>0
	GROUP BY Task_Id, Std_Job_Id,Proj_Task_Amt_Id) A
		ON TOPR.Task_Operation_Id=A.Task_Operation_Id

	INSERT INTO #z_TASK_OPERATION_MISC(
	Task_Operation_Id,Task_Operation_Misc_Desc,Misc_Category_Id,Strategy_Sell,Include_In_Total)
	SELECT
	TOPR.Task_Operation_Id,TOPR.Task_Operation AS Task_Operation_Misc_Desc,
	@Def_Misc_Category_Id AS Misc_Category_Id,TOPR.Misc_Cost AS Strategy_Sell,
	1 AS Include_In_Total
	FROM
	#z_TASK_OPERATION TOPR
		INNER JOIN
	(SELECT  Task_Id,
	MIN(Task_Operation_Id) AS Task_Operation_Id
	FROM  
	#z_TASK_OPERATION 	
	WHERE Overwrite_Costs=1 AND Std_Job_Op_Id>0
	GROUP BY Task_Id,Std_Job_Id,Proj_Task_Amt_Id) A
		ON TOPR.Task_Operation_Id=A.Task_Operation_Id
END

--Sort order
CREATE TABLE #z_OP_SORT_ORDER(ListId int IDENTITY(1,1),Task_Id int,Task_Operation_Id int
 PRIMARY KEY(Task_Id,Task_Operation_Id))

INSERT INTO #z_OP_SORT_ORDER(Task_Id,Task_Operation_Id)
SELECT Task_Id,Task_Operation_Id FROM #z_TASK_OPERATION
ORDER BY Task_Id,Task_Operation_Id

UPDATE O SET O.SortOrder=SO.ListId-A.MinListId+1
FROM
(SELECT Task_Id, MIN(ListId) AS MinListId FROM #z_OP_SORT_ORDER GROUP BY Task_Id) A
	INNER JOIN
#z_OP_SORT_ORDER SO
	ON A.Task_Id=SO.Task_Id
	INNER JOIN
#z_TASK_OPERATION O	
	ON SO.Task_Id=O.Task_Id AND SO.Task_Operation_Id=O.Task_Operation_Id

--VV 24-Oct-2008
--Library Documents
--VV 2-Mar-2009 Added ProjTaskOptId
CREATE TABLE #z_Jobs(JobCodeId int,ProjTaskOptId int)

INSERT INTO #z_Jobs(JobCodeId,ProjTaskOptId)
SELECT DISTINCT 
ISNULL(PTA.JobCodeId,CASE WHEN COUNT(DISTINCT ISNULL(CAD.Job_Code_Id,0))=1 THEN MAX(CAD.Job_Code_Id) ELSE -1 END) AS JobCodeId,
PTA.ProjTaskOptId
FROM
--AL: 09/12/09
(SELECT ProjTaskOptId FROM #z_TASK GROUP BY ProjTaskOptId) T
	INNER JOIN
tblProjTaskAmts PTA
	ON T.ProjTaskOptId=PTA.ProjTaskOptId
	LEFT JOIN
COST_ALLOCATION CA
	ON PTA.ProjTaskAmtId=CA.Proj_Task_Amt_Id
	LEFT JOIN
COST_ALLOCATION_DETAIL CAD
	ON CA.Cost_Allocation_Id=CAD.Cost_Allocation_Id
GROUP BY PTA.ProjTaskOptId,PTA.JobCodeId


/*VV CR8294*/
UPDATE O SET
O.Work_Group_Id=ISNULL(O.Work_Group_Id,T.Work_Group_Id),
O.Cost_Bearer_Id =ISNULL(O.Cost_Bearer_Id,T.Cost_Bearer_Id),
O.Cost_Centre_Id =ISNULL(O.Cost_Centre_Id,T.Cost_Centre_Id)
FROM
#z_TASK_OPERATION O
	INNER JOIN
#z_TASK T
	ON O.Task_Id=T.TaskId

UPDATE L SET
L.CostBearerID=ISNULL(L.CostBearerID,O.Cost_Bearer_Id),
L.CostCentreID =ISNULL(L.CostCentreID,O.Cost_Centre_Id),
L.ExpenseElementID =ISNULL(L.ExpenseElementID,O.Labour_Cost_Expense_Id ),
L.Work_Group_ID =ISNULL(L.Work_Group_ID,O.Work_Group_Id)
FROM
#z_TASK_OPERATION_LABOUR L
	INNER JOIN
#z_TASK_OPERATION O
	ON L.Task_Operation_Id=O.Task_Operation_Id

UPDATE P SET
P.CostBearerID=ISNULL(P.CostBearerID,O.Cost_Bearer_Id),
P.CostCentreID =ISNULL(P.CostCentreID,O.Cost_Centre_Id),
P.ExpenseElementID =ISNULL(P.ExpenseElementID,O.Parts_Cost_Expense_Id),
P.WorkGroupID =ISNULL(P.WorkGroupID,O.Work_Group_Id)
FROM
#z_TASK_OPERATION_PART P
	INNER JOIN
#z_TASK_OPERATION O
	ON P.Task_Operation_Id=O.Task_Operation_Id

UPDATE M SET
M.CostBearerID=ISNULL(M.CostBearerID,O.Cost_Bearer_Id),
M.CostCentreID =ISNULL(M.CostCentreID,O.Cost_Centre_Id),
M.ExpenseElementID =ISNULL(M.ExpenseElementID,O.Misc_Cost_Expense_Id),
M.WorkGroupID =ISNULL(M.WorkGroupID,O.Work_Group_Id)
FROM
#z_TASK_OPERATION_MISC M
	INNER JOIN
#z_TASK_OPERATION O
	ON M.Task_Operation_Id=O.Task_Operation_Id

/*
--Debug
SELECT * FROM #z_TASK_OPERATION
SELECT * FROM #z_TASK_OPERATION_PART
SELECT * FROM #z_TASK_OPERATION_LABOUR
SELECT * FROM #z_TASK_OPERATION_MISC

DROP TABLE #z_ProjTask,#z_TASK,#z_ProjTaskAmt,#z_TASK_OPERATION,#z_TASK_OPERATION_PART,#z_TASK_OPERATION_LABOUR,#z_TASK_OPERATION_MISC,#z_OP_SORT_ORDER,#z_Jobs
RETURN
*/

--AL: 06/04/10
DECLARE @PartCount int, @AutoLookupPartsReadyStatus bit
EXEC AMT_TYPED_VARIABLE_GET_P @Value_Name='AutoLookupPartsReadyStatus',  @Varchar_Value=@AutoLookupPartsReadyStatus OUTPUT

IF ISNULL(@AutoLookupPartsReadyStatus,0)<>0
BEGIN
	SELECT @PartCount=COUNT(*)
	FROM
		(SELECT CAST(CASE WHEN Pct_Strategy_Probability<100.00 THEN 0.00 
				ELSE Strategy_Qty END AS float) *
				CAST(Include_In_Total AS float) AS Planned_Qty
		FROM #z_TASK_OPERATION_PART)P
	WHERE Planned_Qty>0
	
	UPDATE #z_TASK
	SET PartsStatusRequired=CASE WHEN ISNULL(@PartCount,0)=0 THEN 0 ELSE 1 END
END
ELSE
	UPDATE #z_TASK
	SET PartsStatusRequired=@PartsStatusRequired
	
/*VV AmtMobile 
Add checksheets for the operations created from standard jobs
*/
IF EXISTS(SELECT Task_Operation_Id FROM #z_TASK_OPERATION WHERE Std_Job_Op_Id>0)
BEGIN
	
	INSERT INTO #z_EW_WORKORDER(TaskOperationId,EWTitle,UniqueKey,EWTemplateId)
	SELECT O.Task_Operation_Id AS TaskOperationId, E.EWTitle,NEWID() AS UniqueKey,
	E.EWTemplateId 
	FROM 
	EW_TEMPLATE E
		INNER JOIN
	STD_JOB_OPERATION_EW_TEMPLATE J
		ON E.EWTemplateId=J.EWTemplateId
		INNER JOIN
	#z_TASK_OPERATION O
		ON J.StdJobOperationId=O.Std_Job_Op_Id
	
END

/* VV AmtMobile
Add checksheets from ew templates attached to the strategy task jobs. If there are standard
jobs attached to the strategy task jobs, add checksheets from strategy jobs only to the first
operation for the strategy task job
*/
INSERT INTO #z_EW_WORKORDER(TaskOperationId,EWTitle,UniqueKey,EWTemplateId)
SELECT O.Task_Operation_Id AS TaskOperationId, E.EWTitle,NEWID() AS UniqueKey,
E.EWTemplateId 
FROM 
EW_TEMPLATE E
	INNER JOIN
STRATEGY_TASK_JOB_EW_TEMPLATE STJ
	ON E.EWTemplateId=STJ.EWTemplateId
	INNER JOIN
(SELECT Proj_Task_Amt_Id,MIN(Task_Operation_Id) AS Task_Operation_Id 
FROM #z_TASK_OPERATION WHERE Proj_Task_Amt_Id>0 GROUP BY Proj_Task_Amt_Id) O
	ON STJ.ProjTaskAmtId=O.Proj_Task_Amt_Id

	
INSERT INTO #z_EW_WORKSTEP(EWWorkorderId,EWStepTemplateId,Sequence,EWWorkstepTitle,
ComponentCodeId,CMCodeId,Instructions,DocumentGUID,DocumentExt,Safety,Environmental,
UniqueKey)	

SELECT E.EWWorkorderId,S.EWStepTemplateId,S.Sequence,S.EWStepTitle AS EWWorkstepTitle,
S.ComponentCodeId,S.CMCodeId,S.Instructions,
CASE ISNULL(S.DocumentGUID,'') WHEN '' THEN NULL ELSE NEWID() END AS DocumentGUID,
S.DocumentExt,S.Safety,
S.Enviromental,NEWID() AS UniqueKey
FROM
EW_WORKSTEP_TEMPLATE S
	INNER JOIN
#z_EW_WORKORDER E
	ON S.EWTemplateId=E.EWTemplateId

	

SET XACT_ABORT ON
BEGIN TRANSACTION

--Add Task
INSERT INTO TASK(
Description, 		
Task_Status_ID, 
Eqp_Plan_ID, 
Event_Id,
Task_Type_ID, 
Component_Code_ID, 
Modifier_ID, 
Application_Code_ID, 
Occurrence_Type_Id, 
Priority_ID, 
Source_ID, 
Task_Mode_ID, 
--Parts_Resources_Identified, 		
PartsStatusRequired, 		
PartsStatusOrdered, 		
PartsStatusReady, 		
Strategy_Usage, 
Strategy_QUOM_ID, 
Strategy_Proj_Task_Opt_ID, 
Planned_Proj_Task_Opt_ID, 
Strategy_Date, 
Strategy_Locked, 		 
Strategy_Repair_Description, 
Cost_Bearer_ID, 		
Cause_Id,
Symptom_Id,		
Repair_Code_Id,
Final_Change,
Risk_Life_Left, 
Strategy_Frequency,
Last_Performed, 
Last_Scheduled, 
Last_Performed_Date,
Last_Scheduled_Date,
Site_Id,
Cost_Centre_Id, 
Branch_Id,
Part_Entry_Distribution_Code_Id, 
Labour_Entry_Distribution_Code_Id, 
Misc_Entry_Distribution_Code_Id,
Task_Authorised,
Customer_Id,
Parts_Cost_Expense_Id, 
Labour_Cost_Expense_Id, 
Misc_Cost_Expense_Id, 
AMTPlanningModeId,
Specific_Operation_Codes,
Expected_Labor_Hours,
Expected_Duration,
Warranty_Days,
Warranty_Usage,
ChangeoutCategoryId,
Task_Header_Id,
/*VV 1/11/2007*/
Work_Group_Id,
Def_Work_Group_Id,
--AL: 29/03/10
Health_Safety_ID,
LastNotified)

SELECT
T.Description, 		
@TaskStatusO, 
T.EqpPlanID,
NULL AS Event_Id, 
T.TaskTypeID, 
T.ComponentCodeID, 
T.ModifierID, 
T.ApplicationCodeID, 
T.OccurrenceTypeId, 
@Priority_ID AS Priority_ID, 
@Source_ID AS Source_ID, 
T.TaskModeID, 
--@Parts_Resources_Identified AS Parts_Resources_Identified, 		
T.PartsStatusRequired AS PartsStatusRequired, 		--AL: 06/04/10
@PartsStatusOrdered AS PartsStatusOrdered, 		
@PartsStatusReady AS PartsStatusReady, 		
T.NextOcc AS Strategy_Usage, 
T.QUOMId AS Strategy_QUOM_ID, 
T.ProjTaskOptId AS Strategy_Proj_Task_Opt_ID,
T.ProjTaskOptId AS  Planned_Proj_Task_Opt_ID,
T.NextOccDate AS Strategy_Date, 
T.PlanDateLocked AS Strategy_Locked,	 
ISNULL(T.StrategyRepairDescr,'') AS Strategy_Repair_Description,
ISNULL(B.Cost_Bearer_Id,T.Cost_Bearer_ID) AS Cost_Bearer_ID, 		
@Cause_Id AS Cause_Id,
@Symptom_Id AS Symptom_Id,		
ISNULL(C.JobCodeId,@Repair_Code_Id) AS Repair_Code_Id,
ISNULL(ISNULL(A.FinalChange,T.LastOcc),T.[First]) AS Final_Change,
ISNULL(dbo.RISK_LIFE_LEFT_F(T.Frequency,T.EndUsage,ISNULL(ISNULL(A.FinalChange,T.LastOcc),T.[First])),0) AS Risk_Life_Left,
T.Frequency AS Strategy_Frequency,
T.Last_Performed, 
T.Last_Scheduled, 
T.Last_Performed_Date,
T.Last_Scheduled_Date,
T.SiteId,
ISNULL(B.Cost_Centre_Id,T.Cost_Centre_Id) AS Cost_Centre_Id, 
T.BranchId,
ISNULL(B.Parts_Entry_Distribution_Code_Id,T.Parts_Entry_Distribution_Code_Id) AS Part_Entry_Distribution_Code_Id, 
ISNULL(B.Labour_Entry_Distribution_Code_Id,T.Labour_Entry_Distribution_Code_Id) AS Labour_Entry_Distribution_Code_Id, 
ISNULL(B.Misc_Entry_Distribution_Code_Id,T.Misc_Entry_Distribution_Code_Id) AS Misc_Entry_Distribution_Code_Id,

--AL: 03/02/09
--CASE T.PlanDateLocked WHEN 1 THEN 1 ELSE 0 END AS Task_Authorised,
CASE @AuthorisationMode
	WHEN @AuthModeNone THEN 1
	/*VV #187*/ ELSE 0
	/*WHEN @AuthModeAdvanced THEN 0
	ELSE CASE WHEN ISNULL(T.ProjTaskOptId,0)>0 THEN 1 ELSE 0 END */
END AS Task_Authorised,

T.Customer_Id,
B.Parts_Cost_Expense_Id,
B.Labour_Cost_Expense_Id,
B.Misc_Cost_Expense_Id, 
T.Advanced_Planning AS AMTPlanningModeId,
@SpecificOpCodes AS SpecificOperationCodes,
C.Expected_Labor_Hours,
C.Expected_Duration,
T.Warranty_Days,
T.Warranty_Usage,
@ChangeoutCategoryId AS ChangeoutCategoryId,
T.Task_Header_Id,
/*VV 1/11/2007*/
ISNULL(B.Work_Group_Id,T.Work_Group_Id) AS Work_Group_Id,
ISNULL(B.Work_Group_Id,T.Def_Work_Group_Id) AS Def_Work_Group_Id,
--AL: 29/03/10
@Health_Safety_ID,
GETDATE()

FROM 
(--take codes from the first operation
SELECT O.Task_Id,O.Cost_Bearer_Id,O.Cost_Centre_Id,O.Parts_Cost_Expense_Id,
O.Labour_Cost_Expense_Id,O.Misc_Cost_Expense_Id,O.Parts_Entry_Distribution_Code_Id,
O.Labour_Entry_Distribution_Code_Id,O.Misc_Entry_Distribution_Code_Id,/*VV 1/11/2007*/O.Work_Group_Id
FROM 
#z_Task_Operation O
	INNER JOIN
(SELECT Task_Id,MIN(Task_Operation_Id) AS Task_Operation_Id FROM #z_Task_Operation GROUP BY Task_Id) A
	ON O.Task_Operation_Id=A.Task_Operation_Id) B
	INNER JOIN
#z_TASK T
	ON B.Task_Id=T.TaskId
	INNER JOIN
(SELECT PTA.ProjTaskOptId,
CASE COUNT(ProjTaskAmtId) WHEN 1 THEN MAX(JobCodeId) ELSE NULL END AS JobCodeId,
SUM(Labour_Hrs) AS Expected_Labor_Hours,SUM(Duration) AS Expected_Duration
	FROM 
#z_ProjTaskAmt PTA
	INNER JOIN
#z_TASK Z
	ON PTA.ProjTaskOptId=Z.ProjTaskOptId
GROUP BY PTA.ProjTaskOptId) C
	ON T.ProjTaskOptId=C.ProjTaskOptId
	LEFT OUTER JOIN
(SELECT PTOC.ProjTaskId,MAX(PTOC.OccUsage) AS FinalChange FROM 
tblProjTaskOccs PTOC INNER JOIN #z_TASK Z1
	ON PTOC.ProjTaskId=Z1.ProjTaskId
GROUP BY PTOC.ProjTaskId) A
		ON T.ProjTaskId=A.ProjTaskId

--Set ID for the new tasks
UPDATE Z SET Z.NewTaskId=T.Task_ID
FROM
#z_TASK Z
	INNER JOIN
TASK T
	ON Z.ProjTaskOptId=T.Strategy_Proj_Task_Opt_Id
	--AL: 09/12/09
	AND Z.NextOccDate=T.Strategy_Date
WHERE T.Task_Status_ID=@TaskStatusO



--Task Operations
INSERT INTO TASK_OPERATION(
Task_Id, SortOrder,
Task_Operation,Planned_Duration,
Cost_Bearer_Id,Cost_Centre_Id, 
Parts_Cost_Expense_Id, Labour_Cost_Expense_Id, Misc_Cost_Expense_Id,
Parts_Entry_Distribution_Code_Id,Labour_Entry_Distribution_Code_Id,
Misc_Entry_Distribution_Code_Id,Component_Code_Id, 
Modifier_Code_Id,Job_Code_Id, Work_Group_Id, Health_Safety_Id, 
Proj_Task_Amt_Id,Std_Job_Op_Id)
SELECT     
T.NewTaskId AS Task_Id, 
O.SortOrder,
O.Task_Operation,O.Planned_Duration,
ISNULL(O.Cost_Bearer_Id,T.Cost_Bearer_Id) AS Cost_Bearer_Id,
ISNULL(O.Cost_Centre_Id, T.Cost_Centre_Id) AS Cost_Centre_Id,
O.Parts_Cost_Expense_Id, O.Labour_Cost_Expense_Id, O.Misc_Cost_Expense_Id,
ISNULL(O.Parts_Entry_Distribution_Code_Id,T.Parts_Entry_Distribution_Code_Id) AS Parts_Entry_Distribution_Code_Id,
ISNULL(O.Labour_Entry_Distribution_Code_Id,T.Labour_Entry_Distribution_Code_Id) AS Labour_Entry_Distribution_Code_Id,
ISNULL(O.Misc_Entry_Distribution_Code_Id,T.Misc_Entry_Distribution_Code_Id) AS Misc_Entry_Distribution_Code_Id,
O.Component_Code_Id, 
O.Modifier_Code_Id,O.Job_Code_Id, O.Work_Group_Id, O.Health_Safety_Id, 
O.Proj_Task_Amt_Id,O.Std_Job_Op_Id
FROM 
#z_TASK_OPERATION O		
	INNER JOIN
#z_TASK T
	ON O.Task_Id=T.TaskId


--Update the temp table for task operations with the new id
UPDATE Z
SET NewTaskOpId=O.Task_Operation_Id
FROM
#z_TASK T
	INNER JOIN
#z_TASK_OPERATION Z 
	ON T.TaskId=Z.Task_Id
	INNER JOIN
TASK_OPERATION O 
	ON T.NewTaskId =O.Task_Id AND Z.SortOrder=O.SortOrder

--Library documents


INSERT INTO TASK_DOCUMENT(Task_Id,Work_Scope_Document_Id)
SELECT DISTINCT T.NewTaskId AS Task_Id, WSJD.Document_Id AS Work_Scope_Document_Id
FROM
WORK_SCOPE_JOB WSJ
	INNER JOIN
#z_TASK T
	ON WSJ.Component_Code_Id=T.ComponentCodeId AND
	   WSJ.Task_Type_Id=T.TaskTypeId AND
	   WSJ.Model_Id=T.ModelId
	INNER JOIN
WORK_SCOPE_JOB_DOCUMENT WSJD
	ON WSJ.Work_Scope_Job_Id=WSJD.Work_Scope_Job_Id
	INNER JOIN
#z_Jobs J
	ON WSJ.Job_Code_Id=J.JobCodeId AND T.ProjTaskOptId=J.ProjTaskOptId

/*VV 3-May-2009*/
INSERT INTO TASK_DOCUMENT(Task_Id, Work_Scope_Document_Id)
SELECT DISTINCT T.NewTaskId AS Task_Id,PTE.WorkScopeDocumentId
FROM         
PROJ_TASK_DOCUMENT PTE
	INNER JOIN
#z_TASK T
	ON PTE.ProjTaskId=T.ProjTaskId
	LEFT JOIN
TASK_DOCUMENT TD
	ON T.NewTaskId=TD.Task_Id AND PTE.WorkScopeDocumentId=TD.Work_Scope_Document_Id
WHERE TD.Task_Id IS NULL

INSERT INTO TASK_EXTERNAL_DOCUMENT(TaskId, DocumentLink, DocumentName)
SELECT DISTINCT T.NewTaskId AS TaskId,PTE.DocumentLink, PTE.DocumentName
FROM         
PROJ_TASK_EXTERNAL_DOCUMENT PTE
	INNER JOIN
#z_TASK T
	ON PTE.ProjTaskId=T.ProjTaskId
	
--Task operations
IF EXISTS(SELECT Task_Operation_Part_id FROM #z_TASK_OPERATION_PART)	
BEGIN

	INSERT INTO TASK_OPERATION_PART(Task_Operation_Id,Part_Number,
	Part_Description,Strategy_Qty, Pct_Strategy_Probability, 
	Strategy_Unit_Price,Planned_Qty,Planned_Unit_Price,Include_In_Total,		
	IsEditable,Last_Mod_By_User_ID,Last_Mod_Date,Create_By_User_ID,
	Create_Date,SourceOfSupplyID,
	--AL: 03/04/09
	ActualTotalSell,ActualTotalCost,
	--AL: 07/04/09
	FinPeriod,CurrencyId,ExchangeRate,
	/*VV CR8294*/
	CostBearerID,CostCentreID ,ExpenseElementID ,WorkGroupID)

	SELECT     
	O.NewTaskOpId AS Task_Operation_Id,PA.Part AS Part_Number,
	ISNULL(PA.PartDescription,@DefDescription) AS Part_Description,
	P.Strategy_Qty, P.Pct_Strategy_Probability, /*VV 11/01/10*/ISNULL(P.Strategy_Unit_Price,0) AS Strategy_Unit_Price,	
	CAST(CASE WHEN P.Pct_Strategy_Probability<100.00 THEN 0.00 
	ELSE P.Strategy_Qty END AS float) *
	CAST(P.Include_In_Total AS float) AS Planned_Qty,
	ISNULL(Strategy_Unit_Price,0) AS Planned_Unit_Price,	
	P.Include_In_Total,		
	0 AS IsEditable,
	0 AS Last_Mod_By_User_ID,GETDATE() AS Last_Mod_Date, 
	0 AS Create_By_User_ID,GETDATE() AS Create_Date,
	PA.Source_Of_Supply_ID,
	--AL: 03/04/09
	0 AS ActualTotalSell,
	CASE WHEN ISNULL(@ManualEntryActualsParts,1)=3 THEN NULL ELSE 0 END AS ActualTotalCost,
	--AL: 07/04/09
	dbo.TASK_JOBDATE_F(0,O.NewTaskOpId,2),
	@PrimaryCurrencyId,1,
	/*VV CR8294*/
	P.CostBearerID,P.CostCentreID ,P.ExpenseElementID ,P.WorkGroupID

	FROM   	 
	#z_TASK_OPERATION O 		
		INNER JOIN
	#z_TASK_OPERATION_PART P 
		ON O.Task_Operation_Id = P.Task_Operation_Id
		LEFT OUTER JOIN
	tblParts PA
		ON P.Part_Id=PA.PartId
		
	
END	

--AL: 10/02/09
SET @CreatedTaskID= REPLACE(REPLACE((select DISTINCT NewTaskId from #z_TASK for xml raw),'<row NewTaskId="',''),'"/>',',')

--Operation labour
IF EXISTS(SELECT Task_Operation_Labour_id FROM #z_TASK_OPERATION_LABOUR)	
BEGIN
	INSERT INTO TASK_OPERATION_LABOUR(
	Task_Operation_Id, Labour_Activity,Strategy_Labour_Hrs,
	Strategy_Labour_Rate,
	Labour_Qty,Planned_Labour_Hrs,
	Planned_Labour_Rate,
	Work_Group_Id,Labour_Activity_Id, Include_In_Total, 
	Create_By_User_Id,Create_Date,
	Last_Mod_By_User_Id,Last_Mod_Date,
	IsEditable,
	--AL: 03/04/09
	ActualTotalSell,ActualTotalCost,
	--AL: 07/04/09
	FinPeriod,CurrencyId,ExchangeRate,
	/*VV CR8294*/
	CostBearerID,CostCentreID ,ExpenseElementID)

	SELECT
	O.NewTaskOpId AS Task_Operation_Id, L.Labour_Activity,L.Strategy_Labour_Hrs,
	L.Strategy_Labour_Rate,
	1 AS Planned_Qty,
	L.Strategy_Labour_Hrs *
	CAST(L.Include_In_Total As float) AS Planned_Labour_Hrs,
	L.Strategy_Labour_Rate AS Planned_Labour_Rate,
	L.Work_Group_Id,L.Labour_Activity_Id, L.Include_In_Total, 
	0 AS Create_By_User_Id,GETDATE() AS Create_Date,
	0 AS Last_Mod_By_User_Id,GETDATE() AS Last_Mod_Date,
	0 AS IsEditable,
	--AL: 03/04/09
	0 AS ActualTotalSell,
	CASE WHEN ISNULL(@ManualEntryActualsLabour,1)=3 THEN NULL ELSE 0 END AS ActualTotalCost,
	--AL: 07/04/09
	dbo.TASK_JOBDATE_F(0,O.NewTaskOpId,2),
	@PrimaryCurrencyId,1,
	/*VV 8294*/
	L.CostBearerID,L.CostCentreID ,L.ExpenseElementID

	FROM 
	#z_TASK_OPERATION O 		
		INNER JOIN
	#z_TASK_OPERATION_LABOUR L
		ON O.Task_Operation_Id = L.Task_Operation_Id
END
--Operation misc
IF EXISTS(SELECT Task_Operation_Misc_Id FROM #z_TASK_OPERATION_MISC)	
BEGIN
	INSERT INTO TASK_OPERATION_MISC(
	Task_Operation_Id,Task_Operation_Misc_Desc,Strategy_Sell,
	Planned_Sell,Misc_Category_Id,Include_In_Total, IsEditable,
	--AL: 03/04/09
	Actual_Sell,ActualCost,
	--AL: 07/04/09
	FinPeriod,CurrencyId,ExchangeRate,
	/*VV 8294*/
	CostBearerID,CostCentreID ,ExpenseElementID ,WorkGroupID)

	SELECT
	O.NewTaskOpId AS Task_Operation_Id,
	M.Task_Operation_Misc_Desc,
	M.Strategy_Sell,
	M.Strategy_Sell*CAST(M.Include_In_Total AS float) AS Planned_Sell,
	M.Misc_Category_Id, M.Include_In_Total, 
	0 AS IsEditable,
	--AL: 03/04/09
	0 AS Actual_Sell,
	CASE WHEN ISNULL(@ManualEntryActualsMisc,1)=3 THEN NULL ELSE 0 END AS ActualCost,
	--AL: 07/04/09
	dbo.TASK_JOBDATE_F(0,O.NewTaskOpId,2),
	@PrimaryCurrencyId,1,
	/*VV 8294*/
	M.CostBearerID,M.CostCentreID ,M.ExpenseElementID ,M.WorkGroupID

	FROM 
	#z_TASK_OPERATION O 		
		INNER JOIN
	#z_TASK_OPERATION_MISC m
		ON O.Task_Operation_Id = M.Task_Operation_Id
END

/*VV AmtMobile*/
IF EXISTS(SELECT * FROM #z_EW_WORKORDER)
BEGIN
	INSERT INTO EW_WORKORDER(TaskOperationId,EWTitle,UniqueKey,LastModByUserId,LastModDate)
	SELECT O.Task_Operation_Id AS TaskOperationId,E.EWTitle,E.UniqueKey,
	0 AS LastModByUserId, GETDATE() AS LastModDate 
	FROM 
	#z_EW_WORKORDER E
		INNER JOIN
	#z_TASK_OPERATION Z
		ON E.TaskOperationId=Z.Task_Operation_Id
		INNER JOIN
	TASK_OPERATION O
		ON Z.NewTaskOpId=O.Task_Operation_Id
		
	
	INSERT INTO EW_WORKSTEP(EWWorkorderId,EWStepTemplateId,Sequence,EWWorkstepTitle,
	ComponentCodeId,CMCodeId,Instructions,DocumentGUID,DocumentExt,Safety,Environmental,
	UniqueKey,LastModByUserId,LastModDate)
	SELECT EW.EWWorkorderId,S.EWStepTemplateId,S.Sequence,S.EWWorkstepTitle,S.ComponentCodeId,
	S.CMCodeId,S.Instructions,S.DocumentGUID,S.DocumentExt,S.Safety,S.Environmental,
	S.UniqueKey,0 AS LastModByUserId, GETDATE() AS LastModDate 
	FROM 
	#z_EW_WORKSTEP S
		INNER JOIN
	#z_EW_WORKORDER E
		ON S.EWWorkorderId=E.EWWorkorderId
		INNER JOIN
	EW_WORKORDER EW
		ON E.UniqueKey=EW.UniqueKey
		
	SET @CopyEWTemplateFiles=1
END


DROP TABLE #z_ProjTask,#z_TASK,#z_ProjTaskAmt,#z_TASK_OPERATION,#z_TASK_OPERATION_PART,#z_TASK_OPERATION_LABOUR,#z_TASK_OPERATION_MISC,#z_OP_SORT_ORDER,#z_Jobs

COMMIT TRANSACTION

--VV #1641 SET ANSI_WARNINGS ON  
SET NOCOUNT OFF

GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[STRATEGY_TASK_ADD_GRID_P]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[STRATEGY_TASK_ADD_GRID_P]
GO

create     Procedure [dbo].[STRATEGY_TASK_ADD_GRID_P]
/******************************************************************************
	File: 
	Name: STRATEGY_TASK_ADD_GRID_P

	Called By: EQSCPLIB.TaskGet

	Desc: Selects all strategy tasks for the selected equipment
             

	Auth: Veronika Vasylyeva
	Date: 4-Nov-2002
*******************************************************************************
		Change History
*******************************************************************************
	Date:		Author:			Description:
	--------	--------		----------------------------------------
	21 Feb 07	V Vasylyeva		modified to use task_header, speeded up
	01 Oct 09	AL				CR8304: modified order of returned columns
	26 Aug 11	V Vasylyeva		#2351: took out occurrence type
*******************************************************************************/
	/* Param List */
    @Eqp_Plan_ID int
AS


DECLARE @ProjTypeCurr int
SET @ProjTypeCurr=1

DECLARE @z_ProjTasks TABLE 
(ProjTaskOptId int,Task_Header_Id int,/*VV #2351 OccurrenceTypeId int,*/ManufacturerId int,
ExchangeRateId int PRIMARY KEY(ProjTaskOptId))

INSERT INTO @z_ProjTasks(ProjTaskOptId,Task_Header_Id,/*VV #2351 OccurrenceTypeId,*/ManufacturerId,
ExchangeRateId)
SELECT	PTO.ProjTaskOptId, PT.Task_Header_Id,/*VV #2351 PTO.OccurrenceTypeId,*/PT.ManufacturerId,
EPR.ExchangeRateId
FROM
		tblProjTaskOpts PTO	INNER JOIN
		tblProjTasks PT	ON PTO.ProjTaskId=PT.ProjTaskId	INNER JOIN
		tblEqpProjs EPR	ON PT.EqpProjId=EPR.EqpProjId
WHERE 
		PT.EqpPlanId=@Eqp_Plan_ID AND 
		EPR.Projection_Type_Id=@ProjTypeCurr AND
		PT.Unscheduled=0 


SELECT	PT.ProjTaskOptId,CONVERT(BIT,0) AS Selected,   
		TH.Description AS Description, /*VV #2351 OT.OccurrenceType + ' - ' + OT.OccurrenceTypeDesc AS OccType,*/ 
		A.PlanCost, A.PlanLabourHours,A.PlanDuration
FROM  
		@z_ProjTasks PT	/*VV #2351 INNER JOIN
		tblOccurrenceTypes OT ON PT.OccurrenceTypeId = OT.OccurrenceTypeId*/ INNER JOIN
		Task_Header TH ON PT.Task_Header_Id=TH.Task_Header_Id INNER JOIN
		(SELECT	PT.ProjTaskOptId, 
				SUM((a.TotalLabourCost * e.CumLaborEscalation + a.PartsCost * cpe.CumPartsEscalation + a.TotalMiscCost * e.CumMiscEscalation) / erc.ExRate) AS PlanCost, 
				SUM(a.LaborHours) AS PlanLabourHours, SUM(a.Duration) AS PlanDuration
		FROM         
				tblCostPartsEscalations cpe INNER JOIN
				tblCostEscalations e INNER JOIN
				@z_ProjTasks PT	INNER JOIN
				PROJ_TASK_AMT_COST_1_V a 
						ON PT.ProjTaskOptId = a.ProjTaskOptId 	
						ON e.EscalationDate <= a.Pricing_Date AND 
						   e.EndDate > a.Pricing_Date 
						ON cpe.CostEscalationId = e.CostEscalationId AND 
						   cpe.ManufacturerId = PT.ManufacturerId 	
					INNER JOIN
				tblExRates er ON PT.ExchangeRateId = er.ExRateID INNER JOIN
				tblExRateCurrencies erc ON er.ExRateID = erc.ExRateID AND a.CurrencyId = erc.CurrencyID
		GROUP BY PT.ProjTaskOptId) A ON PT.ProjTaskOptId=A.ProjTaskOptId
ORDER BY TH.Description


GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ELECTRONIC_WORKSCOPE_UPDATE_P]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[ELECTRONIC_WORKSCOPE_UPDATE_P]
GO

create     Procedure ELECTRONIC_WORKSCOPE_UPDATE_P  
/******************************************************************************  
   
 Name: ELECTRONIC_WORKSCOPE_UPDATE_P  
  
 Called By:   
  
 Desc: Updates,adds, imports Electronic workscope templates.   
  
  
 Auth: Veronika Vasylyeva  
 Date: 18 Feb 2011  
*******************************************************************************  
  Change History  
*******************************************************************************  
 Date:  Author:  Description:  
 -------- -------- ----------------------------------------  
  22 Aug 11	V Vasylyeva	#2186 - added part source of supply
  07 Apr 11  GD		 Changed the length of External_Identifier from 50 to 100  
  24 Mar 11  GD		 Changed the length of Task_Counter from 50 to 100
*******************************************************************************/  
@UserId int=0,  
@xml xml='',  
@DeletedEW varchar(max)='', 
@DeletedS varchar(max)='', 
@ImportBatchName varchar(1000) = '',  
@RecordsInserted int=0 OUTPUT,  
@RecordsUpdated int=0 OUTPUT,  
@NoErrors int=0 OUTPUT  
  
AS  

SET XACT_ABORT ON
  
DECLARE @hDoc int  
DECLARE @TypeVarchar int  
DECLARE @TypeInt int  
DECLARE @TypeFloat int  
DECLARE @TypeBit int  
DECLARE @TypeDateInt int  
DECLARE @ErrParsing int  
DECLARE @ErrBusinessRules int  
DECLARE @Count1 int 
DECLARE @Count2 int 
DECLARE @ErrCount int  
  
SET @ErrParsing=1  
SET @ErrBusinessRules=3  
  
SET @TypeVarchar =1  
SET @TypeInt =2  
SET @TypeFloat =3  
SET @TypeBit =4  
SET @TypeDateInt =5  
  
SET @ImportBatchName=ISNULL(@ImportBatchName,'')  

CREATE TABLE #z_EW_TEMPLATE(
	Line_No int IDENTITY(1,1),
	EWTemplateId int,
	EW_Title varchar(1000) COLLATE DATABASE_DEFAULT,
	SiteId int,
	FleetId int,
	ModelId int,
	ModelFamilyId int,
	EqpClassId int,
	PartId int,
	PartRatingId int,
	ManufacturerId int,
	ComponentCodeId int,
	ModifierId int,
	TaskTypeId int,
	ApplicationCodeId int,
	SubSystemId int,
	External_Identifier varchar(1000) COLLATE DATABASE_DEFAULT,
	Model varchar(1000) COLLATE DATABASE_DEFAULT,
	Equip_Group	varchar(1000) COLLATE DATABASE_DEFAULT,
	Equip_Class	varchar(1000) COLLATE DATABASE_DEFAULT,
	Manufacturer varchar(1000) COLLATE DATABASE_DEFAULT,
	Component_Code varchar(1000) COLLATE DATABASE_DEFAULT,
	Modifier_Code varchar(1000) COLLATE DATABASE_DEFAULT,
	Task_Type varchar(1000) COLLATE DATABASE_DEFAULT,
	Task_Counter varchar(1000) COLLATE DATABASE_DEFAULT,	
	Sub_System varchar(1000) COLLATE DATABASE_DEFAULT,
	Primary_Part_Number	varchar(1000) COLLATE DATABASE_DEFAULT,
	Part_Rating	varchar(1000) COLLATE DATABASE_DEFAULT,
	Site varchar(1000) COLLATE DATABASE_DEFAULT,
	Fleet varchar(1000) COLLATE DATABASE_DEFAULT,
	/*VV #2186*/
	Part_SOS varchar(1000)  COLLATE DATABASE_DEFAULT
	PRIMARY KEY (Line_No))
	
CREATE TABLE #z_EW_WORKSTEP_TEMPLATE(
	Line_No int IDENTITY(1,1),
	EWStepTemplateId int,
	EWTemplateId int,
	Sequence varchar(1000) COLLATE DATABASE_DEFAULT,
	ComponentCodeId int,
	EW_Step_Title varchar(1000) COLLATE DATABASE_DEFAULT,
	CMCodeId int,
	Instructions varchar(1000) COLLATE DATABASE_DEFAULT,
	Safety varchar(1000) COLLATE DATABASE_DEFAULT,
	Enviromental varchar(1000) COLLATE DATABASE_DEFAULT,
	Document_Name varchar(1000) COLLATE DATABASE_DEFAULT,
	Document_Ext varchar(1000) COLLATE DATABASE_DEFAULT,
	Component_Code varchar(1000) COLLATE DATABASE_DEFAULT,
	Element_Code VARCHAR(1000) COLLATE DATABASE_DEFAULT,
	Measurement_Type_Code VARCHAR(1000) COLLATE DATABASE_DEFAULT,
	Compartment varchar(1000) COLLATE DATABASE_DEFAULT,
	External_Identifier varchar(1000) COLLATE DATABASE_DEFAULT
	PRIMARY KEY (Line_No))
	
EXEC sp_xml_preparedocument @hDoc OUTPUT, @xml

INSERT INTO #z_EW_TEMPLATE(
EWTemplateId,EW_Title,SiteId,FleetId,ModelId,ModelFamilyId,EqpClassId,PartId,PartRatingId,
ManufacturerId,ComponentCodeId,ModifierId,TaskTypeId,ApplicationCodeId,SubSystemId,External_Identifier,Model,
Equip_Group,Equip_Class,Manufacturer,Component_Code,Modifier_Code,Task_Type,
Task_Counter,Sub_System,Primary_Part_Number,Part_Rating,Site,Fleet,/*VV 2186*/Part_SOS)
SELECT
EWTemplateId,EW_Title,NULLIF(SiteId,0) AS SiteId,NULLIF(FleetId,0) AS FleetId,
NULLIF(ModelId,0) AS ModelId,NULLIF(ModelFamilyId,0) AS ModelFamilyId,
NULLIF(EqpClassId,0) AS EqpClassId,NULLIF(PartId,0) AS PartId,
NULLIF(PartRatingId,0) AS PartRatingId,NULLIF(ManufacturerId,0) AS ManufacturerId,
NULLIF(ComponentCodeId,0) AS ComponentCodeId,NULLIF(ModifierId,0) AS ModifierId,
NULLIF(TaskTypeId,0) AS TaskTypeId,NULLIF(ApplicationCodeId,0) AS ApplicationCodeId,
NULLIF(SubSystemId,0) AS SubSystemId,
External_Identifier,Model,Equip_Group,Equip_Class,Manufacturer,Component_Code,Modifier_Code,Task_Type,Task_Counter,	
Sub_System,Primary_Part_Number,Part_Rating,Site,Fleet,/*VV 2186*/Part_SOS
FROM  OPENXML (@hDoc,N'/I_ELECTRONIC_WORKSCOPEs/I_ELECTRONIC_WORKSCOPE',2) WITH #z_EW_TEMPLATE  

SET @Count1=@@ROWCOUNT

INSERT INTO #z_EW_WORKSTEP_TEMPLATE(
EWStepTemplateId,EWTemplateId,Sequence,ComponentCodeId,EW_Step_Title,CMCodeId,Instructions,
Safety,Enviromental,Document_Name,Document_Ext,Component_Code,Element_Code,Measurement_Type_Code,
Compartment,External_Identifier)
SELECT
EWStepTemplateId,EWTemplateId,ISNULL(Sequence,0) AS Sequence,
NULLIF(ComponentCodeId,0) AS ComponentCodeId,EW_Step_Title,NULLIF(CMCodeId,0) AS CMCodeId,
Instructions,ISNULL(Safety,0) AS Safety,ISNULL(Enviromental,0) AS Enviromental,
Document_Name,Document_Ext,Component_Code,Element_Code,Measurement_Type_Code,
Compartment,External_Identifier
FROM  OPENXML (@hDoc,N'/I_ELECTRONIC_WORKSCOPEs/I_ELECTRONIC_WORKSCOPE_STEP',2) WITH #z_EW_WORKSTEP_TEMPLATE  

SET @Count2=@@ROWCOUNT

EXEC sp_xml_removedocument @hDoc 


CREATE TABLE #z_Message(MessageId int IDENTITY(1,1),Line_No int, Header bit,
ErrorDescription varchar(5000) COLLATE DATABASE_DEFAULT,  
ErrorType int,External_Identifier varchar(50) COLLATE DATABASE_DEFAULT
PRIMARY KEY(MessageId))  
  
/*For import*/  
IF ISNULL(@ImportBatchName,'')<>''  
BEGIN  
 --Check format of the data for import  
 --(@TypeId int,@FieldName varchar(max), @FieldLen int,@Value varchar(max),@CheckPositive bit)  
	IF @Count1>0
	BEGIN
		 INSERT INTO #z_Message(Line_No,ErrorDescription,ErrorType,Header,External_Identifier)  
		 SELECT Line_No, dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'EW_Title',100,EW_Title,0)+  
		 dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Model',20,Model,0)+  
		 dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'External_Identifier', 100,External_Identifier,0)+  
		 dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Equip_Group', 10,Equip_Group,0)+  
		 dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Equip_Class', 10,Equip_Class,0)+  
		 dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Manufacturer', 50,Manufacturer,0)+  
		 dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Component_Code', 10,Component_Code,0)+  
		 dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Modifier_Code', 50,Modifier_Code,0)+  
		 dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Task_Type', 50,Task_Type,0)+  
		 dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Task_Counter',100,Task_Counter,1)+  
		 dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Sub_System', 50,Sub_System,0)+  
		 dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Primary_Part_Number', 50,Primary_Part_Number,0)+  
		 dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Part_Rating', 50,Part_Rating,0)+  
		 dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Site', 50,Site,0)+  
		 dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Fleet', 50,Fleet,0)+
		 /*VV #2186*/
		 dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Part_SOS', 50,Part_SOS,0) AS ErrorDescription, 
		 @ErrParsing AS ErrorType,1 AS Header,External_Identifier  
		 FROM  
		 #z_EW_TEMPLATE  
	 
		 DELETE #z_Message WHERE ErrorDescription=''  
		  
		 IF EXISTS(SELECT Line_No FROM #z_Message WHERE Header=1)  
		 BEGIN  
			DELETE #z_EW_TEMPLATE WHERE External_Identifier IN(SELECT External_Identifier FROM #z_Message)  
		 END 
		 
		 
		 
		UPDATE Z SET 
		SiteId=S.SiteId,FleetId=F.FleetId,ModelId=MO.ModelId,
		ModelFamilyId=MF.Model_Family_Id,EqpClassId=EC.Eqp_Class_Id,
		PartId=P.PartId,PartRatingId=PR.PartRatingId,ManufacturerId=MA.ManufacturerId,
		ComponentCodeId=CC.ComponentCodeId,ModifierId=M.ModifierId,TaskTypeId=TT.TaskTypeId,
		ApplicationCodeId=AC.ApplicationCodeId,SubSystemId=SS.SubSystemId
		FROM
		#z_EW_TEMPLATE Z
			LEFT JOIN
		tblComponentCodes CC
			ON Z.Component_Code=CC.Code
			LEFT JOIN  
		tblTaskTypes TT  
			ON Z.Task_Type=TT.Code  
			LEFT JOIN  
		tblModifierCodes M  
			ON Z.Modifier_Code=M.Code  
			LEFT JOIN  
		tblApplicationCodes AC  
			ON Z.Task_Counter=AC.Code
			LEFT JOIN
		tblModels MO
			ON Z.Model=MO.Model
			LEFT JOIN
		MODEL_FAMILY MF
			ON Z.Equip_Group=MF.Model_Family_Code
			LEFT JOIN
		EQP_CLASS EC
			ON Z.Equip_Class=EC.Eqp_Class_Code
			LEFT JOIN
		tblManufacturers MA
			ON Z.Manufacturer=MA.ManufacturerDesc
			LEFT JOIN
		tblSubSystems SS
			ON Z.Sub_System=SS.SubSystem
			LEFT JOIN
		(SELECT P1.PartId, P1.Part,SOS.Sos_Code
		FROM
		tblParts P1
			INNER JOIN
		SOURCE_OF_SUPPLY SOS
			ON P1.Source_Of_Supply_ID=SOS.Source_Of_Supply_ID) P
			ON Z.Primary_Part_Number=P.Part 
			AND Z.Part_SOS=P.Sos_Code
			LEFT JOIN
		PART_RATING PR
			ON Z.Part_Rating=PR.PartRating
			LEFT JOIN
		tblSites S
			ON Z.Site=S.Site
			LEFT JOIN
		tblFleets F
			ON Z.Fleet=F.Fleet	
		
		INSERT INTO #z_Message(Line_No,ErrorDescription,ErrorType,Header,External_Identifier)  
		SELECT Line_No,'Cannot identify Site' as ErrorDescription,
		@ErrBusinessRules AS ErrorType,1 AS Header,External_Identifier
		FROM #z_EW_TEMPLATE Z WHERE SiteId IS NULL AND ISNULL(Site,'')<>''
		
		INSERT INTO #z_Message(Line_No,ErrorDescription,ErrorType,Header,External_Identifier)  
		SELECT Line_No,'Cannot identify Fleet' as ErrorDescription,
		@ErrBusinessRules AS ErrorType,1 AS Header,External_Identifier
		FROM #z_EW_TEMPLATE Z WHERE FleetId IS NULL AND ISNULL(Fleet,'')<>''
		
		INSERT INTO #z_Message(Line_No,ErrorDescription,ErrorType,Header,External_Identifier)  
		SELECT Line_No,'Cannot identify Model' as ErrorDescription,
		@ErrBusinessRules AS ErrorType,1 AS Header,External_Identifier
		FROM #z_EW_TEMPLATE Z WHERE ModelId IS NULL AND ISNULL(Model,'')<>''
		
		INSERT INTO #z_Message(Line_No,ErrorDescription,ErrorType,Header,External_Identifier)  
		SELECT Line_No,'Cannot identify Equipment Group' as ErrorDescription,
		@ErrBusinessRules AS ErrorType,1 AS Header,External_Identifier
		FROM #z_EW_TEMPLATE Z WHERE ModelFamilyId IS NULL AND ISNULL(Equip_Group,'')<>''
		
		INSERT INTO #z_Message(Line_No,ErrorDescription,ErrorType,Header,External_Identifier)  
		SELECT Line_No,'Cannot identify Equipment Class' as ErrorDescription,
		@ErrBusinessRules AS ErrorType,1 AS Header,External_Identifier
		FROM #z_EW_TEMPLATE Z WHERE EqpClassId IS NULL AND ISNULL(Equip_Class,'')<>''
		
		INSERT INTO #z_Message(Line_No,ErrorDescription,ErrorType,Header,External_Identifier)  
		SELECT Line_No,'Cannot identify Primary Part Number' as ErrorDescription,
		@ErrBusinessRules AS ErrorType,1 AS Header,External_Identifier
		FROM #z_EW_TEMPLATE Z WHERE PartId IS NULL AND ISNULL(Primary_Part_Number,'')<>''
		
		INSERT INTO #z_Message(Line_No,ErrorDescription,ErrorType,Header,External_Identifier)  
		SELECT Line_No,'Cannot identify Part Rating' as ErrorDescription,
		@ErrBusinessRules AS ErrorType,1 AS Header,External_Identifier
		FROM #z_EW_TEMPLATE Z WHERE PartRatingId IS NULL AND ISNULL(Part_Rating,'')<>''
		
		INSERT INTO #z_Message(Line_No,ErrorDescription,ErrorType,Header,External_Identifier)  
		SELECT Line_No,'Cannot identify Manufacturer' as ErrorDescription,
		@ErrBusinessRules AS ErrorType,1 AS Header,External_Identifier
		FROM #z_EW_TEMPLATE Z WHERE ManufacturerId IS NULL AND ISNULL(Manufacturer,'')<>''
		
		INSERT INTO #z_Message(Line_No,ErrorDescription,ErrorType,Header,External_Identifier)  
		SELECT Line_No,'Cannot identify Component Code' as ErrorDescription,
		@ErrBusinessRules AS ErrorType,1 AS Header,External_Identifier
		FROM #z_EW_TEMPLATE Z WHERE ComponentCodeId IS NULL AND ISNULL(Component_Code,'')<>''
		
		INSERT INTO #z_Message(Line_No,ErrorDescription,ErrorType,Header,External_Identifier)  
		SELECT Line_No,'Cannot identify Modifier Code' as ErrorDescription,
		@ErrBusinessRules AS ErrorType,1 AS Header,External_Identifier
		FROM #z_EW_TEMPLATE Z WHERE ModifierId IS NULL AND ISNULL(Modifier_Code,'')<>''
		
		INSERT INTO #z_Message(Line_No,ErrorDescription,ErrorType,Header,External_Identifier)  
		SELECT Line_No,'Cannot identify Task Type' as ErrorDescription,
		@ErrBusinessRules AS ErrorType,1 AS Header,External_Identifier
		FROM #z_EW_TEMPLATE Z WHERE TaskTypeId IS NULL AND ISNULL(Task_Type,'')<>''
		
		INSERT INTO #z_Message(Line_No,ErrorDescription,ErrorType,Header,External_Identifier)  
		SELECT Line_No,'Cannot identify Task Counter' as ErrorDescription,
		@ErrBusinessRules AS ErrorType,1 AS Header,External_Identifier
		FROM #z_EW_TEMPLATE Z WHERE ApplicationCodeId IS NULL AND ISNULL(Task_Counter,'')<>''
		
		INSERT INTO #z_Message(Line_No,ErrorDescription,ErrorType,Header,External_Identifier)  
		SELECT Line_No,'Cannot identify Sub System' as ErrorDescription,
		@ErrBusinessRules AS ErrorType,1 AS Header,External_Identifier
		FROM #z_EW_TEMPLATE Z WHERE SubSystemId IS NULL AND ISNULL(Sub_System,'')<>''
		
		INSERT INTO #z_Message(Line_No,ErrorDescription,ErrorType,Header,External_Identifier)  
		SELECT Line_No, 'External_Identifier is required' AS ErrorDescription,
		@ErrBusinessRules,1 AS Header,External_Identifier
		FROM #z_EW_TEMPLATE WHERE ISNULL(External_Identifier,'')=''
		
		
	END
	
	
	IF @Count2>0
	BEGIN
		/*Delete records for the invalid headers*/
		IF EXISTS(SELECT Line_No FROM #z_Message)  
		 BEGIN  
			DELETE #z_EW_WORKSTEP_TEMPLATE WHERE External_Identifier IN(SELECT External_Identifier FROM #z_Message)  
		 END  
		 
		 INSERT INTO #z_Message(Line_No,ErrorDescription,ErrorType,Header,External_Identifier)  
		 SELECT Line_No, 
		 dbo.CHECK_IMPORT_DATA_F(@TypeInt,'Sequence',0,Sequence,0)+
		 dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'EW_Step_Title',200,EW_Step_Title,0)+  
		 dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Instructions',2000,Instructions,0)+  
		 dbo.CHECK_IMPORT_DATA_F(@TypeBit,'Safety', 0,Safety,0)+  
		 dbo.CHECK_IMPORT_DATA_F(@TypeBit,'Enviromental', 0,Enviromental,0)+
		 dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Document_Name', 50,Document_Name,0)+  
		 dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Document_Ext', 50,Document_Ext,0)+  
		 dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Component_Code', 10,Component_Code,0)+  
		 dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Element_Code', 10,Element_Code,0)+  
		 dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Measurement_Type_Code', 50,Measurement_Type_Code,0)+  
		 dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Compartment',20,Compartment,0)+  
		 dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'External_Identifier', 100,External_Identifier,0) as ErrorDescription, 
		 @ErrParsing AS ErrorType,0 AS Header ,External_Identifier 
		 FROM  
		 #z_EW_WORKSTEP_TEMPLATE  
	 
		 DELETE #z_Message WHERE ErrorDescription=''  
		 
		 /*Do not check header because if there are rejected records from the first table 
		 they shall be deleted from this table as well*/
		 IF EXISTS(SELECT Line_No FROM #z_Message WHERE Header=0)  
		 BEGIN  
			DELETE #z_EW_WORKSTEP_TEMPLATE WHERE External_Identifier IN(SELECT External_Identifier FROM #z_Message)  
		 END  
		 
		 UPDATE Z SET ComponentCodeId=CC.ComponentCodeId,CMCodeId=CM.CMCodeId
		 FROM
		 #z_EW_WORKSTEP_TEMPLATE Z
			LEFT JOIN
		tblComponentCodes CC
			ON Z.Component_Code=CC.Code
			LEFT JOIN
		CM_CODE CM
			ON Z.Element_Code=CM.CMElementCode
			AND Z.Measurement_Type_Code=CM.MeasurementTypeCode
			AND Z.Compartment=CM.CMCompartment
		
		INSERT INTO #z_Message(Line_No,ErrorDescription,ErrorType,Header,External_Identifier)  
		SELECT Line_No, 'External_Identifier is required' AS ErrorDescription,
		@ErrBusinessRules,0 AS Header,External_Identifier
		FROM #z_EW_WORKSTEP_TEMPLATE WHERE ISNULL(External_Identifier,'')=''
			
		INSERT INTO #z_Message(Line_No,ErrorDescription,ErrorType,Header,External_Identifier)  
		SELECT Line_No,'Cannot identify Component Code' as ErrorDescription,
		@ErrBusinessRules AS ErrorType,0 AS Header,External_Identifier
		FROM #z_EW_WORKSTEP_TEMPLATE Z WHERE ComponentCodeId IS NULL AND ISNULL(Component_Code,'')<>''
		
		INSERT INTO #z_Message(Line_No,ErrorDescription,ErrorType,Header,External_Identifier)  
		SELECT Line_No,'Cannot identify CM Code' as ErrorDescription,
		@ErrBusinessRules AS ErrorType,0 AS Header,External_Identifier
		FROM #z_EW_WORKSTEP_TEMPLATE Z WHERE CMCodeId IS NULL AND 
			(ISNULL(Element_Code,'')<>'' OR 
			ISNULL(Measurement_Type_Code,'')<>'' OR 
			ISNULL(Compartment,'')<>'')
			
		--Check that steps have parents	
		INSERT INTO #z_Message(Line_No,ErrorDescription,ErrorType,Header,External_Identifier)  
		SELECT Line_No, 'Cannot identify Electronic Workscope' AS ErrorDescription,
		@ErrBusinessRules,0 AS Header,External_Identifier
		FROM 
		#z_EW_WORKSTEP_TEMPLATE Z
			LEFT JOIN
		EW_TEMPLATE EW 
			ON Z.External_Identifier=EW.ExternalId 
		WHERE EW.EWTemplateId IS NULL
	END
	
	/*Delete all invalid records*/
	IF EXISTS (SELECT * FROM #z_Message)
	BEGIN
		DELETE #z_EW_TEMPLATE WHERE External_Identifier IN(SELECT External_Identifier FROM #z_Message)  
		DELETE #z_EW_WORKSTEP_TEMPLATE WHERE External_Identifier IN(SELECT External_Identifier FROM #z_Message)  
	END
END


/*This checks are performed if the data is updated from the user interface and by import*/	
INSERT INTO #z_Message(Line_No,ErrorDescription,ErrorType,Header,External_Identifier)  
SELECT Line_No, 'EW_Title is required' AS ErrorDescription,@ErrBusinessRules,1 AS Header,
External_Identifier
FROM #z_EW_TEMPLATE WHERE ISNULL(EW_Title,'')=''

INSERT INTO #z_Message(Line_No,ErrorDescription,ErrorType,Header,External_Identifier)  
SELECT Line_No, 'EW Step Title is required' AS ErrorDescription,@ErrBusinessRules,0 AS Header,
External_Identifier
FROM #z_EW_WORKSTEP_TEMPLATE WHERE ISNULL(EW_Step_Title,'')=''

/*Delete all invalid records*/
IF EXISTS (SELECT * FROM #z_Message)
BEGIN
	DELETE #z_EW_TEMPLATE WHERE External_Identifier IN(SELECT External_Identifier FROM #z_Message)  
	DELETE #z_EW_WORKSTEP_TEMPLATE WHERE External_Identifier IN(SELECT External_Identifier FROM #z_Message)  
END

/*Delete records*/
CREATE TABLE #z_DeleteEW(EWTemplateId int)
CREATE TABLE #z_DeleteS(EWStepTemplateId int)

IF @DeletedEW<>'' OR @DeletedS<>''
BEGIN
	INSERT INTO #z_DeleteEW(EWTemplateId)
	SELECT List_item FROM dbo.LIST_TO_TABLE_F(@DeletedEW)
	
	INSERT INTO #z_DeleteS(EWStepTemplateId)
	SELECT List_item FROM dbo.LIST_TO_TABLE_F(@DeletedS)
	
	INSERT INTO #z_Message(Line_No,ErrorDescription,ErrorType,Header,External_Identifier)  
	SELECT 0 AS Line_No,
	'Cannot delete Electronic Workscope. It is linked to Strategy Tasks.' AS ErrorDescription,
	@ErrBusinessRules AS ErrorType,1 AS Header, EW.ExternalId AS External_Identifier
	FROM
	EW_TEMPLATE EW
		INNER JOIN
	#z_DeleteEW Z
		ON EW.EWTemplateId=Z.EWTemplateId
	WHERE EW.EWTemplateId IN(SELECT EWTemplateId FROM STRATEGY_TASK_JOB_EW_TEMPLATE)
	
	SET @ErrCount=@@ROWCOUNT
	
	IF @ErrCount>0 GOTO FINISH
	
	INSERT INTO #z_Message(Line_No,ErrorDescription,ErrorType,Header,External_Identifier)  
	SELECT 0 AS Line_No,
	'Cannot delete Electronic Workscope. It is linked to Standard Jobs.' AS ErrorDescription,
	@ErrBusinessRules AS ErrorType,1 AS Header, EW.ExternalId AS External_Identifier
	FROM
	EW_TEMPLATE EW
		INNER JOIN
	#z_DeleteEW Z
		ON EW.EWTemplateId=Z.EWTemplateId
	WHERE EW.EWTemplateId IN(SELECT EWTemplateId FROM STD_JOB_OPERATION_EW_TEMPLATE)
	
	SET @ErrCount=@@ROWCOUNT
	
	IF @ErrCount>0 GOTO FINISH
	
	
	BEGIN TRANSACTION
	
	DELETE EW_WORKSTEP_TEMPLATE 
	WHERE EWTemplateId IN(SELECT EWTemplateId FROM #z_DeleteEW) OR
	EWStepTemplateId IN (SELECT EWStepTemplateId FROM #z_DeleteS)
	
	IF @DeletedEW<>'' 
	BEGIN
		DELETE FROM EW_TEMPLATE WHERE EWTemplateId IN(SELECT EWTemplateId FROM #z_DeleteEW)
	END
		
	COMMIT TRANSACTION
END

IF (SELECT COUNT(Line_No) FROM #z_EW_WORKSTEP_TEMPLATE)=0 AND (SELECT COUNT(Line_No) FROM #z_EW_TEMPLATE) =0
	GOTO FINISH
	

SET @RecordsInserted=0
SET @RecordsUpdated=0

BEGIN TRANSACTION

IF EXISTS(SELECT Z.EWTemplateId FROM #z_EW_TEMPLATE Z INNER JOIN EW_TEMPLATE EW 
ON Z.External_Identifier=EW.ExternalId)
BEGIN
	UPDATE EW SET EWTitle=Z.EW_Title,
	SiteId =Z.SiteId,
	FleetId =Z.FleetId,
	ModelId =Z.ModelId,
	ModelFamilyId =Z.ModelFamilyId,
	EqpClassId =Z.EqpClassId,
	PartId =Z.PartId,
	PartRatingId =Z.PartRatingId,
	ManufacturerId =Z.ManufacturerId,
	ComponentCodeId =Z.ComponentCodeId,
	ModifierId =Z.ModifierId,
	TaskTypeId =Z.TaskTypeId,
	ApplicationCodeId =Z.ApplicationCodeId,
	SubSystemId=Z.SubSystemId,
	LastModByUserId=@UserId,
	LastModDate=GETDATE()
	FROM
	#z_EW_TEMPLATE Z
		INNER JOIN
	EW_TEMPLATE EW
		ON Z.External_Identifier=EW.ExternalId
		
	SET @RecordsUpdated=@RecordsUpdated+@@ROWCOUNT
END


IF EXISTS(SELECT Z.EWTemplateId FROM #z_EW_TEMPLATE Z LEFT JOIN EW_TEMPLATE EW 
ON Z.External_Identifier=EW.ExternalId WHERE EW.EWTemplateId IS NULL)
BEGIN
	INSERT INTO EW_TEMPLATE(EWTitle,SiteId,FleetId,ModelId,ModelFamilyId,EqpClassId,PartId,
	PartRatingId,ManufacturerId,ComponentCodeId,ModifierId,TaskTypeId,ApplicationCodeId,
	SubSystemId,ExternalId,LastModByUserId,LastModDate)
	SELECT Z.EW_Title,Z.SiteId,Z.FleetId,Z.ModelId,Z.ModelFamilyId,Z.EqpClassId,Z.PartId,
	Z.PartRatingId,Z.ManufacturerId,Z.ComponentCodeId,Z.ModifierId,Z.TaskTypeId,Z.ApplicationCodeId,
	Z.SubSystemId,Z.External_Identifier,@UserId as LastModByUserId,GETDATE() AS LastModDate
	FROM 
	#z_EW_TEMPLATE Z 
		LEFT JOIN 
	EW_TEMPLATE EW 
		ON Z.External_Identifier=EW.ExternalId 
	WHERE EW.EWTemplateId IS NULL
	
	SET @RecordsInserted=@RecordsInserted+@@ROWCOUNT
END
	
IF @ImportBatchName<>''  
BEGIN 
	DELETE S  
	FROM
	EW_WORKSTEP_TEMPLATE S
		INNER JOIN
	EW_TEMPLATE EW
		ON S.EWTemplateId=EW.EWTemplateId
	WHERE EW.ExternalId IN(SELECT External_Identifier FROM #z_EW_WORKSTEP_TEMPLATE)

END
ELSE
BEGIN
	UPDATE S SET
	Sequence =CAST(Z.Sequence AS int),
	ComponentCodeId =Z.ComponentCodeId,
	EWStepTitle=Z.EW_Step_Title,
	CMCodeId =Z.CMCodeId,
	Instructions =Z.Instructions,
	Safety =CAST(Z.Safety AS bit),
	Enviromental=CAST(Z.Enviromental AS bit),
	DocumentGUID =Document_Name,
	DocumentExt=Document_Ext
	FROM
	EW_WORKSTEP_TEMPLATE S
		INNER JOIN
	#z_EW_WORKSTEP_TEMPLATE Z
		ON S.EWStepTemplateId=Z.EWStepTemplateId
		
	DELETE FROM #z_EW_WORKSTEP_TEMPLATE WHERE EWStepTemplateId>0
END

IF EXISTS(SELECT * FROM #z_EW_WORKSTEP_TEMPLATE)
BEGIN

	INSERT INTO EW_WORKSTEP_TEMPLATE(EWTemplateId,Sequence,ComponentCodeId,
	EWStepTitle,CMCodeId,Instructions,Safety,Enviromental,DocumentGUID,DocumentExt)
	SELECT EW.EWTemplateId,Z.Sequence,Z.ComponentCodeId,Z.EW_Step_Title,Z.CMCodeId,
	Z.Instructions,Z.Safety,Z.Enviromental,Z.Document_Name AS DocumentGUID,
	Z.Document_Ext AS DocumentExt
	FROM
	#z_EW_WORKSTEP_TEMPLATE Z
		INNER JOIN
	EW_TEMPLATE EW
		ON Z.External_Identifier=EW.ExternalId
		
	SET @RecordsInserted=@RecordsInserted+@@ROWCOUNT
END

COMMIT TRANSACTION

FINISH:  
  
IF @ImportBatchName<>''  
BEGIN 
	SET @NoErrors=0 
	IF @Count1>0 SET @NoErrors=@NoErrors+@Count1-(SELECT COUNT(*) FROM #z_EW_TEMPLATE)  
	IF @Count2>0 SET @NoErrors=@NoErrors+@Count2-(SELECT COUNT(*) FROM #z_EW_WORKSTEP_TEMPLATE)  
	SET @NoErrors=ISNULL(@NoErrors,0)  

	IF EXISTS(SELECT ImportFileName FROM IMPORT_ERROR WHERE ImportFileName=@ImportBatchName)  
	BEGIN  
		DELETE IMPORT_ERROR WHERE ImportFileName=@ImportBatchName  
	END  

	IF EXISTS(SELECT MessageId FROM #z_Message)  
	BEGIN  
		INSERT INTO IMPORT_ERROR(ImportFileName,Line_No,ErrorDescription,ImportErrorTypeId,LastModDate)  
		SELECT @ImportBatchName AS ImportFileName,Line_No,ErrorDescription,  
		ISNULL(ErrorType,@ErrBusinessRules) AS ImportErrorTypeId,   
		GETDATE() AS LastModDate  
		FROM #z_Message  
	END  
END 
ELSE
BEGIN
	IF EXISTS(SELECT * FROM #z_Message)
		SELECT ErrorDescription,External_Identifier FROM #z_Message
		ORDER BY Header DESC, Line_No
END
 
DROP TABLE  #z_EW_TEMPLATE,#z_EW_WORKSTEP_TEMPLATE, #z_Message  

GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ELECTRONIC_WORKSCOPE_MANAGER_GET_P]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[ELECTRONIC_WORKSCOPE_MANAGER_GET_P]
GO

create PROCEDURE [dbo].[ELECTRONIC_WORKSCOPE_MANAGER_GET_P]
/******************************************************************************
	
	Name: ELECTRONIC_WORKSCOPE_MANAGER_GET_P

	Called By: 

	Desc: 

	Auth: 	Veronika Vasylyeva
	Date: 	16 Feb 2011
*******************************************************************************
		Change History
*******************************************************************************
Date:		Author:		Description:
--------	--------	----------------------------------------
22/08/11	V Vasylyeva	#2186 - added part source of supply
*******************************************************************************/
	/* Param List */
@EWTitle varchar(max)='%', 
@SiteId varchar(max)='', 
@FleetId varchar(max)='', 
@ModelId varchar(max)='', 
@ModelFamilyId varchar(max)='', 
@EqpClassId varchar(max)='', 
@PartId varchar(max)='', 
@PartRatingId varchar(max)='', 
@ManufacturerId varchar(max)='', 
@ComponentCodeId varchar(max)='', 
@ModifierId varchar(max)='', 
@TaskTypeId varchar(max)='', 
@ApplicationCodeId varchar(max)='', 
@SubSystemId varchar(max)='',
@ExternalId varchar(max)='%'

AS

SET @EWTitle='%'+@EWTitle+'%'
SET @ExternalId='%'+@ExternalId+'%'

CREATE TABLE #z_EW(EWTemplateId int PRIMARY KEY(EWTemplateId))

INSERT INTO #z_EW(EWTemplateId)
SELECT EWTemplateId FROM EW_TEMPLATE 
WHERE (EWTitle LIKE @EWTitle) AND
(@ExternalId='' OR ExternalId IS NULL OR ExternalId LIKE @ExternalId) AND
(@SiteId='' OR SiteId IS NULL OR SiteId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@SiteId))) AND
(@FleetId='' OR FleetId IS NULL OR FleetId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@FleetId))) AND
(@ModelId='' OR ModelId IS NULL OR ModelId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@ModelId))) AND
(@ModelFamilyId='' OR ModelFamilyId IS NULL OR ModelFamilyId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@ModelFamilyId))) AND
(@EqpClassId='' OR EqpClassId IS NULL OR EqpClassId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@EqpClassId))) AND
(@PartId='' OR PartId IS NULL OR PartId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@PartId))) AND
(@PartRatingId='' OR PartRatingId IS NULL OR PartRatingId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@PartRatingId))) AND
(@ManufacturerId='' OR ManufacturerId IS NULL OR ManufacturerId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@ManufacturerId))) AND
(@ComponentCodeId='' OR ISNULL(ComponentCodeId,0)=0 OR ComponentCodeId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@ComponentCodeId))) AND
(@ModifierId='' OR ISNULL(ModifierId,0)=0 OR ModifierId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@ModifierId))) AND
(@TaskTypeId='' OR ISNULL(TaskTypeId,0)=0 OR TaskTypeId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@TaskTypeId))) AND
(@ApplicationCodeId='' OR ISNULL(ApplicationCodeId,0)=0 OR ApplicationCodeId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@ApplicationCodeId))) AND
(@SubSystemId='' OR SubSystemId IS NULL OR SubSystemId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@SubSystemId)))

DECLARE @EWTemplateDocumentFolder varchar(2000)
EXEC AMT_TYPED_VARIABLE_GET_P @Value_Name='EWTemplateDocumentFolder',@Varchar_Value=@EWTemplateDocumentFolder OUTPUT

IF @EWTemplateDocumentFolder<>''
BEGIN
	IF RIGHT(@EWTemplateDocumentFolder,1)<>'\' SET @EWTemplateDocumentFolder=@EWTemplateDocumentFolder+'\'
END

SELECT E.EWTitle AS EW_Title,ISNULL(A.STLinked,0)+ISNULL(C.STLinked,0) AS STLinked,
ISNULL(B.SJLinked,0) AS SJLinked,
M.Model,MF.Model_Family_Code AS Equip_Group,
EC.Eqp_Class_Code AS Equip_Class,MA.ManufacturerDesc AS Manufacturer,CC.Code AS Component_Code,
MC.Code AS Modifier_Code,TT.Code AS Task_Type,AC.Code AS Task_Counter,SS.SubSystem AS Sub_System,
PA.Part AS Primary_Part_Number,PR.PartRating AS Part_Rating,S.Site,F.Fleet,
E.ExternalId AS External_Identifier,E.LastModDate,
E.EWTemplateId,E.SiteId,E.FleetId,E.ModelId,E.ModelFamilyId,E.EqpClassId,E.PartId,E.PartRatingId,
E.ManufacturerId,E.ComponentCodeId,E.ModifierId,E.TaskTypeId,E.ApplicationCodeId,E.SubSystemId,
/*VV #2186*/SOS.Sos_Code AS Part_SOS
FROM  
EW_TEMPLATE	E
	INNER JOIN
#z_EW Z
	ON E.EWTemplateId=Z.EWTemplateId
	INNER JOIN
tblApplicationCodes AC
	ON ISNULL(E.ApplicationCodeId,0)=AC.ApplicationCodeId
	INNER JOIN
tblTaskTypes TT
	ON ISNULL(E.TaskTypeId,0)=TT.TaskTypeId
	INNER JOIN
tblModifierCodes MC
	ON ISNULL(E.ModifierId,0)=MC.ModifierID
	INNER JOIN
tblComponentCodes CC
	ON ISNULL(E.ComponentCodeId,0)=CC.ComponentCodeId
	LEFT JOIN
tblFleets F
	ON E.FleetId=F.FleetId
	LEFT JOIN
tblSites S
	ON E.SiteId=S.SiteId
	LEFT JOIN
PART_RATING PR
	ON E.PartRatingId=PR.PartRatingId
	LEFT JOIN
tblParts PA
	ON E.PartId=PA.PartId
	/*VV #2186*/
	LEFT JOIN
SOURCE_OF_SUPPLY SOS
	ON PA.Source_Of_Supply_ID=SOS.Source_Of_Supply_ID
	LEFT JOIN
tblSubSystems SS
	ON E.SubSystemId=SS.SubSystemId
	LEFT JOIN
tblManufacturers MA
	ON E.ManufacturerId=MA.ManufacturerId
	LEFT JOIN
EQP_CLASS EC
	ON E.EqpClassId=EC.Eqp_Class_Id
	LEFT JOIN
MODEL_FAMILY MF
	ON E.ModelFamilyId=MF.Model_Family_Id
	LEFT JOIN
tblModels M
	ON E.ModelId=M.ModelId
	LEFT JOIN
(
	SELECT J.EWTemplateId,COUNT(DISTINCT PTA.ProjTaskOptId) AS STLinked
	FROM
	STRATEGY_TASK_JOB_EW_TEMPLATE J
		INNER JOIN
	#z_EW Z1
		ON J.EWTemplateId=Z1.EWTemplateId
		INNER JOIN
	tblProjTaskAmts PTA
		ON J.ProjTaskAmtId=PTA.ProjTaskAmtId
	GROUP BY J.EWTemplateId
) A
	ON Z.EWTemplateId=A.EWTemplateId
	LEFT JOIN
(
	SELECT J.EWTemplateId,COUNT(DISTINCT O.StdJobId) AS SJLinked
	FROM
	STD_JOB_OPERATION_EW_TEMPLATE J
		INNER JOIN
	#z_EW Z2
		ON J.EWTemplateId=Z2.EWTemplateId
		INNER JOIN
	tblStdJobOperations O
		ON J.StdJobOperationId=O.StdJobOperationId
	GROUP BY J.EWTemplateId
) B
	ON Z.EWTemplateId=b.EWTemplateId
	LEFT JOIN
(
	SELECT J.EWTemplateId,COUNT(DISTINCT PTA.ProjTaskOptId) AS STLinked
	FROM
	STD_JOB_OPERATION_EW_TEMPLATE J
		INNER JOIN
	#z_EW Z2
		ON J.EWTemplateId=Z2.EWTemplateId
		INNER JOIN
	tblStdJobOperations O
		ON J.StdJobOperationId=O.StdJobOperationId
		INNER JOIN
	tblPricedJobs PJ
		ON O.StdJobId=PJ.StdJobId
		INNER JOIN
	tblProjTaskAmts PTA
		ON PJ.PricedJobId=PTA.PricedJobId
	GROUP BY J.EWTemplateId
) C
	ON Z.EWTemplateId=C.EWTemplateId
	
ORDER BY E.EWTitle	

SELECT S.Sequence,CC.Code AS Component_Code,S.EWStepTitle AS EW_Step_Title,
CM.CMElementDesc + ' (' + CM.CMElementCode + ') - ' + CM.MeasurementTypeDesc + ' - '+CM.CMCompartment AS CMCode,
S.Instructions,
S.Safety AS Safety_A,S.Enviromental AS Enviromental_A,
S.DocumentGUID+'.'+S.DocumentExt AS PictureName,
S.EWStepTemplateId, S.EWTemplateId, S.ComponentCodeId, S.CMCodeId,   
S.DocumentGUID AS Document_Name,S.DocumentExt AS Document_Ext,
@EWTemplateDocumentFolder+NULLIF(S.DocumentGUID,'')+'.'+NULLIF(S.DocumentExt,'') AS FileToCopy,
CAST(CASE WHEN (NULLIF(S.DocumentGUID,'')+NULLIF(S.DocumentExt,'')) IS NULL THEN 0 ELSE 1 END AS bit) AS CopyServer,
CM.CMElementCode AS Element_Code,
CM.MeasurementTypeCode AS Measurement_Type_Code,CM.CMCompartment AS Compartment,EW.ExternalId AS External_Identifier

FROM
#z_EW Z
	INNER JOIN
EW_WORKSTEP_TEMPLATE S
	ON Z.EWTemplateId=S.EWTemplateId
	INNER JOIN
EW_TEMPLATE EW
	ON S.EWTemplateId=EW.EWTemplateId
	INNER JOIN
tblComponentCodes CC
	ON ISNULL(S.ComponentCodeId,0)=CC.ComponentCodeId
	LEFT JOIN
CM_CODE CM
	ON S.CMCodeId=CM.CMCodeId
ORDER BY S.EWTemplateId,S.Sequence	
	
DROP TABLE #z_EW

GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BUDGET_RPT_PLANT_HIRE_P_L_P]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BUDGET_RPT_PLANT_HIRE_P_L_P]
GO

create         Procedure [dbo].[BUDGET_RPT_PLANT_HIRE_P_L_P]
/******************************************************************************
	File: 
	Name: BUDGET_RPT_PLANT_HIRE_P_L_P

	Called By: 

	Desc: Returns data for Plant Hire P&L

	Auth: Veronika Vasylyeva
	Date: 6-Aug-2010
*******************************************************************************
		Change History
*******************************************************************************
	Date:		Author:		Description:
	--------	--------	----------------------------------------
	20-Aug-10	V Vasylyeva	From GE: Forecast CBD Under/Over - calculate for CBD expense elements
	27 Sep 10	V Vasylyeva	#333 Add totals column
	11 Mar 11	V Vasylyeva	#1398 Change CBD Under/Over
	16 Aug 11	V Vasylyeva	E617 : added @PHProjectId
	19 Sep 11	V Vasylyeva	#2472: Restricted costs and cbd adjustments to the revenue periods
	 3 Nov 11	V Vasylyeva	#2766 - project costs for the periods
*******************************************************************************/
	/* Param List */
	@BudgetHeaderId int,
	@EntireBudget bit = 1,
	@StartPeriod int = 200601,
    @EndPeriod int = 200603, 
	@Branch varchar(MAX) = '',
	@Site varchar(MAX) = '',
	@Fleet varchar(MAX) = '',  
	@BudgetEquipmentId varchar(MAX) = '',
	@ManufacturerId varchar(MAX) = '',
	@ModelId varchar(MAX) = '',
	@EquipmentGroupId varchar(MAX) = '',
	@EquipmentClassId varchar(MAX) = '',
	@RegionId varchar(MAX) = '',
	@DivisionId varchar(MAX) = '',
	@EquipmentLocationId varchar(MAX) = '',
	@EquipmentCriticalityId varchar(MAX) = '',
	@EquipmentCategoryId varchar(MAX) = '',
	@IndustryGroupId varchar(MAX) = '',
	@CostResponsibilityId varchar(MAX) = '',
	@CostCentreId varchar(MAX) = '',
	@CC_Activity varchar(MAX) = '',
	@CC_Location varchar(MAX) = '',
	@CC_Responsibility varchar(MAX) = '',
	@CostExpenseId varchar(MAX) = '',
	@ParentEquipmentID varchar(MAX)='',
	@ProjectId int=0,
	@PHProjectId varchar(MAX)=''

AS

DECLARE @DefCostBearerId int
DECLARE @CC bit
SET @CC=0

/*VV #333*/
DECLARE @TotalDate datetime

SET @TotalDate=CAST('22000101' AS datetime)

DECLARE @StartProject int,@EndProject int,@EqpPlanProject int,@BudgetCreateDate datetime

SET @EqpPlanProject=0

IF @EntireBudget=1
BEGIN
	SELECT  @StartPeriod=Start_Period, @EndPeriod=End_Period,@BudgetCreateDate=Create_Date
	FROM BUDGET_HEADER WHERE Budget_Header_ID=@BudgetHeaderId
END
ELSE
BEGIN
	SELECT @BudgetCreateDate=Create_Date FROM BUDGET_HEADER WHERE Budget_Header_ID=@BudgetHeaderId
END

IF ISNULL(@ProjectID,0)>0
BEGIN
	SELECT	@StartProject=StartPeriod, 
	@EndProject=EndPeriod,
	@EqpPlanProject=BudgetEquipmentId
	FROM    
	BUDGET_PH_PROJECT
	WHERE BudgetPHProjectId=@ProjectID

	IF @StartProject>@EndPeriod OR @EndProject<@StartPeriod
		RETURN
	ELSE
	BEGIN
		IF @StartProject>@StartPeriod
			SET @StartPeriod=@StartProject
		
		IF @EndProject<@EndPeriod
			SET @EndPeriod=@EndProject
	END
END

SELECT @DefCostBearerId=CostBearerId FROM tblCostBearers WHERE Default_Value<>0

CREATE TABLE #z_CC(CostCentreId int PRIMARY KEY (CostCentreId))
CREATE TABLE #z_CE(CostExpenseId int PRIMARY KEY (CostExpenseId))
CREATE TABLE #z_Eqp(Budget_Equipment_Id int,EqpProjId int PRIMARY KEY(Budget_Equipment_Id))
/*VV E617 */
CREATE TABLE #z_PHProjectEqp (Budget_Equipment_Id int PRIMARY KEY(Budget_Equipment_Id))

IF ISNULL(@PHProjectId,'')<>''
BEGIN
	INSERT INTO #z_PHProjectEqp(Budget_Equipment_Id)
	SELECT DISTINCT E.Budget_Equipment_Id
	FROM
	BUDGET_EQUIPMENT E
		INNER JOIN
	BUDGET_PH_PROJECT P
		ON E.Budget_Equipment_Id=P.BudgetEquipmentId
		INNER JOIN
	BUDGET_PH_REVENUE R
		ON P.BudgetPHProjectId=R.BudgetPHProjectId
		INNER JOIN
	BUDGET_PERIOD BP
		ON R.BudgetPeriodId=BP.Budget_Period_Id
	WHERE E.Budget_Header_Id=@BudgetHeaderId AND
	P.ProjectId IN(SELECT list_item FROM dbo.LIST_TO_TABLE_F(@PHProjectId)) AND
	BP.Calendar_Period>=@StartPeriod AND BP.Calendar_Period<=@EndPeriod 
	
END


IF(@CostCentreID<>'' OR @CC_Activity<>'' OR @CC_Responsibility<>'' OR @CC_Location<>'')
BEGIN
	SET @CC=1
	
	INSERT INTO #z_CC(CostCentreId)
	SELECT Cost_Centre_ID
	FROM
	COST_CENTRE
	WHERE 
	(@CostCentreID='' OR Cost_Centre_ID IN(SELECT list_item FROM dbo.LIST_TO_TABLE_F(@CostCentreID))) AND
	(@CC_Activity='' OR CC_Activity IN(SELECT list_item FROM dbo.LIST_TO_TABLE_2_F(@CC_Activity))) AND
	(@CC_Responsibility='' OR CC_Responsibility IN(SELECT list_item FROM dbo.LIST_TO_TABLE_2_F(@CC_Responsibility))) AND
	(@CC_Location='' OR CC_Location IN(SELECT list_item FROM dbo.LIST_TO_TABLE_2_F(@CC_Location)))
END


IF(@CostExpenseId<>'')
BEGIN
	
	INSERT INTO #z_CE(CostExpenseId)
	SELECT Cost_Expense_ID
	FROM
	COST_EXPENSE
	WHERE 
	(@CostExpenseId='' OR Cost_Expense_ID IN(SELECT list_item FROM dbo.LIST_TO_TABLE_F(@CostExpenseId))) 
END


INSERT INTO #z_Eqp(Budget_Equipment_Id,EqpProjId)
SELECT BE.Budget_Equipment_Id,BE.Eqp_Proj_Id AS EqpProjId
FROM
BUDGET_EQUIPMENT BE
	INNER JOIN
tblModels M
	ON BE.Model_Id=M.ModelId
	INNER JOIN
MODEL_FAMILY MF
	ON M.Model_Family_Id=MF.Model_Family_Id
WHERE (BE.Budget_Header_Id=@BudgetHeaderId) AND
(@Branch='' OR BE.Branch IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_2_F(@Branch))) AND
(@Site='' OR BE.Site IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_2_F(@site))) AND
(@fleet='' OR BE.Fleet IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_2_F(@fleet))) AND
(@BudgetEquipmentId='' OR BE.Budget_Equipment_Id IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@BudgetEquipmentId))) AND
(@modelID='' OR BE.Model_Id IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@modelID))) AND
(@RegionId='' OR BE.Region_Id IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@RegionId))) AND
(@DivisionId='' OR BE.Division_Id IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@DivisionId))) AND
(@IndustryGroupId='' OR BE.Ind_Grp_Id IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@IndustryGroupId))) AND
(@EquipmentCriticalityId='' OR BE.Equipment_Criticality_Id IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@EquipmentCriticalityId))) AND
(@EquipmentClassId='' OR MF.Eqp_Class_Id IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@EquipmentClassId))) AND
(@EquipmentGroupId='' OR M.Model_Family_Id IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@EquipmentGroupId))) AND
(@EquipmentCategoryId='' OR BE.Equipment_Category_Id IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@EquipmentCategoryId))) AND
(@ManufacturerId='' OR M.ManufacturerId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@ManufacturerId))) AND
(@CostResponsibilityID='' OR Cost_Responsibility_ID IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@CostResponsibilityID))) AND
(@EquipmentLocationId='' OR BE.Eqp_Location_Id IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@EquipmentLocationId))) AND
(@EqpPlanProject=0 OR BE.Budget_Equipment_Id=@EqpPlanProject) AND
(@ParentEquipmentID='' OR BE.Equipment_Name IN (SELECT DISTINCT Equipment_Name FROM dbo.BUDGET_EQP_SIBLINGS_F(@BudgetHeaderId ,@ParentEquipmentID))) AND
/*VV E617*/
(@PHProjectId='' OR BE.Budget_Equipment_Id IN(SELECT Budget_Equipment_Id FROM #z_PHProjectEqp))

IF @@ROWCOUNT=0 RETURN

--Revenue
CREATE TABLE #z_Revenue(Cost_Expense_ID int,CalenderPeriod int,CBDRevenue float,OwnershipRevenue float,
OperatingRevenue float PRIMARY KEY (Cost_Expense_ID,CalenderPeriod))

INSERT INTO #z_Revenue(Cost_Expense_ID,CalenderPeriod,CBDRevenue,OwnershipRevenue,OperatingRevenue)
SELECT R.CostExpenseID,BP.Calendar_Period AS CalenderPeriod,
SUM(CASE WHEN CE.CBD_Expense=1 THEN Amount ELSE 0 END) AS CBDRevenue,
SUM(CASE WHEN CE.CBD_Expense=1 THEN 0 WHEN CE.Ownership_Cost=1 THEN Amount ELSE 0 END) AS OwnershipRevenue,
SUM(CASE WHEN CE.CBD_Expense=1 THEN 0 WHEN CE.Ownership_Cost=1 THEN 0 ELSE Amount END) AS OperatingRevenue
FROM
#z_Eqp E
	INNER JOIN
BUDGET_PH_PROJECT P
	ON E.Budget_Equipment_Id=P.BudgetEquipmentId
	INNER JOIN
BUDGET_PH_REVENUE R
	ON P.BudgetPHProjectId=R.BudgetPHProjectId
	INNER JOIN
BUDGET_PERIOD BP
	ON R.BudgetPeriodId=BP.Budget_Period_Id
	INNER JOIN
COST_EXPENSE CE
	ON R.CostExpenseId=CE.Cost_Expense_ID
WHERE BP.Calendar_Period>=@StartPeriod AND BP.Calendar_Period<=@EndPeriod AND
(@CC=0 OR R.CostCentreId IN (SELECT CostCentreId FROM #z_CC))
AND (@CostExpenseId='' OR R.CostExpenseId IN(SELECT A.CostExpenseId FROM #z_CE A))
/*VV E617*/
AND(@PHProjectId='' OR P.ProjectId IN(SELECT list_item FROM dbo.LIST_TO_TABLE_F(@PHProjectId)))
GROUP BY R.CostExpenseID,BP.Calendar_Period	

CREATE TABLE #z_EqpPeriod(Budget_Equipment_Id int,Calendar_Period int 
PRIMARY KEY(Budget_Equipment_Id,Calendar_Period))

/*VV 2766*/
IF @PHProjectId<>''
BEGIN
	INSERT INTO #z_EqpPeriod(Budget_Equipment_Id,Calendar_Period)
	SELECT DISTINCT E.Budget_Equipment_Id,BP.Calendar_Period
	FROM
	#z_Eqp E
		INNER JOIN
	BUDGET_PH_PROJECT P
		ON E.Budget_Equipment_Id=P.BudgetEquipmentId
		INNER JOIN
	BUDGET_PH_REVENUE R
		ON P.BudgetPHProjectId=R.BudgetPHProjectId
		INNER JOIN
	BUDGET_PERIOD BP
		ON R.BudgetPeriodId=BP.Budget_Period_Id
		
	WHERE BP.Calendar_Period>=@StartPeriod AND BP.Calendar_Period<=@EndPeriod
	AND P.ProjectId IN(SELECT list_item FROM dbo.LIST_TO_TABLE_F(@PHProjectId))
END


--Costs
CREATE TABLE #z_Costs(Cost_Expense_ID int,CalenderPeriod int,CBDCost float,OwnershipCost float,
OperatingCost float PRIMARY KEY (Cost_Expense_ID,CalenderPeriod))

INSERT INTO #z_Costs(Cost_Expense_ID,CalenderPeriod,CBDCost,OwnershipCost,OperatingCost)
SELECT ISNULL(C.Cost_Expense_ID,0) AS Cost_Expense_ID,YEAR(O.Cost_Date)*100+MONTH(Cost_Date) AS CalenderPeriod,
SUM(CASE WHEN ISNULL(CE.CBD_Expense,0)=1 THEN C.Sell ELSE 0 END) AS CBDCost,
SUM(CASE WHEN ISNULL(CE.CBD_Expense,0)=1 THEN 0 WHEN ISNULL(CE.Ownership_Cost,0)=1 THEN C.Sell ELSE 0 END) AS OwnershipCost,
SUM(CASE WHEN ISNULL(CE.CBD_Expense,0)=1 THEN 0 WHEN ISNULL(CE.Ownership_Cost,0)=1 THEN 0 ELSE C.Sell END) AS OperatingCost
FROM
#z_Eqp E
	INNER JOIN
BUDGET_TASK T
	ON E.Budget_Equipment_Id=T.Budget_Equipment_Id
	INNER JOIN
BUDGET_OCC O
	ON T.Budget_Task_Id=O.Budget_Task_Id
	INNER JOIN
BUDGET_COST C
	ON O.Budget_Occ_Id=C.Budget_Occ_Id
	LEFT JOIN
COST_EXPENSE CE
	ON C.Cost_Expense_Id=CE.Cost_Expense_ID
	/*VV 2766*/
	LEFT JOIN
#z_EqpPeriod P
	ON E.Budget_Equipment_Id=P.Budget_Equipment_Id
	AND YEAR(O.Cost_Date)*100+MONTH(Cost_Date)=P.Calendar_Period
WHERE 
C.Cost_Bearer_Id=@DefCostBearerId
AND (@CC=0 OR C.Cost_Centre_Id IN(SELECT CostCentreId FROM #z_CC))
AND (@CostExpenseId='' OR C.Cost_Expense_Id IN(SELECT A.CostExpenseId FROM #z_CE A))
AND YEAR(O.Cost_Date)*100+MONTH(Cost_Date)>=@StartPeriod AND YEAR(O.Cost_Date)*100+MONTH(Cost_Date)<=@EndPeriod
/*VV 2766*/
AND (@PHProjectId='' OR P.Calendar_Period>0)
GROUP BY C.Cost_Expense_ID,YEAR(O.Cost_Date)*100+MONTH(Cost_Date)

/*VV 2766

/*VV #2472*/
IF(@PHProjectId<>'') 
BEGIN
	DELETE #z_Costs WHERE CalenderPeriod NOT IN(SELECT CalenderPeriod FROM #z_Revenue)
END

*/

--CBD Adjustments 

CREATE TABLE #z_CBDAdj(AdjId int,CalenderPeriod int,Cost float PRIMARY KEY (AdjId,CalenderPeriod))

SET @EndProject=YEAR(@BudgetCreateDate)*100+MONTH(@BudgetCreateDate)


IF @EndProject>@StartPeriod
BEGIN
	--I1 CBD - Component Depreciation
	
	INSERT INTO #z_CBDAdj(AdjId,CalenderPeriod,Cost)
	SELECT -31 AS AdjId,YEAR(R.TransactionDate)*100+MONTH(R.TransactionDate),
	SUM(dbo.CBD_COMPONENT_DEPRECIATION_F(EDC.TransactionGroupId,R.DebitAmount,R.CreditAmount)) AS Cost
	FROM
	#z_Eqp E
		INNER JOIN
	tblEqpProjs EPR
		ON E.EqpProjId=EPR.EqpProjId AND EPR.Projection_Type_ID=1
		INNER JOIN
	CBD_ADJUSTMENT R
		ON EPR.EqpPlanId=R.EqpPlanId
		INNER JOIN
	ENTRY_DISTRIBUTION_CODE EDC
		ON R.EntryDistributionCodeId=EDC.Id
		/*VV 2766*/
		LEFT JOIN
	#z_EqpPeriod PE
		ON E.Budget_Equipment_Id=PE.Budget_Equipment_Id
		AND YEAR(R.TransactionDate)*100+MONTH(R.TransactionDate)=PE.Calendar_Period
	WHERE
	(@CC=0 OR R.CostCentreId IN(SELECT CostCentreId FROM #z_CC))
	AND (@CostExpenseId='' OR R.CostExpenseId IN(SELECT A.CostExpenseId FROM #z_CE A))
	AND YEAR(R.TransactionDate)*100+MONTH(R.TransactionDate)>=@StartPeriod 
	AND YEAR(R.TransactionDate)*100+MONTH(R.TransactionDate)<@EndProject
	/*VV 2766*/
	AND (@PHProjectId='' OR PE.Calendar_Period>0)

	GROUP BY YEAR(R.TransactionDate)*100+MONTH(R.TransactionDate)
	HAVING SUM(dbo.CBD_COMPONENT_DEPRECIATION_F(EDC.TransactionGroupId,R.DebitAmount,R.CreditAmount)) IS NOT NULL
	
	--I2 (Profit)/Loss on Disposal of Component   
	INSERT INTO #z_CBDAdj(AdjId,CalenderPeriod,Cost)
	SELECT -32 AS AdjId,YEAR(R.TransactionDate)*100+MONTH(R.TransactionDate),
	SUM(dbo.P_L_ON_DISPOSAL_COMPONENT_F(EDC.TransactionGroupId,R.DebitAmount,R.CreditAmount)) AS Cost
	FROM
	#z_Eqp E
		INNER JOIN
	tblEqpProjs EPR
		ON E.EqpProjId=EPR.EqpProjId AND EPR.Projection_Type_ID=1
		INNER JOIN
	CBD_ADJUSTMENT R
		ON EPR.EqpPlanId=R.EqpPlanId
		INNER JOIN
	ENTRY_DISTRIBUTION_CODE EDC
		ON R.EntryDistributionCodeId=EDC.Id
		/*VV 2766*/
		LEFT JOIN
	#z_EqpPeriod PE
		ON E.Budget_Equipment_Id=PE.Budget_Equipment_Id
		AND YEAR(R.TransactionDate)*100+MONTH(R.TransactionDate)=PE.Calendar_Period
	WHERE
	(@CC=0 OR R.CostCentreId IN(SELECT CostCentreId FROM #z_CC))
	AND (@CostExpenseId='' OR R.CostExpenseId IN(SELECT A.CostExpenseId FROM #z_CE A))
	AND YEAR(R.TransactionDate)*100+MONTH(R.TransactionDate)>=@StartPeriod 
	AND YEAR(R.TransactionDate)*100+MONTH(R.TransactionDate)<@EndProject
	/*VV 2766*/
	AND (@PHProjectId='' OR PE.Calendar_Period>0)
	GROUP BY YEAR(R.TransactionDate)*100+MONTH(R.TransactionDate)
	HAVING SUM(dbo.P_L_ON_DISPOSAL_COMPONENT_F(EDC.TransactionGroupId,R.DebitAmount,R.CreditAmount)) IS NOT NULL
	
	--I3 Capitalised Component
	INSERT INTO #z_CBDAdj(AdjId,CalenderPeriod,Cost)
	SELECT -33 AS AdjId,YEAR(R.TransactionDate)*100+MONTH(R.TransactionDate),
	SUM(dbo.CAPITALISED_COMPONENT_F(EDC.TransactionGroupId,R.DebitAmount,R.CreditAmount)) AS Cost
	FROM
	#z_Eqp E
		INNER JOIN
	tblEqpProjs EPR
		ON E.EqpProjId=EPR.EqpProjId AND EPR.Projection_Type_ID=1
		INNER JOIN
	CBD_ADJUSTMENT R
		ON EPR.EqpPlanId=R.EqpPlanId
		INNER JOIN
	ENTRY_DISTRIBUTION_CODE EDC
		ON R.EntryDistributionCodeId=EDC.Id
		/*VV 2766*/
		LEFT JOIN
	#z_EqpPeriod PE
		ON E.Budget_Equipment_Id=PE.Budget_Equipment_Id
		AND YEAR(R.TransactionDate)*100+MONTH(R.TransactionDate)=PE.Calendar_Period
	WHERE
	(@CC=0 OR R.CostCentreId IN(SELECT CostCentreId FROM #z_CC))
	AND (@CostExpenseId='' OR R.CostExpenseId IN(SELECT A.CostExpenseId FROM #z_CE A))
	AND YEAR(R.TransactionDate)*100+MONTH(R.TransactionDate)>=@StartPeriod 
	AND YEAR(R.TransactionDate)*100+MONTH(R.TransactionDate)<@EndProject
	/*VV 2766*/
	AND (@PHProjectId='' OR PE.Calendar_Period>0)
	GROUP BY YEAR(R.TransactionDate)*100+MONTH(R.TransactionDate)
	HAVING SUM(dbo.CAPITALISED_COMPONENT_F(EDC.TransactionGroupId,R.DebitAmount,R.CreditAmount)) IS NOT NULL
	
	--I4 Capitalised Component Adjustment

	INSERT INTO #z_CBDAdj(AdjId,CalenderPeriod,Cost)
	SELECT -34 AS AdjId,YEAR(R.TransactionDate)*100+MONTH(R.TransactionDate),
	SUM(dbo.CAPITALISED_COMPONENT_ADJUSTMENT_F(EDC.TransactionGroupId,R.DebitAmount,R.CreditAmount)) AS Cost
	FROM
	#z_Eqp E
		INNER JOIN
	tblEqpProjs EPR
		ON E.EqpProjId=EPR.EqpProjId AND EPR.Projection_Type_ID=1
		INNER JOIN
	CBD_ADJUSTMENT R
		ON EPR.EqpPlanId=R.EqpPlanId
		INNER JOIN
	ENTRY_DISTRIBUTION_CODE EDC
		ON R.EntryDistributionCodeId=EDC.Id
		/*VV 2766*/
		LEFT JOIN
	#z_EqpPeriod PE
		ON E.Budget_Equipment_Id=PE.Budget_Equipment_Id
		AND YEAR(R.TransactionDate)*100+MONTH(R.TransactionDate)=PE.Calendar_Period
	WHERE
	(@CC=0 OR R.CostCentreId IN(SELECT CostCentreId FROM #z_CC))
	AND (@CostExpenseId='' OR R.CostExpenseId IN(SELECT A.CostExpenseId FROM #z_CE A))
	AND YEAR(R.TransactionDate)*100+MONTH(R.TransactionDate)>=@StartPeriod 
	AND YEAR(R.TransactionDate)*100+MONTH(R.TransactionDate)<@EndProject
	/*VV 2766*/
	AND (@PHProjectId='' OR PE.Calendar_Period>0)
	GROUP BY YEAR(R.TransactionDate)*100+MONTH(R.TransactionDate)
	HAVING SUM(dbo.CAPITALISED_COMPONENT_ADJUSTMENT_F(EDC.TransactionGroupId,R.DebitAmount,R.CreditAmount)) IS NOT NULL

	--I5 Component CBD Adjustment
	INSERT INTO #z_CBDAdj(AdjId,CalenderPeriod,Cost)
	SELECT -35 AS AdjId,YEAR(R.TransactionDate)*100+MONTH(R.TransactionDate),
	SUM(dbo.COMPONENT_CBD_ADJUSTMENT_F(EDC.TransactionGroupId,R.DebitAmount,R.CreditAmount)) AS Cost
	FROM
	#z_Eqp E
		INNER JOIN
	tblEqpProjs EPR
		ON E.EqpProjId=EPR.EqpProjId AND EPR.Projection_Type_ID=1
		INNER JOIN
	CBD_ADJUSTMENT R
		ON EPR.EqpPlanId=R.EqpPlanId
		INNER JOIN
	ENTRY_DISTRIBUTION_CODE EDC
		ON R.EntryDistributionCodeId=EDC.Id
		/*VV 2766*/
		LEFT JOIN
	#z_EqpPeriod PE
		ON E.Budget_Equipment_Id=PE.Budget_Equipment_Id
		AND YEAR(R.TransactionDate)*100+MONTH(R.TransactionDate)=PE.Calendar_Period
	WHERE
	(@CC=0 OR R.CostCentreId IN(SELECT CostCentreId FROM #z_CC))
	AND (@CostExpenseId='' OR R.CostExpenseId IN(SELECT A.CostExpenseId FROM #z_CE A))
	AND YEAR(R.TransactionDate)*100+MONTH(R.TransactionDate)>=@StartPeriod 
	AND YEAR(R.TransactionDate)*100+MONTH(R.TransactionDate)<@EndProject
	/*VV 2766*/
	AND (@PHProjectId='' OR PE.Calendar_Period>0)
	GROUP BY YEAR(R.TransactionDate)*100+MONTH(R.TransactionDate)
	HAVING SUM(dbo.COMPONENT_CBD_ADJUSTMENT_F(EDC.TransactionGroupId,R.DebitAmount,R.CreditAmount)) IS NOT NULL
END

/*VV #1398 changed description*/
--Forecast CBD Under/Over
--Calculate as the difference between the Current Projection "Absolute Rate" - CBD Expense Elements with CB =1
-- and Plant Revenue Rate
--
-- 
--drop table z_CBDAdj
--select * into z_CBDAdj from #z_CBDAdj 
--select @EndProject,@EndPeriod
--return


IF @EndProject<=@EndPeriod
BEGIN
	 IF @EndProject<=@StartPeriod SET @EndProject=@StartPeriod
	 
	--CBD - Component Depreciation. 
	--Forecast - make the same as the sum of the Revenue items with a CBD Expense Element
	INSERT INTO #z_CBDAdj(AdjId,CalenderPeriod,Cost)
	SELECT -31 AS AdjId,R.CalenderPeriod,SUM(R.CBDRevenue) AS Cost FROM #z_Revenue R
	WHERE R.CalenderPeriod>=@EndProject AND R.CalenderPeriod<=@EndPeriod
	GROUP BY R.CalenderPeriod
	

	--Capitalised Component
	--Forecast - make the same (but negative) as the sum of the Cost items with a CBD Expense Element
	INSERT INTO #z_CBDAdj(AdjId,CalenderPeriod,Cost)
	SELECT -33 AS AdjId,C.CalenderPeriod,SUM(-C.CBDCost) AS Cost FROM #z_Costs C
	WHERE C.CalenderPeriod>=@EndProject AND C.CalenderPeriod<=@EndPeriod
	GROUP BY C.CalenderPeriod

	/*VV #1398*/
	--Forecast CBD Under/Over
	--Calculate as the difference between Current Projection "Absolute Rate" - CBD Expense Elements with CB =1 and 
	--the Plant Revenue Rate
	
	INSERT INTO #z_CBDAdj(AdjId,CalenderPeriod,Cost)
	SELECT -36 AS AdjId,A.CalenderPeriod,
	/* VV #1398 ISNULL(B.Revenue,0)-A.Cost*/A.Cost-ISNULL(B.Revenue,0) AS Cost
	FROM
	(SELECT P.Calendar_Period AS CalenderPeriod,
	SUM(ISNULL((C.PartsCostNoEsc * C.CumPartsEscalation / cpe1.CumPartsEscalation+
	C.LabourCostNoEsc*C.CumLaborEscalation/ce1.CumLaborEscalation+
	C.MiscCostNoEsc*C.CumMiscEscalation/ce1.CumMiscEscalation)/NULLIF(C.Frequency,0)*U.Period_Usage,0)) AS Cost
	FROM
	PH_CBD_PROJ_COSTS_V C
		INNER JOIN
	#z_Eqp E
		ON C.EqpProjId=E.EqpProjId
		INNER JOIN
	BUDGET_PERIOD P
		ON E.Budget_Equipment_Id=P.Budget_Equipment_Id
		INNER JOIN
	BUDGET_PERIOD_USAGE U
		ON P.Budget_Period_Id=U.Budget_Period_Id
		AND ISNULL(C.UsageQUOMId,0)=ISNULL(U.QUOM_Id,0)
		INNER JOIN 
	tblCostEscalations ce1 
		ON P.Period_End_Date >= ce1.EscalationDate 
		AND P.Period_End_Date < ce1.EndDate
		INNER JOIN 
	tblCostPartsEscalations cpe1 
		ON ce1.CostEscalationId = cpe1.CostEscalationId 
		AND C.ManufacturerId = cpe1.ManufacturerId
		/*VV 2766*/
		LEFT JOIN
	#z_EqpPeriod PE
		ON P.Budget_Equipment_Id=PE.Budget_Equipment_Id
		AND P.Calendar_Period=PE.Calendar_Period
	WHERE C.CBD_Expense=1 AND
	P.Calendar_Period>=@EndProject AND P.Calendar_Period<=@EndPeriod AND
	(@CC=0 OR C.Cost_Centre_Id IN(SELECT CostCentreId FROM #z_CC))
	AND (@CostExpenseId='' OR C.CostExpenseId IN(SELECT CostExpenseId FROM #z_CE))
	/*VV 2766*/
	AND (@PHProjectId='' OR PE.Calendar_Period>0)

	GROUP By P.Calendar_Period) A
		LEFT JOIN
	(SELECT CalenderPeriod,SUM(R.CBDRevenue) AS Revenue 
	 FROM #z_Revenue R GROUP BY CalenderPeriod) B
		ON A.CalenderPeriod=B.CalenderPeriod
END

DROP TABLE #z_Eqp,#z_CE,#z_CC

/*
VV #2663
/*VV #2472*/
IF(@PHProjectId<>'') DELETE #z_CBDAdj WHERE CalenderPeriod NOT IN(SELECT CalenderPeriod FROM #z_Revenue)
*/

/*Restrict the periods*/
SET @StartProject=NULL
SET @EndProject=NULL


SELECT @StartProject=MIN(CalenderPeriod),@EndProject=MAX(CalenderPeriod)
FROM
(
SELECT CalenderPeriod FROM #z_CBDAdj
UNION
SELECT CalenderPeriod FROM #z_Costs
UNION
SELECT CalenderPeriod FROM #z_Revenue) A

IF @StartProject IS NULL OR @EndProject IS NULL
BEGIN
	RETURN
END
ELSE
BEGIN
	SET @StartPeriod=@StartProject
	SET @EndPeriod=@EndProject
END


CREATE TABLE #z_Items(ListId int IDENTITY(1,1),ItemId int,SectionId int,
ItemDescr varchar(200) COLLATE DATABASE_DEFAULT)

INSERT INTO #z_Items(ItemId,ItemDescr,SectionId)
SELECT -1 AS ItemId,'Revenue' AS ItemDescr,1 AS SectionId

INSERT INTO #z_Items(ItemId,ItemDescr,SectionId)
SELECT CE.Cost_Expense_ID AS ItemId, CE.Cost_Expense_Code+' - '+CE.Cost_Expense_Desc AS ItemDescr,
1 AS SectionId
FROM
(SELECT DISTINCT Cost_Expense_ID FROM #z_Revenue) A
	INNER JOIN
COST_EXPENSE CE
	ON A.Cost_Expense_ID=CE.Cost_Expense_ID
ORDER BY CE.Cost_Expense_Code+' - '+CE.Cost_Expense_Desc

INSERT INTO #z_Items(ItemId,ItemDescr,SectionId)
SELECT -2 AS ItemId,'Gross Revenue' AS ItemDescr,1 AS SectionId

INSERT INTO #z_Items(ItemId,ItemDescr,SectionId)
SELECT -3 AS ItemId,'Costs' AS ItemDescr,2 AS SectionId

INSERT INTO #z_Items(ItemId,ItemDescr,SectionId)
SELECT CE.Cost_Expense_ID AS ItemId, CE.Cost_Expense_Code+' - '+CE.Cost_Expense_Desc AS ItemDescr,
2 AS SectionId
FROM
(SELECT DISTINCT Cost_Expense_ID FROM #z_Costs) A
	INNER JOIN
COST_EXPENSE CE
	ON A.Cost_Expense_ID=CE.Cost_Expense_ID
ORDER BY CE.Cost_Expense_Code+' - '+CE.Cost_Expense_Desc

INSERT INTO #z_Items(ItemId,ItemDescr,SectionId)
SELECT DISTINCT Cost_Expense_ID AS ItemId, '(NONE)' AS ItemDescr, 2 AS SectionId
FROM #z_Costs WHERE Cost_Expense_ID=0

INSERT INTO #z_Items(ItemId,ItemDescr,SectionId)
SELECT -4 AS ItemId,'Sub-Total' AS ItemDescr,2 AS SectionId
INSERT INTO #z_Items(ItemId,ItemDescr,SectionId)
SELECT -5 AS ItemId,'CBD Adjustments' AS ItemDescr,3 AS SectionId
INSERT INTO #z_Items(ItemId,ItemDescr,SectionId)
SELECT -31 AS ItemId,'CBD - Component Depreciation' AS ItemDescr,3 AS SectionId
INSERT INTO #z_Items(ItemId,ItemDescr,SectionId)
SELECT -32 AS ItemId,'(Profit)/Loss on Disposal of Component' AS ItemDescr,3 AS SectionId   
INSERT INTO #z_Items(ItemId,ItemDescr,SectionId)
SELECT -33 AS ItemId,'Capitalised Component' AS ItemDescr,3 AS SectionId
INSERT INTO #z_Items(ItemId,ItemDescr,SectionId)
SELECT -34 AS ItemId,'Capitalised Component Adjustment' AS ItemDescr,3 AS SectionId
INSERT INTO #z_Items(ItemId,ItemDescr,SectionId)
SELECT -35 AS ItemId,'Component CBD Adjustment' AS ItemDescr,3 AS SectionId
INSERT INTO #z_Items(ItemId,ItemDescr,SectionId)
SELECT -36 AS ItemId,'Forecast CBD Under/Over' AS ItemDescr,3 AS SectionId
INSERT INTO #z_Items(ItemId,ItemDescr,SectionId)
SELECT -4 AS ItemId,'SUB-Total' AS ItemDescr,3 AS SectionId
INSERT INTO #z_Items(ItemId,ItemDescr,SectionId)
SELECT -6 AS ItemId,'Total Costs' AS ItemDescr,4 AS SectionId
INSERT INTO #z_Items(ItemId,ItemDescr,SectionId)
SELECT -7 AS ItemId,'Net Plant Result' AS ItemDescr,5 AS SectionId
INSERT INTO #z_Items(ItemId,ItemDescr,SectionId)
SELECT -8 AS ItemId,'Cumulative Net Plant Result' AS ItemDescr,6 AS SectionId
INSERT INTO #z_Items(ItemId,ItemDescr,SectionId)
SELECT -9 AS ItemId,'Analysis of Net Plant Result' AS ItemDescr,7 AS SectionId
INSERT INTO #z_Items(ItemId,ItemDescr,SectionId)
SELECT -10 AS ItemId,'Ownership' AS ItemDescr,7 AS SectionId
INSERT INTO #z_Items(ItemId,ItemDescr,SectionId)
SELECT -11 AS ItemId,'Operating' AS ItemDescr,7 AS SectionId
INSERT INTO #z_Items(ItemId,ItemDescr,SectionId)
SELECT -12 AS ItemId,'CBD' AS ItemDescr,7 AS SectionId
INSERT INTO #z_Items(ItemId,ItemDescr,SectionId)
SELECT -13 AS ItemId,'' AS ItemDescr,7 AS SectionId


CREATE TABLE #z_Output(SectionId int,CalenderPeriod int,ItemId int,Cost float)

--Revenue
INSERT INTO #z_Output(SectionId,CalenderPeriod,ItemId,Cost)
SELECT 1 AS SectionId, R.CalenderPeriod,R.Cost_Expense_ID AS ItemId,
(R.CBDRevenue+R.OperatingRevenue+R.OwnershipRevenue) AS Cost
FROM #z_Revenue R

--GROSS REVENUE
INSERT INTO #z_Output(SectionId,CalenderPeriod,ItemId,Cost)
SELECT 1 AS SectionId, R.CalenderPeriod,-2 AS ItemId,
SUM(R.CBDRevenue+R.OperatingRevenue+R.OwnershipRevenue) AS Cost
FROM #z_Revenue R GROUP BY R.CalenderPeriod

--Costs
INSERT INTO #z_Output(SectionId,CalenderPeriod,ItemId,Cost)
SELECT 2 AS SectionId,C.CalenderPeriod,C.Cost_Expense_ID AS ItemId,
(C.CBDCost+C.OperatingCost+C.OwnershipCost) AS Cost
FROM #z_Costs C

--SUB-TOTAL
INSERT INTO #z_Output(SectionId,CalenderPeriod,ItemId,Cost)
SELECT 2 AS SectionId,C.CalenderPeriod,-4 AS ItemId,
SUM(C.CBDCost+C.OperatingCost+C.OwnershipCost) AS Cost
FROM #z_Costs C GROUP BY C.CalenderPeriod

--CBD Adjustments
INSERT INTO #z_Output(SectionId,CalenderPeriod,ItemId,Cost)
SELECT 3 AS SectionId,A.CalenderPeriod,A.AdjId AS ItemId,A.Cost
FROM #z_CBDAdj A

--SUB-TOTAL
INSERT INTO #z_Output(SectionId,CalenderPeriod,ItemId,Cost)
SELECT 3 AS SectionId,A.CalenderPeriod,-4 AS ItemId,SUM(A.Cost) AS Cost
FROM #z_CBDAdj A GROUP BY A.CalenderPeriod

--TOTAL COSTS=Cost+CBD Adjustment
INSERT INTO #z_Output(SectionId,CalenderPeriod,ItemId,Cost)
SELECT 4 AS SectionId,O.CalenderPeriod,-6 AS ItemId,SUM(O.Cost) AS Cost
FROM #z_Output O WHERE O.SectionId IN(2,3) AND O.ItemId=-4
GROUP BY O.CalenderPeriod

--Net Plant Result= Total Costs - Gross Revenue
INSERT INTO #z_Output(SectionId,CalenderPeriod,ItemId,Cost)
SELECT 5 AS SectionId,O.CalenderPeriod,-7 AS ItemId,
SUM(CASE O.ItemId WHEN -2 THEN 1.00 ELSE -1.00 END * O.Cost) AS Cost
FROM #z_Output O WHERE O.SectionId IN(4,1) AND O.ItemId IN(-6,-2)
GROUP BY O.CalenderPeriod

/*VV #333 For cumulatine Net Plant Results*/

INSERT INTO #z_Output(SectionId,CalenderPeriod,ItemId,Cost)
SELECT 5 AS SectionId,FP.CalenderPeriod,-7 AS ItemId,
0 AS Cost
FROM 
tblFinancialPeriods FP
	LEFT JOIN
(SELECT DISTINCT CalenderPeriod FROM #z_Output) O
	ON FP.CalenderPeriod=O.CalenderPeriod
WHERE FP.CalenderPeriod>=@StartPeriod AND FP.CalenderPeriod<=@EndPeriod
AND O.CalenderPeriod IS NULL

-- Cumulative Net Plant Result

INSERT INTO #z_Output(SectionId,CalenderPeriod,ItemId,Cost)

SELECT 6 AS SectionId,A.CalenderPeriod,-8 AS ItemId,SUM(B.Cost) AS Cost
FROM
(SELECT CalenderPeriod,Cost FROM #z_Output WHERE SectionId=5 AND ItemId=-7) A
	INNER JOIN
(SELECT CalenderPeriod,Cost FROM #z_Output WHERE SectionId=5 AND ItemId=-7) B
	ON A.CalenderPeriod>=B.CalenderPeriod
GROUP BY A.CalenderPeriod

--Analysis of Net Plant Result

--Ownership	
INSERT INTO #z_Output(SectionId,CalenderPeriod,ItemId,Cost)
SELECT 7 AS SectionId,FP.CalenderPeriod,-10 AS ItemId, ISNULL(R.Revenue,0)-ISNULL(C.Cost,0) AS Cost
FROM
tblFinancialPeriods FP
	LEFT JOIN
(SELECT CalenderPeriod,SUM(OwnershipCost) AS Cost FROM #z_Costs GROUP BY CalenderPeriod) C
	ON FP.CalenderPeriod=C.CalenderPeriod
	LEFT JOIN
(SELECT CalenderPeriod,SUM(OwnershipRevenue) AS Revenue FROM #z_Revenue GROUP BY CalenderPeriod) R
	ON FP.CalenderPeriod=R.CalenderPeriod
WHERE FP.CalenderPeriod>=@StartPeriod AND FP.CalenderPeriod<=@EndPeriod

--Operating
INSERT INTO #z_Output(SectionId,CalenderPeriod,ItemId,Cost)
SELECT 7 AS SectionId,FP.CalenderPeriod,-11 AS ItemId, ISNULL(R.Revenue,0)-ISNULL(C.Cost,0) AS Cost
FROM
tblFinancialPeriods FP
	LEFT JOIN
(SELECT CalenderPeriod,SUM(OperatingCost) AS Cost FROM #z_Costs GROUP BY CalenderPeriod) C
	ON FP.CalenderPeriod=C.CalenderPeriod
	LEFT JOIN
(SELECT CalenderPeriod,SUM(OperatingRevenue) AS Revenue FROM #z_Revenue GROUP BY CalenderPeriod) R
	ON FP.CalenderPeriod=R.CalenderPeriod
WHERE FP.CalenderPeriod>=@StartPeriod AND FP.CalenderPeriod<=@EndPeriod

--CBD
INSERT INTO #z_Output(SectionId,CalenderPeriod,ItemId,Cost)
SELECT 7 AS SectionId,FP.CalenderPeriod,-12 AS ItemId, 
ISNULL(R.Revenue,0)-ISNULL(C.Cost,0)-ISNULL(A.Cost,0) AS Cost
FROM
tblFinancialPeriods FP
	LEFT JOIN
(SELECT CalenderPeriod,SUM(CBDCost) AS Cost FROM #z_Costs GROUP BY CalenderPeriod) C
	ON FP.CalenderPeriod=C.CalenderPeriod
	LEFT JOIN
(SELECT CalenderPeriod,SUM(CBDRevenue) AS Revenue FROM #z_Revenue GROUP BY CalenderPeriod) R
	ON FP.CalenderPeriod=R.CalenderPeriod
	LEFT JOIN
(SELECT CalenderPeriod,SUM(Cost) AS Cost FROM #z_CBDAdj GROUP BY CalenderPeriod) A
	ON FP.CalenderPeriod=A.CalenderPeriod
WHERE FP.CalenderPeriod>=@StartPeriod AND FP.CalenderPeriod<=@EndPeriod

--Total of Analysis of Net Plant Result
INSERT INTO #z_Output(SectionId,CalenderPeriod,ItemId,Cost)
SELECT 7 AS SectionId,FP.CalenderPeriod,-13 AS ItemId, 
ISNULL(R.Cost,0)-ISNULL(C.Cost,0) AS Cost
FROM
tblFinancialPeriods FP
	LEFT JOIN
(SELECT CalenderPeriod,Cost FROM #z_Output WHERE SectionId=1 AND ItemId=-2) R/*Gross revenue*/
	ON FP.CalenderPeriod=R.CalenderPeriod
	LEFT JOIN
(SELECT CalenderPeriod,Cost FROM #z_Output WHERE SectionId=4 AND ItemId=-6) C/*Total Costs*/
	ON FP.CalenderPeriod=C.CalenderPeriod
WHERE FP.CalenderPeriod>=@StartPeriod AND FP.CalenderPeriod<=@EndPeriod

--drop table z_Revenue,z_Costs,z_CBDAdj
--select * into z_Revenue from #z_Revenue
--select * into z_Costs from #z_Costs
--select * into z_CBDAdj from #z_CBDAdj

/* VV #333*/
DECLARE @TotalCum float

SELECT @TotalCum=Cost FROM #z_Output WHERE ItemId=-8 AND CalenderPeriod=@EndPeriod

DROP TABLE #z_Revenue,#z_Costs,#z_CBDAdj
--drop table Table1
SELECT MonthEndDate,Cost,ItemDescr,ListId,ItemId
--into Table1
FROM
(SELECT FP.MonthEndDate,O.Cost,I.ItemDescr,I.ListId,I.ItemId
FROM
#z_Output O
	INNER JOIN
#z_Items I
	ON O.ItemId=I.ItemId
	AND O.SectionId=I.SectionId
	INNER JOIN
tblFinancialPeriods FP
	ON FP.CalenderPeriod=O.CalenderPeriod
	UNION ALL
SELECT A.MonthEndDate,
CASE WHEN A.ItemId IN(-1,-3,-5,-9) THEN NULL ELSE 0.00 END AS Cost,
A.ItemDescr,A.ListId,A.ItemId
FROM
(SELECT I1.ItemId,I1.SectionId,FP1.CalenderPeriod,FP1.MonthEndDate,I1.ItemDescr,I1.ListId
FROM
#z_Items I1
	CROSS JOIN
tblFinancialPeriods FP1
WHERE FP1.CalenderPeriod>=@StartPeriod AND FP1.CalenderPeriod<=@EndPeriod) A 
	LEFT JOIN
#z_Output O1
	ON A.ItemId=O1.ItemId
	AND A.SectionId=O1.SectionId
	AND A.CalenderPeriod=O1.CalenderPeriod
WHERE O1.ItemId IS NULL
	UNION ALL
SELECT @TotalDate AS MonthEndDate,
CASE 
WHEN I2.ItemId IN(-1,-3,-5,-9) THEN NULL 
WHEN I2.ItemId=-8 THEN @TotalCum
ELSE SUM(O2.Cost) END AS Cost,
I2.ItemDescr,I2.ListId,I2.ItemId
FROM
#z_Output O2
	INNER JOIN
#z_Items I2
	ON O2.ItemId=I2.ItemId
	AND O2.SectionId=I2.SectionId 
GROUP BY I2.ItemDescr,I2.ListId,I2.ItemId

) B
ORDER BY ListId,MonthEndDate

DROP TABLE #z_Items,#z_Output




GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[EQP_SIBLINGS_SELECTOR_GET_P]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[EQP_SIBLINGS_SELECTOR_GET_P]
GO

create       Procedure [dbo].[EQP_SIBLINGS_SELECTOR_GET_P]
/******************************************************************************
	File: EQP_SIBLINGS_SELECTOR_GET_P.sql
	Name: EQP_SIBLINGS_SELECTOR_GET_P

	Called By:

	Desc: 

	Auth: Alex Lassauniere
	Date: 15/01/08
*******************************************************************************
		Change History
*******************************************************************************
	Date:		Author:		Description:
	--------	--------	----------------------------------------
	01/02/08	AL			Revamped to use recursive_common_table_expression (instead of recursive function). 
							Perf improvement (10K eqp): before: >5 min, now 15s
	18/02/08	AL			Added Sorting routine at the end for the treeview
	19/02/08	AL			Also Sort by EqpPlan Name
	03/04/08	AL		 	Now uses EQP_SIBLINGS_F
	24/11/08	AL			CR7733: set top most selected parent to null so that @t2 can be sorted 
	06/01/09	AL			CR7811: fixed truncation error
	27/04/09	AL			CR8011: added NoRecordResponseVal
	04/05/11	DS			#556: Added primary key to table variables - results in 600% performance improvement (Newmont Aust DB with > 11,000 Eqp)
	04-Jul-11	VV			#2026: Added order by
	10 Aug 11	VV			#2258: Changed the output query
*******************************************************************************/
	/* Param List */
	@ParentEqpPlanID int=null,
	@EquipmentTypeId int=1,
	@UserID int=0, 
	@OtherInfo varchar(4)='DESC'

AS

SET @ParentEqpPlanID=NULLIF(@ParentEqpPlanID,0)

DECLARE @EQPPLAN_SIBLINGS_TMP1 table
			(EqpPlanID int  ,			
			EqpPlan varchar (100) COLLATE DATABASE_DEFAULT,
			ParentEqpPlanID int,
			--NestLevel int,
			PRIMARY KEY(EqpPlanID))


--Site access + max records
DECLARE @Level int, @MaxRecords int

--get user level permission
SELECT TOP 1 @Level=User_Access_Level_Id From USER_LEVEL_PERMISSION where AMT_User_Id = @UserId

--get Max records to return
SELECT TOP 1 @MaxRecords=Max_Records From AMT_VARIABLE
SET @MaxRecords=ISNULL(@MaxRecords,200)

--1: get parents
IF @ParentEqpPlanID IS NULL
BEGIN
	INSERT INTO @EQPPLAN_SIBLINGS_TMP1(EqpPlanID,EqpPlan,ParentEqpPlanID)--,NestLevel)
	SELECT	EqpPlanID,EqpPlan,ParentEqpPlanID--,0
	FROM	tblEqpPlans	
	WHERE	ParentEqpPlanID IS NULL AND Equipment_Type_ID=@EquipmentTypeId
	ORDER BY EqpPlan
END
ELSE
BEGIN
	INSERT INTO @EQPPLAN_SIBLINGS_TMP1(EqpPlanID,EqpPlan,ParentEqpPlanID)--,NestLevel)
	SELECT	EqpPlanID,EqpPlan,ParentEqpPlanID--,0
	FROM	tblEqpPlans	
	WHERE	EqpPlanID=@ParentEqpPlanID
END

--2: remove restricted eqpplans
If @Level = 1
	DELETE A
	FROM 
		@EQPPLAN_SIBLINGS_TMP1 A INNER JOIN
		EQP_SELECTOR_GET_V V ON A.EqpPlanID=V.EqpPlanID
	WHERE 
		BranchID NOT IN (SELECT AMT_OBJECT_ID FROM USER_LEVEL_PERMISSION WHERE AMT_USER_ID = @UserId AND User_Access_Level_Id=@Level)
If @Level = 2
	DELETE A
	FROM 
		@EQPPLAN_SIBLINGS_TMP1 A INNER JOIN
		EQP_SELECTOR_GET_V V ON A.EqpPlanID=V.EqpPlanID
	WHERE 
		SiteID NOT IN (SELECT AMT_OBJECT_ID FROM USER_LEVEL_PERMISSION WHERE AMT_USER_ID = @UserId AND User_Access_Level_Id=@Level) 


--AL: 01/02/08
DECLARE @EQPPLAN_SIBLINGS_TMP2 table
			(EqpPlanID int  ,			
			EqpPlan varchar (100),
			ParentEqpPlanID int,
			--NestLevel int,
			PRIMARY KEY(EqpPlanID));

DECLARE @parentEqpPlans varchar(max)
SET @parentEqpPlans= REPLACE(REPLACE((select EqpPlanId from @EQPPLAN_SIBLINGS_TMP1 for xml raw),'<row eqpplanid="',''),'"/>',',')

INSERT INTO @EQPPLAN_SIBLINGS_TMP2(EqpPlanId,EqpPlan,ParentEqpPlanId)
SELECT EqpPlanId,EqpPlan, ParentEqpPlanId
FROM	dbo.EQP_SIBLINGS_F(@parentEqpPlans)


--##### Output Data
--Checked if reached maxinmum level
DECLARE @Records int

SELECT @Records=COUNT(EqpPlanID)
FROM @EQPPLAN_SIBLINGS_TMP2

IF @MaxRecords>0 AND @Records>@MaxRecords
	SELECT 'The number of records exceeds the maximum limit of {0}. Please refine your filters.' AS NoRecordResponse, convert(varchar,@MaxRecords) AS NoRecordResponseVal	--AL: 27/04/09
ELSE 
BEGIN
	--Use @T1 and @T2 for sorting
	DECLARE @T1 table
			(EqpPlanID int  ,			
			ParentEqpPlanID int,
			--AL: 06/01/09
			--EqpPlan varchar (100))
			EqpPlan varchar (150),
			PRIMARY KEY(EqpPlanID))
	DECLARE @T2 table
			(EqpPlanID int  ,			
			ParentEqpPlanID int,
			--AL: 06/01/09
			--EqpPlan varchar (100))
			EqpPlan varchar (150)
			PRIMARY KEY(EqpPlanID))

	INSERT INTO @T1
	SELECT	A.EqpPlanID,A.ParentEqpPlanID,
			CASE @OtherInfo
				WHEN 'BRAN' THEN V.EqpPlan + ISNULL(' (' + V.Branch + ')','')
				WHEN 'SITE' THEN V.EqpPlan + ISNULL(' (' + V.[Site] + ')','')
				WHEN 'FLEE' THEN V.EqpPlan + ISNULL(' (' + V.Fleet + ')','')
				WHEN 'MODL' THEN V.EqpPlan + ISNULL(' (' + V.Model + ')','')
				WHEN 'SRNO' THEN V.EqpPlan + ISNULL(' (' + NULLIF(V.SerialNumber,'') + ')','')
				WHEN 'EQYR' THEN V.EqpPlan + ISNULL(' (' + convert(varchar,V.Eqp_Year) + ')','')
				WHEN 'EGRP' THEN V.EqpPlan + ISNULL(' (' + V.Model_Family + ')','')
				WHEN 'ECLS' THEN V.EqpPlan + ISNULL(' (' + V.Eqp_Class + ')','')
				WHEN 'MANU' THEN V.EqpPlan + ISNULL(' (' + V.Manufacturer + ')','')
				WHEN 'REGN' THEN V.EqpPlan + ISNULL(' (' + V.Region + ')','')
				WHEN 'DEVI' THEN V.EqpPlan + ISNULL(' (' + V.Division + ')','')
				WHEN 'ETYP' THEN V.EqpPlan + ISNULL(' (' + V.Equipment_Type + ')','')
				WHEN 'CRIT' THEN V.EqpPlan + ISNULL(' (' + V.Eqp_Criticality + ')','')
				WHEN 'LCTN' THEN V.EqpPlan + ISNULL(' (' + V.Eqp_Location + ')','')
				WHEN 'CTGR' THEN V.EqpPlan + ISNULL(' (' + V.Eqp_Category + ')','')
				WHEN 'CONT' THEN V.EqpPlan + ISNULL(' (' + V.[Contract] + ')','')
				WHEN 'DESC' THEN V.EqpPlan + ISNULL(' (' + NULLIF(V.Description,'') + ')','')
				ELSE V.EqpPlan			END as EqpPlan 
	FROM 
			@EQPPLAN_SIBLINGS_TMP2 A INNER JOIN
			EQP_SELECTOR_GET_V V ON A.EqpPlanID=V.EqpPlanID

	--AL: 24/11/08
	UPDATE @T1
	SET ParentEqpPlanID=NULL
	WHERE EqpPlanID IN (SELECT list_item FROM dbo.LIST_TO_TABLE_F(@ParentEqpPlanID))

	--Sorting
	INSERT INTO @T2
	SELECT * 
	FROM @T1
	WHERE ParentEqpPlanID IS NULL
	ORDER BY EqpPlan

	DELETE FROM @T1 
	WHERE EqpPlanId IN (SELECT EqpPlanid FROM @T2)

	SELECT @Records=COUNT(*) FROM @T1

	WHILE @Records>0
	BEGIN
		INSERT INTO @T2
		SELECT * 
		FROM @T1
		WHERE ParentEqpPlanId IN (SELECT EqpPlanId FROM @T2)
		ORDER BY EqpPlan

		DELETE FROM @T1 where EqpPlanid IN (SELECT EqpPlanId FROM @T2)

		SELECT @Records=COUNT(*) FROM @T1
	end
	
	/*VV #2258 Changed the output
	
	--Return results
	SELECT EqpPlanId,ParentEqpPlanID,EqpPlan 
	FROM @T2
	/*VV #2026*/
	order by SIGN(ParentEqpPlanID),EqpPlan
	*/
	
	DECLARE @Results TABLE(ListId int IDENTITY(1,1),EqpPlanID int  ,			
			EqpPlan varchar (100) COLLATE DATABASE_DEFAULT,
			ParentEqpPlanID int PRIMARY KEY (ListId))
			
	INSERT INTO @Results(EqpPlanID,ParentEqpPlanID,EqpPlan)
	SELECT A1.EqpPlanId,A1.ParentEqpPlanID,A1.EqpPlan 
	FROM 
	@T2 A1
		LEFT JOIN
	@T2 A2
		ON A1.ParentEqpPlanID=A2.EqpPlanId
	WHERE A2.EqpPlanId IS NULL
	ORDER BY A1.EqpPlan
	
	DELETE @T2 WHERE EqpPlanId IN(SELECT EqpPlanId FROM @Results)
	
	
	WHILE  EXISTS(SELECT * FROM @T2)
	BEGIN
		INSERT INTO @Results(EqpPlanID,ParentEqpPlanID,EqpPlan)
		SELECT A.EqpPlanId,A.ParentEqpPlanID,A.EqpPlan 
		FROM 
		@Results R
			INNER JOIN
		@T2 A
			ON R.EqpPlanID=A.ParentEqpPlanID
		ORDER BY A.EqpPlan
			
		IF @@ROWCOUNT=0 BREAK
		
		DELETE @T2 WHERE EqpPlanId IN(SELECT EqpPlanId FROM @Results)
	END
	
	SELECT EqpPlanId,ParentEqpPlanID,EqpPlan FROM @Results ORDER BY ListId
	
	
END

GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[MB_CHECK_IN_P]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[MB_CHECK_IN_P]
GO

create	Procedure [dbo].[MB_CHECK_IN_P]
/******************************************************************************
	
	Called By: Amt Mobile


	Auth: Veronika Vasylyeva
	Date: 14 Dec 10
*******************************************************************************
		Change History
*******************************************************************************
	Date:		Author:			Description:
	--------	--------		----------------------------------------
	18 Mar 11	V Vasylyeva		#1427 Backlog age
	06 May 11	V Vasylyeva		#1516 changed lenth FileName in ATTACHED_DOCUMENT_TASK 
	 3 Jun 11	V Vasylyeva		#1867 changed order of event update anf workorder update
	24 Jun 11	V Vasylyeva		#2001 Do not update event if MobileDowntime=1 but event
								details are not supplyed 
	 3 Aug 11	V Vasylyeva		#2177 - encoding problem
	24 Oct 11	V Vasylyeva		#2694 error in check in
*******************************************************************************/
	/* Param List */
@UserId int=0,
@MessageWO varchar(2000)='' OUTPUT,
@UniqueKeyWO varchar(50)='' OUTPUT,
@MessageE varchar(2000)='' OUTPUT,
@UniqueKeyE varchar(50)='' OUTPUT,
@CheckInXM nvarchar(max)=null/*VV 2177*/


AS


DECLARE @hDoc int
DECLARE @CurrentDate datetime
DECLARE @TS_O int
DECLARE @TS_YTS int
DECLARE @TS_IP int
DECLARE @TS_C int
DECLARE @TS_A int
DECLARE @TS_D int
DECLARE @AmtPlanningModeAdv int

DECLARE @MobileDowntime bit,@AMTPlanningModeId int

/*VV 2177*/
declare @CheckInXML xml
set @CheckInXML=CONVERT(XML, @CheckInXM)

--Workorder variables passed from Mobile
DECLARE @TaskId int,@EqpPlanId int,@PrimaryCause bit,@EventId int,@TaskStatusId int,
@WorkorderNumber varchar(50),@Description varchar(500),@ComponentCodeId int,@ModifierId int,
@TaskTypeId int,@ApplicationCodeId int,@PlannedDownTime datetime,@ExpectedDuration float,
@ActualDownTime datetime,@BreakDown bit,@SymptomId int,
@SymptomNotes varchar(8000),@CauseId int,@CauseNotes varchar(8000),@RepairCodeId int,
@RepairNotes varchar(8000),@SIMSCodeId int,@OccurrenceTypeId int,@EmployeeId int,
@WorkGroupId int,@Work_Location varchar(100),@ActualEmployeeId int,@ActualWorkGroupId int,
@CompletedById int,@PartNo varchar(50),@PartDescription varchar(50),@GroupNo varchar(50),
@GroupDescription varchar(50),@FailedGroupListPosition varchar(100),
@FailedGroupPartsListGroup varchar(100),@LastModDate datetime,@PriorityId int,@RaisedById int,
@PartsReturned bit,@TaskModeId int,@OpReplaced bit,@ActualDuration float,
@FailedPartListPosition	varchar(100),@FailedPartListGroup varchar(100),@EventUniqueKey varchar(50),
@Inspection bit


--Event variables passed from Mobile
DECLARE @EventStatusId int,@Planned bit,@BreakDownE bit,@EventPreventionId int,
@PlannedDownTime_E datetime,@PlannedUpTime_E datetime,@ActualDownTime_E datetime,
@ActualUpTime_E datetime,@DescriptionE varchar(500)



/*Event variables */
declare @Event_Id int, @Priority_ID int, @Work_Location_ID int, 
@Expected_Up_Time datetime, @Confirmed bit, @NotesE varchar(2500), @TestTime float,@ReleasedByID int,
@QUOM_ID int,@Planned_Down_Time datetime,@Planned_Up_Time datetime,@Repair_Details varchar(100),
@Event_Status_ID int,@xmlEvent varchar(max)

--Workorder variables which need to be passed from workorders because these values are not updated from Mobile
DECLARE @Source_ID int,@Task_Status_ID int,@Date_Notified datetime,@Component_ID varchar(100),
@EMI_Ref varchar(50),@EMIssueId int,@Redo bit,@Task_Planned_Time_ID int,@Customer_Ref varchar(100), 
@Expected_Labor_Hours float,@Planning_Notes varchar(8000),@Actual_Labor_Hrs float,@Notes varchar(1000),
@PartsStatusRequired bit,@PartsStatusOrdered bit,@PartsStatusReady bit,@Work_Order_ID int,
@Strategy_Proj_Task_Opt_ID int,@Sort_Order int,@WO_Create_Date datetime,@Performed_By_Date datetime,
@Parts_Available_Date datetime,@Parts_Order_Details VARCHAR(1000),@WO_Counter int,
@Work_Order_Number_External varchar(50),@Cost_Bearer_ID int,@Task_Warranty bit,@Redo_Work_Order_ID int,
@ViewWarranty bit,@HealthSafetyId int,@PlannedOffset float,@SiteId int,@CostCentreId int,
@BranchId int,@CustomerId int,@PartEntryDistributionCodeId int,@DefWorkGroupId int,
@PartsCostExpenseId int,@LabourCostExpenseId int,@MiscCostExpenseId int,@SpecificOperationCodes bit,
@WorkOrderDate datetime,@WarrantyClaimable bit,@ReviewedEmployeeId int,@WarrantyNotes varchar(500),
@WarrantyDays float,@WarrantyUsage float,@WarrantyDaysArchived float,@WarrantyUsageAcrhived float,
@WarrantySupplierId int,@ClaimRef varchar(20),@SupplierRef varchar(20),@SummaryDescription varchar(200),
@ClaimStatusId int,@ClaimedByEmployeeId int,@ClaimeDate datetime,@ClaimDescription varchar(1000),
@JobPartsCost float,@JobLabourCost float,@JobMiscCost float,@ClaimedPartsCost float,
@ClaimedLabourCost float,@ClaimedMiscCost float,@RecPartsCost float,@RecLabourCost float,
@RecMiscCost float,@LabourEntryDistributionCodeId int,@MiscEntryDistributionCodeId int,
@SupplierContact varchar(100),@TaskAuthorised bit,@ActualOffset float,@ChangeoutCategoryId int,
@LifeConfirmed bit ,@OriginalPartTypeId int ,@SerialNoIn varchar(100),@SerialNoOut varchar(100),
@IsOverwriteLife bit ,@OverwriteLifeAchieved float,@ConditionMonitoringIntervention bit,	
@FailedPartLifeAchieved	FLOAT,@PartSerialNoRemoved	VARCHAR(MAX),@PartSerialNoInstalled	VARCHAR(MAX),
@LastNotified datetime,@ResourceStatusReady bit,@AuthorisationRequestByID int,@WOClosed bit,
@Work_Order varchar(50),@Task_Id int,@Event_Id_WO int

DECLARE @opAdded varchar(max),@opModified varchar(max),@MeasurementTBL varchar(max)

DECLARE @VarianceCauseId int,@ResponsibilityID int

SET @CurrentDate=GETDATE();
SET @TS_YTS=6
SET @TS_IP=2
SET @TS_C=3
SET @TS_A=5
SET @TS_O=1
SET @TS_D=4

SET @AmtPlanningModeAdv=1


CREATE TABLE #z_DownTimeAllocation_MB(DownTimeAllocationId int,EventId int,PrimaryDTA bit,
TaskTypeId int,ResponsibilityId int,VarianceCauseId int,PlannedHours float,ActualHours float,
DownTimeAllocationIdAmt int DEFAULT 0,UniqueKey varchar(50) COLLATE DATABASE_DEFAULT,
Notes varchar(500) COLLATE DATABASE_DEFAULT
PRIMARY KEY(DownTimeAllocationId))

CREATE TABLE #z_Workorder_MB(
	TaskId int,
	EqpPlanId int,
	AMTPlanningModeId int,
	PrimaryCause bit,
	EventId int,
	TaskStatusId int,
	WorkorderNumber varchar(50) COLLATE DATABASE_DEFAULT,
	[Description] varchar(500) COLLATE DATABASE_DEFAULT,
	ComponentCodeId int,
	ModifierId int,
	TaskTypeId int,
	ApplicationCodeId int,
	PlannedDownTime datetime,
	ExpectedDuration float,
	ActualDownTime datetime,
	ActualDuration float,
	BreakDown bit,
	SymptomId int,
	SymptomNotes varchar(8000) COLLATE DATABASE_DEFAULT,
	CauseId int,
	CauseNotes varchar(8000) COLLATE DATABASE_DEFAULT,
	RepairCodeId int,
	RepairNotes varchar(8000) COLLATE DATABASE_DEFAULT,
	SIMSCodeId int,
	OccurrenceTypeId int,
	EmployeeId int,
	WorkGroupId int,
	Work_Location varchar(100) COLLATE DATABASE_DEFAULT,
	ActualEmployeeId int,
	ActualWorkGroupId int,
	CompletedById int,
	PartNo varchar(50) COLLATE DATABASE_DEFAULT,
	PartDescription varchar(50) COLLATE DATABASE_DEFAULT,
	GroupNo varchar(50) COLLATE DATABASE_DEFAULT,
	GroupDescription varchar(50) COLLATE DATABASE_DEFAULT,
	FailedGroupListPosition varchar(100) COLLATE DATABASE_DEFAULT,
	FailedGroupPartsListGroup varchar(100) COLLATE DATABASE_DEFAULT,
	LastModDate  datetime,
	PriorityId int,
	RaisedById int,
	PartsReturned bit,
	TaskModeId int,
	UniqueKey varchar(50) COLLATE DATABASE_DEFAULT,
	OpReplaced bit,
	FailedPartListPosition varchar(1000) COLLATE DATABASE_DEFAULT,
	FailedPartListGroup varchar(1000) COLLATE DATABASE_DEFAULT,
	EventUniqueKey varchar(50) COLLATE DATABASE_DEFAULT,
	Inspection bit
	PRIMARY KEY(TaskId))
	
CREATE TABLE #z_WOLabour_MB(
	TaskOperationId int,
	TaskOperationLabourId int,
	LabourActivityId int,
	LabourActivityWO varchar(50) COLLATE DATABASE_DEFAULT,
	WorkGroupId int,
	PlannedLabourHrs float,
	EmployeeId int,
	ActualLabourHrs float,
	JSARead bit,
	JSAReadId int,
	TaskOperationLabourIdAmt int DEFAULT 0,
	UniqueKey varchar(50) COLLATE DATABASE_DEFAULT
	PRIMARY KEY (TaskOperationLabourId)
) 

CREATE TABLE #z_Event_MB(
	EventId int,
	EqpPlanId int,
	EventStatusId int,
	Planned bit,
	BreakDown bit,
	EventPreventionId int,
	UniqueKey varchar(50) COLLATE DATABASE_DEFAULT,
	PlannedDownTime datetime,
	PlannedUpTime datetime,
	ActualDownTime datetime,
	ActualUpTime datetime
	/*Description varchar(500) COLLATE DATABASE_DEFAULT*/
	PRIMARY KEY(EventId)
) 


CREATE TABLE #z_AttachedDocumentsEWWorkstep_MB(
	EWWorkstepId int,
	FileName varchar(800) COLLATE DATABASE_DEFAULT/*VV #1516*/
	)
	
CREATE TABLE #z_WOAttachedDocument_MB(
	TaskId int,
	FileName varchar(800) COLLATE DATABASE_DEFAULT/*VV #1516*/
) 

CREATE TABLE #z_WOElectronicWorkscope_MB(
	EWWorkorderId int,
	TaskOperationId int,
	EWTitle varchar(200) COLLATE DATABASE_DEFAULT,
	UniqueKey varchar(50) COLLATE DATABASE_DEFAULT,
	EWWorkorderIdAmt int DEFAULT 0
	PRIMARY KEY(EWWorkorderId)
) 

CREATE TABLE #z_WOMisc_MB(
	TaskOperationId int,
	TaskOperationMiscId int,
	MiscCategoryId int,
	TaskOperationMiscDesc varchar(200) COLLATE DATABASE_DEFAULT
	PRIMARY KEY(TaskOperationMiscId)
) 

CREATE TABLE #z_WOOperation_MB(
	TaskId int,
	TaskOperationId int,
	SortOrder int,
	TaskOperation varchar(200) COLLATE DATABASE_DEFAULT,
	ComponentCodeId int,
	ModifierCodeId int,
	JobCodeId int,
	OperationInstructions varchar(8000) COLLATE DATABASE_DEFAULT,
	OperationOffset float,
	PlannedDuration float,	
	Completed bit,
	PartsReturned bit,
	WorkGroupId int,
	TaskOperationIdAmt int DEFAULT 0,
	UniqueKey varchar(50) COLLATE DATABASE_DEFAULT
	PRIMARY KEY(TaskOperationId)
) 

CREATE TABLE #z_WOPart_MB(
	TaskOperationId int,
	TaskOperationPartId int,
	PartNumber varchar(50) COLLATE DATABASE_DEFAULT,
	PartDescription varchar(50) COLLATE DATABASE_DEFAULT,
	PlannedQty float
	PRIMARY KEY(TaskOperationPartId)
) 

CREATE TABLE #z_WOWorkstep_MB(
	EWWorkstepId int,
	EWWorkorderId int,
	EWStepTemplateId int,
	Sequence int,
	EWWorkstepTitle varchar(200) COLLATE DATABASE_DEFAULT,
	ComponentCodeId int,
	CMCodeId int,
	Instructions varchar(100) COLLATE DATABASE_DEFAULT,
	DocumentGUID varchar(50) COLLATE DATABASE_DEFAULT,
	DocumentExt varchar(50) COLLATE DATABASE_DEFAULT,
	Safety bit,
	Environmental bit,
	/*Reading float,*/
	Reading varchar(50) COLLATE DATABASE_DEFAULT,
	CMRatingId int,
	ResultId int,
	PerformedById int,
	Comments varchar(1000) COLLATE DATABASE_DEFAULT,
	CreateDefectWO bit,
	DefectRepairInstructions varchar(1000) COLLATE DATABASE_DEFAULT,
	Actioned bit,
	ActionedComments varchar(1000) COLLATE DATABASE_DEFAULT,
	ReviewdById int,
	UniqueKey varchar(50) COLLATE DATABASE_DEFAULT,
	EWWorkstepIdAmt int DEFAULT 0
	PRIMARY KEY(EWWorkstepId)
) 

CREATE TABLE #z_MEASUREMENT_MB(ListId int IDENTITY(1,1),CMCodeId int,CMMeasurementId int,  
     NewMeasurementTime datetime,NewReading float,CMRatingID int,  
     NewExtComments varchar(5000) COLLATE database_default PRIMARY KEY(ListId))   

EXEC sp_xml_preparedocument @hDoc OUTPUT, @CheckInXML 


SELECT @TaskId=TaskId, @EqpPlanId=EqpPlanId, 
@PrimaryCause=PrimaryCause, @EventId=NULLIF(EventId,0), @TaskStatusId=TaskStatusId, 
@WorkorderNumber=NULLIF(WorkorderNumber,''), @Description=Description, 
@ComponentCodeId=ComponentCodeId, 
@ModifierId=ModifierId, @TaskTypeId=TaskTypeId, @ApplicationCodeId=ApplicationCodeId, 
@PlannedDownTime=PlannedDownTime, 
@ExpectedDuration=ISNULL(ExpectedDuration,0),
@ActualDownTime=ActualDownTime, 
@BreakDown=BreakDown, @SymptomId=SymptomId, 
@SymptomNotes=NULLIF(SymptomNotes,''), 
@CauseId=CauseId, @CauseNotes=NULLIF(CauseNotes,''), @RepairCodeId=RepairCodeId, 
@RepairNotes=NULLIF(RepairNotes,''), 
@SIMSCodeId=NULLIF(SIMSCodeId,0),@OccurrenceTypeId= OccurrenceTypeId,@EmployeeId= NULLIF(EmployeeId,0),
@WorkGroupId= NULLIF(WorkGroupId,0),@Work_Location=NULLIF(Work_Location,''),
@ActualEmployeeId= NULLIF(ActualEmployeeId,0), 
@ActualWorkGroupId=NULLIF(ActualWorkGroupId,0),@CompletedById= NULLIF(CompletedById,0),
@PartNo= NULLIF(PartNo,''), 
@PartDescription=NULLIF(PartDescription,''), @GroupNo=NULLIF(GroupNo,''),
@GroupDescription= NULLIF(GroupDescription,''), 
@FailedGroupListPosition=NULLIF(FailedGroupListPosition,''),
@FailedGroupPartsListGroup= NULLIF(FailedGroupPartsListGroup,''), 
@LastModDate=LastModDate,@PriorityId= PriorityId,@RaisedById= NULLIF(RaisedById,0),
@PartsReturned= PartsReturned,
@TaskModeId= TaskModeId,@UniqueKeyWO= UniqueKey,@OpReplaced=OpReplaced,
@ActualDuration=ActualDuration,
@FailedPartListPosition=FailedPartListPosition,
@FailedPartListGroup=FailedPartListGroup,
@EventUniqueKey=ISNULL(EventUniqueKey,''),
@Inspection=ISNULL(Inspection,0)

FROM  OPENXML (@hDoc,'/CheckInData/Workorders/WorkorderBase',2) WITH #z_Workorder_MB


insert into #z_WOLabour_MB(TaskOperationId,TaskOperationLabourId,LabourActivityId,LabourActivityWO,
WorkGroupId,PlannedLabourHrs,EmployeeId,ActualLabourHrs,JSARead,JSAReadId,
UniqueKey)
SELECT TaskOperationId,TaskOperationLabourId,LabourActivityId,LabourActivityWO,
WorkGroupId,PlannedLabourHrs,EmployeeId,ActualLabourHrs,JSARead,JSAReadId,
ISNULL(NULLIF(UniqueKey,''),NEWID()) AS UniqueKey
FROM  OPENXML (@hDoc,'/CheckInData/WOLabours/WOLabourBase',2) WITH #z_WOLabour_MB

insert into #z_AttachedDocumentsEWWorkstep_MB(EWWorkstepId,[FileName])
SELECT EWWorkstepId,[FileName] 
FROM  OPENXML (@hDoc,'/CheckInData/AttachedDocumentsEWWorksteps/AttachedDocumentsEWWorkstep',2) WITH #z_AttachedDocumentsEWWorkstep_MB

SELECT @EventStatusId=EventStatusId,@Planned=Planned,@BreakDown=BreakDown,
@EventPreventionId=EventPreventionId,@UniqueKeyE=UniqueKey,@PlannedDownTime_E=PlannedDownTime,
@PlannedUpTime_E=PlannedUpTime,@ActualDownTime_E=ActualDownTime,@ActualUpTime_E=ActualUpTime
/*@DescriptionE=Description*/
FROM  OPENXML (@hDoc,'/CheckInData/Events/EventBase',2) WITH #z_Event_MB

insert into #z_WOAttachedDocument_MB(TaskId,[FileName])
SELECT TaskId,[FileName]
FROM  OPENXML (@hDoc,'/CheckInData/WOAttachedDocuments/WOAttachedDocument',2) WITH #z_WOAttachedDocument_MB

insert into #z_WOElectronicWorkscope_MB(EWWorkorderId,TaskOperationId,EWTitle,UniqueKey)
SELECT EWWorkorderId,TaskOperationId,EWTitle,ISNULL(NULLIF(UniqueKey,''),NEWID()) AS UniqueKey
FROM  OPENXML (@hDoc,'/CheckInData/WOElectronicWorkscopes/WOElectronicWorkscopeBase',2) WITH #z_WOElectronicWorkscope_MB

insert into #z_WOMisc_MB(TaskOperationId,TaskOperationMiscId,MiscCategoryId,TaskOperationMiscDesc)
SELECT TaskOperationId,TaskOperationMiscId,MiscCategoryId,TaskOperationMiscDesc
FROM  OPENXML (@hDoc,'/CheckInData/WOMiscs/WOMisc',2) WITH #z_WOMisc_MB

insert into #z_WOOperation_MB(TaskId,TaskOperationId,SortOrder,TaskOperation,ComponentCodeId,ModifierCodeId,
JobCodeId,OperationInstructions,OperationOffset,PlannedDuration,Completed,
PartsReturned,WorkGroupId,UniqueKey)
SELECT TaskId,TaskOperationId,SortOrder,TaskOperation,ComponentCodeId,ModifierCodeId,
JobCodeId,OperationInstructions,OperationOffset,PlannedDuration,Completed,
PartsReturned,WorkGroupId,ISNULL(NULLIF(UniqueKey,''),NEWID()) AS UniqueKey
FROM  OPENXML (@hDoc,'/CheckInData/WOOperations/WOOperationBase',2) WITH #z_WOOperation_MB

insert into #z_WOPart_MB(TaskOperationId,TaskOperationPartId,PartNumber,PartDescription,PlannedQty)
SELECT TaskOperationId,TaskOperationPartId,PartNumber,PartDescription,PlannedQty
FROM  OPENXML (@hDoc,'/CheckInData/WOParts/WOPart',2) WITH #z_WOPart_MB

insert into #z_WOWorkstep_MB(EWWorkstepId,EWWorkorderId,EWStepTemplateId,Sequence,EWWorkstepTitle,
ComponentCodeId,CMCodeId,Instructions,DocumentGUID,DocumentExt,Safety,Environmental,Reading,CMRatingId,
ResultId,PerformedById,Comments,CreateDefectWO,DefectRepairInstructions,Actioned,ActionedComments,
ReviewdById,UniqueKey)
SELECT EWWorkstepId,EWWorkorderId,EWStepTemplateId,Sequence,EWWorkstepTitle,
ComponentCodeId,CMCodeId,Instructions,DocumentGUID,DocumentExt,Safety,Environmental,Reading,CMRatingId,
ResultId,PerformedById,Comments,CreateDefectWO,DefectRepairInstructions,Actioned,ActionedComments,
ReviewdById,ISNULL(NULLIF(UniqueKey,''),NEWID()) AS UniqueKey
FROM  OPENXML (@hDoc,'/CheckInData/WOWorksteps/WOWorkstep',2) WITH #z_WOWorkstep_MB

insert into #z_DownTimeAllocation_MB(DownTimeAllocationId,EventId,PrimaryDTA,TaskTypeId,
ResponsibilityId,VarianceCauseId,PlannedHours,ActualHours,UniqueKey,Notes)
SELECT DownTimeAllocationId,EventId,PrimaryDTA,TaskTypeId,ResponsibilityId,VarianceCauseId,
PlannedHours,ActualHours,ISNULL(NULLIF(UniqueKey,''),NEWID()) AS UniqueKey,Notes
FROM OPENXML (@hDoc,'/CheckInData/DowntimeAllocations/DowntimeAllocation',2) WITH #z_DownTimeAllocation_MB

EXEC sp_xml_removedocument @hDoc



--Update ids. Mobile data is not updated from AMT. So Ids can be negative.
UPDATE M
SET TaskOperationIdAmt=O.Task_Operation_Id 
FROM
#z_WOOperation_MB M
	INNER JOIN
TASK_OPERATION O
	ON M.UniqueKey=O.UniqueKey


UPDATE M SET TaskOperationLabourIdAmt=L.Task_Operation_Labour_Id 
FROM
#z_WOLabour_MB M
	INNER JOIN
TASK_OPERATION_LABOUR L
	ON M.UniqueKey=L.UniqueKey
	
UPDATE M SET EWWorkstepIdAmt=S.EWWorkstepId
FROM
#z_WOWorkstep_MB M
	INNER JOIN
EW_WORKSTEP S
	ON M.UniqueKey=S.UniqueKey
	

UPDATE M SET EWWorkorderIdAmt=E.EWWorkorderId
FROM
#z_WOElectronicWorkscope_MB M
	INNER JOIN
EW_WORKORDER E
	ON M.UniqueKey=E.UniqueKey



SELECT @MobileDowntime =MobileDowntime,@AMTPlanningModeId=Advanced_Planning, @QUOM_ID=Primary_QUOM_ID 
FROM tblEqpPlans WHERE EqpPlanId=@EqpPlanId



--select values which are not passed from mobile for the workorders to update    
select @Task_Id=T.Task_Id,
@Source_ID=Source_ID, 
@Task_Status_ID=Task_Status_ID,
@Date_Notified=Date_Notified, 
@Component_ID=Component_ID, 
@EMI_Ref=EMI_Ref,
@EMIssueId=EM_Issue_Id, 
@Redo=Redo, 
@Task_Planned_Time_ID=Task_Planned_Time_ID, 
@Customer_Ref=Customer_Ref, 
@Expected_Labor_Hours=Expected_Labor_Hours, 
@Planning_Notes=Planning_Notes,
@Actual_Labor_Hrs=Actual_Labor_Hrs,                    
@Notes=Notes,
@PartsStatusRequired=PartsStatusRequired,
@PartsStatusOrdered=PartsStatusOrdered,
@PartsStatusReady=PartsStatusReady,
@Work_Order_ID=Work_Order_ID,
@Work_Order=Work_Order,
@Strategy_Proj_Task_Opt_ID=Strategy_Proj_Task_Opt_ID,
@Sort_Order=Sort_Order,
@WO_Create_Date=WO_Create_Date,
@Performed_By_Date=Performed_By_Date,
@Parts_Available_Date=Parts_Available_Date,
@Parts_Order_Details=Parts_Order_Details,
@WO_Counter=WO_Counter,
@Work_Order_Number_External=T.Work_Order_Number_External,
@Cost_Bearer_ID=Cost_Bearer_ID,
@Task_Warranty=Task_Warranty,
@Redo_Work_Order_ID=Redo_Work_Order_ID,
@ViewWarranty=View_Warranty,
@HealthSafetyId=Health_Safety_Id,
@PlannedOffset=Planned_Offset,
@SiteId=Site_Id,
@CostCentreId=Cost_Centre_Id,
@BranchId=Branch_Id,
@CustomerId=Customer_Id,
@PartEntryDistributionCodeId=Part_Entry_Distribution_Code_Id,
@DefWorkGroupId=Def_Work_Group_Id,
@PartsCostExpenseId=Parts_Cost_Expense_Id,
@LabourCostExpenseId=Labour_Cost_Expense_Id,
@MiscCostExpenseId=Misc_Cost_Expense_Id,
@SpecificOperationCodes=Specific_Operation_Codes,
@WorkOrderDate=Work_Order_Date,
@WarrantyClaimable=Warranty_Claimable,
@ReviewedEmployeeId=Reviewed_Employee_Id,
@WarrantyNotes=Warranty_Notes,
@WarrantyDays=Warranty_Days,
@WarrantyUsage=Warranty_Usage,
@WarrantyDaysArchived=Warranty_Days_Archived,
@WarrantyUsageAcrhived=Warranty_Usage_Acrhived,
@WarrantySupplierId=Warranty_Supplier_Id,
@ClaimRef=Claim_Ref,
@SupplierRef=Supplier_Ref,
@SummaryDescription=Summary_Description,
@ClaimStatusId=Claim_Status_Id,
@ClaimedByEmployeeId=Claimed_By_Employee_Id,
@ClaimeDate=Claime_Date,
@ClaimDescription=Claim_Description,
@JobPartsCost=Job_Parts_Cost,
@JobLabourCost=Job_Labour_Cost,
@JobMiscCost=Job_Misc_Cost,
@ClaimedPartsCost=Claimed_Parts_Cost,
@ClaimedLabourCost=Claimed_Labour_Cost,
@ClaimedMiscCost=Claimed_Misc_Cost,
@RecPartsCost=Rec_Parts_Cost,
@RecLabourCost=Rec_Labour_Cost,
@RecMiscCost=Rec_Misc_Cost,
@LabourEntryDistributionCodeId=Labour_Entry_Distribution_Code_Id,
@MiscEntryDistributionCodeId=Misc_Entry_Distribution_Code_Id,
@SupplierContact=Supplier_Contact,
@TaskAuthorised=Task_Authorised,
@ActualOffset=ActualOffset,
@ChangeoutCategoryId=ChangeoutCategoryId,
@LifeConfirmed=LifeConfirmed,
@OriginalPartTypeId=OriginalPartTypeId,
@SerialNoIn=SerialNoIn,
@SerialNoOut=SerialNoOut,
@IsOverwriteLife=IsOverwriteLife,
@OverwriteLifeAchieved=OverwriteLifeAchieved,
@ConditionMonitoringIntervention=ConditionMonitoringIntervention,
@FailedPartLifeAchieved=FailedPartLifeAchieved,
@LastNotified=LastNotified,
@ResourceStatusReady=ResourceStatusReady,
@AuthorisationRequestByID=AuthorisationRequestByID,
@WOClosed=CONVERT(BIT,CASE WHEN WOT.AMTStatusId=2 THEN 1 ELSE 0 END),
@PlannedDownTime=Planned_Down_Time, 
@ExpectedDuration=Expected_Duration,
@EmployeeId=Employee_ID,
@WorkGroupId=Work_Group_Id,
@Event_Id_WO=Event_ID
FROM
TASK T 
	LEFT OUTER JOIN  
tblWorkOrders WOT  
	ON T.Work_Order_ID=WOT.WorkOrderId  

WHERE T.UniqueKey=@UniqueKeyWO

IF @Task_Id>0 set @TaskId=@Task_Id


/*If event details are supplied then @UniqueKeyE is not null*/
/*Unique key shall be the same as @EventUniqueKey in workorder*/
IF ISNULL(@UniqueKeyE,'')<>'' AND @MobileDowntime=1
BEGIN
	SELECT @Event_Id =Event_Id,@Priority_ID=Priority_ID, 
	@Work_Location_ID=Work_Location_ID, @Expected_Up_Time=Expected_Up_Time, 
	@NotesE=Notes, @TestTime=Test_Time,@ReleasedByID=Released_By_ID,@Planned_Down_Time=Planned_Down_Time,
	@Planned_Up_Time=Planned_Up_Time,@Repair_Details=Repair_Details,@Event_Status_ID=Event_Status_ID,
	@DescriptionE=Description
	FROM EVENT WHERE UniqueKey=@UniqueKeyE
	
END
ELSE IF ISNULL(@EventUniqueKey,'')<>''
BEGIN
	/*If workorder is linked to event then @EventUniqueKey is supplied. This works for equipment
	which downtime is not recorded in AMT*/
	SELECT @Event_Id =Event_Id FROM EVENT WHERE UniqueKey=@EventUniqueKey
	
	/*VV #2001 If for some reason workorder is linked to event which does not exists 
	and event details are not supplied*/
	IF @MobileDowntime=1  AND ISNULL(@Event_Id,0)=0
	BEGIN
		SET @MessageWO='Cannot identify Event'
		RETURN
	END

	
END

IF @Event_Id>0 set @EventId=@Event_Id


IF @TaskStatusId =@TS_O SET @EventId=NULL
IF @TaskStatusId=@TS_D AND @EventId<0 SET @EventId=NULL

IF @AmtPlanningModeId<>@AmtPlanningModeAdv SET @EventId=0

DECLARE @ES_YTS int,@ES_IP int, @ES_C int,@EventIdReplace int
SET @ES_YTS=1
SET @ES_IP=2
SET @ES_C=3


IF @MobileDowntime=0 AND @EventId<0
BEGIN
	/*Check if AMT Event exists within 1 hour of Mobile Event*/
	IF @EventStatusId=@ES_YTS
	BEGIN
		SET @PlannedDownTime_E=ISNULL(@PlannedDownTime,GETDATE())
		
		SELECT @EventIdReplace=Event_ID
		FROM EVENT 
		WHERE Eqp_Plan_Id=@EqpPlanId AND Event_Status_ID IN(@ES_YTS,@ES_IP) AND 
		(
			(Event_Status_ID=@ES_YTS AND ABS(CAST(@PlannedDownTime_E AS float) - CAST(Planned_Down_Time AS float))*24.00<=1)
			OR
			(Event_Status_ID=@ES_YTS AND ABS(CAST(@PlannedDownTime_E AS float) - CAST(Planned_Up_Time AS float))*24.00<=1)
			OR
			(Event_Status_ID=@ES_IP AND ABS(CAST(@PlannedDownTime_E AS float) - CAST(Actual_Down_Time AS float))*24.00<=1)
			OR
			(Event_Status_ID=@ES_IP AND ABS(CAST(@PlannedDownTime_E AS float) - CAST(Actual_Up_Time AS float))*24.00<=1)
		)
		ORDER BY Event_Status_ID DESC,
		ABS(CAST(@PlannedDownTime_E AS float) - CAST(Actual_Down_Time AS float)) DESC,
		ABS(CAST(@PlannedDownTime_E AS float) - CAST(Actual_Up_Time AS float)) DESC,
		ABS(CAST(@PlannedDownTime_E AS float) - CAST(Planned_Down_Time AS float)) DESC,
		ABS(CAST(@PlannedDownTime_E AS float) - CAST(Planned_Up_Time AS float)) DESC
	
	END
	IF @EventStatusId IN(@ES_IP,@ES_C)
	BEGIN
		SELECT @EventIdReplace=Event_ID 
		FROM EVENT 
		WHERE Eqp_Plan_Id=@EqpPlanId AND Event_Status_ID IN (@ES_IP,@ES_C) AND
		(
			ABS(CAST(@ActualDownTime_E AS float) - CAST(Actual_Down_Time AS float))*24.00<=1
			OR
			ABS(CAST(@ActualDownTime_E AS float) - CAST(Actual_Up_Time AS float))*24.00<=1
		)
		ORDER BY 
		ABS(CAST(@ActualDownTime_E AS float) - CAST(Actual_Down_Time AS float)) DESC,
		ABS(CAST(@ActualDownTime_E AS float) - CAST(Actual_Up_Time AS float)) DESC
	END
	
	IF @EventIdReplace>0 SET @EventId=@EventIdReplace
	
END


/*Special Rule: Only Update Workorder Status when status "increases"
VV: Discussed with GE, RF, DS - do not update workorder if status decreases.

*/


IF @TaskId>0 AND @TaskStatusId<>@Task_Status_ID AND 

(	(@AmtPlanningModeId<>@AmtPlanningModeAdv AND @TaskStatusId=@TS_D) OR
	(@AmtPlanningModeId=@AmtPlanningModeAdv AND 
		@Task_Status_Id=@TS_O AND @TaskStatusId<>@TS_A AND ISNULL(@EventId,0)=0) OR
	(@Task_Status_Id=@TS_O AND @TaskStatusId=@TS_D) OR
	(@Task_Status_Id=@TS_C AND @TaskStatusId<>@TS_C) OR
	(@Task_Status_Id=@TS_IP AND @TaskStatusId IN(@TS_O,@TS_YTS)) OR
	(@Task_Status_Id=@TS_YTS AND @TaskStatusId =@TS_O) )
BEGIN	
	
	SET @MessageWO='Cannot change workorder status from '+
	(SELECT Description FROM TASK_STATUS WHERE Task_Status_ID=@Task_Status_ID)+' to ' +
	(SELECT Description FROM TASK_STATUS WHERE Task_Status_ID=@TaskStatusId)
	RETURN
END 

/*Requirements for the link are:
1) Workorder is not linked
2) Equipment matches
3) Use the PURE WO NUMBER where one UNLINKED parent settlement exists"
*/
IF @Work_Order_ID IS NULL AND @WorkorderNumber<>''
BEGIN
	SELECT @Work_Order_ID=WO.WorkOrderId,@Work_Order=WO.WorkOrderNumber
	FROM 
	tblWorkOrders WO 
		LEFT JOIN
	TASK T
		ON WO.WorkOrderId=T.Work_Order_ID
	WHERE WO.EqpPlanId=@EqpPlanId AND T.Work_Order_ID IS NULL AND
	PureWONumber=@WorkorderNumber AND WO.WorkOrderId=WO.AMTParentWorkOrderId
	
END


/*if Need to add a new workorder*/
IF @TaskId<0
BEGIN
	
	CREATE TABLE #z_WO_DEFAULTS(
	Task_ID int,
	Description varchar(500) COLLATE DATABASE_DEFAULT,
	Eqp_Plan_ID int,
	Task_Type_ID int,
	Component_Code_ID int,
	Modifier_ID int,
	Application_Code_ID int,
	Occurrence_Type_Id int,
	Priority_ID int,
	Source_ID int,
	Task_Status_ID int,
	Symptom_ID int,
	Cause_ID int,
	Expected_Duration float,
	Expected_Labor_Hours float,
	Planning_Notes varchar(8000) COLLATE DATABASE_DEFAULT,
	Work_Order varchar(50) COLLATE DATABASE_DEFAULT,
	Actual_Duration float,
	Actual_Labor_Hrs float,
	Primary_Cause bit,
	Notes varchar(1000) COLLATE DATABASE_DEFAULT,
	Task_Mode_ID int,
	PartsStatusRequired bit,
	PartsStatusOrdered bit,
	PartsStatusReady bit,
	Strategy_Usage real,
	Strategy_QUOM_ID int,
	Strategy_Proj_Task_Opt_ID int,
	Planned_Proj_Task_Opt_ID int,
	Strategy_Date datetime,
	Strategy_Locked bit,
	Repair_Code_Id int,
	Task_Header_Id int,
	Strategy_Repair_Description varchar(8000)  COLLATE DATABASE_DEFAULT,
	Cost_Bearer_ID int,
	Task_Warranty bit,
	Redo_Work_Order_ID int,
	View_Warranty bit,
	Health_Safety_Id int,
	Break_Down bit,
	Planned_Down_Time datetime,
	Actual_Down_Time datetime,
	Planned_Offset float,
	Final_Change float,
	Risk_Life_Left float,
	Strategy_Frequency float,
	Last_Performed float,
	Last_Scheduled float,
	Last_Performed_Date datetime,
	Last_Scheduled_Date datetime,
	Site_Id int,
	Cost_Centre_Id int,
	Branch_Id int,
	Customer_Id int,
	Part_Entry_Distribution_Code_Id int,
	Part_Cost_Expense_Id int,
	Labour_Cost_Expense_Id int,
	Misc_Cost_Expense_Id int,
	Warranty_Days float,
	Warranty_Usage float,
	Strategy_Part_Num varchar(50)  COLLATE DATABASE_DEFAULT,
	Labour_Entry_Distribution_Code_Id int,
	Misc_Entry_Distribution_Code_Id int,
	AMTPlanningModeId int,
	Specific_Operation_Codes bit,
	ChangeoutCategoryId int,
	Work_Group_Id int,
	Def_Work_Group_Id int,
	WOCreateFromPO bit,
	LastNotified datetime,
	AuthorisationRequestByID int,
	AuthorisationRequestDate datetime,
	ResourceStatusReady bit
	) 

	INSERT INTO #z_WO_DEFAULTS
	EXEC TASK_DEFAULT_ADD_GET_P @eqp_plan_id=@EqpPlanId,@ForWOCreate=1
	
	SELECT @Source_ID=Source_ID,@PartsStatusRequired=PartsStatusRequired,
	@PartsStatusOrdered=PartsStatusOrdered,@PartsStatusReady=PartsStatusReady,
	@HealthSafetyId=Health_Safety_Id,@CostCentreId=Cost_Centre_Id,@BranchId=Branch_Id,
	@CustomerId=Customer_Id,@PartEntryDistributionCodeId=Part_Entry_Distribution_Code_Id,
	@PartsCostExpenseId=Part_Cost_Expense_Id,@LabourCostExpenseId=Labour_Cost_Expense_Id,
	@MiscCostExpenseId=Misc_Cost_Expense_Id,
	@LabourEntryDistributionCodeId=Labour_Entry_Distribution_Code_Id,
	@MiscEntryDistributionCodeId=Misc_Entry_Distribution_Code_Id,
	@SpecificOperationCodes=Specific_Operation_Codes,@ChangeoutCategoryId=ChangeoutCategoryId,
	@Cost_Bearer_ID=Cost_Bearer_ID
	FROM #z_WO_DEFAULTS

	DROP TABLE #z_WO_DEFAULTS
END

set @opAdded=''

IF EXISTS(SELECT TaskOperationId FROM #z_WOOperation_MB WHERE TaskOperationIdAmt=0)
BEGIN
	set @opAdded=@opAdded+( SELECT 
	0 as Task_Id,
	TaskOperationId  as Task_Operation_Id,
	SortOrder,
	TaskOperation as Task_Operation,
	ComponentCodeId as Component_Code_Id,
	ModifierCodeId AS Modifier_Code_Id,
	JobCodeId AS Job_Code_Id,
	OperationInstructions AS Operation_Instructions,
	OperationOffset,
	PlannedDuration AS Planned_Duration,
	Completed,
	PartsReturned,
	WorkGroupId AS Work_Group_Id,
	@HealthSafetyId AS Health_Safety_Id ,	
	@Cost_Bearer_ID AS Cost_Bearer_ID,
	@CostCentreId AS Cost_Centre_Id,
	@PartsCostExpenseId AS Parts_Cost_Expense_Id,
	@LabourCostExpenseId AS Labour_Cost_Expense_Id,
	@MiscCostExpenseId AS Misc_Cost_Expense_Id,
	@PartEntryDistributionCodeId AS Parts_Entry_Distribution_Code_Id,
	@LabourEntryDistributionCodeId AS Labour_Entry_Distribution_Code_Id,
	@MiscEntryDistributionCodeId AS Misc_Entry_Distribution_Code_Id,
	UniqueKey
		
	FROM #z_WOOperation_MB  
	WHERE TaskOperationIdAmt=0 
	FOR XML PATH('TaskOperation'))
END	

/*Parts and misc are only added on Mobile if operation is added or replaced*/
IF EXISTS(SELECT * FROM #z_WOPart_MB P
	INNER JOIN
#z_WOOperation_MB O
	ON P.TaskOperationId=O.TaskOperationId
	WHERE O.TaskOperationIdAmt=0 )
BEGIN
	SET @opAdded=@opAdded+(SELECT
	O.TaskOperationId AS Task_Operation_Id,
	p.TaskOperationPartId as Task_Operation_Part_Id,
	P.PartNumber AS Part_Number,
	P.PartDescription AS Part_Description,
	P.PlannedQty AS Planned_Qty,
	1 AS Include_In_Total,
	1 as IsEditable,
	@Cost_Bearer_ID AS OPCostBearerID,
	@CostCentreId AS OPCostCentreID,
	@PartsCostExpenseId AS OPExpenseElementID,
	@WorkGroupId AS OPWorkGroupID
	FROM
	#z_WOPart_MB P
		INNER JOIN
	#z_WOOperation_MB O
		ON P.TaskOperationId=O.TaskOperationId
		WHERE O.TaskOperationIdAmt=0 /*Parts and misc are only added on Mobile*/
	FOR XML PATH('TaskOpParts'))
END

/*Parts and misc are only added on Mobile if operation is added or replaced*/
IF EXISTS(SELECT * FROM #z_WOMisc_MB P
	INNER JOIN
#z_WOOperation_MB O
	ON P.TaskOperationId=O.TaskOperationId
	WHERE O.TaskOperationIdAmt=0 )
BEGIN
	SET @opAdded=@opAdded+(SELECT
	O.TaskOperationId AS Task_Operation_Id,
	p.TaskOperationMiscId as Task_Operation_Misc_Id,
	p.MiscCategoryId as Misc_Category_Id,
	P.TaskOperationMiscDesc as Task_Operation_Misc_Desc,
	1 as IsEditable,
	@Cost_Bearer_ID AS OPCostBearerID,
	@CostCentreId AS OPCostCentreID,
	@MiscCostExpenseId AS OPExpenseElementID,
	@WorkGroupId AS OPWorkGroupID
	FROM
	#z_WOMisc_MB P
		INNER JOIN
	#z_WOOperation_MB O
		ON P.TaskOperationId=O.TaskOperationId
		WHERE O.TaskOperationIdAmt=0 /*Parts and misc are only added on Mobile*/
	FOR XML PATH('TaskOpMisc'))
END
	
/*Labour can be added or updated*/
IF EXISTS(SELECT * FROM #z_WOLabour_MB P
	INNER JOIN
#z_WOOperation_MB O
	ON P.TaskOperationId=O.TaskOperationId
	WHERE P.TaskOperationLabourIdAmt=0 )
BEGIN
	SET @opAdded=@opAdded+(SELECT
	CASE WHEN O.TaskOperationIdAmt>0 THEN O.TaskOperationIdAmt ELSE O.TaskOperationId END AS Task_Operation_Id,
	P.TaskOperationLabourId AS Task_Operation_Labour_Id,
	P.LabourActivityId AS Labour_Activity_Id,
	P.LabourActivityWO AS Labour_Activity,
	P.PlannedLabourHrs AS Planned_Labour_Hrs,
	P.ActualLabourHrs AS Actual_Labour_Hrs,
	P.WorkGroupId AS Work_Group_Id,
	EmployeeId AS Employee_Id,
	JSARead,
	JSAReadId,
	1 AS Include_In_Total,
	1 as IsEditable,
	@Cost_Bearer_ID AS OPCostBearerID,
	@CostCentreId AS OPCostCentreID,
	@LabourCostExpenseId AS OPExpenseElementID,
	P.UniqueKey
	FROM
	#z_WOLabour_MB P
		INNER JOIN
	#z_WOOperation_MB O
		ON P.TaskOperationId=O.TaskOperationId
		WHERE P.TaskOperationLabourIdAmt=0 
	FOR XML PATH('TaskOpLabour'))
END


IF EXISTS(SELECT EWWorkorderId FROM #z_WOElectronicWorkscope_MB WHERE EWWorkorderIdAmt=0)
BEGIN
	SET @opAdded=@opAdded+(SELECT W.EWWorkorderId,
	CASE WHEN O.TaskOperationIdAmt>0 THEN O.TaskOperationIdAmt ELSE O.TaskOperationId END AS TaskOperationId,	
	W.EWTitle,W.UniqueKey
	FROM
	#z_WOElectronicWorkscope_MB W
		INNER JOIN
	#z_WOOperation_MB O
		ON W.TaskOperationId=O.TaskOperationId
	WHERE W.EWWorkorderIdAmt=0
	FOR XML PATH('WOElectronicWorkscope'))
END


IF EXISTS(SELECT EWWorkstepId FROM #z_WOWorkstep_MB WHERE EWWorkstepIdAmt=0)
BEGIN
	SET @opAdded=@opAdded+(SELECT 
	S.EWWorkstepId,
	CASE WHEN W.EWWorkorderIdAmt>0 THEN W.EWWorkorderIdAmt ELSE W.EWWorkorderId END AS EWWorkorderId,
	S.EWStepTemplateId,
	S.Sequence,
	S.EWWorkstepTitle,
	S.ComponentCodeId,
	S.CMCodeId,
	S.Instructions,
	S.DocumentGUID,
	S.DocumentExt,
	S.Safety ,
	S.Environmental ,
	S.Reading,
	S.CMRatingId,
	S.ResultId,
	S.PerformedById,
	S.Comments,
	S.CreateDefectWO AS CrreateDefectWO,
	S.DefectRepairInstructions,
	S.Actioned ,
	S.ActionedComments,
	S.ReviewdById,
	S.UniqueKey
	FROM
	#z_WOElectronicWorkscope_MB W
		INNER JOIN
	#z_WOWorkstep_MB S
		ON W.EWWorkorderId=S.EWWorkorderId
	WHERE S.EWWorkstepIdAmt=0
	FOR XML PATH('WOWorkstep'))
END

IF @opAdded<>'' 
BEGIN
	SET @opAdded='<DSOp><Params><CreateEWWorkorders>0</CreateEWWorkorders></Params>'+@opAdded+'</DSOp>'
END


/*if Need to add a new workorder*/
IF @TaskId<0
BEGIN
	DECLARE @EventIdAdd int,@TaskStatusIdAdd int
	
	IF @EventId<0 
	BEGIN
		SET @EventIdAdd=0
		SET @TaskStatusIdAdd=@TS_O
	END
	ELSE
	BEGIN
		SET @EventIdAdd=@EventId
		SET @TaskStatusIdAdd=@TaskStatusId 
	END
	
	EXEC TASK_ADD_P
	@Event_ID=@EventIdAdd, 
	@Description=@Description, 
	@Eqp_Plan_ID=@EqpPlanId, 
	@Task_Type_ID =@TaskTypeId, 
	@Component_Code_ID=@ComponentCodeId, 
	@Modifier_ID=@ModifierId, 
	@Application_Code_ID=@ApplicationCodeId, 
	@Occurrence_Type_Id=@OccurrenceTypeId, 
	@Priority_ID=@PriorityId, 
	@Source_ID=@Source_ID, 
	@Task_Status_ID =@TaskStatusIdAdd, 
    @Date_Notified =@ActualDownTime, 
	@Component_ID ='', 
	@Symptom_ID =@SymptomId, 
	@Symptom_Notes=@SymptomNotes,	
	@Cause_ID=@CauseId, 
	@Cause_Notes=@CauseNotes, 
	@Repair_Code_ID=@RepairCodeId, 
	@Repair_Notes=@RepairNotes, 
	@Group_No=@GroupNo,
	@Part_No=@PartNo,
	@Cost_Bearer_ID=@Cost_Bearer_ID,
	@Employee_ID=@EmployeeId, 
	@Expected_Duration=@ExpectedDuration, 
	@Expected_Labor_Hours=0, 
	@Work_Order=@Work_Order, 
	@Actual_Duration=@ActualDuration, 
	@Actual_Labor_Hrs=0,                    
	@Primary_Cause=@PrimaryCause, 
	@Task_Mode_ID=@TaskModeId,
	@PartsStatusRequired=@PartsStatusRequired,
	@PartsStatusOrdered=@PartsStatusOrdered,
	@PartsStatusReady=@PartsStatusReady,
	@RaisedByID=@RaisedById,
	@Work_Order_ID=@Work_Order_ID,
	@Work_Group_ID=@WorkGroupId,
	@Part_Description=@PartDescription,   
	@Group_Description=@GroupDescription,
    @SIMS_Code_Id=@SIMSCodeId,
	@Event_Last_Mod_Date=Null,
    @Create_By_User_ID=@UserId,
    @NewTask_ID =@TaskId OUTPUT,
	@Message =@MessageWO OUTPUT,
	@HealthSafetyId =@HealthSafetyId,
	@BreakDown=@BreakDown,
	@PlannedDownTime =@PlannedDownTime,
	@ActualDownTime =@ActualDownTime,
	@SiteId =@SiteId,
	@WorkLocation =@Work_Location,
	@CostCentreId=@CostCentreId,
	@BranchId =@BranchId,
	@CustomerId=@CustomerId,
	@PartEntryDistributionCodeId=@PartEntryDistributionCodeId,
	@DefWorkGroupId=@WorkGroupId,
	@PartsCostExpenseId=@PartsCostExpenseId,
	@LabourCostExpenseId =@LabourCostExpenseId,
	@MiscCostExpenseId =@MiscCostExpenseId,
	@SpecificOperationCodes=@SpecificOperationCodes,
	@AMTPlanningModeId =@AMTPlanningModeId,
	@LabourEntryDistributionCodeId=@LabourEntryDistributionCodeId,
	@MiscEntryDistributionCodeId=@MiscEntryDistributionCodeId,
	@opAdded =@opAdded,
	@ChangeoutCategoryId =@ChangeoutCategoryId,
	@PartSerialNoRemoved=@FailedGroupListPosition,
	@PartSerialNoInstalled=@FailedGroupPartsListGroup,
	@ActualEmployeeId=@ActualEmployeeId,
	@ActualWorkGroupId=@ActualWorkGroupId,
	@CompletedById=@CompletedById,
	@PartsReturned=@PartsReturned,
	@UniqueKey=@UniqueKeyWO,
	@Inspection=@Inspection
	
END


IF @MobileDowntime=0 AND @Event_Id_WO>0 AND (/*new 0 downtime event shall be created*/ISNULL(@EventId,0)<0 
	OR (/*workorder is moved to another event*/@EventId>0 AND @Event_Id_WO<>@EventId))
BEGIN
	--unlink wo from event
	UPDATE TASK SET Event_ID=NULL,Task_Status_Id=@TS_O WHERE Task_ID=@TaskId
END

/*Add New Event or update the existing event*/
IF @EventId<0
BEGIN
	 
	SELECT @Priority_ID=Priority_ID FROM PRIORITY WHERE Default_Record = 1
	
	SET @Expected_Up_Time=ISNULL(ISNULL(ISNULL(DATEADD(second,@ExpectedDuration*3600.00, @PlannedDownTime),@ActualUpTime_E),@ActualDownTime_E),GETDATE())
	SET @PlannedDownTime_E=ISNULL(@PlannedDownTime,GETDATE())
	SET @PlannedUpTime_E=ISNULL(DATEADD(second,@ExpectedDuration*3600.00, @PlannedDownTime),GETDATE())
	SET @DescriptionE=@Description
	SET @Work_Location_ID =NULL
	SET @TestTime=0
	SET @ReleasedByID=NULL
	
	/*If downtime is not captured in Mobile Create new ZERO hour Event*/
	IF @MobileDowntime=0
	BEGIN
		SET @PlannedUpTime_E=@PlannedDownTime_E
		SET @ActualUpTime_E=@ActualDownTime_E
		SET @EventStatusId=dbo.EVENT_STATUS_FOR_WORKORDER_F(@TaskStatusId)
	END
	
END

/*VV #1867*/

DECLARE @UpdateEvent bit

SET @UpdateEvent=0

IF (@MobileDowntime=1 AND ISNULL(@EventId,0)<>0 AND /*VV #2001*/ISNULL(@UniqueKeyE,'')<>'') SET @UpdateEvent=1


/*Downtime shall be captured in Mobile for event to be updated
If downtime is not captured in Mobile New event will be created with 0 downtime*/
IF ISNULL(@EventId,0)<0  OR @UpdateEvent=1
BEGIN
	
	SET @xmlEvent=(SELECT @EventId AS Event_ID,@EqpPlanId AS Eqp_Plan_ID,@DescriptionE AS Description,   
	@EventStatusId AS Event_Status_ID,@Priority_ID AS Priority_ID,@Work_Location_ID AS Work_Location_ID ,
	@Planned AS Planned,@BreakDownE AS Break_Down, @Expected_Up_Time AS Expected_Up_Time_D,
	0 AS Confirmed,@EventPreventionId AS Event_Prevention_ID,@PlannedDownTime_E AS Planned_Down_Time_D,  
	@PlannedUpTime_E AS Planned_Up_Time_D,@ActualDownTime_E AS Actual_Down_Time_D,
	@ActualUpTime_E AS Actual_Up_Time_D, @TestTime AS TestTime,@ReleasedByID AS Released_By_ID,
	@UniqueKeyE AS UniqueKey
	FOR XML PATH('TBL_EV'))
	
	IF NOT EXISTS(SELECT * FROM #z_DownTimeAllocation_MB)
	BEGIN
		
		EXEC DOWN_TIME_ALLOCATIONS_GET_DEFAULTS_P @VarianceCauseID=@VarianceCauseID OUTPUT,  
		@Task_Type_ID=NULL, @ResponsibilityID=@ResponsibilityID OUTPUT 
		
		INSERT INTO #z_DownTimeAllocation_MB(DownTimeAllocationIdAmt,VarianceCauseId,TaskTypeId,
		ResponsibilityId,PlannedHours,ActualHours,PrimaryDTA,UniqueKey)
		SELECT -1 AS DownTimeAllocationIdAmt,@VarianceCauseID AS VarianceCauseId,
		@TaskTypeId AS TaskTypeId,@ResponsibilityID AS ResponsibilityId,
		0 AS PlannedHours,0 AS ActualHours,1 AS PrimaryDTA,NEWID() AS UniqueKey
	END
	
	SET @xmlEvent=@xmlEvent+(SELECT CASE WHEN D.DownTimeAllocationIdAmt>0 THEN D.DownTimeAllocationIdAmt ELSE D.DownTimeAllocationId END AS Down_Time_Allocation_ID,
	D.VarianceCauseId AS Variance_Cause_ID,D.TaskTypeId AS Task_Type_ID,D.ResponsibilityId AS Responsibility_ID,
	D.PlannedHours AS Planned_Hours,D.ActualHours AS Actual_Hours,D.PrimaryDTA AS Primary_DTA,
	Notes
	FROM #z_DownTimeAllocation_MB D
	FOR XML PATH('TBL_DT'))
	
	SET @xmlEvent='<DS_EV>'+@xmlEvent+'</DS_EV>'
	
	
	/*VV #1867 If it is a new event to create it needs to be created 
	before workorder is updated with event details */
	IF @UpdateEvent=0 	
	BEGIN	
		EXEC EVENT_ADD_UPDATE_P @xmlEvent=@xmlEvent, @EventId=@EventId OUTPUT,@Message =@MessageE OUTPUT,
			 @PrimaryTaskId=@TaskId
			 
		IF ISNULL(@MessageE,'')<>'' 
		BEGIN
			/*VV #2001*/
			SET @MessageWO=@MessageE
			return
		END

	END
	
END

SET @EventId=NULLIF(@EventId,0)

IF @Task_Id>0
Begin	
	SET @opModified=''

	IF EXISTS(SELECT TaskOperationIdAmt FROM #z_WOOperation_MB WHERE TaskOperationIdAmt>0)
	BEGIN
		set @opModified=@opModified+(SELECT 
					O.Task_Id,
					O.Task_Operation_Id,
					Z.SortOrder ,
					Z.TaskOperation as Task_Operation,
					Z.ComponentCodeId as Component_Code_Id,
					Z.ModifierCodeId AS Modifier_Code_Id,
					Z.JobCodeId AS Job_Code_Id,
					Z.OperationInstructions AS Operation_Instructions,
					Z.OperationOffset,
					Z.PlannedDuration AS Planned_Duration,
					Z.Completed,
					Z.PartsReturned,
					Z.WorkGroupId AS Work_Group_Id,
					O.Health_Safety_Id ,	
					O.Cost_Bearer_ID,
					O.Cost_Centre_Id,
					O.Parts_Cost_Expense_Id,
					O.Labour_Cost_Expense_Id,
					O.Misc_Cost_Expense_Id,
					O.Parts_Entry_Distribution_Code_Id,
					O.Misc_Entry_Distribution_Code_Id,
					O.Actual_Duration,
					O.Proj_Task_Amt_Id, 
					O.Std_Job_Op_Id
					FROM 
					#z_WOOperation_MB Z
						INNER JOIN
					TASK_OPERATION O
						ON Z.TaskOperationIdAmt=O.Task_Operation_Id

					FOR XML PATH('TaskOperation'))
	END

	IF EXISTS(SELECT TaskOperationLabourId FROM #z_WOLabour_MB WHERE TaskOperationLabourIdAmt>0)
	BEGIN
		SET @opModified=@opModified+(SELECT
		O.Task_Operation_Id AS Task_Operation_Id,
		O.Task_Operation_Labour_Id,
		P.LabourActivityId AS Labour_Activity_Id,
		P.LabourActivityWO AS Labour_Activity,
		O.Planned_Labour_Hrs,/*Planned hours are not updated in mobile*/
		P.ActualLabourHrs AS Actual_Labour_Hrs,
		P.WorkGroupId AS Work_Group_Id,
		EmployeeId AS Employee_Id,
		P.JSARead,
		P.JSAReadId,
		O.Include_In_Total AS Include_In_Total,
		O.IsEditable as IsEditable,
		O.CostBearerID AS OPCostBearerID,
		O.CostCentreID AS OPCostCentreID,
		O.ExpenseElementID  AS OPExpenseElementID,
		O.Strategy_Labour_Hrs,
		O.Strategy_Labour_Rate,
		O.Labour_Qty AS Planned_Qty,
		O.Planned_Labour_Rate,
		O.Instructions,
		O.Actual_Labour_Hrs,
		O.Actual_Labour_Rate,
		O.Labour_Offset
		FROM
		#z_WOLabour_MB P
			INNER JOIN
		TASK_OPERATION_LABOUR O
			ON P.TaskOperationLabourIdAmt=O.Task_Operation_Labour_Id
			
		FOR XML PATH('TaskOpLabour'))
	END
	

	IF EXISTS(SELECT EWWorkorderId FROM #z_WOElectronicWorkscope_MB where EWWorkorderIdAmt>0)
	BEGIN
		SET @opModified=@opModified+(SELECT W.EWWorkorderIdAmt AS EWWorkorderId,
		O.TaskOperationIdAmt AS TaskOperationId,W.EWTitle
		FROM
		#z_WOElectronicWorkscope_MB W
			INNER JOIN
		#z_WOOperation_MB O
			ON W.TaskOperationId=O.TaskOperationId
		WHERE W.EWWorkorderIdAmt>0		
		FOR XML PATH('WOElectronicWorkscope'))
	END

	IF EXISTS(SELECT EWWorkstepIdAmt FROM #z_WOWorkstep_MB WHERE EWWorkstepIdAmt>0)
	BEGIN
				
		SET @opModified=@opModified+(SELECT 
		W.EWWorkstepId,
		W.EWWorkorderId,
		S.EWStepTemplateId,
		S.Sequence,
		S.EWWorkstepTitle,
		S.ComponentCodeId,
		S.CMCodeId,
		S.Instructions,
		S.DocumentGUID,
		S.DocumentExt,
		S.Safety ,
		S.Environmental ,
		S.Reading,
		S.CMRatingId,
		S.ResultId,
		S.PerformedById,
		S.Comments,
		S.CreateDefectWO AS CrreateDefectWO,
		S.DefectRepairInstructions,
		S.Actioned ,
		S.ActionedComments,
		S.ReviewdById
		FROM
		EW_WORKSTEP W
			INNER JOIN
		#z_WOWorkstep_MB S
			ON W.EWWorkstepId=S.EWWorkstepIdAmt
		
		FOR XML PATH('WOWorkstep'))
	END

	IF @opModified<>'' 
	BEGIN
		SET @opModified='<DSOp>'+@opModified+'</DSOp>'
		/*AmtMobile sends all operations. The user can replace operations in Mobile and check in.
		In this case  @OpReplaced=1 and there are no operations to modify. Next time when the user 
		checks in the same workorder amt mobile sends @OpReplaced=1, it also sends operations to modify.
		So if there are operations to modify SET @OpReplaced=0*/
		SET @OpReplaced=0
	END
	

	/*VV #2694*/
	DECLARE @EventIdUpdate int
	
	IF @EventId<0 
	BEGIN
		SET @EventIdUpdate=0
	END
	ELSE
	BEGIN
		SET @EventIdUpdate=@EventId
	END
	
	EXEC TASK_UPDATE_P
	@Task_ID =@TaskId,
	@Event_ID =@EventIdUpdate,/*VV #2694*/ 
	@Description =@Description,
	@Eqp_Plan_ID =@EqpPlanId, 
	@Task_Type_ID =@TaskTypeId, 
	@Component_Code_ID=@ComponentCodeId, 
	@Modifier_ID=@ModifierId, 
	@Application_Code_ID=@ApplicationCodeId, 
	@Occurrence_Type_Id=@OccurrenceTypeId, 
	@Priority_ID=@PriorityId, 
	@Source_ID=@Source_ID, 
	@Task_Status_ID=@TaskStatusId, 
	@Date_Notified=@Date_Notified, 
	@Component_ID=@Component_ID, 
	@Symptom_ID=@SymptomId, 
	@Symptom_Notes=@SymptomNotes, 
	@Cause_ID=@CauseId, 
	@Cause_Notes=@CauseNotes, 
	@Repair_Code_ID=@RepairCodeId, 
	@Repair_Notes=@RepairNotes, 
	@Group_No=@GroupNo,
	@Part_No=@PartNo,
	@EMI_Ref=@EMI_Ref,
	@EMIssueId=@EMIssueId, 
	@Redo=@Redo, 
	@Task_Planned_Time_ID=@Task_Planned_Time_ID, 
	@Customer_Ref=@Customer_Ref, 
	@Employee_ID=@EmployeeId, 
	@Expected_Duration=@ExpectedDuration, 
	@Expected_Labor_Hours=@Expected_Labor_Hours, 
	@Planning_Notes=@Planning_Notes,
	@Work_Order=@Work_Order, 
	@Actual_Duration=@ActualDuration, 
	@Actual_Labor_Hrs=@Actual_Labor_Hrs,                    
	@Primary_Cause=@PrimaryCause, 
	@Notes=@Notes,
	@Task_Mode_ID=@TaskModeId,
	@PartsStatusRequired=@PartsStatusRequired,
	@PartsStatusOrdered=@PartsStatusOrdered,
	@PartsStatusReady=@PartsStatusReady,
	@RaisedByID=@RaisedById,
	@Work_Order_ID=@Work_Order_ID,
	@Work_Group_ID=@WorkGroupId,
	@Strategy_Proj_Task_Opt_ID=0/* VV #1427 @Strategy_Proj_Task_Opt_ID*/,
	@Planned_Proj_Task_Opt_ID=0/* #1427 @Strategy_Proj_Task_Opt_ID*/,
	@Event_Last_Mod_Date=NULL,
	@Task_Last_Mod_Date=NULL,
	@Part_Description =@PartDescription,   
	@Group_Description=@GroupDescription,
	@SIMS_Code_Id=@SIMSCodeId,
	@Last_Mod_By_User_ID=@UserId,
	@Message=@MessageWO OUTPUT,
	@Sort_Order=@Sort_Order,
	@WO_Create_Date=@WO_Create_Date,
	@Performed_By_Date=@Performed_By_Date,
	@Parts_Available_Date=@Parts_Available_Date,
	@Parts_Order_Details=@Parts_Order_Details,
	@WO_Counter=@WO_Counter,
	@Work_Order_Number_External=@Work_Order_Number_External,
	@Cost_Bearer_ID=@Cost_Bearer_ID,
	@Task_Warranty=@Task_Warranty,
	@Redo_Work_Order_ID=@Redo_Work_Order_ID,
	@ViewWarranty=@ViewWarranty,
	@HealthSafetyId=@HealthSafetyId,
	@BreakDown=@BreakDown,
	@PlannedDownTime= @PlannedDownTime,
	@ActualDownTime= @ActualDownTime,
	@PlannedOffset=@PlannedOffset,
	@SiteId=@SiteId,
	@WorkLocation=@Work_Location,
	@CostCentreId=@CostCentreId,
	@BranchId=@BranchId,
	@CustomerId=@CustomerId,
	@PartEntryDistributionCodeId=@PartEntryDistributionCodeId,
	@DefWorkGroupId=@DefWorkGroupId,
	@PartsCostExpenseId=@PartsCostExpenseId,
	@LabourCostExpenseId=@LabourCostExpenseId,
	@MiscCostExpenseId=@MiscCostExpenseId,
	@SpecificOperationCodes=@SpecificOperationCodes,
	@WorkOrderDate=@WorkOrderDate,
	@WarrantyClaimable=@WarrantyClaimable,
	@ReviewedEmployeeId=@ReviewedEmployeeId,
	@WarrantyNotes=@WarrantyNotes,
	@WarrantyDays=@WarrantyDays,
	@WarrantyUsage=@WarrantyUsage,
	@WarrantyDaysArchived=@WarrantyDaysArchived,
	@WarrantyUsageAcrhived=@WarrantyUsageAcrhived,
	@WarrantySupplierId=@WarrantySupplierId,
	@ClaimRef=@ClaimRef,
	@SupplierRef=@SupplierRef,
	@SummaryDescription=@SummaryDescription,
	@ClaimStatusId=@ClaimStatusId,
	@ClaimedByEmployeeId=@ClaimedByEmployeeId,
	@ClaimeDate=@ClaimeDate,
	@ClaimDescription=@ClaimDescription,
	@JobPartsCost=@JobPartsCost,
	@JobLabourCost=@JobLabourCost,
	@JobMiscCost=@JobMiscCost,
	@ClaimedPartsCost=@ClaimedPartsCost,
	@ClaimedLabourCost=@ClaimedLabourCost,
	@ClaimedMiscCost=@ClaimedMiscCost,
	@RecPartsCost=@RecPartsCost,
	@RecLabourCost=@RecLabourCost,
	@RecMiscCost=@RecMiscCost,
	@LabourEntryDistributionCodeId=@LabourEntryDistributionCodeId,
	@MiscEntryDistributionCodeId=@MiscEntryDistributionCodeId,
	@SupplierContact=@SupplierContact,
	@TaskAuthorised=@TaskAuthorised,
	@ActualOffset=@ActualOffset,
	@OpReplaced=@OpReplaced,
	@opAdded=@opAdded,    
	@opModified=@opModified,
	@ChangeoutCategoryId=@ChangeoutCategoryId,
	@LifeConfirmed=@LifeConfirmed,
	@OriginalPartTypeId=@OriginalPartTypeId,
	@SerialNoIn=@SerialNoIn,
	@SerialNoOut=@SerialNoOut,
	@IsOverwriteLife=@IsOverwriteLife,
	@OverwriteLifeAchieved=@OverwriteLifeAchieved,
	@WOClosed=@WOClosed,
	@ConditionMonitoringIntervention=@ConditionMonitoringIntervention,
	@FailedPartListPosition	=@FailedPartListPosition,
	@FailedPartListGroup=@FailedPartListGroup,
	@FailedPartLifeAchieved=@FailedPartLifeAchieved,
	@PartSerialNoRemoved=@FailedGroupListPosition,
	@PartSerialNoInstalled=@FailedGroupPartsListGroup,
	@LastNotified=@LastNotified,
	@ResourceStatusReady=@ResourceStatusReady,
	@AuthorisationRequestByID=@AuthorisationRequestByID,
	@ActualEmployeeId=@ActualEmployeeId,
	@ActualWorkGroupId=@ActualWorkGroupId,
	@CompletedById=@CompletedById,
	@PartsReturned=@PartsReturned,
	@Inspection=@Inspection
END

IF ISNULL(@MessageWO,'')<>'' RETURN

/*VV #1867 Update event after workorder is updated because business rules check status of workorders */
IF @UpdateEvent=1	
BEGIN	
	EXEC EVENT_ADD_UPDATE_P @xmlEvent=@xmlEvent, @EventId=@EventId OUTPUT,@Message =@MessageE OUTPUT,
		 @PrimaryTaskId=@TaskId
		 
	IF ISNULL(@MessageE,'')<>'' 
		BEGIN
			/*VV #2001*/
			SET @MessageWO=@MessageE
			return
		END
END


SELECT Z.[FileName]
INTO #z_WOAttachedDocument_MBToAdd
FROM
#z_WOAttachedDocument_MB Z
	LEFT JOIN
ATTACHED_DOCUMENT_TASK A
	ON @TaskId=A.TaskId
	AND Z.[FileName]=A.[FileName]
WHERE A.TaskId IS NULL

INSERT INTO ATTACHED_DOCUMENT_TASK(TaskId,[FileName])
SELECT @TaskId AS TaskId,[FileName] FROM #z_WOAttachedDocument_MBToAdd
	
	
SELECT Z.EWWorkstepId,Z.[FileName]
INTO #z_AttachedDocumentsEWWorkstep_MBToAdd
FROM
(
	SELECT S.EWWorkstepId,A.FileName
	FROM
	#z_AttachedDocumentsEWWorkstep_MB A
		INNER JOIN
	#z_WOWorkstep_MB W
		ON A.EWWorkstepId=W.EWWorkstepId
		INNER JOIN
	EW_WORKSTEP S
		ON W.UniqueKey=S.UniqueKey
) Z
	LEFT JOIN
ATTACHED_DOCUMENTS_EW_WORKSTEP A
	ON Z.EWWorkstepId=A.EWWorkstepId
	AND Z.[FileName]=A.[FileName]
WHERE A.EWWorkstepId IS NULL

INSERT INTO ATTACHED_DOCUMENTS_EW_WORKSTEP(EWWorkstepId,[FileName])
SELECT EWWorkstepId,[FileName] FROM #z_AttachedDocumentsEWWorkstep_MBToAdd


/*Measurements*/
IF EXISTS(SELECT * FROM #z_WOWorkstep_MB WHERE CMCodeId>0 AND ISNUMERIC(Reading)=1)
BEGIN
	DECLARE @NewMeasurementTime datetime
	
	SELECT @NewMeasurementTime=  
		CASE WHEN T.Task_Status_Id IN(@TS_IP,@TS_C)  
		THEN dbo.WO_DOWN_TIME_F(ISNULL(E.Actual_Down_Time,T.Actual_Down_Time),T.ActualOffset)  
		ELSE dbo.WO_DOWN_TIME_F(ISNULL(E.Planned_Down_Time,T.Planned_Down_Time),T.Planned_Offset)  
		END
	FROM   
	TASK T 
		LEFT JOIN  
	EVENT E 
		ON T.Event_ID=E.Event_ID  
	WHERE T.Task_ID=@TaskId
	
	SET @NewMeasurementTime=ISNULL(@NewMeasurementTime,GETDATE())  
 
	INSERT INTO #z_MEASUREMENT_MB(CMCodeId, NewMeasurementTime ,NewReading,CMRatingID, NewExtComments)
	SELECT CMCodeId,@NewMeasurementTime AS NewMeasurementTime ,Reading AS NewReading,
	CMRatingID,Comments AS NewExtComments
	FROM #z_WOWorkstep_MB
	WHERE CMCodeId>0 AND ISNUMERIC(Reading)=1
	ORDER BY CMCodeId,CMRatingID DESC
	
	/*If there are few readings for the same CMCode take the reading with the highest rating*/
	IF EXISTS(SELECT CMCodeId,COUNT(CMCodeId) FROM #z_MEASUREMENT_MB GROUP BY CMCodeId HAVING COUNT(CMCodeId)>1)
	BEGIN
		DELETE #z_MEASUREMENT_MB
		WHERE ListId NOT IN(SELECT Min(ListId) AS ListId FROM #z_MEASUREMENT_MB GROUP BY CMCodeId)
	END
	
	UPDATE Z SET CMMeasurementId=M.CMMeasurementId
	FROM
	#z_MEASUREMENT_MB Z
		INNER JOIN
	CM_MEASUREMENT M
		ON Z.CMCodeId=M.CMCodeId
		AND @TaskId=m.TaskID
	
	SET @MeasurementTBL='<Measurements>'+
	(SELECT CMCodeId,CMMeasurementId, NewMeasurementTime ,NewReading,CMRatingID, NewExtComments
	FROM #z_MEASUREMENT_MB  
	FOR XML PATH('Measurement'))+'</Measurements>'
	
	declare @MessageMeasurements varchar(max)
	set @MessageMeasurements=''
	
	EXEC TASK_MEASUREMENT_PUT_P @TaskID =@TaskId, @MeasurementTBL=@MeasurementTBL, @Message =@MessageMeasurements OUTPUT  
	/*
		This is for debugging Check in will not roll back the changes if the measurements are not added
		
		select @MessageMeasurements
	*/
	
END

/*Files to download*/
SELECT 3 AS DocumentType,[FileName] FROM #z_WOAttachedDocument_MBToAdd
	UNION ALL
SELECT 5 AS DocumentType,DocumentGUID+'.'+DocumentExt as [FileName] FROM #z_WOWorkstep_MB 
WHERE EWWorkstepIdAmt=0 AND ISNULL(DocumentGUID,'')<>'' AND ISNULL(DocumentExt,'')<>''
	UNION ALL
SELECT 6 AS DocumentType,[FileName] FROM #z_AttachedDocumentsEWWorkstep_MBToAdd


GO

if exists (select * from dbo.sysobjects where id = object_id(N'dbo.[RPT_BUDGET_COST_WORKSHEET_P]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[RPT_BUDGET_COST_WORKSHEET_P]
GO

create Procedure [dbo].[RPT_BUDGET_COST_WORKSHEET_P]
/******************************************************************************
      File: 
      Name: RPT_BUDGET_COST_WORKSHEET_P

      Called By: 

      Desc: Get data for Budget Cost Worksheet Report
             

      Auth: Veronika Vasylyeva
      Date: 09-Oct-2003
*******************************************************************************
            Change History
*******************************************************************************
Date:       Author:         Description:
--------    --------		----------------------------------------
02 Aug 11	K Nagarajan		#2220: Fixed Collation Issue
16 Jun 11   G Dhillon		fixed issue #1657
19 May 11	V Vasylyeva		#1315 - added @ShowPeriods
15 Oct 10   VS              #521 - modified column equip costcentre in temp table to varchar(max) 
23 Sep 10   VS              #292 & #294 enhancements - added strategy task description 
 2 Jul 10	V Vasylyeva		CR9009: Error Could not continue scan with NOLOCK due to data movement
							OR Error Attempt to fetch logical page (1:976) in database 2 failed.
26 Oct 09	AL				CR8421: Added new fields and analyse by
							CR8424: Fixed Manufacturer filter and Parent Eqp Analyse by
19 Sep 08   AL              Fixed @YearStartMonth
27 Jun 08   AL              Added @YearStartMonth
13 May 08   YS              Fixed Analyse By PEQP
05 May 08   YS              Added Analyse By PEQP
08 Apr 08   YS              Added Cost Category to Group By
03 Apr 08   AL              Now uses EQP_SIBLINGS_F 
26 Mar 08   YS              Added @CostCategoryId,@modifierID,@ActualProjected
07 Mar 08   YS				Added @EqpCostCentre,@ParentEquipmentID
06 Mar 08   YS				Transition of RadioButtonCollection to CheckBoxCollection
19 Jun 07   ID              Added Work Group
25 May 06   PJ				Increased size of component code field in temp table
23 May 06   PJ				Increased size of component code field in temp table
08 Feb 06   SI				New filters/group by/analyse Region, Division, Criticality, Equipment Classification, Equipment Group
20 Sep 05   V Vasylyeva		New group by: PLM, Component Code.
							New parameter: @TaskTypeID
17 May 04   V Vasylyeva		Task_Header_ID for ProjTask grouping
23 Oct 03   V Vasylyeva		Added Variance
21 Oct 03   V Vasylyeva		Added Order By
16 Oct 03   V Vasylyeva		Changed For 2 Scenarios
13 Oct 03   V Vasylyeva		Set NOCOUNT
13 Apr 04   H Singh         instead of "-" show "(NONE)"

*******************************************************************************/
      /* Param List */

    @DealerId int = 1,
    @BranchId varchar(MAX)='',
    @SiteID varchar(MAX)='',
    @FleetID varchar(MAX)='',     
    @EqpPlanID varchar(MAX)='',
    @Projection_Header_Id varchar(MAX)='1',
    @CostBearerID varchar(MAX)='1',
    @ModelId varchar(MAX) = '',
    @CostTypeID varchar(MAX) = '',
    @SystemID varchar(MAX) = '',     
    @SubSystemID varchar(MAX) = '',
    @ComponentCodeID varchar(MAX) = '',
    @ProjTaskId varchar(MAX) = '',
    @PartsLabourMisc int=0,
    @CostResponsibilityID varchar(MAX)='',
    @CostCentreID varchar(MAX)='',
    @CostActivityID varchar(MAX)='',
    @CostExpenseID varchar(MAX)='',
    @LabourActivityID varchar(MAX)='',
    @StartDate int = 200305,
    @EndDate int = 200309,
    @AnalyseBy varchar(10) = 'Monh',
    @GroupBy varchar(MAX)='BRAN,SITE,FLEE,EQPL,CTTY',
    @AnalyseVariance bit=0,
    @Name1 varchar(50)=NULL OUTPUT,
    @Name2 varchar(50)=NULL OUTPUT,
    @TaskTypeID varchar(MAX)='',
   
    @RegionId varchar(MAX)='',
    @DivisionId varchar(MAX)='',
    @CriticalityId varchar(MAX)='',
    @EqpClassId varchar(MAX)='',
    @EqpGroupId varchar(MAX)='',
    @EqpLocationId varchar(MAX)='',

    @EqpCategoryId varchar(MAX)='', --Added ID
	@WorkGroupId varchar(MAX)='',             --Added ID
	@EqpCostCentre varchar(MAX)='',     --Added ID
	@ParentEquipmentID varchar(MAX)='', --Added ID
	@CostCategoryId varchar(MAX)='',    --Added ID
	@modifierID varchar(MAX) = '',            --Added ID
	@ActualProjected int=3,
	@YearStartMonth int=0,   --AL: 27/06/08

	--AL: 22/10/09
	@ManufacturerID varchar(MAX)='', 
	@TaskCounterID varchar(MAX)='', 
	@TaskHeaderID varchar(MAX)='', 
	@CCActivity varchar(MAX)='',
	@CCLocation varchar(MAX)='',
	@CCResponsibility varchar(MAX)='',
	/*VV #1315*/
	@ShowPeriods bit=0,
	--GD  fixed issue #1657
	@IsCrossTab BIT =0
AS

----------------------------------------------------------------------------------------------------------------
SET NOCOUNT ON


-- Parts/Labour/Misc: ALL=0,PART=1,LABOUR=2,MISC=3
DECLARE @Where_Clause varchar(MAX)
DECLARE @Eqp_Where_Clause as varchar(MAX)
DECLARE @GroupBy1Clause1 varchar(MAX)
DECLARE @GroupBy1Clause2 varchar(MAX)
DECLARE @SQL varchar(MAX)
DECLARE @SQL1 varchar(MAX)
DECLARE @SQL2 varchar(MAX)
DECLARE @Column varchar(5)
DECLARE @Counter smallint
DECLARE @GroupBy1Col smallint
DECLARE @SelectColumns varchar(MAX)
DECLARE @GroupBy1ColMAX smallint
DECLARE @IncludeMissingCalenderPeriods varchar(10) 
DECLARE @AnalyseByFld varchar(50)
DECLARE @InsertIntoClause varchar(MAX)
DECLARE @GroupBy1  varchar(1000)
DECLARE @ShowInsteadOfNull varchar(10)
DECLARE @InclMissPerFields varchar(MAX)
DECLARE @Table varchar(4000)
DECLARE @GroupingByParentEqp bit

DECLARE @All int
DECLARE @Parts int
DECLARE @Labour int
DECLARE @Misc int
DECLARE @PLM bit

--GD  added to fix fixed issue #1657
DECLARE @SelectQueryForCrossTab VARCHAR(MAX)
DECLARE @OrderByCrossTab VARCHAR(MAX)

SET @SelectQueryForCrossTab=''
SET @OrderByCrossTab =''


SET @All=7
SET @Parts=1
SET @Labour=2
SET @Misc=4
SET @PLM=0

SET @GroupingByParentEqp=0

SET @ShowInsteadOfNull='(NONE)'

 --max number of columns in group by
SET @GroupBy1ColMAX=CASE @GroupBy
               WHEN 'YEAR' THEN 1
                 WHEN 'QRTR' THEN 1
                 WHEN 'MONH' THEN 1
               ELSE 5 
               END
SET @SQL1=''
SET @SQL2=''

--Set Parts/Labour/Misc to all if it is null
SET @PartsLabourMisc=ISNULL(@PartsLabourMisc,@All)

--Set the upper case
SET @AnalyseBy=UPPER(@AnalyseBy)
SET @GroupBy=UPPER(@GroupBy)

--Include missing calendar periods if AnalyseBy month, year or quater
SET @IncludeMissingCalenderPeriods=CASE @AnalyseBy
                     WHEN 'MONH' THEN 'MONH'
                     WHEN 'YEAR' THEN 'MONH'
                     WHEN 'QRTR' THEN 'MONH'
                     ELSE NULL END

--Where Close
      
SET @Where_Clause = ' WHERE (CalenderPeriod BETWEEN ' + Convert(varchar(6),@StartDate) + ' AND ' + Convert(varchar(6),@EndDate) + ')'

If @EqpPlanID <> '' SET @Where_Clause = @Where_Clause + ' AND EqpPlanID IN (' + @EqpPlanID + ' )'
If @FleetID <> '' SET @Where_Clause = @Where_Clause + ' AND FleetID IN (' + @FleetID + ' )'
If @SiteID <> '' SET @Where_Clause = @Where_Clause + ' AND SiteID IN (' + @SiteID + ' )'
If @BranchId <> '' SET @Where_Clause = @Where_Clause + ' AND BranchId IN (' + @BranchId + ' )'
If @DealerId > 0 SET @Where_Clause = @Where_Clause + ' AND DealerId = ' + Convert(varchar, @DealerId)
If @Projection_Header_Id <> '' SET @Where_Clause = @Where_Clause + ' AND Projection_Header_Id IN (' + @Projection_Header_Id + ')'
If @ProjTaskId <> ''
BEGIN

      SET @Where_Clause = @Where_Clause + ' AND ProjTaskID IN '
      SET @Where_Clause = @Where_Clause + ' ('
      SET @Where_Clause = @Where_Clause + ' SELECT projtaskid FROM tblprojtasks '
      SET @Where_Clause = @Where_Clause + ' WHERE componentcodeid in (SELECT componentcodeid FROM tblprojtasks WHERE projtaskid IN (' + @ProjTaskId + ')) '
      SET @Where_Clause = @Where_Clause + ' AND modifierid in (SELECT modifierid FROM tblprojtasks WHERE projtaskid IN  (' + @ProjTaskId + ')) '
      SET @Where_Clause = @Where_Clause + ' AND tasktypeid in (SELECT tasktypeid FROM tblprojtasks WHERE projtaskid IN (' + @ProjTaskId + ')) '
      SET @Where_Clause = @Where_Clause + ' AND applicationcodeid in (SELECT applicationcodeid FROM tblprojtasks WHERE projtaskid IN  (' + @ProjTaskId + ')) '
      SET @Where_Clause = @Where_Clause + ' ) '--     ProjTask= @ProjTaskId 
END
If @ModelId <> '' SET @Where_Clause = @Where_Clause + ' AND ModelId IN (' + @ModelId + ')'
If @CostTypeID <> '' SET @Where_Clause = @Where_Clause + ' AND CostTypeID IN (' + @CostTypeID + ')' 
If @SystemID <> '' SET @Where_Clause = @Where_Clause + ' AND SystemID IN (' + @SystemID + ')'
If @SubSystemID <> '' SET @Where_Clause = @Where_Clause + ' AND SubSystemID IN (' + @SubSystemID + ')'
If @ComponentCodeID <> '' SET @Where_Clause = @Where_Clause + ' AND ComponentCodeID IN (' + @ComponentCodeID + ')'
If @TaskTypeID <> '' SET @Where_Clause = @Where_Clause + ' AND TaskTypeID IN (' + @TaskTypeID + ')'
If @CostBearerID <> '' SET @Where_Clause = @Where_Clause + ' AND CostBearerID IN (' + @CostBearerID + ')'           
IF @CostResponsibilityID <>'' SET @Where_Clause = @Where_Clause + ' AND Cost_Responsibility_ID IN (' + @CostResponsibilityID + ')'        
IF @CostCentreID <>'' SET @Where_Clause = @Where_Clause + ' AND Cost_Centre_ID IN (' + @CostCentreID + ')'               
IF @CostActivityID <>'' SET @Where_Clause = @Where_Clause + ' AND Cost_Activity_ID IN (' + @CostActivityID + ')'             
IF @CostExpenseID <>'' SET @Where_Clause = @Where_Clause + ' AND Cost_Expense_ID IN (' + @CostExpenseID + ')'              
IF @LabourActivityID <>'' SET @Where_Clause = @Where_Clause + ' AND LabourActivityID IN (' + @LabourActivityID + ')'           

IF @RegionId <>'' SET @Where_Clause = @Where_Clause + ' AND Region_Id IN (' + @RegionId + ')'                
IF @DivisionId <>'' SET @Where_Clause = @Where_Clause + ' AND Division_Id IN (' + @DivisionId + ')'           
IF @EqpLocationId <>'' SET @Where_Clause = @Where_Clause + ' AND Eqp_Location_Id IN (' + @EqpLocationId + ')'
IF @CriticalityId <>'' SET @Where_Clause = @Where_Clause + ' AND Eqp_Criticality_Id IN (' + @CriticalityId + ')'              
IF @EqpCategoryId <>'' SET @Where_Clause = @Where_Clause + ' AND Eqp_Category_Id IN (' + @EqpCategoryId + ')'              
IF @EqpClassId <>'' SET @Where_Clause = @Where_Clause + ' AND Eqp_Class_Id IN (' + @EqpClassId + ')'           
IF @EqpGroupId <>'' SET @Where_Clause = @Where_Clause + ' AND Equipment_Group_Id IN (' + @EqpGroupId + ')'           

IF @WorkGroupId <>'' SET @Where_Clause = @Where_Clause +  ' AND Work_Group_ID IN (SELECT Work_Group_Id                             
                                                                                                                        FROM WORK_GROUP                                                   
                                                                                                                        WHERE Work_Group_Code                           
                                                                                                                        IN (SELECT Work_Group_Code                      
                                                                                                                              FROM WORK_GROUP                                 
                                                                                                                              WHERE Work_Group_Id IN (' + @WorkGroupId + '))) '     --Added ID
IF @EqpCostCentre <>'' SET @Where_Clause = @Where_Clause + ' AND EqpCostCentreId IN (' + @EqpCostCentre + ')'
IF @CostCategoryId <>'' SET @Where_Clause = @Where_Clause + ' AND Cost_Category_Desc IN (' + @CostCategoryId + ')'
If @modifierID <> '' SET @Where_Clause = @Where_Clause + ' AND ModifierID IN (' + @modifierID + ')'

IF ISNULL(@ParentEquipmentID,'')<>''
      SET @Where_Clause = @Where_Clause + ' AND EqpPlanID IN (SELECT EqpPlanID FROM dbo.EQP_SIBLINGS_F('+@ParentEquipmentID+')) '

--AL: 22/10/09
If @ManufacturerID <> '' SET @Where_Clause = @Where_Clause + ' AND ManufacturerId IN (' + @ManufacturerID + ')'
If @TaskCounterID <> '' SET @Where_Clause = @Where_Clause + ' AND ApplicationCodeID IN (' + @TaskCounterID + ')'
If @TaskHeaderID <> '' SET @Where_Clause = @Where_Clause + ' AND TaskHeaderId IN (' + @TaskHeaderID + ')'
If @CCActivity <> '' SET @Where_Clause = @Where_Clause + ' AND CC_Activity IN (' + @CCActivity + ')'
If @CCLocation <> '' SET @Where_Clause = @Where_Clause + ' AND CC_Location IN (' + @CCLocation + ')'
If @CCResponsibility <> '' SET @Where_Clause = @Where_Clause + ' AND CC_Responsibility IN (' + @CCResponsibility + ')'




--Create a temporary table
CREATE TABLE #z_Cost(                     
      [Cost] [float] NULL)

--Add Analyseby field
SET @AnalyseByFld=CASE @AnalyseBy
              WHEN 'PRTY' THEN 'Projection_Header_ID'       
              WHEN 'MONH' THEN 'CalenderPeriod'
              WHEN 'YEAR' THEN 'CalenderPeriod'
              WHEN 'QRTR' THEN 'CalenderPeriod'          
              ELSE 'CalenderPeriod' END

DECLARE @AnalyseByFld2 varchar(MAX)
SET @AnalyseByFld2=CASE @AnalyseBy
              WHEN 'PRTY' THEN 'Projection_Header_ID'       
              WHEN 'MONH' THEN 'CalPer'
              WHEN 'YEAR' THEN 'CalPer'
              WHEN 'QRTR' THEN 'CalPer'     
              ELSE 'CalPer' END


SET @SQL= 'ALTER TABLE #z_Cost ADD '+@AnalyseByFld+' int NULL'
EXEC(@SQL)

--GroupBy
--Branch, Site, Fleet, Equipment Plan, 
--Cost type, System, Sub-system, Task Type,
--Cost Responsibility, Cost Centre, Cost Activity, 
--Cost Expense, Labour Activity, 
--Projected task

--Create Group by
SET @GroupBy1Clause1 = ''
SET @GroupBy1Clause2 = ''
--Put Coma at the end
SET @GroupBy1=@GroupBy+','

--Find if any group by members were supplied
SET @Counter=CHARINDEX(',',@GroupBy1)

SET @SelectColumns=''
SET @InsertIntoClause=''
SET @InclMissPerFields=''
SET @GroupBy1Col=1

--Create Group By
WHILE @Counter>0
BEGIN
      
      SET @Column=LEFT(@GroupBy1,@Counter-1)
      SET @GroupBy1=RIGHT(@GroupBy1,LEN(@GroupBy1)-@Counter)
      

      IF @Column ='BRAN'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'BranchId, Branch,'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'BranchId, Branch,'
            SET @InsertIntoClause = @InsertIntoClause + 'BranchId, Branch,'
            SET @InclMissPerFields=@InclMissPerFields + 'BranchId, Branch,'         
            SET @SelectColumns = @SelectColumns + 'Branch AS Col' + CAST(@GroupBy1Col as varchar) + ','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab + 'Col' + CAST(@GroupBy1Col as varchar) + ' AS Branch ' + ','
			SET @OrderByCrossTab = @OrderByCrossTab + 'Branch' + ','
            
            --Add columns for the temporary table
            SET @SQL= 'ALTER TABLE #z_Cost ADD BranchId int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD Branch varchar(50) NULL'
            EXEC(@SQL)
      END 
      ELSE IF @Column ='SITE'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'SiteId, Site,'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'SiteId, Site,'
            SET @InsertIntoClause = @InsertIntoClause + 'SiteId, Site,'
            SET @InclMissPerFields=@InclMissPerFields + 'SiteId, Site,'
            SET @SelectColumns= @SelectColumns+'Site AS Col'+ CAST(@GroupBy1Col as varchar)+','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab + 'Col' + CAST(@GroupBy1Col as varchar) + ' AS Site ' + ','
            SET @OrderByCrossTab = @OrderByCrossTab + 'Site' + ','
            --Add columns for the temporary table
            SET @SQL= 'ALTER TABLE #z_Cost ADD SiteId int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD Site varchar(50) NULL'
            EXEC(@SQL)
      END
      ELSE IF @Column ='FLEE'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'FleetId, Fleet,'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'FleetId, Fleet,'
            SET @InsertIntoClause = @InsertIntoClause + 'FleetId, Fleet,'
            SET @InclMissPerFields=@InclMissPerFields + 'FleetId, Fleet,'
            SET @SelectColumns= @SelectColumns+'Fleet AS Col'+ CAST(@GroupBy1Col as varchar)+','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab + 'Col' + CAST(@GroupBy1Col as varchar) + ' AS Fleet ' + ','
            SET @OrderByCrossTab = @OrderByCrossTab + 'Fleet' + ','
            
            SET @SQL= 'ALTER TABLE #z_Cost ADD FleetId int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD Fleet varchar(50) NULL'
            EXEC(@SQL)
      END
      ELSE IF @Column ='EQPL'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'EqpPlanId, EqpPlan,'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'EqpPlanId, EqpPlan,'
            SET @InsertIntoClause = @InsertIntoClause + 'EqpPlanId, EqpPlan,'
            SET @InclMissPerFields=@InclMissPerFields + 'EqpPlanId, EqpPlan,'
            SET @SelectColumns = @SelectColumns+'EqpPlan AS Col'+ CAST(@GroupBy1Col as varchar)+','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab + 'Col' + CAST(@GroupBy1Col as varchar) + ' AS Equipment ' + ','
            SET @OrderByCrossTab = @OrderByCrossTab + 'Equipment' + ','
            SET @SQL= 'ALTER TABLE #z_Cost ADD EqpPlanId int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD EqpPlan varchar(50) NULL'
            EXEC(@SQL)
      END 
      ELSE IF @Column ='PEQP'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'EqpPlanId, EqpPlan,'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'ParentEqpPlanId, ParentEqpPlan,'
            SET @InsertIntoClause = @InsertIntoClause + 'ParentEqpPlanId, ParentEqpPlan,'
            SET @InclMissPerFields=@InclMissPerFields + 'ParentEqpPlanId, ParentEqpPlan,'
            SET @SelectColumns= @SelectColumns+'ParentEqpPlan AS Col'+ CAST(@GroupBy1Col as varchar)+',' 
                      
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab + 'Col' + CAST(@GroupBy1Col as varchar) + ' AS ''Parent Equipment'' ' + ','
            SET @OrderByCrossTab = @OrderByCrossTab + '''Parent Equipment''' + ','
            
            SET @SQL= 'ALTER TABLE #z_Cost ADD ParentEqpPlanId int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD ParentEqpPlan varchar(50) NULL'
            EXEC(@SQL)

            SET @GroupingByParentEqp=1
      END 
      ELSE IF @Column ='CTTY'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'CostTypeId, CostType,'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'CostTypeId, CostType,'
            SET @InsertIntoClause = @InsertIntoClause + 'CostTypeId, CostType,'
            SET @InclMissPerFields=@InclMissPerFields + 'CostTypeId, CostType,'
            SET @SelectColumns= @SelectColumns+'CostType AS Col'+ CAST(@GroupBy1Col as varchar)+','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab + 'Col' + CAST(@GroupBy1Col as varchar) + ' AS ''Cost Type'' ' + ','            
            SET @OrderByCrossTab = @OrderByCrossTab + '''Cost Type''' + ','
            
            SET @SQL= 'ALTER TABLE #z_Cost ADD CostTypeId int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD CostType varchar(50) NULL'
            EXEC(@SQL)
      END         
      ELSE IF @Column ='SYST'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'SystemId, System,'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'SystemId, System,'
            SET @InsertIntoClause = @InsertIntoClause + 'SystemId, System,'
            SET @InclMissPerFields=@InclMissPerFields + 'SystemId, System,'
            SET @SelectColumns= @SelectColumns+'System AS Col'+ CAST(@GroupBy1Col as varchar)+','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab + 'Col' + CAST(@GroupBy1Col as varchar) + ' AS System ' + ','
            SET @OrderByCrossTab = @OrderByCrossTab + 'System' + ','
            SET @SQL= 'ALTER TABLE #z_Cost ADD SystemId int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD System varchar(50) NULL'
            EXEC(@SQL)
      END               
      ELSE IF @Column ='SUBS'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'SubSystemId, SubSystem,'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'SubSystemId, SubSystem,'
            SET @InsertIntoClause = @InsertIntoClause + 'SubSystemId, SubSystem,'
            SET @InclMissPerFields=@InclMissPerFields + 'SubSystemId, SubSystem,'
            SET @SelectColumns= @SelectColumns+'SubSystem AS Col'+ CAST(@GroupBy1Col as varchar)+','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab + 'Col' + CAST(@GroupBy1Col as varchar) + ' AS ''Sub System'' ' + ','
            SET @OrderByCrossTab = @OrderByCrossTab + '''Sub System''' + ','
            
            SET @SQL= 'ALTER TABLE #z_Cost ADD SubSystemId int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD SubSystem varchar(50) NULL'
            EXEC(@SQL)
      END   
      ELSE IF @Column ='EVTT'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'TaskTypeID, TaskType,'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'TaskTypeID, TaskType,'
            SET @InsertIntoClause = @InsertIntoClause + 'TaskTypeID, TaskType,'
            SET @InclMissPerFields=@InclMissPerFields + 'TaskTypeID, TaskType,'
            SET @SelectColumns= @SelectColumns+'TaskType AS Col'+ CAST(@GroupBy1Col as varchar)+','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab + 'Col' + CAST(@GroupBy1Col as varchar) + ' AS ''Task Type'' ' + ','
            SET @OrderByCrossTab = @OrderByCrossTab + '''Task Type''' + ','
            
            SET @SQL= 'ALTER TABLE #z_Cost ADD TaskTypeID int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD TaskType varchar(50) NULL'
            EXEC(@SQL)
      END   
      ELSE IF @Column ='EVCC'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'ComponentCodeID, CompCode,'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'ComponentCodeID, CompCode,'
            SET @InsertIntoClause = @InsertIntoClause + 'ComponentCodeID, CompCode,'
            SET @InclMissPerFields=@InclMissPerFields + 'ComponentCodeID, CompCode,'
            SET @SelectColumns= @SelectColumns+'CompCode AS Col'+ CAST(@GroupBy1Col as varchar)+','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab + 'Col' + CAST(@GroupBy1Col as varchar) + ' AS ''Component Code'' ' + ','
            SET @OrderByCrossTab = @OrderByCrossTab + '''Component Code''' + ','
            
            SET @SQL= 'ALTER TABLE #z_Cost ADD ComponentCodeID int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD CompCode varchar(80) NULL'
            EXEC(@SQL)
      END               
      ELSE IF @Column ='CACT'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'ISNULL(Cost_Activity_ID,0),ISNULL(Cost_Activity_Code,'''+@ShowInsteadOfNull+'''),'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'Cost_Activity_ID,Cost_Activity_Code,'
            SET @InsertIntoClause = @InsertIntoClause + 'Cost_Activity_ID,Cost_Activity_Code,'
            SET @InclMissPerFields=@InclMissPerFields + 'Cost_Activity_ID,Cost_Activity_Code,'
            SET @SelectColumns= @SelectColumns+'Cost_Activity_Code AS Col'+ CAST(@GroupBy1Col as varchar)+','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab + 'Col' + CAST(@GroupBy1Col as varchar) + ' AS ''Maintenanace Type'' ' + ','
            SET @OrderByCrossTab = @OrderByCrossTab + '''Maintenanace Type''' + ','
            
            SET @SQL= 'ALTER TABLE #z_Cost ADD Cost_Activity_ID int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD Cost_Activity_Code varchar(70) NULL'
            EXEC(@SQL)
      END
      ELSE IF @Column ='WGRP'       --Added ID
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'ISNULL(Work_Group_ID,0),ISNULL(Work_Group_Code,'''+@ShowInsteadOfNull+'''),'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'Work_Group_ID,Work_Group_Code,'
            SET @InsertIntoClause = @InsertIntoClause + 'Work_Group_ID,Work_Group_Code,'
            SET @InclMissPerFields=@InclMissPerFields + 'Work_Group_ID,Work_Group_Code,'
            SET @SelectColumns = @SelectColumns + 'Work_Group_Code AS Col' + CAST(@GroupBy1Col as varchar) + ','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab + 'Col' + CAST(@GroupBy1Col as varchar) + ' AS ''Work Group'' ' + ','
            SET @OrderByCrossTab = @OrderByCrossTab + '''Work Group''' + ','
            
            SET @SQL= 'ALTER TABLE #z_Cost ADD Work_Group_ID int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD Work_Group_Code varchar(70) NULL'
            EXEC(@SQL)
      END   
      ELSE IF @Column ='CCTR'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'ISNULL(Cost_Centre_ID,0),ISNULL(Cost_Centre_Code,'''+@ShowInsteadOfNull+'''),'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'Cost_Centre_ID,Cost_Centre_Code,'
            SET @InsertIntoClause = @InsertIntoClause + 'Cost_Centre_ID,Cost_Centre_Code,'
            SET @InclMissPerFields=@InclMissPerFields + 'Cost_Centre_ID,Cost_Centre_Code,'
            SET @SelectColumns = @SelectColumns + 'Cost_Centre_Code AS Col' + CAST(@GroupBy1Col as varchar) +','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab + 'Col' + CAST(@GroupBy1Col as varchar) + ' AS ''Cost Centre'' ' + ','
            SET @OrderByCrossTab = @OrderByCrossTab + '''Cost Centre''' + ','
            
            SET @SQL= 'ALTER TABLE #z_Cost ADD Cost_Centre_ID int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD Cost_Centre_Code varchar(70) NULL'
            EXEC(@SQL)
      END 
      ELSE IF @Column ='CRSP'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'ISNULL(Cost_Responsibility_ID,0), ISNULL(Cost_Responsibility_Code,'''+@ShowInsteadOfNull+'''),'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'Cost_Responsibility_ID, Cost_Responsibility_Code,'
            SET @InsertIntoClause = @InsertIntoClause + 'Cost_Responsibility_ID, Cost_Responsibility_Code,'
            SET @InclMissPerFields=@InclMissPerFields + 'Cost_Responsibility_ID, Cost_Responsibility_Code,'
            SET @SelectColumns= @SelectColumns+'Cost_Responsibility_Code AS Col'+ CAST(@GroupBy1Col as varchar)+','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab + 'Col' + CAST(@GroupBy1Col as varchar) + ' AS Responsibility ' + ','
            SET @OrderByCrossTab = @OrderByCrossTab + 'Responsibility' + ','
            
            SET @SQL= 'ALTER TABLE #z_Cost ADD Cost_Responsibility_ID int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD Cost_Responsibility_Code varchar(70) NULL'
            EXEC(@SQL)
      END   
      ELSE IF @Column ='CEXP'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'ISNULL(Cost_Expense_ID,0), ISNULL(Cost_Expense_Code,'''+@ShowInsteadOfNull+'''),'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'Cost_Expense_ID, Cost_Expense_Code,'
            SET @InsertIntoClause = @InsertIntoClause + 'Cost_Expense_ID, Cost_Expense_Code,'
            SET @InclMissPerFields=@InclMissPerFields + 'Cost_Expense_ID, Cost_Expense_Code,'
            SET @SelectColumns= @SelectColumns+'Cost_Expense_Code AS Col'+ CAST(@GroupBy1Col as varchar)+','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab + 'Col' + CAST(@GroupBy1Col as varchar) + ' AS ''Expense Element''' + ','
            SET @OrderByCrossTab = @OrderByCrossTab + '''Expense Element''' + ','
            
            SET @SQL= 'ALTER TABLE #z_Cost ADD Cost_Expense_ID int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD Cost_Expense_Code varchar(70) NULL'
            EXEC(@SQL)
      END 
      ELSE IF @Column ='LABA'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'ISNULL(LabourActivityId,0),ISNULL(ActivityCode,'''+@ShowInsteadOfNull+'''),'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'LabourActivityId,ActivityCode,'
            SET @InsertIntoClause = @InsertIntoClause + 'LabourActivityId,ActivityCode,'
            SET @InclMissPerFields=@InclMissPerFields + 'LabourActivityId,ActivityCode,'
            SET @SelectColumns= @SelectColumns+'ActivityCode AS Col'+ CAST(@GroupBy1Col as varchar)+','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab + 'Col' + CAST(@GroupBy1Col as varchar) + ' AS ''Labour Activity'' ' + ','
            SET @OrderByCrossTab = @OrderByCrossTab + '''Labour Activity''' + ','
            
            SET @SQL= 'ALTER TABLE #z_Cost ADD LabourActivityId int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD ActivityCode varchar(50) NULL'
            EXEC(@SQL)
      END 
      ELSE IF @Column ='PRTA'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'TaskHeaderId, ProjTask,'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'TaskHeaderId, ProjTask,'
            SET @InsertIntoClause = @InsertIntoClause + 'TaskHeaderId, ProjTask,'
            SET @InclMissPerFields=@InclMissPerFields + 'TaskHeaderId, ProjTask,'
            SET @SelectColumns= @SelectColumns+'ProjTask AS Col'+ CAST(@GroupBy1Col as varchar)+','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab + 'Col' + CAST(@GroupBy1Col as varchar) + ' AS ''Strategy Task'' ' + ','
            SET @OrderByCrossTab = @OrderByCrossTab + '''Strategy Task''' + ','
               
            SET @SQL= 'ALTER TABLE #z_Cost ADD TaskHeaderId int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD ProjTask varchar(150) NULL'
            EXEC(@SQL)
      END 
      
      -- added for strategy task description
      ELSE IF @Column ='PRTD'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'Task_Description,'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'Task_Description,'
            SET @InsertIntoClause = @InsertIntoClause + 'Task_Description,'
            SET @InclMissPerFields=@InclMissPerFields + 'Task_Description,'
            SET @SelectColumns= @SelectColumns+'Task_Description AS Col'+ CAST(@GroupBy1Col as varchar)+','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab + 'Col' + CAST(@GroupBy1Col as varchar) + ' AS ''Strategy Task Description'' ' + ','
            SET @OrderByCrossTab = @OrderByCrossTab + '''Strategy Task Description''' + ','
              
            --SET @SQL= 'ALTER TABLE #z_Cost ADD TaskHeaderId int NULL'
            --EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD Task_Description varchar(100) NULL'
            EXEC(@SQL)
      END 
       
      ELSE IF @Column ='MONH'
      BEGIN
            --SET @SQL1='RIGHT(CONVERT(VARCHAR(12),CONVERT(DATETIME,CONVERT(VARCHAR,CalenderPeriod)+''01'',112),113),9),'
            SET @SQL1='RIGHT(CONVERT(VARCHAR(12),CONVERT(DATETIME,CONVERT(VARCHAR,CalPer)+''01'',112),113),9),'
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'CalenderPeriod, '+ @SQL1
            SET @GroupBy1Clause2 = @GroupBy1Clause2 +'CalenderPeriod,CalPeriodDescr,'
            SET @InsertIntoClause = @InsertIntoClause + 'CalenderPeriod, CalPeriodDescr,'
            --If Analysing the variance (Projection1-Projection2) calender period will
            --be at the end of Select close before TotalCost
            IF @AnalyseVariance=0 SET @SelectColumns= @SelectColumns+' CalPeriodDescr AS Col'+ CAST(@GroupBy1Col as varchar)+','             
            
            IF @AnalyseVariance=1 SET @GroupBy1Col=@GroupBy1Col-1
            SET @SQL= 'ALTER TABLE #z_Cost ADD CalenderPeriod int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD CalPeriodDescr varchar(20) NULL'
            EXEC(@SQL)
            --Include missing calendar period
            SET @IncludeMissingCalenderPeriods=@Column
            
      END   
      ELSE IF @Column ='YEAR'
      BEGIN       
            --SET @SQL1='CAST(CalenderPeriod/100 AS varchar),'
            SET @SQL1='CAST(CalPer/100 AS varchar),'
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'CalenderPeriod/100, '+@SQL1
            SET @GroupBy1Clause2 = @GroupBy1Clause2 +'CalenderPeriod,CalPeriodDescr,'
            SET @InsertIntoClause = @InsertIntoClause + 'CalenderPeriod, CalPeriodDescr,'
            --If Analysing the variance (Projection1-Projection2) calender period will
            --be at the end of Select close before TotalCost
            IF @AnalyseVariance=0 SET @SelectColumns= @SelectColumns+' CalPeriodDescr AS Col'+ CAST(@GroupBy1Col as varchar)+','             
           
            IF @AnalyseVariance=1 SET @GroupBy1Col=@GroupBy1Col-1
            SET @SQL= 'ALTER TABLE #z_Cost ADD CalenderPeriod int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD CalPeriodDescr varchar(20) NULL'
            EXEC(@SQL)
            --Include missing calendar period
            SET @IncludeMissingCalenderPeriods=@Column
      END   
      ELSE IF @Column ='QRTR'
      BEGIN 
            --SET @SQL1 = @SQL1 + ' CAST(Left(CalenderPeriod,4) + CONVERT(varchar(1),((Right(CalenderPeriod,2)+2)/3)) AS int), '
            --SET @SQL1 = @SQL1 + 'Left(CalenderPeriod,4) + ''-Q'' + CONVERT(varchar(1),((Right(CalenderPeriod,2)+2)/3))  ,'
            SET @SQL1 = @SQL1 + ' CAST(Left(CalPer,4) + CONVERT(varchar(1),((Right(CalPer,2)+2)/3)) AS int), '
            SET @SQL1 = @SQL1 + 'Left(CalPer,4) + ''-Q'' + CONVERT(varchar(1),((Right(CalPer,2)+2)/3))  ,'
            SET @GroupBy1Clause1 = @GroupBy1Clause1 +@SQL1
            SET @GroupBy1Clause2 = @GroupBy1Clause2 +'CalenderPeriod,CalPeriodDescr,'
            SET @InsertIntoClause = @InsertIntoClause + 'CalenderPeriod, CalPeriodDescr,'
            --If Analysing the variance (Projection1-Projection2) calender period will
            --be at the end of Select close before TotalCost
            IF @AnalyseVariance=0 SET @SelectColumns= @SelectColumns+' CalPeriodDescr AS Col'+ CAST(@GroupBy1Col as varchar)+','           
            
            IF @AnalyseVariance=1 SET @GroupBy1Col=@GroupBy1Col-1
            SET @SQL= 'ALTER TABLE #z_Cost ADD CalenderPeriod int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD CalPeriodDescr varchar(20) NULL'
            EXEC(@SQL)
            --Include missing calendar period
            SET @IncludeMissingCalenderPeriods=@Column
      END   
      ELSE IF @Column ='PLM'
      BEGIN 
            SET @PLM=1  

            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'PLM_ID, PLM,'          
            SET @SelectColumns= @SelectColumns+'PLM AS Col'+ CAST(@GroupBy1Col as varchar)+','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab +'Col'+ CAST(@GroupBy1Col as varchar)+' AS ''Part/Lab/Misc'' ' + ','
            SET @OrderByCrossTab = @OrderByCrossTab +'''Part/Lab/Misc''' + ','

            SET @SQL= 'ALTER TABLE #z_Cost ADD PartsCost float NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD LabourCost float NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD MiscCost float NULL'
            EXEC(@SQL)
      END   

      ELSE IF @Column ='REGN'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'Region_Id, Region_Desc,'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'Region_Id, Region_Desc,'
            SET @InsertIntoClause = @InsertIntoClause + 'Region_Id, Region_Desc,'
            SET @InclMissPerFields=@InclMissPerFields + 'Region_Id, Region_Desc,'
            SET @SelectColumns= @SelectColumns+'Region_Desc AS Col'+ CAST(@GroupBy1Col as varchar)+','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab +'Col'+ CAST(@GroupBy1Col as varchar)+' AS Region' + ','
            SET @OrderByCrossTab = @OrderByCrossTab +'Region' +','
             
            SET @SQL= 'ALTER TABLE #z_Cost ADD Region_Id int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD Region_Desc varchar(50) NULL'
            EXEC(@SQL)
      END 
      ELSE IF @Column ='DEVI'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'Division_Id, Division_Desc,'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'Division_Id, Division_Desc,'
            SET @InsertIntoClause = @InsertIntoClause + 'Division_Id, Division_Desc,'
            SET @InclMissPerFields=@InclMissPerFields + 'Division_Id, Division_Desc,'
            SET @SelectColumns= @SelectColumns+'Division_Desc AS Col'+ CAST(@GroupBy1Col as varchar)+','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab + 'Col' + CAST(@GroupBy1Col as varchar) + ' AS Division' + ','
            SET @OrderByCrossTab = @OrderByCrossTab + 'Division' + ','
            
            SET @SQL= 'ALTER TABLE #z_Cost ADD Division_Id int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD Division_Desc varchar(50) NULL'
            EXEC(@SQL)
      END 
      ELSE IF @Column ='LCTN'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'Eqp_Location_Id, Eqp_Location_Desc,'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'Eqp_Location_Id, Eqp_Location_Desc,'
            SET @InsertIntoClause = @InsertIntoClause + 'Eqp_Location_Id, Eqp_Location_Desc,'
            SET @InclMissPerFields=@InclMissPerFields + 'Eqp_Location_Id, Eqp_Location_Desc,'
            SET @SelectColumns= @SelectColumns+'Eqp_Location_Desc AS Col'+ CAST(@GroupBy1Col as varchar)+','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab + 'Col' + CAST(@GroupBy1Col as varchar) + ' AS ''Equipment Location''' + ','
            SET @OrderByCrossTab = @OrderByCrossTab + '''Equipment Location''' + ','
            
            
            SET @SQL= 'ALTER TABLE #z_Cost ADD Eqp_Location_Id int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD Eqp_Location_Desc varchar(50) NULL'
            EXEC(@SQL)
      END 
      ELSE IF @Column ='CRIT'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'Eqp_Criticality_Id, Eqp_Criticality_Desc,'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'Eqp_Criticality_Id, Eqp_Criticality_Desc,'
            SET @InsertIntoClause = @InsertIntoClause + 'Eqp_Criticality_Id, Eqp_Criticality_Desc,'
            SET @InclMissPerFields=@InclMissPerFields + 'Eqp_Criticality_Id, Eqp_Criticality_Desc,'
            SET @SelectColumns= @SelectColumns+'Eqp_Criticality_Desc AS Col'+ CAST(@GroupBy1Col as varchar)+','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab + 'Col' + CAST(@GroupBy1Col as varchar) + ' AS ''Equipment Criticality'' ' + ','
            SET @OrderByCrossTab = @OrderByCrossTab + '''Equipment Criticality''' + ','
             
            SET @SQL= 'ALTER TABLE #z_Cost ADD Eqp_Criticality_Id int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD Eqp_Criticality_Desc varchar(50) NULL'
            EXEC(@SQL)
      END 
      ELSE IF @Column ='CTGR'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'Eqp_Category_Id, Eqp_Category_Desc,'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'Eqp_Category_Id, Eqp_Category_Desc,'
            SET @InsertIntoClause = @InsertIntoClause + 'Eqp_Category_Id, Eqp_Category_Desc,'
            SET @InclMissPerFields=@InclMissPerFields + 'Eqp_Category_Id, Eqp_Category_Desc,'
            SET @SelectColumns= @SelectColumns+'Eqp_Category_Desc AS Col'+ CAST(@GroupBy1Col as varchar)+','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab + 'Col' + CAST(@GroupBy1Col as varchar) + ' AS ''Equipment Category'' ' + ','
            SET @OrderByCrossTab = @OrderByCrossTab +'''Equipment Category''' + ','
            
            SET @SQL= 'ALTER TABLE #z_Cost ADD Eqp_Category_Id int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD Eqp_Category_Desc varchar(50) NULL'
            EXEC(@SQL)
      END 
      ELSE IF @Column ='ECLS'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'Eqp_Class_Id, Eqp_Class_Desc,'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'Eqp_Class_Id, Eqp_Class_Desc,'
            SET @InsertIntoClause = @InsertIntoClause + 'Eqp_Class_Id, Eqp_Class_Desc,'
            SET @InclMissPerFields=@InclMissPerFields + 'Eqp_Class_Id, Eqp_Class_Desc,'
            SET @SelectColumns= @SelectColumns+'Eqp_Class_Desc AS Col'+ CAST(@GroupBy1Col as varchar)+','
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab +'Col'+ CAST(@GroupBy1Col as varchar)+' AS ''Equipment Class'' ' + ','
            SET @OrderByCrossTab = @OrderByCrossTab +'''Equipment Class''' + ','
             
            SET @SQL= 'ALTER TABLE #z_Cost ADD Eqp_Class_Id int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD Eqp_Class_Desc varchar(50) NULL'
            EXEC(@SQL)
      END 
      ELSE IF @Column ='EGRP'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'Equipment_Group_Id, Equipment_Group_Desc,'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'Equipment_Group_Id, Equipment_Group_Desc,'
            SET @InsertIntoClause = @InsertIntoClause + 'Equipment_Group_Id, Equipment_Group_Desc,'
            SET @InclMissPerFields=@InclMissPerFields + 'Equipment_Group_Id, Equipment_Group_Desc,'
            SET @SelectColumns= @SelectColumns+'Equipment_Group_Desc AS Col'+ CAST(@GroupBy1Col as varchar)+','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab +'Col'+ CAST(@GroupBy1Col as varchar)+' AS ''Equipment Group''' + ','
            SET @OrderByCrossTab = @OrderByCrossTab +'''Equipment Group''' + ','
            
            SET @SQL= 'ALTER TABLE #z_Cost ADD Equipment_Group_Id int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD Equipment_Group_Desc varchar(50) NULL'
            EXEC(@SQL)
      END 
      ELSE IF @Column ='ECCT'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'EqpCostCentreId, EqpCostCentre,'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'EqpCostCentreId, EqpCostCentre,'
            SET @InsertIntoClause = @InsertIntoClause + 'EqpCostCentreId, EqpCostCentre,'
            SET @InclMissPerFields=@InclMissPerFields + 'EqpCostCentreId, EqpCostCentre,'
            SET @SelectColumns= @SelectColumns+'EqpCostCentre AS Col'+ CAST(@GroupBy1Col as varchar)+','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab +'Col'+ CAST(@GroupBy1Col as varchar)+' AS ''Equipment Cost Centre'' ' + ','
            SET @OrderByCrossTab = @OrderByCrossTab +'''Equipment Cost Centre''' + ','
            
            SET @SQL= 'ALTER TABLE #z_Cost ADD EqpCostCentreId int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD EqpCostCentre varchar(max) NULL'
            EXEC(@SQL)
      END 
      ELSE IF @Column ='CCAT'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'Cost_Category_Id, Cost_Category_Desc,'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'Cost_Category_Id, Cost_Category_Desc,'
            SET @InsertIntoClause = @InsertIntoClause + 'Cost_Category_Id, Cost_Category_Desc,'
            SET @InclMissPerFields=@InclMissPerFields + 'Cost_Category_Id, Cost_Category_Desc,'
            SET @SelectColumns= @SelectColumns+'Cost_Category_Desc AS Col'+ CAST(@GroupBy1Col as varchar)+','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab +'Col'+ CAST(@GroupBy1Col as varchar)+' AS ''Cost Category''' + ','
            SET @OrderByCrossTab = @OrderByCrossTab +'''Cost Category''' + ','
             
            SET @SQL= 'ALTER TABLE #z_Cost ADD Cost_Category_Id int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD Cost_Category_Desc varchar(50) NULL'
            EXEC(@SQL)        
      END 

	--AL: 22/10/09
      ELSE IF @Column ='COBE'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'CostBearerID, CostBearer,'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'CostBearerID, CostBearer,'
            SET @InsertIntoClause = @InsertIntoClause + 'CostBearerID, CostBearer,'
            SET @InclMissPerFields=@InclMissPerFields + 'CostBearerID, CostBearer,'
            SET @SelectColumns= @SelectColumns+'CostBearer AS Col'+ CAST(@GroupBy1Col as varchar)+','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab +'Col'+ CAST(@GroupBy1Col as varchar)+' AS CostBearer ' + ','
            SET @OrderByCrossTab = @OrderByCrossTab +'CostBearer' + ','
             
            SET @SQL= 'ALTER TABLE #z_Cost ADD CostBearerID int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD CostBearer varchar(50) NULL'
            EXEC(@SQL)        
      END 
      ELSE IF @Column ='CCAC'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'CC_Activity,'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'CC_Activity,'
            SET @InsertIntoClause = @InsertIntoClause + 'CC_Activity,'
            SET @InclMissPerFields=@InclMissPerFields + 'CC_Activity,'
            SET @SelectColumns= @SelectColumns+'CC_Activity AS Col'+ CAST(@GroupBy1Col as varchar)+','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab +'Col'+ CAST(@GroupBy1Col as varchar)+' AS CC_Activity ' + ','
            SET @OrderByCrossTab = @OrderByCrossTab +'CC_Activity' + ','
             
            SET @SQL= 'ALTER TABLE #z_Cost ADD CC_Activity varchar(10) NULL'
            EXEC(@SQL)
      END 
      ELSE IF @Column ='CCLO'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'CC_Location,'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'CC_Location,'
            SET @InsertIntoClause = @InsertIntoClause + 'CC_Location,'
            SET @InclMissPerFields=@InclMissPerFields + 'CC_Location,'
            SET @SelectColumns= @SelectColumns+'CC_Location AS Col'+ CAST(@GroupBy1Col as varchar)+','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab +'Col'+ CAST(@GroupBy1Col as varchar)+' AS CC_Location ' + ','
            SET @OrderByCrossTab = @OrderByCrossTab +'''CC_Location''' + ','
            
            SET @SQL= 'ALTER TABLE #z_Cost ADD CC_Location varchar(10) NULL'
            EXEC(@SQL)
      END 
      ELSE IF @Column ='CCRP'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'CC_Responsibility,'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'CC_Responsibility,'
            SET @InsertIntoClause = @InsertIntoClause + 'CC_Responsibility,'
            SET @InclMissPerFields=@InclMissPerFields + 'CC_Responsibility,'
            SET @SelectColumns= @SelectColumns+'CC_Responsibility AS Col'+ CAST(@GroupBy1Col as varchar)+','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab +'Col'+ CAST(@GroupBy1Col as varchar)+' AS CC_Responsibility ' + ','
            SET @OrderByCrossTab = @OrderByCrossTab +'CC_Responsibility' + ','
            
            SET @SQL= 'ALTER TABLE #z_Cost ADD CC_Responsibility varchar(10) NULL'
            EXEC(@SQL)
      END 


      SET @Counter=CHARINDEX(',',@GroupBy1)
      SET @GroupBy1Col=@GroupBy1Col+1
END

--Add Null columns if Groupby contains less items then @GroupBy1ColMAX
WHILE @GroupBy1Col<=@GroupBy1ColMAX
BEGIN
      SET @SelectColumns= @SelectColumns+''''' AS Col'+ CAST(@GroupBy1Col as varchar)+','
      SET @GroupBy1Col=@GroupBy1Col+1
END

--Take out the coma at the end
IF LEN(@GroupBy1Clause1)>0 SET @GroupBy1Clause1=LEFT(@GroupBy1Clause1,LEN(@GroupBy1Clause1)-1)
IF LEN(@GroupBy1Clause2)>0 SET @GroupBy1Clause2=LEFT(@GroupBy1Clause2,LEN(@GroupBy1Clause2)-1)
IF LEN(@SelectColumns)>0 SET @SelectColumns=LEFT(@SelectColumns,LEN(@SelectColumns)-1)
IF LEN(@InsertIntoClause)>0 SET @InsertIntoClause=LEFT(@InsertIntoClause,LEN(@InsertIntoClause)-1)
IF LEN(@InclMissPerFields)>0 SET @InclMissPerFields=LEFT(@InclMissPerFields,LEN(@InclMissPerFields)-1)

--Insert into temporary table the actual costs 
SET @SQL1 =   ' INSERT INTO #z_Cost'  + '('+@AnalyseByFld+
CASE @PLM WHEN 1 THEN ', PartsCost, LabourCost,MiscCost'
        ELSE ', Cost' END +
        CASE WHEN @InsertIntoClause='' THEN ''
             ELSE ', '+@InsertIntoClause END+')'

SET @SQL1 =  @SQL1 + ' SELECT '
SET @SQL1 =  @SQL1 + @AnalyseByFld2+ ', '


IF @PLM=0
            SET @SQL1 =  @SQL1 + ' 0 '
       

IF @PartsLabourMisc & 1 = 1
BEGIN
      IF @PLM=0
            SET @SQL1 =  @SQL1 +  ' + SUM(PrimePartsSell)'
      ELSE
            SET @SQL1 =  @SQL1 +  ' SUM(PrimePartsSell),'
END
ELSE
      IF @PLM=1
            SET @SQL1 =  @SQL1 +  ' 0,'

IF @PartsLabourMisc & 2 = 2
BEGIN
      IF @PLM=0
            SET @SQL1 =  @SQL1 +  ' + SUM(PrimeLabourSell)'
      ELSE
            SET @SQL1 =  @SQL1 +  ' SUM(PrimeLabourSell), '
END   
ELSE
      IF @PLM=1
            SET @SQL1 =  @SQL1 +  ' 0,'

IF @PartsLabourMisc & 4 = 4
BEGIN 
      IF @PLM=0
            SET @SQL1 =  @SQL1 +  ' + SUM(PrimeMiscSell)'
      ELSE
            SET @SQL1 =  @SQL1 +  '  SUM(PrimeMiscSell)'
END
ELSE
      IF @PLM=1
            SET @SQL1 =  @SQL1 +  ' 0'



SET @SQL1 =  @SQL1 + CASE WHEN @GroupBy1Clause1='' THEN '' ELSE ', '+ @GroupBy1Clause1 END



SET @SQL2 =  @Where_Clause + ' GROUP BY ' + CASE WHEN @GroupBy1Clause1='' THEN '' 
                                     ELSE @GroupBy1Clause1 +  ', ' END + @AnalyseByFld2


-- print @SQL1 + ' FROM RPT_COST_COMPARISON_ACTUAL_V ' + @SQL2
-- print @SQL1 + ' FROM RPT_COST_COMPARISON_PROJ_V ' + @SQL2
--  return



--AL: 19/09/08
DECLARE @SQLT varchar(MAX)

IF @ActualProjected & 1 = 1
BEGIN
      SET @SQLT=' FROM
                              (SELECT *,left(convert(varchar,dateadd(month,-1*' + convert(varchar,@YearStartMonth) + ', convert(datetime,convert(varchar,calenderperiod) + ''01'',112)),112),6)  AS CalPer
                              FROM RPT_COST_COMPARISON_ACTUAL_V) A '
      EXEC(@SQL1 + @SQLT + @SQL2)
      
--    EXEC(@SQL1 + ' FROM RPT_COST_COMPARISON_ACTUAL_V ' + @SQL2)
END



IF @ActualProjected & 2 = 2
BEGIN
      SET @SQLT=' FROM
                              (SELECT *,left(convert(varchar,dateadd(month,-1*' + convert(varchar,@YearStartMonth) + ', convert(datetime,convert(varchar,calenderperiod) + ''01'',112)),112),6)    AS CalPer
                              FROM RPT_COST_COMPARISON_PROJ_V) A '
      EXEC(@SQL1 + @SQLT + @SQL2)

--    EXEC(@SQL1 + ' FROM RPT_COST_COMPARISON_PROJ_V ' + @SQL2)
END


--If Analyse By date insert the missing calender periods
IF @IncludeMissingCalenderPeriods IS NOT NULL
BEGIN
	/*VV CR9009*/
	SELECT * INTO #z_Cost2 FROM #z_Cost
	
      IF @AnalyseBy = 'PRTY'
      BEGIN
            SET @SQL1=' CalenderPeriod,CalPeriodDescr'
            SET @SQL2=CASE @IncludeMissingCalenderPeriods
              WHEN 'MONH' THEN 'rm.Calendar_Period,rm.MonthDescr'
              WHEN 'QRTR' THEN 'rm.QuarterPer,rm.Quarter'
              WHEN 'YEAR' THEN 'CAST(rm.Year as int),rm.Year'           
              END
      END
      ELSE
      BEGIN
            SET @SQL1=' CalenderPeriod'
            SET @SQL2='rm.Calendar_Period'
      END 

      

      SET @Where_Clause=CASE @IncludeMissingCalenderPeriods
              WHEN 'MONH' THEN 'rm.Calendar_Period'
              WHEN 'QRTR' THEN 'rm.QuarterPer'
              WHEN 'YEAR' THEN 'CAST(rm.Year as int)'
              ELSE ''
              END
      
      
      --Select the missing calender periods into a temporary table
      SET @SQL =  ' INSERT INTO #z_Cost(' + @SQL1 + ',Cost'
      SET @SQL= @SQL + CASE @InclMissPerFields 
                     WHEN '' THEN ')'
                   ELSE ', '+ @InclMissPerFields + ')'
                   END
      SET @SQL = @SQL + ' SELECT '+@SQL2+',0' 
      SET @SQL= @SQL + CASE @InclMissPerFields 
                     WHEN '' THEN ''
                   ELSE ', '+ @InclMissPerFields + ''
                   END
      SET @SQL = @SQL + ' FROM REPORT_MONTH_V rm '
      SET @SQL= @SQL + CASE @InclMissPerFields 
                     WHEN '' THEN ''
                   ELSE ' CROSS JOIN (SELECT DISTINCT '+ @InclMissPerFields + ' FROM #z_Cost2/*VV CR9009*/) A'
                   END
            
      SET @SQL = @SQL + ' WHERE ('+@Where_Clause+' NOT IN'
      SET @SQL = @SQL + ' (SELECT DISTINCT CalenderPeriod'
      SET @SQL = @SQL + ' FROM  #z_Cost2/*VV CR9009*/'  + '))'
      SET @SQL = @SQL + ' AND (rm.Calendar_Period BETWEEN ' + Convert(varchar(6),@StartDate) + ' AND ' + Convert(varchar(6),@EndDate) + ')'
            
      SET @SQL = @SQL + ' GROUP BY '+ @SQL2 
      SET @SQL= @SQL + CASE @InclMissPerFields 
                     WHEN '' THEN ''
                   ELSE ', '+ @InclMissPerFields 
                   END
      --Test
      --delete  from #z_Cost Where CalenderPeriod=@StartDate
--    drop table z_Cost
--    select * into z_Cost from #z_Cost
--    select *  from #z_Cost
--    print(@SQL)
--    return
      EXEC(@SQL)
      
      /*VV CR9009*/
      DROP TABLE #z_Cost2
END   
      

IF ISNULL(@GroupingByParentEqp,0) = 1
BEGIN

      CREATE TABLE #aa_EqpTemp(
                              [EqpPlanId] [int] PRIMARY KEY,
                              [ParentEqpPlanID] [int])

      SET @Eqp_Where_Clause = ' WHERE 1=1 '

      If @EqpPlanID <> '' SET @Eqp_Where_Clause = @Eqp_Where_Clause + ' AND EqpPlanID IN (' + @EqpPlanID + ' )'
      If @FleetID <> '' SET @Eqp_Where_Clause = @Eqp_Where_Clause + ' AND FleetID IN (' + @FleetID + ' )'
      If @SiteID <> '' SET @Eqp_Where_Clause = @Eqp_Where_Clause + ' AND SiteID IN (' + @SiteID + ' )'
      If @BranchId <> '' SET @Eqp_Where_Clause = @Eqp_Where_Clause + ' AND BranchId IN (' + @BranchId + ' )'
      If @DealerId > 0 SET @Eqp_Where_Clause = @Eqp_Where_Clause + ' AND DealerId = ' + Convert(varchar, @DealerId)
      If @Projection_Header_Id <> '' SET @Eqp_Where_Clause = @Eqp_Where_Clause + ' AND ProjHeaderId IN (' + @Projection_Header_Id + ')'
      If @ModelId <> '' SET @Eqp_Where_Clause = @Eqp_Where_Clause + ' AND ModelId IN (' + @ModelId + ')'
      IF @CostResponsibilityID <>'' SET @Where_Clause = @Where_Clause + ' AND Cost_Responsibility_ID IN (' + @CostResponsibilityID + ')'            
      IF @RegionId <>'' SET @Where_Clause = @Where_Clause + ' AND Region_Id IN (' + @RegionId + ')'           
      IF @DivisionId <>'' SET @Where_Clause = @Where_Clause + ' AND Division_Id IN (' + @DivisionId + ')'           
      IF @EqpLocationId <>'' SET @Eqp_Where_Clause = @Eqp_Where_Clause + ' AND Eqp_Location_Id IN (' + @EqpLocationId + ')'
      IF @CriticalityId <>'' SET @Eqp_Where_Clause = @Eqp_Where_Clause + ' AND Eqp_Criticality_Id IN (' + @CriticalityId + ')'           
      IF @EqpCategoryId <>'' SET @Eqp_Where_Clause = @Eqp_Where_Clause + ' AND Eqp_Category_Id IN (' + @EqpCategoryId + ')'              
      IF @EqpClassId <>'' SET @Eqp_Where_Clause = @Eqp_Where_Clause + ' AND Eqp_Class_Id IN (' + @EqpClassId + ')'            
      IF @EqpGroupId <>'' SET @Eqp_Where_Clause = @Eqp_Where_Clause + ' AND Equipment_Group_Id IN (' + @EqpGroupId + ')'              
	  IF @EqpCostCentre <>'' SET @Where_Clause = @Where_Clause + ' AND EqpCostCentreId IN (' + @EqpCostCentre + ')'
	  IF @CostCategoryId <>'' SET @Where_Clause = @Where_Clause + ' AND Cost_Category_Desc IN (' + @CostCategoryId + ')'

      IF ISNULL(@ParentEquipmentID,'')<>''
            SET @Eqp_Where_Clause = @Eqp_Where_Clause + ' AND EqpPlanID IN (SELECT EqpPlanID FROM dbo.EQP_SIBLINGS_F('+@ParentEquipmentID+')) '

	  If @ManufacturerID <> '' SET @Where_Clause = @Where_Clause + ' AND ManufacturerId IN (' + @ManufacturerID + ')'

      SET @SQL =   ' INSERT INTO #aa_EqpTemp'  + '  (EqpPlanId,ParentEqpPlanID)'
      SET @SQL =  @SQL + ' SELECT EqpPlanId,NULL'
                        
      EXEC(@SQL +  ' FROM EQUIPMENT_HIERARCHY_V ' +  @Eqp_Where_Clause)

      --1: get list of children saved within ParentEqpPlan(Id) columns
      DECLARE @selection varchar(max)
      SET @selection= REPLACE(REPLACE((select EqpPlanId from #aa_EqpTemp for xml raw),'<row EqpPlanId="',''),'"/>',',')

      --2: reset values in ParentEqpPlanId columns with actual top most parent ID
      UPDATE #aa_EqpTemp 
      SET ParentEqpPlanId  = dbo.GET_TOPMOST_PARENT_EQUIPMENT_F(EqpPlanId,@selection)                 

      --3: update ParentEqpPlan name

      UPDATE CCT 
      SET         parenteqpplanid = ET.ParentEqpPlanID,
                  parenteqpplan = EP.EqpPlan
      FROM 
                  #z_Cost CCT INNER JOIN
                  #aa_EqpTemp ET ON CCT.ParentEqpPlanId =ET.EqpPlanID INNER JOIN
                  tblEqpPlans EP ON ET.ParentEqpPlanID=EP.EqpPlanID

      DROP TABLE #aa_EqpTemp
END

-- select * into z_Cost From #z_Cost
-- Return

--VVV
IF @PLM=1
BEGIN
      SET @Table=CASE @PartsLabourMisc             
            
            WHEN @Parts THEN

                  '( SELECT '+@AnalyseByFld+ ', 1 AS PLM_ID,''Parts'' AS PLM, PartsCost AS Cost '+                 
                    CASE @InsertIntoClause WHEN '' THEN ''
                          ELSE ', '+@InsertIntoClause END +' FROM #z_Cost) A' 
                   
            WHEN @Labour THEN

                  '( SELECT '+@AnalyseByFld+ ', 2 AS PLM_ID,''Labour'' AS PLM, LabourCost AS Cost '+                 
                    CASE @InsertIntoClause WHEN '' THEN ''
                          ELSE ', '+@InsertIntoClause END +' FROM #z_Cost) A' 
            WHEN @Misc THEN

                  '( SELECT '+@AnalyseByFld+ ', 3 AS PLM_ID,''Misc'' AS PLM, MiscCost AS Cost '+                
                    CASE @InsertIntoClause WHEN '' THEN ''
                          ELSE ', '+@InsertIntoClause END +' FROM #z_Cost) A' 
            WHEN @Parts + @Labour THEN
                  '( SELECT '+@AnalyseByFld+ ', 1 AS PLM_ID,''Parts'' AS PLM, PartsCost AS Cost '+                 
                    CASE @InsertIntoClause WHEN '' THEN ''
                          ELSE ', '+@InsertIntoClause END +' FROM #z_Cost '+
                  ' UNION ALL '+
                  'SELECT '+@AnalyseByFld+ ', 2 AS PLM_ID,''Labour'' AS PLM, LabourCost AS Cost '+                 
                    CASE @InsertIntoClause WHEN '' THEN ''
                          ELSE ', '+@InsertIntoClause END +' FROM #z_Cost) B'
            WHEN @Parts + @Misc THEN      
                  '( SELECT '+@AnalyseByFld+ ', 1 AS PLM_ID,''Parts'' AS PLM, PartsCost AS Cost '+                 
                    CASE @InsertIntoClause WHEN '' THEN ''
                          ELSE ', '+@InsertIntoClause END +' FROM #z_Cost '+
                  ' UNION ALL '+
                  'SELECT '+@AnalyseByFld+ ', 3 AS PLM_ID,''Misc'' AS PLM, MiscCost AS Cost '+                
                    CASE @InsertIntoClause WHEN '' THEN ''
                          ELSE ', '+@InsertIntoClause END +' FROM #z_Cost) B' 
            WHEN @Labour + @Misc THEN
                  '( SELECT '+@AnalyseByFld+ ', 2 AS PLM_ID,''Labour'' AS PLM, LabourCost AS Cost '+                 
                    CASE @InsertIntoClause WHEN '' THEN ''
                          ELSE ', '+@InsertIntoClause END +' FROM #z_Cost '+ 
                  ' UNION ALL '+
                  'SELECT '+@AnalyseByFld+ ', 3 AS PLM_ID,''Misc'' AS PLM, MiscCost AS Cost '+                
                    CASE @InsertIntoClause WHEN '' THEN ''
                          ELSE ', '+@InsertIntoClause END +' FROM #z_Cost) B'       
      
            ELSE
                  '( SELECT '+@AnalyseByFld+ ', 1 AS PLM_ID,''Parts'' AS PLM, PartsCost AS Cost '+                 
                    CASE @InsertIntoClause WHEN '' THEN ''
                          ELSE ', '+@InsertIntoClause END +' FROM #z_Cost '+
                    ' UNION ALL '+
                    'SELECT '+@AnalyseByFld+ ', 2 AS PLM_ID,''Labour'' AS PLM, LabourCost AS Cost '+                 
                    CASE @InsertIntoClause WHEN '' THEN ''
                          ELSE ', '+@InsertIntoClause END +' FROM #z_Cost '+
                    ' UNION ALL '+
                    'SELECT '+@AnalyseByFld+ ', 3 AS PLM_ID,''Misc'' AS PLM, MiscCost AS Cost '+                
                    CASE @InsertIntoClause WHEN '' THEN ''
                          ELSE ', '+@InsertIntoClause END +' FROM #z_Cost) B' 
            END
      
END
ELSE
BEGIN
      SET @Table='#z_Cost B'
END

--exec('SELECT * FROM ' + @Table)

IF @AnalyseBy = 'MONH' 
BEGIN
      SET @SQL =  ' SELECT ' 
      SET @SQL = @SQL + @SelectColumns +', '
      SET @SQL = @SQL +' CalenderPeriod, '
      /*VV #1315*/
      SET @SQL =@SQL+CASE @ShowPeriods WHEN 1 THEN 
		'RIGHT(CAST(CalenderPeriod AS varchar(10)),2)+''-''+LEFT(CAST(CalenderPeriod AS varchar(10)),4) AS CalPeriodDescr,'
      ELSE 
		'RIGHT(CONVERT(VARCHAR(12),CONVERT(DATETIME,CONVERT(VARCHAR,CalenderPeriod)+''01'',112),113),9) AS CalPeriodDescr,'
      END
	
      SET @SQL = @SQL + ' CAST(SUM(Cost) as Decimal(38,3)) AS TotalCost   FROM ' + @Table 
      SET @SQL = @SQL + ' GROUP BY '+ @GroupBy1Clause2+',CalenderPeriod,' 
      SET @SQL = @SQL + 'RIGHT(CONVERT(VARCHAR(12),CONVERT(DATETIME,CalenderPeriod +''01'',112),113),9)'
      SET @SQL = @SQL + ' ORDER BY CalenderPeriod '
      
END
ELSE IF @AnalyseBy = 'QRTR' 
BEGIN
      SET @SQL =  ' SELECT '
      SET @SQL = @SQL + @SelectColumns +', '
      SET @SQL = @SQL + ' CAST(Left(CalenderPeriod,4) + CONVERT(varchar(1),((Right(CalenderPeriod,2)+2)/3)) AS int) as  CalenderPeriod, '
      SET @SQL = @SQL + 'Left(CalenderPeriod,4) + ''-Q'' + CONVERT(varchar(1),((Right(CalenderPeriod,2)+2)/3)) as CalPeriodDescr ,'
      SET @SQL = @SQL + ' CAST(SUM(Cost) as Decimal(38,3)) AS TotalCost FROM ' + @Table   
      SET @SQL = @SQL + ' GROUP BY '+ @GroupBy1Clause2 + ', '
      SET @SQL = @SQL + ' CAST(Left(CalenderPeriod,4) + CONVERT(varchar(1),((Right(CalenderPeriod,2)+2)/3)) AS int), '
      SET @SQL = @SQL + ' Left(CalenderPeriod,4) + ''-Q'' + CONVERT(varchar(1),((Right(CalenderPeriod,2)+2)/3)) '
      SET @SQL = @SQL + ' ORDER BY Left(CalenderPeriod,4) + ''-Q'' + CONVERT(varchar(1),((Right(CalenderPeriod,2)+2)/3)) '
      
END
ELSE IF @AnalyseBy = 'YEAR'  
BEGIN
      SET @SQL =  ' SELECT '
      SET @SQL = @SQL + @SelectColumns +', '
      SET @SQL = @SQL +' CalenderPeriod/100 as  CalenderPeriod, CAST(CalenderPeriod/100 AS varchar) AS CalPeriodDescr ,'
      SET @SQL = @SQL + ' CAST(SUM(Cost) as Decimal(38,3)) AS TotalCost FROM ' + @Table   
      SET @SQL = @SQL + ' GROUP BY '+ @GroupBy1Clause2+',CalenderPeriod/100, CAST(CalenderPeriod/100 AS varchar)'
      SET @SQL = @SQL + ' ORDER BY CalenderPeriod/100 '
      
END
ELSE IF @AnalyseBy = 'PRTY'
BEGIN
      
      --Find ID for the first Projection  
      DECLARE @HeaderID varchar(20)
      SET @HeaderID=LEFT(@Projection_Header_Id,CHARINDEX(',',@Projection_Header_Id)-1)
      
      --Return Costs
      SET @SQL = 'SELECT '
      SET @SQL = @SQL + @SelectColumns +', '
      
      SET @SQL = @SQL + CASE @AnalyseVariance               
                    WHEN 0 THEN ' CAST(SUM(Cost1) as Decimal(38,3)) AS Cost1, CAST(SUM(Cost2) as Decimal(38,3)) AS Cost2'
                    ELSE ' CalenderPeriod,CalPeriodDescr, CAST(SUM(Cost1)-SUM(Cost2) as Decimal(38,3)) AS TotalCost '
                      END
      
      SET @SQL = @SQL + ' FROM (SELECT '
      SET @SQL = @SQL + @GroupBy1Clause2 +', '
      SET @SQL = @SQL + ' SUM(CASE Projection_Header_ID WHEN '+ @HeaderID +' THEN Cost ELSE 0 END) AS Cost1, '
      SET @SQL = @SQL + ' SUM(CASE Projection_Header_ID WHEN '+ @HeaderID +' THEN 0 ELSE Cost END) AS Cost2 '
      SET @SQL = @SQL + 'FROM  ' + @Table
      SET @SQL = @SQL + ' GROUP BY ' + @GroupBy1Clause2
      SET @SQL = @SQL + ', Projection_Header_ID) A '
      SET @SQL = @SQL + ' GROUP BY ' + @GroupBy1Clause2
      SET @SQL = @SQL + CASE RIGHT(@GroupBy,4)
                    WHEN 'MONH' THEN ' ORDER BY CalenderPeriod'
                    WHEN 'QRTR' THEN ' ORDER BY CalenderPeriod'
                    WHEN 'YEAR' THEN ' ORDER BY CalenderPeriod'
                    ELSE ' HAVING SUM(Cost1)<>0 OR SUM(Cost2)<>0 ORDER BY '+@GroupBy1Clause2
                    END
      --Return the Projection names
      SET @Name1=(SELECT Projection_Name FROM PROJECTION_HEADER WHERE Projection_Header_ID=CAST(@HeaderID AS int))
      SET @Counter=LEN(@Projection_Header_Id)-LEN(@HeaderID)-1
      SET @HeaderID=RIGHT(@Projection_Header_Id,@Counter)
      SET @Name2=(SELECT Projection_Name FROM PROJECTION_HEADER WHERE Projection_Header_ID=CAST(@HeaderID AS int))
END

-- print @SQL
--return
--KN 2220 : Error in Actual vs Archive Analysis report
IF(@ISCrossTab='true')
	BEGIN
			CREATE TABLE [#temp](
				[Col1] [varchar](max) COLLATE DATABASE_DEFAULT NULL,
				[CalendarPeriod] [varchar](max) COLLATE DATABASE_DEFAULT NULL,
				[CalPeriodDescr] [varchar](max) COLLATE DATABASE_DEFAULT NULL,
				[TotalCost] [float],
				[Col2] [varchar](max) COLLATE DATABASE_DEFAULT NULL,
				[Col3] [varchar](max) COLLATE DATABASE_DEFAULT NULL,
				[Col4] [varchar](max) COLLATE DATABASE_DEFAULT NULL,
				[Col5] [varchar](max) COLLATE DATABASE_DEFAULT NULL
			) ON [PRIMARY]
			 
			INSERT INTO #temp( Col1 , Col2,Col3,Col4 ,Col5 ,CalendarPeriod , CalPeriodDescr , TotalCost) 
			EXEC(@SQL)
				
			DECLARE @ListCol VARCHAR(MAX)
			DECLARE @Query VARCHAR(MAX)

			SELECT  @ListCol = STUFF(( SELECT DISTINCT  '],[' + CalendarPeriod  FROM   #temp
									ORDER BY '],[' + CalendarPeriod ASC
									FOR XML PATH('') ), 1, 2, '') + ']'

			SET @Query ='SELECT * FROM ( SELECT '+@SelectQueryForCrossTab +' CalendarPeriod,TotalCost from #temp) tmp PIVOT (SUM(TotalCost) for CalendarPeriod in('+@ListCol+')) AS pvt
						 ORDER BY ' + SUBSTRING(@OrderByCrossTab,1,LEN(@OrderByCrossTab)-1)
			print @Query
			EXECUTE (@Query)
	END
ELSE
	EXEC(@SQL)

GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[STD_JOB_LINK_P]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE [dbo].[STD_JOB_LINK_P]
GO

create Procedure [dbo].[STD_JOB_LINK_P]
/******************************************************************************
	File: STD_JOB_LINK_P.sql
	Name: STD_JOB_LINK_P

	Called By: 

	Desc: Links the std jobs to proj tasks
             

	Auth: Veronika Vasylyeva
	Date: 27 Aug 2008
*******************************************************************************
		Change History
*******************************************************************************
	Date:		Author:		Description:
	--------	--------	----------------------------------------
    18-Feb-2009	V Vasylyeva	CR7891 Added SET ANSI_WARNINGS ON
    27 Aug 2009	K Nagarajan	Modified to support all Projections
    27 Jul 2011	V Vasylyeva	#2040 Speeded up
     4 Aug 2011	V Vasylyeva	#2040 added collation
*******************************************************************************/
	/* Param List */

@StdJobRef XML=NULL ,
@IncludeAllProjections BIT = 0

AS

DECLARE @Filter_Std_Job_Model bit

DECLARE @TypeArc int
DECLARE @TypeCur int
DECLARE @TypeAlt int
DECLARE @TypeCen int
/*VV #2040*/
DECLARE @hDoc int

SET @TypeCur =1
SET @TypeAlt =3
SET @TypeArc =4
SET @TypeCen =5

SET ANSI_WARNINGS ON

SELECT @Filter_Std_Job_Model = Filter_Std_Job_Model FROM AMT_VARIABLE

/*VV #2040*/
CREATE TABLE #z_StdJobReference(List_Item varchar(500) COLLATE DATABASE_DEFAULT)

IF(@StdJobRef IS NOT NULL)
BEGIN
	EXEC sp_xml_preparedocument @hDoc OUTPUT, @StdJobRef
	
	INSERT INTO #z_StdJobReference(List_Item)
	SELECT List_Item
	FROM  OPENXML (@hDoc,N'/Rows/Row',2) WITH #z_StdJobReference  
	
	EXEC sp_xml_removedocument @hDoc 
END


IF NOT EXISTS (
SELECT PTA.StdJobReference FROM
tblEqpProjs EPR
	INNER JOIN
tblProjTasks PT
	ON EPR.EqpProjId=PT.EqpProjId
	INNER JOIN
tblprojTaskOpts PTO
	ON PT.ProjTaskId=PTO.ProjTaskId
	INNER JOIN
tblProjTaskAmts PTA
	ON PTO.ProjTaskOptId=PTA.ProjTaskOptId	
	INNER JOIN
tblStdJobs SJ
	ON PTA.StdJobReference=SJ.Std_Job_Ref AND PTA.CurrencyId=SJ.Currency_Id
WHERE EPR.Projection_Type_Id<>@TypeArc AND
PTA.PricedJobId IS NULL AND SJ.Live_Job=1 AND
(@StdJobRef IS NULL OR SJ.Std_Job_Ref IN(
 /*VV #2040 select i.item.value('List_Item[1]','varchar(500)')
   from @StdJobRef.nodes('/Rows/Row')AS i(item)*/
   select List_Item from #z_StdJobReference)))
BEGIN
	
	RETURN
END

CREATE TABLE #z_StdJobsLink(ProjTaskAmtId int,StdJobId int,BranchId int,Price_Group_Id int,
Currency_Id int,Projection_Type_Id int,
EqpProjId int PRIMARY KEY(ProjTaskAmtId))

INSERT INTO #z_StdJobsLink(ProjTaskAmtId,StdJobId,BranchId,Price_Group_Id,Currency_Id,Projection_Type_Id,
EqpProjId)

SELECT PTA.ProjTaskAmtId,SJ.StdJobId,S.BranchId,F.Price_Group_Id,PTA.CurrencyId AS Currency_Id,
EPR.Projection_Type_Id,EPR.EqpProjId
FROM
tblSites S
	INNER JOIN
tblFleets F
	ON S.SiteId=F.SiteId
	INNER JOIN
tblEqpPlans EP
	ON F.FleetId=EP.FleetId
	INNER JOIN
tblEquipment E
	ON EP.EquipmentId=E.EquipmentId
	INNER JOIN
tblEqpProjs EPR
	ON EP.EqpPlanId=EPR.EqpPlanId
	INNER JOIN
tblProjTasks PT
	ON EPR.EqpProjId=PT.EqpProjId
	INNER JOIN
tblProjTaskOpts PTO
	ON PT.ProjTaskId=PTO.ProjTaskId
	INNER JOIN
tblProjTaskAmts PTA
	ON PTO.ProjTaskOptId=PTA.ProjTaskOptId	
	INNER JOIN
tblStdJobs SJ
	ON PTA.StdJobReference=SJ.Std_Job_Ref AND PTA.CurrencyId=SJ.Currency_Id
WHERE EPR.Projection_Type_Id<>@TypeArc AND
PTA.PricedJobId IS NULL AND SJ.Live_Job=1 AND
(@Filter_Std_Job_Model=0 OR E.ModelId = SJ.ModelId) AND
(@StdJobRef IS NULL OR SJ.Std_Job_Ref IN(
/* VV #2040
 select i.item.value('List_Item[1]','varchar(500)')
   from @StdJobRef.nodes('/Rows/Row')AS i(item)*/
   select List_Item from #z_StdJobReference))

DECLARE @EqpProjId varchar(max)

SET @EqpProjId=''

SET @EqpProjId=(SELECT CAST(EqpProjId AS varchar(50))+',' FROM #z_StdJobsLink 
WHERE (Projection_Type_Id IN(@TypeCur,@TypeAlt,@TypeCen) OR @IncludeAllProjections = 1) GROUP BY EqpProjId FOR XML PATH(''))

IF ISNULL(@EqpProjId,'')<>'' 
BEGIN
	--Take out the coma
	SET @EqpProjId=LEFT(@EqpProjId,LEN(@EqpProjId)-1)
END

SET XACT_ABORT ON
BEGIN TRANSACTION

UPDATE PTA
SET PTA.PricedJobId=PJ.PricedJobId,PTA.StdJobReference=NULL
FROM
tblProjTaskAmts PTA
	INNER JOIN
#z_StdJobsLink SJL
	ON PTA.ProjTaskAmtId=SJL.ProjTaskAmtId
	INNER JOIN
tblPricedJobs PJ
	ON SJL.StdJobId=PJ.StdJobId
	AND SJL.BranchId=PJ.BranchId
	AND SJL.Price_Group_Id=PJ.Price_Group_Id
	AND SJL.Currency_Id=PJ.Currency_Id

IF ISNULL(@EqpProjId,'')<>'' 
BEGIN
	EXEC PRICED_JOB_PROJ_TASK_AMTS_UPDATE_P @EqpProjId=@EqpProjId
END

COMMIT TRANSACTION


GO


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[TASK_AUTO_CREATE_WO_P]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[TASK_AUTO_CREATE_WO_P]

GO

create  Procedure [dbo].[TASK_AUTO_CREATE_WO_P]
/******************************************************************************
	File: TASK_AUTO_CREATE_WO_P.sql
	Name: TASK_AUTO_CREATE_WO_P

	Called By: 

	Desc: Auto create workorder for simple mode EQS Tasks
	      
	Auth: Alex Lassauniere
	Date: 31/05/07
*******************************************************************************
		Change History
*******************************************************************************
	Date:		Author:		Description:
	--------	--------	----------------------------------------
	02 Aug 11	KN			#2166: Fix tblWorkorders.AmtUsageAmount Calculation to use ProjTask QUOMID
	 3 Feb 10	VV			#1000: Duplicate wo costs
	 5 Aug 10	VV			#164: Do not delete all workorders.
	21 May 10	DS			CR8951:Insert Cost Centre CODE only into tblWorkorderSettlements
	10 May 10	KN			Support Numberic Workorder Number in the AUTO Create mode.
	31 Jul 09	AL			CR8337: removed unnecessary sections for the last occ calc and merging (triggers handle that)
							CR8342: delete all settlements first
	12 Jun 09	AL			Removed tblAdministration							
	15 May 09	AL			CR8071: do not update wip flag (amtstatus) in here
	06 May 09	AL			CR8058: always save last mod date in workorders
	05 May 09	AL			CR8062: catter for finPeriod = null
	08 Apr 09	AL			CR7932: fixed fin period
	04 Apr 09	AL			CR7932: only calculate cost values if they are not present (and ManualEntryActuals* = 1)
									include FinPeriod
	03 Apr 09	AL			CR7933: use ActualTotalSell instead of calculating it (for labour and parts)
	28 Mar 09	KN			Support Bulk update in usp_Update_ProjTask_Last_Occ AND Commented out unwanted codes/check 
	27 Mar 09	AL			CR7932: renamed #TASK to #_TASK because of usp_Update_ProjTask_Last_Occ
	26 Mar 09	AL			CR7932: revamped to allow for bulk updates
	19 Mar 09	AL			CR7932: spec changes
	 5 Nov 08	VV			CR7632 Added update of AMTStatusId, AMTJobStatus_ID
	 6 Feb 08	VV			Do not calculate usage. It is calculated from the
							date in usp_Update_AMTWorkOrder,usp_Add_WorkOrder.
	24/08/07	VV			Change WO_Create_Date to Work_Order_Date
	23/08/07	VV			Added Reviewed flag
	21/08/07	VV			Added @CheckEQSLink to usp_Update_AMTWorkOrder,
							component code and task type are required fields
    06/06/07	AL			Change in business rules
	11/06/07	AL			Change in WO Number
	12/06/07	AL			Do not recreate WO number if it already exists
	04/07/07	AL			Changed join to get primary info when task has no operation + 
							always delete WO if no actuals + removed unnecessary messages
	16/07/07	AL			CR6419: Change Date gathering when task linked to event
	20-May-2009	KN		Fixed declaring explicit Constraint Names
*******************************************************************************/
	/* Param List */

    @TaskID varchar(MAX),
	@Message varchar(MAX)='' OUTPUT
     
AS

/*
	AL: 26/03/09

	Change in error checking. Here are the rules that used to apply within that stored procedure:
		1-The task is not in Auto Create WO mode
		2-Cannot Abandon Task if there are Actual costs, labour hours or parts
		3-No serial number was found
		4-Component Code is required for work order to be linked to a task
		5-Task Type is required for work order to be linked to a task
		6-The work order number already exists
		7-At least one settlement record does not have any cost bearer. Please set a cost bearer for all settlements

	Notes:
		1: is now handled here for the bulk: any non ACW Task is removed from the process
		2, 4 and 5: should be handled by the caller (if bound to happen)
		3, 6 and 7: should never happen

*/


--## 0: constants
--## Constants
--statuses
DECLARE @TaskModeAUTOCREATEWO int
DECLARE @WOStatusCreated int
DECLARE @TaskStatusOUTSTANDING int,@TaskStatusINPROGRESS int,@TaskStatusCOMPLETED int,@TaskStatusABANDONED int,@TaskStatusYETTOSTART int
DECLARE @JobStatusINPROGRESS int,@JobStatusCOMPLETED int,@JobStatusYETTOSTART int
DECLARE @AMTWOStatusOPEN int,@AMTWOStatusCLOSED int
DECLARE @WOUniqueIdentifier varchar(3),@PrimaryCurrencyId int

SET @TaskModeAUTOCREATEWO=2
SET @WOStatusCreated=2

SET @TaskStatusOUTSTANDING=1
SET @TaskStatusINPROGRESS=2
SET @TaskStatusCOMPLETED=3
SET @TaskStatusABANDONED=5
SET @TaskStatusYETTOSTART=6

SET @JobStatusINPROGRESS=1
SET @JobStatusCOMPLETED=2
SET @JobStatusYETTOSTART=3

SET @AMTWOStatusOPEN=1
SET @AMTWOStatusCLOSED=2

DECLARE @ACWNumericWONumber BIT


SELECT TOP 1 @WOUniqueIdentifier=WOUniqueIdentifier, @ACWNumericWONumber = ACWNumericWONumber FROM AMT_VARIABLE
SELECT @PrimaryCurrencyId = CurrencyId FROM tblCurrencies WHERE ISNULL(PrimaryCurr, 0) <> 0

SET @ACWNumericWONumber = ISNULL(@ACWNumericWONumber,0)

--AL: 04/04/09 + 12/06/09
DECLARE @ManualEntryActualsParts int,@ManualEntryActualsLabour int, @ManualEntryActualsMisc int
DECLARE @LabMargin FLOAT,@MiscMargin FLOAT,@PartsMargin FLOAT

SELECT 
	@ManualEntryActualsParts = CASE WHEN Value_Name = 'ManualEntryActualsParts' THEN Varchar_Value  ELSE  @ManualEntryActualsParts END ,
	@ManualEntryActualsLabour = CASE WHEN Value_Name = 'ManualEntryActualsLabour' THEN Varchar_Value  ELSE   @ManualEntryActualsLabour END ,
	@ManualEntryActualsMisc = CASE WHEN Value_Name = 'ManualEntryActualsMisc' THEN Varchar_Value  ELSE   @ManualEntryActualsMisc END, 
	@LabMargin = ISNULL(CASE WHEN Value_Name = 'LabourDefaultMargin' THEN Varchar_Value  ELSE   @LabMargin END,0), 
	@MiscMargin = ISNULL(CASE WHEN Value_Name = 'MiscDefaultMargin' THEN Varchar_Value  ELSE   @MiscMargin END,0), 
	@PartsMargin = ISNULL(CASE WHEN Value_Name = 'PartDefaultMargin' THEN Varchar_Value  ELSE   @PartsMargin END,0)
FROM 
	AMT_TYPED_VARIABLE
WHERE Value_Name IN (
'ManualEntryActualsParts' ,
'ManualEntryActualsLabour',
'ManualEntryActualsMisc',
'LabourDefaultMargin',
'MiscDefaultMargin',
'PartDefaultMargin'
)


DECLARE @Threshold float
SET @Threshold=0.00001


--## 1: get info on tasks
CREATE TABLE #_TASK(TaskID INT NOT NULL PRIMARY KEY CLUSTERED,
        WorkOrderID INT,
		WorkorderNumber VARCHAR(200) COLLATE database_default,
		PureWONumber VARCHAR(200) COLLATE database_default,

		EqpPlanID INT,
		SerialNumber VARCHAR(200) COLLATE database_default,
		BranchID INT,
		CustomerId INT,
		EqpProjId INT,
		QUOMID INT,

		TaskHeaderId INT,
		TaskStatusID INT,
		ComponentCodeID INT,
        ModifierID INT,
		TaskTypeID INT,
		ApplicationCodeID INT,
		RepairCodeID INT,
		OccurrenceTypeId INT,
		WorkOrderStatusId INT,
		WOJobStatusID INT,

		AMTStartDate DATETIME,
		UsageAmount FLOAT,

		PlannedDuration FLOAT,
		ActualDuration FLOAT,

		--Settlements
		LabMargin FLOAT,
		MiscMargin FLOAT,
		PartsMargin FLOAT
		)

INSERT INTO #_TASK(TaskID,TaskHeaderId,WorkOrderID,TaskStatusID,PureWONumber,EqpPlanID,SerialNumber,
		BranchID,CustomerId,EqpProjId,QUOMID,ComponentCodeID,ModifierID,TaskTypeID,
		ApplicationCodeID,RepairCodeID,OccurrenceTypeId,AMTStartDate,
		PlannedDuration,ActualDuration,
		WorkOrderStatusId,WOJobStatusID,UsageAmount,
		LabMargin,MiscMargin,PartsMargin)

SELECT	A.Task_ID,A.Task_header_ID,A.Work_Order_ID,A.Task_Status_ID,A.PureWONumber,A.Eqp_Plan_ID,A.SerialNumber,
		A.BranchID,A.Customer_Id,A.EqpProjId,QUOMID,A.ComponentCodeID,A.ModifierID,A.TaskTypeID,
		A.ApplicationCodeID,A.Repair_Code_Id,A.Occurrence_Type_Id,A.AMTStartDate,
		A.Expected_Duration,A.Actual_Duration,
		case when A.Task_Status_ID=@TaskStatusCOMPLETED then @AMTWOStatusCLOSED else @AMTWOStatusOPEN end AS WorkOrderStatusId,
		--AL: 31/07/09
		--case when A.Task_Status_ID=@TaskStatusCOMPLETED then @JobStatusCOMPLETED else @JobStatusINPROGRESS end AS WOJobStatusID,
		dbo.WORKORDER_JOB_STATUS_F(A.Task_Status_ID) AS WOJobStatusID,
		dbo.GET_USAGE_FROM_DATE_CHECK_TERM_F(A.EqpProjID,A.QUOMId ,A.AMTStartDate,1,NULL,0,NULL,NULL) AS UsageAmount,
		ISNULL(tblFleets.LabMargin,@LabMargin) AS LabMargin, 
		ISNULL(tblFleets.MiscMargin,@MiscMargin) AS MiscMargin,  
		ISNULL(tblFleetSystemMargins.SystemMargin,@PartsMargin) AS PartsMargin

FROM
	(SELECT	T.Task_ID,T.Task_header_ID,T.Work_Order_ID,T.Task_Status_ID,
	/*VV #164*/	ISNULL(WO.PureWONumber,
		
			CASE
			WHEN @ACWNumericWONumber = 1 THEN 
				convert(varchar,T.Task_ID)
			ELSE 
				case when T.Site_ID IS NULL
					then	ISNULL(S2.Site_Code,'') + ISNULL(@WOUniqueIdentifier,'') + convert(varchar,T.Task_ID) + ISNULL(B2.WO_Suffix,'')	--Site taken from equipment
					else	ISNULL(S1.Site_Code,'') + ISNULL(@WOUniqueIdentifier,'') + convert(varchar,T.Task_ID) + ISNULL(B1.WO_Suffix,'')
				end 
			END) AS PureWONumber,
			T.Eqp_Plan_ID, 
			EH.SerialNumber,
			case when T.Site_ID IS NULL
				then	B2.BranchID	--Branch taken from equipment
				else	B1.BranchID	--Branch taken from site
			end AS BranchID,
			T.Customer_Id,
			EH.EqpProjId,
			PT.UsageQUOMId AS QuomId,
			case when PT.ProjTaskId is null then T.Component_Code_ID else PT.ComponentCodeId end AS ComponentCodeId, 
			case when PT.ProjTaskId is null then T.Modifier_ID else PT.ModifierId end AS ModifierId, 
			case when PT.ProjTaskId is null then T.Task_Type_ID else PT.TaskTypeId end AS TaskTypeId, 
			case when PT.ProjTaskId is null then T.Application_Code_ID else PT.ApplicationCodeId end AS ApplicationCodeId, 
			T.Repair_Code_Id,
			T.Occurrence_Type_Id,

			--AL: 08/04/09
			CONVERT(datetime,dbo.TASK_JOBDATE_F(T.Task_id,0,0),120) AS AMTStartDate,

			T.Expected_Duration, 
			T.Actual_Duration


FROM         dbo.TASK AS T INNER JOIN
                      dbo.EQUIPMENT_HIERARCHY_V AS EH ON T.Eqp_Plan_ID = EH.EqpPlanId INNER JOIN
                      dbo.tblSites AS S1 INNER JOIN
                      dbo.tblBranches AS B1 ON S1.BranchId = B1.BranchId ON EH.SiteId = S1.SiteId LEFT OUTER JOIN
                      dbo.tblWorkOrders AS WO ON T.Work_Order_ID = WO.WorkOrderId LEFT OUTER JOIN
                      dbo.tblBranches AS B2 INNER JOIN
                      dbo.tblSites AS S2 ON B2.BranchId = S2.BranchId ON T.Site_Id = S2.SiteId LEFT OUTER JOIN
                      dbo.TASK_OPERATION AS TOO ON T.Task_ID = TOO.Task_Id LEFT OUTER JOIN
                      dbo.tblProjTaskOpts AS PTO LEFT OUTER JOIN
                      dbo.tblProjTasks AS PT ON PTO.ProjTaskId = PT.ProjTaskId ON T.Strategy_Proj_Task_Opt_ID = PTO.ProjTaskOptId
                      
	WHERE  
			(T.Task_ID IN (SELECT list_item FROM dbo.LIST_TO_TABLE_F(@TaskID))) 
			AND (EH.Projection_Type_ID=1)
			AND (T.Task_Mode_ID=@TaskModeAUTOCREATEWO)
	GROUP BY 
			T.Task_ID,T.Task_header_ID,T.Work_Order_ID, T.Task_Status_ID, T.Task_Mode_ID, T.Component_Code_ID, T.Modifier_ID,T.Occurrence_Type_Id,T.Site_ID,
			T.Task_Type_ID, T.Application_Code_ID, T.Expected_Duration, T.Expected_Labor_Hours, T.Actual_Duration,T.Create_Date,
			B1.WO_Suffix,B2.WO_Suffix,S1.Site_Code,S2.Site_Code,T.Actual_Down_Time,T.Eqp_Plan_ID, EH.SerialNumber,B1.BranchId,B2.BranchId,T.Customer_Id,EH.EqpProjId,PT.UsageQUOMId ,
			PT.ProjTaskId,PT.ComponentCodeId, PT.ModifierId,PT.TaskTypeId,PT.ApplicationCodeId,T.Work_Order_Date,T.Repair_Code_Id,T.Work_Order,T.Event_ID,
			/*VV #164*/WO.PureWONumber
	)A INNER JOIN
	tblEqpPlans ON A.Eqp_Plan_Id = tblEqpPlans.EqpPlanId INNER JOIN
	tblFleets ON tblEqpPlans.FleetId = tblFleets.FleetId INNER JOIN
	tblFleetSystemMargins ON tblFleets.FleetId = tblFleetSystemMargins.FleetID INNER JOIN
	tblComponentCodes ON A.ComponentCodeId = tblComponentCodes.ComponentCodeID INNER JOIN
	tblSubSystems ON tblComponentCodes.SubSystemID = tblSubSystems.SubSystemID AND 
	tblFleetSystemMargins.SystemID = tblSubSystems.SystemID

UPDATE #_TASK
SET     
	LabMargin = CASE WHEN LabMargin>=100 OR LabMargin<0 THEN 1 ELSE 1-(LabMargin/100) END,
	MiscMargin = CASE WHEN MiscMargin>=100 OR MiscMargin<0 THEN 1 ELSE 1-(MiscMargin/100) END,
	PartsMargin = CASE WHEN PartsMargin>=100 OR PartsMargin<0 THEN 1 ELSE 1-(PartsMargin/100) END


--## 2: tests and errors (see Notes)
DECLARE @TaskCount INT, @Count int
SELECT @TaskCount=COUNT(*) FROM #_TASK

IF ISNULL(@TaskCount,0)=0
BEGIN
	DROP TABLE #_TASK
	RETURN
END

--delete the settlement if task status is abandoned.(GW issue 1494)
if(exists(SELECT * FROM #_TASK where TaskStatusID =@TaskStatusABANDONED))
begin

	DECLARE @WorkorderID int 

	DECLARE abandonedCursor CURSOR FOR	
	select WorkOrderId 
	from tblWorkorders 
	where WorkOrderId in 
						(
						  SELECT DISTINCT T.WorkorderID AS WOID
						  FROM 
						  #_TASK T
						  where T.TaskStatusID =@TaskStatusABANDONED
						 )
	   or AMTParentWorkOrderId in 
						(
						  SELECT DISTINCT T.WorkorderID AS WOID
						  FROM 
						  #_TASK T
						  where T.TaskStatusID =@TaskStatusABANDONED
						 )
	for read only

	OPEN abandonedCursor
	FETCH NEXT FROM abandonedCursor INTO @WorkorderID

	WHILE @@fetch_status = 0
	BEGIN
		EXEC dbo.usp_Del_WorkOrder @iWorkorderID=@WorkorderID
		FETCH NEXT FROM abandonedCursor INTO @WorkorderID
	END

	CLOSE abandonedCursor
	DEALLOCATE abandonedCursor

delete from #_TASK where TaskStatusID =@TaskStatusABANDONED

end

SELECT @TaskCount=COUNT(*) FROM #_TASK

IF ISNULL(@TaskCount,0)=0
BEGIN
	DROP TABLE #_TASK
	RETURN
END 

--## 3: tblWorkOrders #########################

--03/04/09: multiple segments depending on finperiod
CREATE TABLE #_WO(TaskID INT NOT NULL,
        WorkOrderID INT,
        NewWorkOrderID INT,
		WorkOrderNumber VARCHAR(200) COLLATE database_default,
		PureWONumber VARCHAR(200) COLLATE database_default,
		StartDate DATETIME,
		AMTStartDate DATETIME,
		FinPeriod INT,
		IsParent BIT,

        PlannedLabourHours FLOAT,
		ActualLabourHours FLOAT,
		PlannedDuration FLOAT,
		ActualDuration FLOAT,

		SellP float,
		SellL float,
		SellM float,
		CostP float, 
		CostL float, 
		CostM float, 
		TotalCost float, 
		MaxP float,
		MinP float,
		MaxL float,
		MinL float,
		MaxM float,
		MinM float,
		HasCostP bit,
		HasCostL bit,
		HasCostM bit,

		ThresholdPB bit,
		LessThanThreshold bit,

		CostP2 float,
		CostL2 float,
		CostM2 float,
		/*VV #1000*/
		ListId int IDENTITY(1,1)	
		)
CREATE NONCLUSTERED INDEX [IX_WO_TEMP1] ON [#_WO] (TaskID ASC,FinPeriod ASC)

--3.0: get all possible finperiods and replace missing ones with the job's date one
INSERT INTO #_WO(TaskID,PureWONumber,WorkOrderNumber,StartDate,AMTStartDate,FinPeriod,
				SellP,SellL,SellM,ActualLabourHours,PlannedLabourHours,/*VV #1000*/IsParent)
SELECT	A.TaskID,A.PureWONumber,A.WorkOrderNumber,A.StartDate,A.AMTStartDate,A.FinPeriod,
		A.SellP,A.SellL,A.SellM,A.ActualLabourHours,A.PlannedLabourHours,0 AS IsParent
FROM
	(SELECT	T.TaskID,T.PureWONumber,
			T.PureWONumber+'-'+RIGHT(CONVERT(VARCHAR,ACT.FinPeriod),4) AS WorkOrderNumber,
			ACT.StartDate AS StartDate,
			T.AMTStartDate AS AMTStartDate,
			ACT.FinPeriod,
			ACT.SellP,ACT.SellL,ACT.SellM,ACT.ActualLabourHours,ACT.PlannedLabourHours
	FROM	
		#_TASK T LEFT OUTER JOIN

		(SELECT TaskID, FinPeriod,
				CONVERT(DATETIME,CONVERT(VARCHAR,FP.CalenderPeriod)+'01',112) AS StartDate,
				SellP,SellL,SellM,
				ActualLabourHours,PlannedLabourHours
		FROM
			(SELECT TaskID, FinPeriod,
					ISNULL(SUM(SellP),0) AS SellP, ISNULL(SUM(SellL),0) AS SellL, ISNULL(SUM(SellM),0) AS SellM,
					ISNULL(SUM(ActualLabourHours),0) AS ActualLabourHours,ISNULL(SUM(PlannedLabourHours),0) AS PlannedLabourHours
			FROM
				(SELECT	T.TaskID, 
						ISNULL([TOP].FinPeriod,dbo.TASK_JOBDATE_F(T.TaskID,NULL,2)) AS FinPeriod,	--AL: 05/05/09
						ISNULL(SUM([TOP].ActualTotalSell),0) AS SellP,
						0 AS SellL,
						0 AS SellM,
						0 AS ActualLabourHours,
						0 AS PlannedLabourHours
				FROM         
						#_TASK T INNER JOIN
						TASK_OPERATION [TO] ON T.TaskID = [TO].Task_Id INNER JOIN
						TASK_OPERATION_PART [TOP] ON [TO].Task_Operation_Id = [TOP].Task_Operation_Id
				GROUP BY T.TaskID, ISNULL([TOP].FinPeriod,dbo.TASK_JOBDATE_F(T.TaskID,NULL,2))
				UNION ALL
				SELECT	T.TaskID, 
						ISNULL(TOL.FinPeriod,dbo.TASK_JOBDATE_F(T.TaskID,NULL,2)) AS FinPeriod,	--AL: 05/05/09
						0 AS SellP,
						ISNULL(SUM(TOL.ActualTotalSell),0) AS SellL,
						0 AS SellM,
						ISNULL(SUM(TOL.Actual_Labour_Hrs), 0) AS ActualLabourHours,
						ISNULL(SUM(TOL.Planned_Labour_Hrs), 0) AS PlannedLabourHours
				FROM         
						#_TASK T INNER JOIN
						TASK_OPERATION [TO] ON T.TaskID = [TO].Task_Id INNER JOIN
						TASK_OPERATION_LABOUR TOL ON [TO].Task_Operation_Id = TOL.Task_Operation_Id 
				GROUP BY T.TaskID, ISNULL(TOL.FinPeriod,dbo.TASK_JOBDATE_F(T.TaskID,NULL,2))
				UNION ALL
				SELECT	T.TaskID,
						ISNULL(TOM.FinPeriod,dbo.TASK_JOBDATE_F(T.TaskID,NULL,2)) AS FinPeriod,	--AL: 05/05/09
						0 AS SellP,
						0 AS SellL,
						ISNULL(SUM(TOM.Actual_Sell),0) AS SellM,
						0 AS ActualLabourHours,
						0 AS PlannedLabourHours
				FROM         
						#_TASK T INNER JOIN
						TASK_OPERATION [TO] ON T.TaskID = [TO].Task_Id  INNER JOIN
						TASK_OPERATION_MISC TOM ON [TO].Task_Operation_Id = TOM.Task_Operation_Id
				GROUP BY T.TaskID,ISNULL(TOM.FinPeriod,dbo.TASK_JOBDATE_F(T.TaskID,NULL,2)))A
			GROUP BY TaskID, FinPeriod)AC INNER JOIN
		
			tblFinancialPeriods FP ON FP.FinancialPeriod=AC.FinPeriod

		) ACT ON T.TaskID = ACT.TaskID
	)A
	
/*VV Debug	
drop table z_TASK1,z_WO1
select * into z_TASK1 from #_TASK
select * into z_WO1 from #_WO*/

	
--DELETE WOs that shouldnt be there
DECLARE @WOID int,/*VV #164*/@ParentWOId int,@DeleteWO bit


DECLARE theCursor CURSOR FOR	
SELECT /*VV #164*/DISTINCT W.WorkorderID AS WOID,/*VV #164*/T.WorkOrderID AS ParentWOId
FROM 
/*VV #164*/
#_TASK T
	INNER JOIN
#_WO WO 
	ON T.TaskID=WO.TaskID
	INNER JOIN
tblWorkorders W 
	ON WO.PureWONumber=W.PureWONumber
	
		
OPEN theCursor
FETCH NEXT FROM theCursor INTO @WOID,@ParentWOId

WHILE @@fetch_status = 0
BEGIN
	/*VV #164*/
	SET @DeleteWO=1
	
	IF @ParentWOId=@WOID SET @DeleteWO=0
	
	--select @WOID AS WOID,@ParentWOId AS ParentWOId,@DeleteWO AS DeleteWO

	IF @DeleteWO=1
	BEGIN
		EXEC dbo.usp_Del_WorkOrder @iWorkorderID=@WOID
	END
	ELSE
	BEGIN
		--Delete parent wo settlements and operations
		DELETE FROM tblWorkOrderInvoices WITH(UPDLOCK, ROWLOCK) WHERE WorkOrderId = @WOID	
		DELETE FROM tblWorkOrderOperations WITH(UPDLOCK,ROWLOCK) WHERE WorkOrderId = @WOID
		DELETE FROM tblWorkOrderSettlements WITH (UPDLOCK, ROWLOCK) WHERE WorkOrderId = @WOID	
	END

	FETCH NEXT FROM theCursor INTO @WOID,@ParentWOId
END



CLOSE theCursor
DEALLOCATE theCursor



--3.1: set the ones that will be the Parents and set to the task
/*VV #1000 changed queries

UPDATE #_WO
SET IsParent=1,WorkOrderID=WM.WorkOrderID
FROM 
#_WO WO 
	INNER JOIN
(SELECT TaskID,Max(StartDate) AS StartDate,/*VV #164*/WorkOrderID 
FROM #_WO GROUP BY TaskID,/*VV #164*/WorkOrderID) WM 
	ON WO.TaskID=WM.TaskID 
	AND WO.StartDate=WM.StartDate

UPDATE WO SET WorkOrderId=W.WorkOrderId
FROM 
tblWorkOrders W
	INNER JOIN
#_TASK T
	ON W.WorkOrderId=T.WorkOrderId
	INNER JOIN
#_WO WO 
	ON WO.TaskID=T.TaskId
	AND WO.WorkOrderNumber=T.WorkOrderNumber/*VV #1000*/
WHERE WO.IsParent=1
*/

/*Get the existing WOId*/
UPDATE WO SET WorkOrderId=W.WorkOrderId
FROM 
tblWorkOrders W
	INNER JOIN
#_WO WO 
	ON WO.WorkOrderNumber=W.WorkOrderNumber

SELECT WO.TaskID,Min(WO.ListId) AS ListId
INTO #z_Parents
FROM 
#_WO WO 
	INNER JOIN
(SELECT TaskID,Max(StartDate) AS StartDate
FROM #_WO GROUP BY TaskID) WM
	ON WO.TaskID=WM.TaskID 
	AND WO.StartDate=WM.StartDate	
GROUP BY WO.TaskID

UPDATE W SET IsParent=1 
FROM 
#_WO W
	INNER JOIN
#z_Parents P
	ON W.ListId=P.ListId

DROP TABLE #z_Parents
	
/*Swap the parent details*/
IF EXISTS(SELECT ListId FROM #_WO WHERE WorkOrderId>0 AND IsParent=0)
BEGIN
	SELECT ListId,TaskID,PureWONumber,WorkOrderNumber,StartDate,AMTStartDate,FinPeriod,
	SellP,SellL,SellM,ActualLabourHours,PlannedLabourHours,WorkOrderId
	INTO #z_OldParent
	FROM #_WO WHERE WorkOrderId>0 AND IsParent=0
	
	SELECT ListId,TaskID,PureWONumber,WorkOrderNumber,StartDate,AMTStartDate,FinPeriod,
	SellP,SellL,SellM,ActualLabourHours,PlannedLabourHours,IsParent
	INTO #z_NewParent
	FROM #_WO WHERE WorkOrderId IS NULL AND IsParent=1
	
	/*Rename the old parents and update them with the new parent details*/
	UPDATE W SET WorkOrderNumber=A.WorkOrderNumber,StartDate=A.StartDate,
	AMTStartDate=A.AMTStartDate,FinPeriod=A.FinPeriod,
	SellP=A.SellP,SellL=A.SellL,SellM=A.SellM,ActualLabourHours=A.ActualLabourHours,
	PlannedLabourHours=A.PlannedLabourHours,IsParent=1
	FROM
	#_WO W
		INNER JOIN
	(SELECT O.ListId,N.WorkOrderNumber,N.StartDate,N.AMTStartDate,N.FinPeriod,
	N.SellP,N.SellL,N.SellM,N.ActualLabourHours,N.PlannedLabourHours 
	FROM
	#z_OldParent O
		INNER JOIN
	#z_NewParent N
		ON O.TaskId=N.TaskId
		AND O.PureWONumber=N.PureWONumber
	) A
		ON W.ListId=A.ListId
	
	/*Rename the new parents, update them with the old parent details and set them to be children*/
	UPDATE W SET WorkOrderNumber=A.WorkOrderNumber,StartDate=A.StartDate,
	AMTStartDate=A.AMTStartDate,FinPeriod=A.FinPeriod,
	SellP=A.SellP,SellL=A.SellL,SellM=A.SellM,ActualLabourHours=A.ActualLabourHours,
	PlannedLabourHours=A.PlannedLabourHours,IsParent=0
	FROM
	#_WO W
		INNER JOIN
	(SELECT N.ListId,O.WorkOrderNumber,O.StartDate,O.AMTStartDate,O.FinPeriod,
	O.SellP,O.SellL,O.SellM,O.ActualLabourHours,O.PlannedLabourHours 
	FROM
	#z_OldParent O
		INNER JOIN
	#z_NewParent N
		ON O.TaskId=N.TaskId
		AND O.PureWONumber=N.PureWONumber
	) A
		ON W.ListId=A.ListId
	
	DROP TABLE #z_OldParent,#z_NewParent
END

	
--3.3: set Duration to parent segment
UPDATE W
SET PlannedDuration=T.PlannedDuration,
	ActualDuration=T.ActualDuration
FROM 
	#_WO W INNER JOIN
	#_TASK T ON W.TaskID=T.TaskID AND W.IsParent=1
	

/*VV #100 Changed order of add and update*/

IF EXISTS(SELECT ListId FROM #_WO WHERE WorkOrderID >0)
BEGIN
	
	
	UPDATE WO
	SET 
		WorkOrderNumber=W.WorkOrderNumber,
		
		StartDate=W.StartDate,
		AMTStartDate=W.AMTStartDate,
		EqpPlanId=T.EqpPlanId,
		SerialNumber=T.SerialNumber,		
		CustomerId=T.CustomerId,		
		BranchId=T.BranchId,
		CurrencyId=@PrimaryCurrencyId,		
		AMTComponentCodeId=T.ComponentCodeId,
		AMTModifierId=T.ModifierId,
		AMTJobCodeId=T.RepairCodeId,
		AMTTaskTypeId=T.TaskTypeId,
		AMTApplicationCodeId=T.ApplicationCodeId,
		AMTOccurrenceTypeId=T.OccurrenceTypeId,		
		AMTUsageAmountCalc = -1,
		AMTStartDateCalc = NULL,
		AMTUsageAmount=T.UsageAmount,
		Task_Header_Id = T.TaskHeaderId,
		AMTJobStatus_ID = ISNULL(T.WOJobStatusID, AMTJobStatus_ID),	
		Reviewed=1 ,		
		LastModDate=getdate(),
		LastModByUserId=0
	FROM 
	tblWorkorders WO 
		INNER JOIN
	#_WO W 
		ON WO.WorkorderID=W.WorkOrderID 
		INNER JOIN	
	#_TASK T 
		ON W.TaskID=T.TaskID

END


--## 3a: usp_Add_WorkOrder #########################

INSERT INTO tblWorkOrders 
	(WorkOrderNumber,
	StartDate,
	AMTStartDate,
	EqpPlanId,
	SerialNumber,
	ComponentSerialNumber,
	CustomerId,
	Plant,
	BranchId,
	CurrencyId,
	ExchangeRate,
	MaintenancePlanNumber,
	MaintenancePlanItemNumber,
	MaintPlanCallNumber,
	ComponentCodeId,
	ModifierId,
	TaskTypeId,
	ApplicationCodeId,
	OccurrenceTypeId,
	JobCodeId,
	Changeout,
	WorkActivityCode,
	PMActivityTypeId,
	ForcedChild,
	AMTParentWorkOrderId,
	AMTComponentCodeId,
	AMTModifierId,
	AMTTaskTypeId,
	AMTApplicationCodeId,
	AMTOccurrenceTypeId,
	AMTJobCodeId,
	AMTChangeout,
	PricedJobId,
	CurrentWorkOrder,
	CreatedInAMT,
	--AMTStatusId,		AL: 15/05/09
	UsageQUOMId,
	AMTUsageAmount,
	AMTStartDateCalc,
	AMTUsageAmountCalc,
	CreateByUserId,
	CreateDate,
	LastModByUserId,
	LastModDate,
	Task_Header_Id,
	JobStatus_ID,
	AMTJobStatus_ID)

SELECT
	W.WorkOrderNumber,
	W.StartDate, 
	W.AMTStartDate, 
	T.EqpPlanId,
	T.SerialNumber, 
	NULL,	--@ComponentSerialNumber
	T.CustomerId, 
	NULL,	-- @Plant, 
	T.BranchId, 
	@PrimaryCurrencyId,
	1,	-- @ExchangeRate, 
	NULL,	-- @MaintenancePlanNumber,
	NULL,	-- @MaintenancePlanItemNumber, 
	NULL,	-- @MaintPlanCallNumber,
	T.ComponentCodeId,
	T.ModifierId,
	T.TaskTypeId,
	T.ApplicationCodeId,
	T.OccurrenceTypeId,
	T.RepairCodeId,
	0,	-- @Changeout,
	NULL,	-- @WorkActivityCode,
	NULL,	-- @PMActivityTypeId, 
	1,	--ForcedChild
	0, --NOTE: set to work order Id when we know it @AMTParentWorkOrderId,
	T.ComponentCodeId, 
	T.ModifierId, 
	T.TaskTypeId,
	T.ApplicationCodeId, 
	T.OccurrenceTypeId,
	T.RepairCodeId, 
	0,	-- @AMTChangeout,
	NULL,	-- @PricedJobId,
	1, -- CurrentWorkOrder
	null,	--to prevent edition in WO Manager/Editor when =1 @CreatedInAMT,
	--T.WorkOrderStatusId,	AL: 15/05/09
	T.QUOMId,
	T.UsageAmount,
	NULL,	-- @AMTStartDateCalc,
	-1,		-- @AMTUsageAmountCalc
	0,	-- @UserId,
	getdate(),
	0,	-- @UserId,
	getdate(),
	T.TaskHeaderId,
	T.WOJobStatusID,
	T.WOJobStatusID
FROM
	#_TASK T INNER JOIN
	#_WO W ON T.TaskID=W.TaskID
WHERE
	W.WorkOrderID IS NULL
	

UPDATE WO SET NewWorkorderID=W.WorkorderID
FROM
#_WO WO 
	INNER JOIN
tblWorkorders W 
	ON WO.WorkorderNumber=W.WorkorderNumber
/* VV #1000 WHERE
	WO.WorkOrderID IS NULL*/
	
/*VV #1000 Changed query*/
UPDATE T
SET WorkOrderID=W.NewWorkOrderID,WorkorderNumber=W.WorkorderNumber
FROM
#_TASK T 
	INNER JOIN
#_WO W
	ON T.TaskID=W.TaskID AND W.IsParent=1


/*VV #1000 WO settlements are deleted in the code above
--## 4: tblWorkOrderSettlements #########################

DELETE WS
FROM 
	#_WO W INNER JOIN
	tblWorkOrderSettlements WS ON W.WorkOrderID=WS.WorkOrderID	--just existing ones

*/

--## 4: (DELETE tblWorkOrderSettlements +) TASK_WO_SETTLEMENT_ADD_P #########################

/* Notes:
	*Settlement Percentage Logic: same as in inteface (find C# code @ AmtDbsImportLib.WoRecHelper.CalcSettlementPcts):
		get totcost PLM by adding each sett
		set isCostNOT0 PLM to true for any sett PLM <>0

		for each sett 
			get PLM
			IF (any of PLM has isCostNOT0=true AND Abs(totcost<0.00001) THEN
				IF (abs(totcostP+L+M)<0.00001
					THEN 	
						For each PLM 
							IF (isCostNOT0=true) THEN
								add 0.0001 to the cost and sell value TO the first sett (ordered by CB).
								Also add .00001 to the totcost 
					ELSE
						CostPLM=CostP+L+M
						TotCostPLM=TotCostP+L+M


			for each PLM
				IF Abs(totcost)<0.00001 
					THEN
						IF first sett (ordered by CB)
							then 100%
							else 0%

					ELSE pct=cost/totcost*100
*/


/*
	Get all PLM settlements as separate P,L,M records (because of different Expense Elements) for all Task operations.
	Only get the records with some cost in their section to reduce the number of settlements
	Calculate the cost at cost from cost at sell
	Order by CB,EE,CC,EC
*/


CREATE TABLE #_tblWorkOrderSettlements
			(WorkOrderSetId int IDENTITY(1,1),
			 WorkOrderID int,
			 WBSElement varchar(100) COLLATE database_default,
			 CostCentre varchar(100) COLLATE database_default,
			 CostBearerId int,
			 SettlementRule varchar(100) COLLATE database_default,
			 ReceiverCategory varchar(100) COLLATE database_default,
			 CostP float,
			 CostL float,
			 CostM float,
			 CostCentreID int,
			 CostExpenseID int,
			 EqpCategoryId int,
			 WorkGroupId int,

			PRIMARY KEY CLUSTERED (WorkOrderSetId ASC) 
			) 


INSERT INTO #_tblWorkOrderSettlements 
			(WorkOrderID, WBSElement, CostCentre, CostBearerId, SettlementRule, ReceiverCategory, CostP, CostL, CostM, CostCentreID,
			CostExpenseID, EqpCategoryId, WorkGroupId)
SELECT	 WorkOrderID, WBSElement, CostCentre, CostBearerId, SettlementRule, ReceiverCategory, SUM(CostP), SUM(CostL), SUM(CostM), CostCentreID,
		CostExpenseID, EqpCategoryId, WorkGroupId
FROM
	(--P	
	SELECT	WorkOrderID,WBSElement,
			ISNULL(CEP.Cost_Centre_Code/* + ' - ' + CEP.Cost_Centre_Desc*/, '') as CostCentre,
			CostBearerId,SettlementRule,ReceiverCategory,CostP,CostL,CostM,
			AP.CostCentreId,CostExpenseID,EqpCategoryId,WorkGroupId  
	FROM
		(SELECT	ISNULL(W.WorkOrderID,W.NewWorkOrderID) as WorkOrderID,
				'' as WBSElement, 
				ISNULL(ISNULL(TOOP.CostBearerId,TOO.Cost_Bearer_Id),T.Cost_Bearer_ID) as CostBearerId,
				'' as SettlementRule,
				'' as ReceiverCategory,
				--AL: 03/04/09
--				ISNULL(TOOP.Actual_Qty * TOOP.Actual_Unit_Price,0)*TT.PartsMargin as CostP,
				--AL: 04/04/09
				CASE WHEN ISNULL(@ManualEntryActualsParts,1)=3 THEN ISNULL(TOOP.ActualTotalSell,0)*TT.PartsMargin ELSE TOOP.ActualTotalCost END as CostP,
				0 as CostL,
				0 as CostM,
				ISNULL(ISNULL(TOOP.CostCentreId,TOO.Cost_Centre_Id),T.Cost_Centre_Id) as CostCentreId, 
				ISNULL(ISNULL(TOOP.ExpenseElementId,TOO.Parts_Cost_Expense_Id),T.Parts_Cost_Expense_Id) as CostExpenseID, 
				EP.Eqp_Category_Id as EqpCategoryId, 
				ISNULL(ISNULL(TOOP.WorkGroupId,TOO.Work_Group_Id),T.Def_Work_Group_Id) as WorkGroupId
		FROM   	
				#_TASK TT INNER JOIN
				#_WO W ON TT.TaskID=W.TaskID INNER JOIN
				TASK T ON TT.TaskID=T.Task_ID INNER JOIN
				TASK_OPERATION TOO ON T.Task_ID = TOO.Task_Id INNER JOIN
				tblEqpPlans EP ON T.Eqp_Plan_ID = EP.EqpPlanId LEFT OUTER JOIN
				TASK_OPERATION_PART TOOP ON TOO.Task_Operation_Id = TOOP.Task_Operation_Id AND ISNULL(W.FinPeriod,0)=ISNULL(TOOP.FinPeriod,0)
		WHERE  
				--AL: 03/04/09
--				(ISNULL(TOOP.Actual_Qty * TOOP.Actual_Unit_Price,0)<>0 OR TOOP.Actual_Qty>0)
				(ISNULL(TOOP.ActualTotalSell,0)<>0 OR TOOP.Actual_Qty>0)
		)AP LEFT OUTER JOIN
		COST_CENTRE CEP ON AP.CostCentreId = CEP.Cost_Centre_ID

	UNION ALL

	--L
	SELECT	WorkOrderID,WBSElement,
			ISNULL(CEL.Cost_Centre_Code /*+ ' - ' + CEL.Cost_Centre_Desc*/, '') as CostCentre,
			CostBearerId,SettlementRule,ReceiverCategory,CostP,CostL,CostM,
			AL.CostCentreId,CostExpenseID,EqpCategoryId,WorkGroupId  
	FROM
		(SELECT	ISNULL(W.WorkOrderID,W.NewWorkOrderID) as WorkOrderID,
				'' as WBSElement, 
				ISNULL(ISNULL(TOOL.CostBearerId,TOO.Cost_Bearer_Id),T.Cost_Bearer_ID) as CostBearerId,
				'' as SettlementRule,
				'' as ReceiverCategory,
				0 as CostP,
				--AL: 03/04/09
--				ISNULL(TOOL.Actual_Labour_Hrs * TOOL.Actual_Labour_Rate,0)*TT.LabMargin as CostL,
				--AL: 04/04/09
				CASE WHEN ISNULL(@ManualEntryActualsLabour,1)=3 THEN ISNULL(TOOL.ActualTotalSell,0)*TT.LabMargin ELSE TOOL.ActualTotalCost END as CostL,
				0 as CostM,
				ISNULL(ISNULL(TOOL.CostCentreId,TOO.Cost_Centre_Id),T.Cost_Centre_Id) as CostCentreId, 
				ISNULL(ISNULL(TOOL.ExpenseElementId,TOO.Parts_Cost_Expense_Id),T.Parts_Cost_Expense_Id) as CostExpenseID, 
				EP.Eqp_Category_Id as EqpCategoryId, 
				ISNULL(ISNULL(TOOL.Work_Group_Id,TOO.Work_Group_Id),T.Def_Work_Group_Id) as WorkGroupId
		FROM   	
				#_TASK TT INNER JOIN
				#_WO W ON TT.TaskID=W.TaskID INNER JOIN
				TASK T ON TT.TaskID=T.Task_ID INNER JOIN
				TASK_OPERATION TOO ON T.Task_ID = TOO.Task_Id INNER JOIN
				tblEqpPlans EP ON T.Eqp_Plan_ID = EP.EqpPlanId LEFT OUTER JOIN
				TASK_OPERATION_LABOUR TOOL ON TOO.Task_Operation_Id = TOOL.Task_Operation_Id AND ISNULL(W.FinPeriod,0)=ISNULL(TOOL.FinPeriod,0)
		WHERE  
				--AL: 03/04/09
--				(ISNULL(TOOL.Actual_Labour_Hrs * TOOL.Actual_Labour_Rate,0)<>0 OR TOOL.Actual_Labour_Hrs>0)
				(ISNULL(TOOL.ActualTotalSell,0)<>0 OR TOOL.Actual_Labour_Hrs>0)
		) AL LEFT OUTER JOIN
		COST_CENTRE CEL ON AL.CostCentreId = CEL.Cost_Centre_ID

	UNION ALL

	--M
	SELECT	WorkOrderID,WBSElement,
			ISNULL(CEM.Cost_Centre_Code /*+ ' - ' + CEM.Cost_Centre_Desc*/, '') as CostCentre,
			CostBearerId,SettlementRule,ReceiverCategory,CostP,CostL,CostM,
			AM.CostCentreId,CostExpenseID,EqpCategoryId,WorkGroupId  
	FROM
		(SELECT	ISNULL(W.WorkOrderID,W.NewWorkOrderID) as WorkOrderID,
				'' as WBSElement, 
				ISNULL(ISNULL(TOOM.CostBearerId,TOO.Cost_Bearer_Id),T.Cost_Bearer_ID) as CostBearerId,
				'' as SettlementRule,
				'' as ReceiverCategory,
				0 as CostP,
				0 as CostL,
				--AL: 04/04/09
				CASE WHEN ISNULL(@ManualEntryActualsMisc,1)=3 THEN ISNULL(TOOM.Actual_Sell,0)*TT.MiscMargin ELSE TOOM.ActualCost END as CostM,
				ISNULL(ISNULL(TOOM.CostCentreId,TOO.Cost_Centre_Id),T.Cost_Centre_Id) as CostCentreId, 
				ISNULL(ISNULL(TOOM.ExpenseElementId,TOO.Parts_Cost_Expense_Id),T.Parts_Cost_Expense_Id) as CostExpenseID, 
				EP.Eqp_Category_Id as EqpCategoryId, 
				ISNULL(ISNULL(TOOM.WorkGroupId,TOO.Work_Group_Id),T.Def_Work_Group_Id) as WorkGroupId
		FROM   	
				#_TASK TT INNER JOIN
				#_WO W ON TT.TaskID=W.TaskID INNER JOIN
				TASK T ON TT.TaskID=T.Task_ID INNER JOIN
				TASK_OPERATION TOO ON T.Task_ID = TOO.Task_Id INNER JOIN
				tblEqpPlans EP ON T.Eqp_Plan_ID = EP.EqpPlanId LEFT OUTER JOIN
				TASK_OPERATION_MISC TOOM ON TOO.Task_Operation_Id = TOOM.Task_Operation_Id  AND ISNULL(W.FinPeriod,0)=ISNULL(TOOM.FinPeriod,0)
		WHERE  
				ISNULL(TOOM.Actual_Sell,0)<>0
		)AM LEFT OUTER JOIN
		COST_CENTRE CEM ON AM.CostCentreId = CEM.Cost_Centre_ID
	)A

GROUP BY
			WorkOrderID, WBSElement, CostCentre, CostBearerId, SettlementRule, ReceiverCategory, CostCentreID,CostExpenseID, EqpCategoryId, WorkGroupId
ORDER BY 
			CostBearerId,CostExpenseID,CostCentreID,EqpCategoryId,WorkGroupId


--##Get TotalCostPLM and check if there are any settlement with costs

UPDATE	W
SET		CostP=B.CostP,
		CostL=B.CostL,
		CostM=B.CostM,
		TotalCost=B.TotalCost,
		MaxP=B.MaxP,
		MinP=B.MinP,
		MaxL=B.MaxL,
		MinL=B.MinL,
		MaxM=B.MaxM,
		MinM=B.MinM
FROM
	#_WO W INNER JOIN
	(SELECT	WorkorderID,
			SUM(CostP) AS CostP,SUM(CostL) AS CostL,
			SUM(CostM) AS CostM,SUM(CostP)+SUM(CostL)+SUM(CostM) AS TotalCost,
			MAX(CostP) AS MaxP,MIN(CostP) AS MinP,
			MAX(CostL) AS MaxL,MIN(CostL) AS MinL,
			MAX(CostM) AS MaxM,MIN(CostM) AS MinM
	FROM	
			(SELECT WorkorderID,
					ISNULL(CostP,0) AS CostP,
					ISNULL(CostL,0) AS CostL,
					ISNULL(CostM,0) AS CostM
			FROM	#_tblWorkOrderSettlements)A
	GROUP BY 
			WorkorderID
	)B ON W.NewWorkorderID=B.WorkorderID/*VV #1000 ISNULL(W.WorkorderID,W.NewWorkorderID)=B.WorkorderID*/

UPDATE	#_WO
SET		CostP=ISNULL(CostP,0),
		CostL=ISNULL(CostL,0),
		CostM=ISNULL(CostM,0),
		TotalCost=ISNULL(TotalCost,0),
		MaxP=ISNULL(MaxP,0),
		MinP=ISNULL(MinP,0),
		MaxL=ISNULL(MaxL,0),
		MinL=ISNULL(MinL,0),
		MaxM=ISNULL(MaxM,0),
		MinM=ISNULL(MinM,0),
		HasCostP=CASE WHEN ISNULL(MaxP,0)=0 AND ISNULL(MinP,0)=0 THEN 0 ELSE 1 END,
		HasCostL=CASE WHEN ISNULL(MaxL,0)=0 AND ISNULL(MinL,0)=0 THEN 0 ELSE 1 END,
		HasCostM=CASE WHEN ISNULL(MaxM,0)=0 AND ISNULL(Minm,0)=0 THEN 0 ELSE 1 END,
		ThresholdPB= CASE WHEN	(HasCostP=1 AND ABS(CostP)<@Threshold) OR 
								(HasCostL=1 AND ABS(CostL)<@Threshold) OR 
								(HasCostM=1 AND ABS(CostM)<@Threshold) THEN 1 ELSE 0 END,
		LessThanThreshold=CASE WHEN ABS(ISNULL(TotalCost,0))<@Threshold THEN 1 ELSE 0 END

--Threshold pb
UPDATE	#_WO
SET		CostP2=CostP,
		CostL2=CostL,
		CostM2=CostM
WHERE	ThresholdPB=0


IF EXISTS(SELECT * FROM #_WO WHERE ThresholdPB<>0)
BEGIN
	IF EXISTS(SELECT * FROM #_WO WHERE LessThanThreshold<>0)
	BEGIN
		--Update the first settlement for each task/workorder only
		UPDATE	A
		SET		CostP=A.CostP+T.HasCostP*@Threshold,
				CostL=A.CostL+T.HasCostL*@Threshold,
				CostM=A.CostM+T.HasCostM*@Threshold
		FROM
			#_WO W CROSS APPLY
			(SELECT TOP 1 WorkorderSetId,CostP,CostL,CostM
			FROM #_tblWorkOrderSettlements
			WHERE WorkorderID=W.NewWorkorderID/*VV #1000 ISNULL(W.WorkorderID,W.NewWorkorderID)*/)A
		WHERE
			W.ThresholdPB<>0 AND
			W.LessThanThreshold<>0

		--refresh cost values in #_TASK
		UPDATE	W
		SET		CostP=B.CostP,
				CostL=B.CostL,
				CostM=B.CostM,
				TotalCost=B.TotalCost,
				CostP2=B.CostP,
				CostL2=B.CostL,
				CostM2=B.CostM
		FROM
			#_WO W INNER JOIN
			(SELECT	WorkorderID,
					SUM(CostP) AS CostP,SUM(CostL) AS CostL,SUM(CostM) AS CostM
			FROM	
					(SELECT WorkorderID,
							SUM(CostP) AS CostP,SUM(CostL) AS CostL,
							SUM(CostM) AS CostM,SUM(CostP)+SUM(CostL)+SUM(CostM) AS TotalCost
					FROM	#_tblWorkOrderSettlements)A
			GROUP BY 
					WorkorderID
			)B ON ISNULL(W.WorkorderID,W.NewWorkorderID)=B.WorkorderID
		WHERE
			W.ThresholdPB<>0 AND
			W.LessThanThreshold<>0
	END

	IF EXISTS(SELECT * FROM #_WO WHERE LessThanThreshold=0)
	BEGIN
		--set cost=totalcost for all settlements in that case
		UPDATE	A
		SET		CostP=T.TotalCost,
				CostL=T.TotalCost,
				CostM=T.TotalCost
		FROM
			#_WO W INNER JOIN 
			#_tblWorkOrderSettlements A ON ISNULL(W.WorkorderID,W.NewWorkorderID)=A.WorkorderID
		WHERE
			W.ThresholdPB<>0 AND
			W.LessThanThreshold=0

		--refresh cost values in #_TASK
		UPDATE	#_WO
		SET		CostP2=TotalCost,
				CostL2=TotalCost,
				CostM2=TotalCost
		WHERE
			ThresholdPB<>0 AND
			LessThanThreshold=0
	END
END

--##Insert into tblWorkOrderSettlements
INSERT INTO tblWorkOrderSettlements 
			(WorkOrderId, WBSElement, CostCentre, CostBearerId, SettlementRule, ReceiverCategory, PercentParts, PercentLabour, PercentMisc, Cost_Centre_ID,
			Cost_Expense_ID, Eqp_Category_Id, Work_Group_Id)
SELECT	A.WorkOrderID, A.WBSElement, A.CostCentre, A.CostBearerId, A.SettlementRule, A.ReceiverCategory, 
		case when Abs(W.CostP2)<@Threshold 
			then case when A.WorkOrderSetId=1 then 100 else 0 end
			else A.CostP*100/W.CostP2 end, 
		case when Abs(W.CostL2)<@Threshold 
			then case when A.WorkOrderSetId=1 then 100 else 0 end
			else A.CostL*100/W.CostL2 end, 
		case when Abs(W.CostM2)<@Threshold 
			then case when A.WorkOrderSetId=1 then 100 else 0 end
			else A.CostM*100/W.CostM2 end, 
		A.CostCentreID,A.CostExpenseID, A.EqpCategoryId, A.WorkGroupId
FROM	
#_WO W 
	INNER JOIN
#_tblWorkOrderSettlements A 
	ON W.NewWorkorderID=A.WorkOrderId
	/*VV #1000 ON ISNULL(W.WorkOrderId,W.NewWorkorderID)=A.WorkOrderId*/

DROP TABLE #_tblWorkOrderSettlements


--## 5: tblWorkorderOperations #########################

--AL: 04/04/09
UPDATE	W
SET		SellP=CASE WHEN ISNULL(@ManualEntryActualsParts,1)=3 THEN 
					CASE WHEN (T.PartsMargin >= 100) OR (T.PartsMargin < 0) THEN W.CostP ELSE CostP / T.PartsMargin END
				ELSE W.SellP END,	
		SellL=CASE WHEN ISNULL(@ManualEntryActualsLabour,1)=3 THEN 
					CASE WHEN (T.LabMargin >= 100) OR (T.LabMargin < 0) THEN W.CostL ELSE CostL  / T.LabMargin END
				ELSE W.SellL END,	
		SellM=CASE WHEN ISNULL(@ManualEntryActualsMisc,1)=3 THEN 
					CASE WHEN (T.MiscMargin >= 100) OR (T.MiscMargin < 0) THEN W.CostM ELSE CostM  / T.MiscMargin END
				ELSE W.SellM END	
FROM
	#_WO W INNER JOIN
	#_TASK T ON W.TaskID=W.TaskID



--## 5a: usp_Add_WO_Operation #########################

INSERT INTO tblWorkOrderOperations 
	(WorkOrderId,
	WorkOrderStatusId,
	ComponentCodeId,
	ModifierCodeId,
	TaskTypeId,
	ApplicationCodeId,
	JobCodeId,
	PlannedLabourHours,
	PlannedDurationHours,
	ActualLabourHours,
	ActualDurationHours,
	PartsCost,
	LabourCost,
	MiscCost,
	PartsSell,
	LabourSell,
	MiscSell,
	OperationNumber,
	WorkActivityCode)
SELECT
	ISNULL(W.WorkorderID,W.NewWorkOrderID),
	@WOStatusCreated,
	T.ComponentCodeId,
	T.ModifierId,
	T.TaskTypeId,
	T.ApplicationCodeId,
	T.RepairCodeId,
	ISNULL(W.PlannedLabourHours,0),
	ISNULL(W.PlannedDuration,0),
	ISNULL(W.ActualLabourHours,0),
	ISNULL(W.ActualDuration,0),
	W.CostP,
	W.CostL,
	W.CostM,
	W.SellP,
	W.SellL,
	W.SellM,
	NULL,	--OperationNumber
	NULL	--WorkActivityCode
FROM 
	#_WO W INNER JOIN
	#_TASK T ON W.TaskID=T.TaskID
WHERE
	ISNULL(W.WorkOrderID,W.NewWorkorderID) NOT IN (SELECT WO.WorkorderID 
						FROM
								tblWorkOrderOperations WO INNER JOIN
								#_WO W ON WO.WorkOrderID=isnull(W.WorkorderID,w.NewWorkorderID)  )
	


--## 6: tblWorkOrderInvoices #########################
/* VV #1000 tblWorkOrderInvoices is deleted in the code above
DELETE WI
FROM 
	#_WO W INNER JOIN
	tblWorkOrderInvoices WI ON ISNULL(W.WorkOrderID,W.NewWorkorderID)=WI.WorkorderID	--just existing ones
*/

--## 6: (DELETE tblWorkOrderInvoices +) TASK_WO_INVOICE_ADD_P #########################
INSERT INTO tblWorkOrderInvoices 
			(WorkOrderId,CostBearerId,CurrencyId,InvoiceDate,PartsSell,LabourSell,MiscSell,
			ExchangeRate,FinancialPeriod,WBSElement,CostCentre,CustomerId,InvoiceNumber,is_debit_memo) 

SELECT	WorkOrderID,CostBearerId,CurrencyId,InvoiceDate,SUM(PartsSell),SUM(LabourSell),SUM(MiscSell),
		ExchangeRate,FinancialPeriod,WBSElement,CostCentre,CustomerId,InvoiceNumber,is_debit_memo
FROM
	(--P
	SELECT	WorkOrderID,CostBearerId,CurrencyId,InvoiceDate,PartsSell,LabourSell,MiscSell,
			ExchangeRate,FinancialPeriod,WBSElement, 
			ISNULL(CEP.Cost_Centre_Code + ' - ' + CEP.Cost_Centre_Desc, '') as CostCentre,
			CustomerId,InvoiceNumber,is_debit_memo
	FROM
		(SELECT	ISNULL(W.WorkOrderID,W.NewWorkOrderID) as WorkOrderID,
				ISNULL(ISNULL(TOOP.CostBearerId,TOO.Cost_Bearer_Id),T.Cost_Bearer_ID) as CostBearerId,
				@PrimaryCurrencyId as CurrencyId,
				W.StartDate as InvoiceDate,
				--AL: 03/04/09
--				ISNULL((TOOP.Actual_Qty * TOOP.Actual_Unit_Price),0) as PartsSell,
				ISNULL((TOOP.ActualTotalSell),0) as PartsSell,
				0 as LabourSell,
				0 as MiscSell,
				1 as ExchangeRate,
				W.FinPeriod as FinancialPeriod,
				'' as WBSElement, 
				ISNULL(ISNULL(TOOP.CostCentreId,TOO.Cost_Centre_Id),T.Cost_Centre_Id) as CostCentreId, 
				T.Customer_Id as CustomerId,
				'AMTINV' as InvoiceNumber,
				0 as is_debit_memo
		FROM   	
				#_TASK TT INNER JOIN
				#_WO W ON TT.TaskID=W.TaskID INNER JOIN
				TASK T ON TT.TaskID=T.Task_ID INNER JOIN
				TASK_OPERATION TOO ON T.Task_ID = TOO.Task_Id INNER JOIN
				tblEqpPlans EP ON T.Eqp_Plan_ID = EP.EqpPlanId LEFT OUTER JOIN
				TASK_OPERATION_PART TOOP ON TOO.Task_Operation_Id = TOOP.Task_Operation_Id  AND ISNULL(W.FinPeriod,0)=ISNULL(TOOP.FinPeriod,0)
		WHERE  
				--AL: 03/04/09
--				(ISNULL(TOOP.Actual_Qty * TOOP.Actual_Unit_Price,0)<>0 OR TOOP.Actual_Qty>0)
				(ISNULL(TOOP.ActualTotalSell,0)<>0 OR TOOP.Actual_Qty>0)
		)AP LEFT OUTER JOIN
		COST_CENTRE CEP ON AP.CostCentreId = CEP.Cost_Centre_ID

	UNION ALL

	--L
	SELECT	WorkOrderID,CostBearerId,CurrencyId,InvoiceDate,PartsSell,LabourSell,MiscSell,
			ExchangeRate,FinancialPeriod,WBSElement, 
			ISNULL(CEL.Cost_Centre_Code + ' - ' + CEL.Cost_Centre_Desc, '') as CostCentre,
			CustomerId,InvoiceNumber,is_debit_memo
	FROM
		(SELECT	ISNULL(W.WorkOrderID,W.NewWorkOrderID) as WorkOrderID,
				ISNULL(ISNULL(TOOL.CostBearerId,TOO.Cost_Bearer_Id),T.Cost_Bearer_ID) as CostBearerId,
				@PrimaryCurrencyId as CurrencyId,
				W.StartDate as InvoiceDate,
				0 as PartsSell,
				--AL: 03/04/09
--				ISNULL((TOOL.Actual_Labour_Hrs * TOOL.Actual_Labour_Rate),0) as LabourSell,
				ISNULL((TOOL.ActualTotalSell),0) as LabourSell,
				0 as MiscSell,
				1 as ExchangeRate,
				W.FinPeriod as FinancialPeriod,
				'' as WBSElement, 
				ISNULL(ISNULL(TOOL.CostCentreId,TOO.Cost_Centre_Id),T.Cost_Centre_Id) as CostCentreId, 
				T.Customer_Id as CustomerId,
				'AMTINV' as InvoiceNumber,
				0 as is_debit_memo
		FROM   	
				#_TASK TT INNER JOIN
				#_WO W ON TT.TaskID=W.TaskID INNER JOIN
				TASK T ON TT.TaskID=T.Task_ID INNER JOIN
				TASK_OPERATION TOO ON T.Task_ID = TOO.Task_Id INNER JOIN
				tblEqpPlans EP ON T.Eqp_Plan_ID = EP.EqpPlanId LEFT OUTER JOIN
				TASK_OPERATION_LABOUR TOOL ON TOO.Task_Operation_Id = TOOL.Task_Operation_Id AND ISNULL(W.FinPeriod,0)=ISNULL(TOOL.FinPeriod,0)
		WHERE  
				--AL: 03/04/09
--				(ISNULL(TOOL.Actual_Labour_Hrs * TOOL.Actual_Labour_Rate,0)<>0 OR TOOL.Actual_Labour_Hrs>0)
				(ISNULL(TOOL.ActualTotalSell,0)<>0 OR TOOL.Actual_Labour_Hrs>0)
		)AL LEFT OUTER JOIN
		COST_CENTRE CEL ON AL.CostCentreId = CEL.Cost_Centre_ID		

	UNION ALL

	--M
	SELECT	WorkOrderID,CostBearerId,CurrencyId,InvoiceDate,PartsSell,LabourSell,MiscSell,
			ExchangeRate,FinancialPeriod,WBSElement, 
			ISNULL(CEM.Cost_Centre_Code + ' - ' + CEM.Cost_Centre_Desc, '') as CostCentre,
			CustomerId,InvoiceNumber,is_debit_memo
	FROM
		(SELECT	ISNULL(W.WorkOrderID,W.NewWorkOrderID) as WorkOrderID,
				ISNULL(ISNULL(TOOM.CostBearerId,TOO.Cost_Bearer_Id),T.Cost_Bearer_ID) as CostBearerId,
				@PrimaryCurrencyId as CurrencyId,
				W.StartDate as InvoiceDate,
				0 as PartsSell,
				0 as LabourSell,
				ISNULL(TOOM.Actual_Sell,0) as MiscSell,
				1 as ExchangeRate,
				W.FinPeriod as FinancialPeriod,
				'' as WBSElement, 
				ISNULL(ISNULL(TOOM.CostCentreId,TOO.Cost_Centre_Id),T.Cost_Centre_Id) as CostCentreId, 
				T.Customer_Id as CustomerId,
				'AMTINV' as InvoiceNumber,
				0 as is_debit_memo
		FROM   	
				#_TASK TT INNER JOIN
				#_WO W ON TT.TaskID=W.TaskID INNER JOIN
				TASK T ON TT.TaskID=T.Task_ID INNER JOIN
				TASK_OPERATION TOO ON T.Task_ID = TOO.Task_Id INNER JOIN
				tblEqpPlans EP ON T.Eqp_Plan_ID = EP.EqpPlanId LEFT OUTER JOIN
				TASK_OPERATION_MISC TOOM ON TOO.Task_Operation_Id = TOOM.Task_Operation_Id  AND ISNULL(W.FinPeriod,0)=ISNULL(TOOM.FinPeriod,0)
		WHERE  
				ISNULL(TOOM.Actual_Sell,0)<>0
		)AM LEFT OUTER JOIN
		COST_CENTRE CEM ON AM.CostCentreId = CEM.Cost_Centre_ID

	)A
GROUP BY	
			WorkOrderID,CostBearerId,CurrencyId,InvoiceDate,
			ExchangeRate,FinancialPeriod,WBSElement,CostCentre,CustomerId,InvoiceNumber,is_debit_memo
ORDER BY	
			CostBearerId,CostCentre

--## 7: last updates
UPDATE	T WITH (UPDLOCK, ROWLOCK)
SET		Work_Order=TT.WorkOrderNumber,
		Work_Order_ID=TT.WorkOrderID,
		Work_Order_Date=TT.AMTStartDate	
FROM 
		TASK T INNER JOIN
		#_TASK TT ON T.Task_ID=TT.TaskID 
		
--AL: 31/07/09: merging children


UPDATE	WO WITH (UPDLOCK)
SET		Reviewed = 1,	--HAS TO BE ONE
		
		ParentWorkOrderId = T.WorkOrderId,
		AMTParentWorkOrderId = T.WorkOrderId
FROM 
tblWorkOrders WO 
	INNER JOIN
#_WO W 
	ON WO.WorkorderID=W.NewWorkOrderID
	/* VV #1000 ON WO.WorkorderID=ISNULL(W.WorkOrderID,W.NewWorkOrderID) */
	INNER JOIN
#_TASK T 
	ON W.TaskID=T.TaskID
	
	

--## 8: Cleanup
DROP TABLE #_TASK,#_WO

GO


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[COST_ADJUSTER_GET_P]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[COST_ADJUSTER_GET_P]
GO

CREATE PROCEDURE [dbo].[COST_ADJUSTER_GET_P]
/******************************************************************************
	
	Name: COST_ADJUSTER_GET_P

	Called By: 

	Desc: 

	Auth: 	Darryl Smith
	Date: 	25th July 2007
*******************************************************************************
		Change History
*******************************************************************************
Date:		Author:		Description:
--------	--------	----------------------------------------
02/08/11	DS			Fix for #2205
03/04/08	AL			Now uses EQP_SIBLINGS_F 
13/02/08	AL			Added parameters @CostResponsibilityId and @ParentEqpPlanID + Removed @EqpTypeId (Current proj only)
*******************************************************************************/
	/* Param List */
@EqpClassId varchar(MAX)='',
@EqpGroupId varchar(MAX)='',
@ManufacturerId varchar(MAX)='',
@ModelId varchar(MAX)='',
@FleetId varchar(MAX)='',
@EqpPlanId varchar(MAX)='',
--@EqpTypeId varchar(MAX)='',
@EqpCriticalityId varchar(MAX)='',
@EqpLocationId varchar(MAX)='',
@EqpCategoryId varchar(MAX)='',
@RegionId varchar(MAX)='',
@DivisionId varchar(MAX)='',
@BranchId varchar(MAX)='',
@SiteId varchar(MAX)='',
@CostBearerId varchar(MAX)='',
@CostCentreId varchar(MAX)='',
@ExpenseElementId varchar(MAX)='',
@WorkGroupId varchar(MAX)='',
@TaskTypeId varchar(MAX)='',
@SystemId varchar(MAX)='',
@SubsystemId varchar(MAX)='',
@CompCodeId varchar(MAX)='',
@ExcludeStdJobs int=1, -- 0=YES (ie. only return NOT linked to std jobs/cost allocs), 1=NO (ie. only return LINKED to std jobs/cost allocs), 2 = ALL (ie. return ALL)
@IncludeParts bit=1,
@IncludeLabour bit=1,
@IncludeMisc bit=1,
@ActualFromDate datetime = '1-Jan-2005',
@ActualToDate datetime = '1-Jan-2007',
@ProjFromDate datetime = '1-Aug-2007',
@ProjToDate datetime = '1-Jan-2009',
@AnalyseBy1 varchar(MAX)='FleetId',
@AnalyseBy1Desc varchar(MAX)='Fleet',
@AnalyseBy2 varchar(MAX)='',
@AnalyseBy2Desc varchar(MAX)='',
@AnalyseBy3 varchar(MAX)='',
@AnalyseBy3Desc varchar(MAX)='',
@AnalyseBy int=0, -- 0=month, 1=quarter, 2=year
@CostResponsibilityId varchar(MAX)='',	--AL: 13/02/08 Added
@ParentEqpPlanID varchar(MAX)=''		--AL: 13/02/08 Added

AS
BEGIN

DECLARE @SQL VARCHAR(MAX)
DECLARE @WHERE VARCHAR(MAX)
DECLARE @PROJ_DATE_WHERE VARCHAR(MAX)
DECLARE @ACTUAL_DATE_WHERE VARCHAR(MAX)

DECLARE @ProjFromPeriod INT
DECLARE @ProjToPeriod INT
DECLARE @ActualFromPeriod INT
DECLARE @ActualToPeriod INT
DECLARE @ProjNumberOfPeriods INT
DECLARE @ActualNumberOfPeriods INT

--convert dates to integer "periods" (such as stored in tblRepProjCosts)
SET @ProjFromPeriod = LEFT(CONVERT(VARCHAR, @ProjFromDate, 112),6)
SET @ProjToPeriod = LEFT(CONVERT(VARCHAR, @ProjToDate, 112),6)
SET @ActualFromPeriod = LEFT(CONVERT(VARCHAR, @ActualFromDate, 112),6)
SET @ActualToPeriod = LEFT(CONVERT(VARCHAR, @ActualToDate, 112),6)

SET @ProjNumberOfPeriods = DATEDIFF(m, @ProjFromDate, @ProjToDate) + 1
SET @ActualNumberOfPeriods = DATEDIFF(m, @ActualFromDate, @ActualToDate) + 1

IF @ProjNumberOfPeriods = 0 SET @ProjNumberOfPeriods = 1 --to avoid divide by zero when averaging
IF @ActualNumberOfPeriods = 0 SET @ActualNumberOfPeriods = 1 --to avoid divide by zero when averaging

SET @WHERE = ''

IF (LEN(@EqpClassId) > 0)
	SET @WHERE = @WHERE + 'AND Eqp_Class_Id IN (' + @EqpClassId + ') '
IF (LEN(@EqpGroupId) > 0)
	SET @WHERE = @WHERE + 'AND Equipment_Group_Id IN (' + @EqpGroupId + ') '
IF (LEN(@ManufacturerId) > 0)
	SET @WHERE = @WHERE + 'AND ManufacturerId IN (' + @ManufacturerId + ') '
IF (LEN(@ModelId) > 0)
	SET @WHERE = @WHERE + 'AND ModelId IN (' + @ModelId + ') '
IF (LEN(@FleetId) > 0)
	SET @WHERE = @WHERE + 'AND FleetId IN (' + @FleetId + ') '
IF (LEN(@EqpPlanId) > 0)
	SET @WHERE = @WHERE + 'AND EqpPlanId IN (' + @EqpPlanId + ') '
--AL: 14/02/08
--IF (LEN(@EqpTypeId) > 0)
--	SET @WHERE = @WHERE + 'AND Eqp_Type_Id IN (' + @EqpTypeId + ') '
IF (LEN(@EqpCriticalityId) > 0)
	SET @WHERE = @WHERE + 'AND Eqp_Criticality_Id IN (' + @EqpCriticalityId + ') '
IF (LEN(@EqpLocationId) > 0)
	SET @WHERE = @WHERE + 'AND Eqp_Location_Id IN (' + @EqpLocationId + ') '
IF (LEN(@EqpCategoryId) > 0)
	SET @WHERE = @WHERE + 'AND Eqp_Category_Id IN (' + @EqpCategoryId + ') '
IF (LEN(@RegionId) > 0)
	SET @WHERE = @WHERE + 'AND Region_Id IN (' + @RegionId + ') '
IF (LEN(@DivisionId) > 0)
	SET @WHERE = @WHERE + 'AND Division_Id IN (' + @DivisionId + ') '
IF (LEN(@BranchId) > 0)
	SET @WHERE = @WHERE + 'AND BranchId IN (' + @BranchId + ') '
IF (LEN(@SiteId) > 0)
	SET @WHERE = @WHERE + 'AND SiteId IN (' + @SiteId + ') '
IF (LEN(@CostBearerId) > 0)
	SET @WHERE = @WHERE + 'AND CostBearerId IN (' + @CostBearerId + ') '
IF (LEN(@CostCentreId) > 0)
	SET @WHERE = @WHERE + 'AND Cost_Centre_Id IN (' + @CostCentreId + ') '
IF (LEN(@ExpenseElementId) > 0)
	SET @WHERE = @WHERE + 'AND Cost_Expense_Id IN (' + @ExpenseElementId + ') ' -- DS 2011-08-02: #2205
IF (LEN(@WorkGroupId) > 0)
	SET @WHERE = @WHERE + 'AND Work_Group_Id IN (' + @WorkGroupId + ') '
IF (LEN(@TaskTypeId) > 0)
	SET @WHERE = @WHERE + 'AND TaskTypeId IN (' + @TaskTypeId + ') '
IF (LEN(@SystemId) > 0)
	SET @WHERE = @WHERE + 'AND SystemId IN (' + @SystemId + ') '
IF (LEN(@SubsystemId) > 0)
	SET @WHERE = @WHERE + 'AND SubSystemId IN (' + @SubsystemId + ') '
IF (LEN(@CompCodeId) > 0)
	SET @WHERE = @WHERE + 'AND ComponentCodeId IN (' + @CompCodeId + ') '
--AL: 14/02/08
IF (LEN(@CostResponsibilityId) > 0)
	SET @WHERE = @WHERE + 'AND Cost_Responsibility_id IN (' + @CostResponsibilityId + ') '
IF (LEN(@ParentEqpPlanID) > 0)
	SET @WHERE = @WHERE + 'AND EqpPlanID IN (SELECT EqpPlanID FROM dbo.EQP_SIBLINGS_F('+ @ParentEqpPlanID +')) '

SET @PROJ_DATE_WHERE = 'AND Period>=' + CONVERT(VARCHAR, @ProjFromPeriod) + ' AND Period<=' + CONVERT(VARCHAR, @ProjToPeriod) + ' '
SET @ACTUAL_DATE_WHERE = 'AND CalenderPeriod>=' + CONVERT(VARCHAR, @ActualFromPeriod) + ' AND CalenderPeriod<=' + CONVERT(VARCHAR, @ActualToPeriod) + ' '

SET @SQL = 'SELECT '
SET @SQL = @SQL + 'CASE WHEN A.' + @AnalyseBy1 + ' IS NOT NULL THEN A.' + @AnalyseBy1 + ' ELSE B.' + @AnalyseBy1 + ' END AS ' + @AnalyseBy1 + ','
SET @SQL = @SQL + 'CASE WHEN A.' + @AnalyseBy1Desc + ' IS NOT NULL THEN A.' + @AnalyseBy1Desc + ' ELSE B.' + @AnalyseBy1Desc + ' END AS ' + @AnalyseBy1Desc + ','
IF (LEN(@AnalyseBy2) > 0)
BEGIN
	SET @SQL = @SQL + 'CASE WHEN A.' + @AnalyseBy2 + ' IS NOT NULL THEN A.' + @AnalyseBy2 + ' ELSE B.' + @AnalyseBy2 + ' END AS ' + @AnalyseBy2 + ','
	SET @SQL = @SQL + 'CASE WHEN A.' + @AnalyseBy2Desc + ' IS NOT NULL THEN A.' + @AnalyseBy2Desc + ' ELSE B.' + @AnalyseBy2Desc + ' END AS ' + @AnalyseBy2Desc + ','
END
ELSE
	SET @SQL = @SQL + CHAR(39) + CHAR(39) + ' AS NULL2A, ' + CHAR(39) + CHAR(39) + ' AS NULL2B,'
IF (LEN(@AnalyseBy3) > 0)
BEGIN
	SET @SQL = @SQL + 'CASE WHEN A.' + @AnalyseBy3 + ' IS NOT NULL THEN A.' + @AnalyseBy3 + ' ELSE B.' + @AnalyseBy3 + ' END AS ' + @AnalyseBy3 + ','
	SET @SQL = @SQL + 'CASE WHEN A.' + @AnalyseBy3Desc + ' IS NOT NULL THEN A.' + @AnalyseBy3Desc + ' ELSE B.' + @AnalyseBy3Desc + ' END AS ' + @AnalyseBy3Desc + ','
END
ELSE
	SET @SQL = @SQL + CHAR(39) + CHAR(39) + ' AS NULL3A, ' + CHAR(39) + CHAR(39) + ' AS NULL3B,'
SET @SQL = @SQL + 'ISNULL(B.Actual_Sell,0) / ' + CONVERT(VARCHAR, @ActualNumberOfPeriods) + ' AS Actual_Sell, ISNULL(A.Proj_Sell,0) / ' + CONVERT(VARCHAR, @ProjNumberOfPeriods) + ' AS Proj_Sell,'
SET @SQL = @SQL + '(ISNULL(A.Proj_Sell,0) / ' + CONVERT(VARCHAR, @ProjNumberOfPeriods) + ') - (ISNULL(B.Actual_Sell,0) / ' + CONVERT(VARCHAR, @ActualNumberOfPeriods) + ') AS Variance, '
SET @SQL = @SQL + 'CASE WHEN ISNULL(B.Actual_Sell,0) / ' + CONVERT(VARCHAR, @ActualNumberOfPeriods) + ' = 0 THEN -1 ELSE '
SET @SQL = @SQL + '((ISNULL(A.Proj_Sell,0) / ' + CONVERT(VARCHAR, @ProjNumberOfPeriods) + ') - (ISNULL(B.Actual_Sell,0) / ' + CONVERT(VARCHAR, @ActualNumberOfPeriods) + ')) / (ISNULL(B.Actual_Sell,-1) / ' + CONVERT(VARCHAR, @ActualNumberOfPeriods) + ') * 100 END AS Variance_Pct, '
SET @SQL = @SQL + 'CONVERT(BIT, 0) AS Apply, '
SET @SQL = @SQL + '100.0 AS Set_Amount, '
SET @SQL = @SQL + '0 AS New_Projected_Avg, '
SET @SQL = @SQL + '0 AS New_Projected_Total, '
SET @SQL = @SQL + '0 AS Net_Adjustment, '

SET @SQL = @SQL + 'CASE WHEN ISNULL(A.Proj_Sell,0) = 0 THEN B.EDIT_Cost_Bearer_Id WHEN ISNULL(B.Actual_Sell,0) = 0 THEN A.EDIT_Cost_Bearer_Id WHEN ISNULL(A.EDIT_Cost_Bearer_Id,0) = ISNULL(B.EDIT_Cost_Bearer_Id,0) THEN A.EDIT_Cost_Bearer_Id ELSE -1 END AS EDIT_Cost_Bearer_Id, '
SET @SQL = @SQL + 'CASE WHEN ISNULL(A.Proj_Sell,0) = 0 THEN B.EDIT_Cost_Bearer WHEN ISNULL(B.Actual_Sell,0) = 0 THEN A.EDIT_Cost_Bearer WHEN ISNULL(A.EDIT_Cost_Bearer,0) = ISNULL(B.EDIT_Cost_Bearer,0) THEN A.EDIT_Cost_Bearer ELSE ' + CHAR(39) + '<Mixed>' + CHAR(39) + ' END AS EDIT_Cost_Bearer, '
SET @SQL = @SQL + 'CASE WHEN ISNULL(A.Proj_Sell,0) = 0 THEN B.EDIT_Cost_Centre_Id WHEN ISNULL(B.Actual_Sell,0) = 0 THEN A.EDIT_Cost_Centre_Id WHEN ISNULL(A.EDIT_Cost_Centre_Id,0) = ISNULL(B.EDIT_Cost_Centre_Id,0) THEN A.EDIT_Cost_Centre_Id ELSE -1 END AS EDIT_Cost_Centre_Id, '
SET @SQL = @SQL + 'CASE WHEN ISNULL(A.Proj_Sell,0) = 0 THEN B.EDIT_Cost_Centre WHEN ISNULL(B.Actual_Sell,0) = 0 THEN A.EDIT_Cost_Centre WHEN ISNULL(A.EDIT_Cost_Centre,0) = ISNULL(B.EDIT_Cost_Centre,0) THEN A.EDIT_Cost_Centre ELSE ' + CHAR(39) + '<Mixed>' + CHAR(39) + ' END AS EDIT_Cost_Centre, '
SET @SQL = @SQL + 'CASE WHEN ISNULL(A.Proj_Sell,0) = 0 THEN B.EDIT_Cost_Expense_Id WHEN ISNULL(B.Actual_Sell,0) = 0 THEN A.EDIT_Cost_Expense_Id WHEN ISNULL(A.EDIT_Cost_Expense_Id,0) = ISNULL(B.EDIT_Cost_Expense_Id,0) THEN A.EDIT_Cost_Expense_Id ELSE -1 END AS EDIT_Cost_Expense_Id, '
SET @SQL = @SQL + 'CASE WHEN ISNULL(A.Proj_Sell,0) = 0 THEN B.EDIT_Cost_Expense WHEN ISNULL(B.Actual_Sell,0) = 0 THEN A.EDIT_Cost_Expense WHEN ISNULL(A.EDIT_Cost_Expense,0) = ISNULL(B.EDIT_Cost_Expense,0) THEN A.EDIT_Cost_Expense ELSE ' + CHAR(39) + '<Mixed>' + CHAR(39) + ' END AS EDIT_Cost_Expense, '
SET @SQL = @SQL + 'CASE WHEN ISNULL(A.Proj_Sell,0) = 0 THEN B.EDIT_Work_Group_Id WHEN ISNULL(B.Actual_Sell,0) = 0 THEN A.EDIT_Work_Group_Id WHEN ISNULL(A.EDIT_Work_Group_Id,0) = ISNULL(B.EDIT_Work_Group_Id,0) THEN A.EDIT_Work_Group_Id ELSE -1 END AS EDIT_Work_Group_Id, '
SET @SQL = @SQL + 'CASE WHEN ISNULL(A.Proj_Sell,0) = 0 THEN B.EDIT_Work_Group WHEN ISNULL(B.Actual_Sell,0) = 0 THEN A.EDIT_Work_Group WHEN ISNULL(A.EDIT_Work_Group,0) = ISNULL(B.EDIT_Work_Group,0) THEN A.EDIT_Work_Group ELSE ' + CHAR(39) + '<Mixed>' + CHAR(39) + ' END AS EDIT_Work_Group '

SET @SQL = @SQL + 'FROM (SELECT '
SET @SQL = @SQL + @AnalyseBy1 + ',' + @AnalyseBy1Desc + ','
IF (LEN(@AnalyseBy2) > 0)
	SET @SQL = @SQL + @AnalyseBy2 + ',' + @AnalyseBy2Desc + ','
ELSE
	SET @SQL = @SQL + CHAR(39) + CHAR(39) + ' AS NULL2A, ' + CHAR(39) + CHAR(39) + ' AS NULL2B,'
IF (LEN(@AnalyseBy3) > 0)
	SET @SQL = @SQL + @AnalyseBy3 + ',' + @AnalyseBy3Desc + ','
ELSE
	SET @SQL = @SQL + CHAR(39) + CHAR(39) + ' AS NULL3A, ' + CHAR(39) + CHAR(39) + ' AS NULL3B,'
SET @SQL = @SQL + 'SUM(PrimePartsSell+PrimeLabourSell+PrimeMiscSell'
IF (@IncludeParts = 0)
	SET @SQL = @SQL + '-PrimePartsSell'
IF (@IncludeLabour = 0)
	SET @SQL = @SQL + '-PrimeLabourSell'
IF (@IncludeMisc = 0)
	SET @SQL = @SQL + '-PrimeMiscSell'
SET @SQL = @SQL + ') AS Proj_Sell, '
SET @SQL = @SQL + 'CASE WHEN COUNT(DISTINCT CostBearerId) <= 1 THEN MIN(CostBearerId) ELSE -1 END AS EDIT_Cost_Bearer_Id, '
SET @SQL = @SQL + 'CASE WHEN COUNT(DISTINCT CostBearer) <= 1 THEN MIN(CostBearer) ELSE ' + CHAR(39) + '<Mixed>' + CHAR(39) + ' END AS EDIT_Cost_Bearer, '
SET @SQL = @SQL + 'CASE WHEN COUNT(DISTINCT Cost_Centre_Id) <= 1 THEN MIN(Cost_Centre_Id) ELSE -1 END AS EDIT_Cost_Centre_Id, '
SET @SQL = @SQL + 'CASE WHEN COUNT(DISTINCT Cost_Centre_Desc) <= 1 THEN MIN(Cost_Centre_Desc) ELSE ' + CHAR(39) + '<Mixed>' + CHAR(39) + ' END AS EDIT_Cost_Centre, '
SET @SQL = @SQL + 'CASE WHEN COUNT(DISTINCT Cost_Expense_Id) <= 1 THEN MIN(Cost_Expense_Id) ELSE -1 END AS EDIT_Cost_Expense_Id, '
SET @SQL = @SQL + 'CASE WHEN COUNT(DISTINCT Cost_Expense_Desc) <= 1 THEN MIN(Cost_Expense_Desc) ELSE ' + CHAR(39) + '<Mixed>' + CHAR(39) + ' END AS EDIT_Cost_Expense, '
SET @SQL = @SQL + 'CASE WHEN COUNT(DISTINCT Work_Group_Id) = 1 THEN MIN(Work_Group_Id) ELSE -1 END AS EDIT_Work_Group_Id, '
SET @SQL = @SQL + 'CASE WHEN COUNT(DISTINCT Work_Group) = 1 THEN MIN(Work_Group) ELSE ' + CHAR(39) + '<Mixed>' + CHAR(39) + ' END AS EDIT_Work_Group '
SET @SQL = @SQL + 'FROM COST_ADJUSTER_PROJ_COSTS_V WHERE 1=1 '
SET @SQL = @SQL + @WHERE
SET @SQL = @SQL + @PROJ_DATE_WHERE
IF (@ExcludeStdJobs = 0) --ie. only return NOT linked to std jobs/cost allocs
	SET @SQL = @SQL + 'AND (PricedJobId IS NULL AND Cost_Allocation_Id IS NULL) '
--	SET @SQL = @SQL + 'AND (PricedJobId IS NULL ) '
ELSE IF (@ExcludeStdJobs = 1) --ie. only return LINKED to std jobs/cost allocs
	SET @SQL = @SQL + 'AND (PricedJobId IS NOT NULL OR Cost_Allocation_Id IS NOT NULL) '
--	SET @SQL = @SQL + 'AND (PricedJobId IS NOT NULL ) '
SET @SQL = @SQL + 'GROUP BY '
SET @SQL = @SQL + @AnalyseBy1 + ',' + @AnalyseBy1Desc
IF (LEN(@AnalyseBy2) > 0)
	SET @SQL = @SQL + ',' + @AnalyseBy2 + ',' + @AnalyseBy2Desc
IF (LEN(@AnalyseBy3) > 0)
	SET @SQL = @SQL + ',' + @AnalyseBy3 + ',' + @AnalyseBy3Desc
SET @SQL = @SQL + ') A FULL OUTER JOIN (SELECT '
SET @SQL = @SQL + @AnalyseBy1 + ',' + @AnalyseBy1Desc + ','
IF (LEN(@AnalyseBy2) > 0)
	SET @SQL = @SQL + @AnalyseBy2 + ',' + @AnalyseBy2Desc + ','
ELSE
	SET @SQL = @SQL + CHAR(39) + CHAR(39) + ' AS NULL2A, ' + CHAR(39) + CHAR(39) + ' AS NULL2B,'
IF (LEN(@AnalyseBy3) > 0)
	SET @SQL = @SQL + @AnalyseBy3 + ',' + @AnalyseBy3Desc + ','
ELSE
	SET @SQL = @SQL + CHAR(39) + CHAR(39) + ' AS NULL3A, ' + CHAR(39) + CHAR(39) + ' AS NULL3B,'
SET @SQL = @SQL + 'SUM(PrimePartsSell+PrimeLabourSell+PrimeMiscSell'
IF (@IncludeParts = 0)
	SET @SQL = @SQL + '-PrimePartsSell'
IF (@IncludeLabour = 0)
	SET @SQL = @SQL + '-PrimeLabourSell'
IF (@IncludeMisc = 0)
	SET @SQL = @SQL + '-PrimeMiscSell'
SET @SQL = @SQL + ') AS Actual_Sell, '
SET @SQL = @SQL + 'CASE WHEN COUNT(DISTINCT CostBearerId) <= 1 THEN MIN(CostBearerId) ELSE -1 END AS EDIT_Cost_Bearer_Id, '
SET @SQL = @SQL + 'CASE WHEN COUNT(DISTINCT CostBearer) <= 1 THEN MIN(CostBearer) ELSE ' + CHAR(39) + '<Mixed>' + CHAR(39) + ' END AS EDIT_Cost_Bearer, '
SET @SQL = @SQL + 'CASE WHEN COUNT(DISTINCT Cost_Centre_Id) <= 1 THEN MIN(Cost_Centre_Id) ELSE -1 END AS EDIT_Cost_Centre_Id, '
SET @SQL = @SQL + 'CASE WHEN COUNT(DISTINCT Cost_Centre_Desc) <= 1 THEN MIN(Cost_Centre_Desc) ELSE ' + CHAR(39) + '<Mixed>' + CHAR(39) + ' END AS EDIT_Cost_Centre, '
SET @SQL = @SQL + 'CASE WHEN COUNT(DISTINCT Cost_Expense_Id) <= 1 THEN MIN(Cost_Expense_Id) ELSE -1 END AS EDIT_Cost_Expense_Id, '
SET @SQL = @SQL + 'CASE WHEN COUNT(DISTINCT Cost_Expense_Desc) <= 1 THEN MIN(Cost_Expense_Desc) ELSE ' + CHAR(39) + '<Mixed>' + CHAR(39) + ' END AS EDIT_Cost_Expense, '
SET @SQL = @SQL + 'CASE WHEN COUNT(DISTINCT Work_Group_Id) <= 1 THEN MIN(Work_Group_Id) ELSE -1 END AS EDIT_Work_Group_Id, '
SET @SQL = @SQL + 'CASE WHEN COUNT(DISTINCT Work_Group) <= 1 THEN MIN(Work_Group) ELSE ' + CHAR(39) + '<Mixed>' + CHAR(39) + ' END AS EDIT_Work_Group '
SET @SQL = @SQL + 'FROM COST_ADJUSTER_ACTUAL_COSTS_V WHERE 1=1 '
SET @SQL = @SQL + @WHERE
SET @SQL = @SQL + @ACTUAL_DATE_WHERE
IF (@ExcludeStdJobs = 0) --ie. only return NOT linked to std jobs/cost allocs
	SET @SQL = @SQL + 'AND (PricedJobId IS NULL AND Cost_Allocation_Id IS NULL) '
--	SET @SQL = @SQL + 'AND (PricedJobId IS NULL ) '
ELSE IF (@ExcludeStdJobs = 1) --ie. only return LINKED to std jobs/cost allocs
	SET @SQL = @SQL + 'AND (PricedJobId IS NOT NULL OR Cost_Allocation_Id IS NOT NULL) '
--	SET @SQL = @SQL + 'AND (PricedJobId IS NOT NULL ) '
SET @SQL = @SQL + 'GROUP BY '
SET @SQL = @SQL + @AnalyseBy1 + ',' + @AnalyseBy1Desc
IF (LEN(@AnalyseBy2) > 0)
	SET @SQL = @SQL + ',' + @AnalyseBy2 + ',' + @AnalyseBy2Desc
IF (LEN(@AnalyseBy3) > 0)
	SET @SQL = @SQL + ',' + @AnalyseBy3 + ',' + @AnalyseBy3Desc
SET @SQL = @SQL + ') B ON ISNULL('
SET @SQL = @SQL + 'A.' + @AnalyseBy1 + ',0) = ISNULL(B.' + @AnalyseBy1 + ',0) '
IF (LEN(@AnalyseBy2) > 0)
	SET @SQL = @SQL + 'AND ISNULL(A.' + @AnalyseBy2 + ',0) = ISNULL(B.' + @AnalyseBy2 + ',0) '
IF (LEN(@AnalyseBy3) > 0)
	SET @SQL = @SQL + 'AND ISNULL(A.' + @AnalyseBy3 + ',0) = ISNULL(B.' + @AnalyseBy3 + ',0)'

--PRINT @SQL

EXEC (@SQL)

END
GO


/****** Object:  StoredProcedure [dbo].[EXPORT_PROJ_TASK_P]    Script Date: 08/03/2011 16:09:25 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[EXPORT_PROJ_TASK_P]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[EXPORT_PROJ_TASK_P]
GO

/****** Object:  StoredProcedure [dbo].[EXPORT_PROJ_TASK_P]    Script Date: 08/03/2011 16:09:25 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


create Procedure [dbo].[EXPORT_PROJ_TASK_P]  
/******************************************************************************  
 File: EXPORT_PROJ_TASK_P.sql  
 Name: EXPORT_PROJ_TASK_P  
  
 Called By:   
  
 Desc: Selects the data to export  
  
 Auth: Veronika Vasylyeva  
 Date: 4-JUL-2008  
*******************************************************************************  
  Change History  
*******************************************************************************  
 Date:  Author:  Description:  
 -------- -------- ----------------------------------------  
 21 May 2009 V Vasylyeva CR8015: Equipment location filter does not filter the export data.  
    15 Sep 2008 AL   Replace SAPQUOM with UOM  
 20 Mar 2009 V Vaylyeva SerialNumber shall not include ModelSerialNumber separator  
 21 Apr 2009 V Vasylyeva CR8016 Amt to Amt interface. Added @EqpLocationId, @AMTSystemId  
  8-Jun-2010 V Vasylyeva CR8964: Added @TasksChanged,Planning_Confirmed,Next_Occ,Next_Occ_Date  
 29 Sep 2010 V Vasylyeva E309: new fields 
  1-Oct-10	V Vasylyeva E316: New fields TagId, Rating
  11-Apr-11	G Dhillon	Added new field Next_Occ_Type
  03-Aug-11 G Dhillon	fixed Issue #2175
*******************************************************************************/  
 /* Param List */  
@EquipmentTypeId varchar(max)='',  
@BranchId varchar(max)='',  
@SiteId varchar(max)='',  
@FleetId varchar(max)='',  
@EqpPlanId varchar(max)='',  
@ModelId varchar(max)='',   
@Regionid varchar(max)='',   
@DivisionId varchar(max)='',   
@EqpCriticalityId varchar(max)='',   
@EqpClassId varchar(max)='',   
@EqpGroupId  varchar(max)='',   
@EqpCategoryId varchar(max)='',   
@EqpCostCentreId varchar(max)='',  
@ParentEquipmentId varchar(max)='',   
@ProjectionHeaderId varchar(max)='',  
@CostResponsibilityId varchar(max)='',  
@TodaysPricing bit=0,  
@PrimeCurrency bit=0,  
@GlobalCodes bit=0,  
@EqpLocationId varchar(max)='',  
@AMTSystemId varchar(max)='',  
@DateFrom datetime=NULL  
      
AS  
  
SET NOCOUNT ON  
DECLARE @UseSchedulingSystemLastOcc bit  
DECLARE @gccDefcc varchar(10)  
DECLARE @DefGlobalJobCode varchar(10)  
DECLARE @DefCostBearer varchar(10)  
DECLARE @PrimCurr varchar(10)  
DECLARE @ModelSerialSeparator varchar(5)  
  
SET @AMTSystemId=ISNULL(@AMTSystemId,'')  
  
IF @PrimeCurrency=1  
BEGIN  
 SELECT @PrimCurr=Currency FROM tblCurrencies WHERE PrimaryCurr<>0  
END  
  
SELECT @DefCostBearer=WO_Code FROM tblCostBearers WHERE Default_Value=1  
  
SELECT @gccDefcc=Global_Component_Code FROM GLOBAL_COMPONENT_CODES WHERE Default_Record<>0  
  
SELECT  @DefGlobalJobCode = GJC.Global_Job_Code  
FROM      
tblJobCodes JC  
 INNER JOIN  
GLOBAL_JOB_CODES GJC  
 ON JC.Global_Job_Code_Id = GJC.Global_Job_Id  
WHERE JC.Default_Record = 1  
  
SELECT @ModelSerialSeparator = ISNULL(ModelSerialSeparator,'')  
FROM AMT_VARIABLE  
  
  
  
--select * from Schedule_Type  
  
select @UseSchedulingSystemLastOcc=UseSchedulingSystemLastOcc from AMT_VARIABLE  
  
SELECT     
'' AS Equipment_No,Model,   
dbo.ADD_SYSTEM_ID(@AMTSystemId,  
CASE @ModelSerialSeparator   
WHEN '' THEN SerialNumber ELSE REPLACE(SerialNumber,Model+@ModelSerialSeparator,'') END) AS Serial_No,  
Reg_Counter AS Registration_Counter, dbo.ADD_SYSTEM_ID(@AMTSystemId,EqpPlan) AS Equip_Name,   
dbo.EXPORT_PROJECTION_TYPE_F(Projection_Type_ID,1) AS Projection_Type,ProjName AS Projection_Name,  
Task_Description AS [Description], CAST(@GlobalCodes AS int) AS Global_Code,  
CASE WHEN @GlobalCodes=0 THEN Component_Code ELSE ISNULL(Global_Component_Code,@gccDefcc) END AS Component_Code,  
Modifier_Code,Task_Type, Task_Counter, 0 AS Inactive_Task,  
CAST(CASE Unscheduled WHEN 0 THEN 0 ELSE 1 END AS int) AS Unassigned_Task,   
CAST(Planning_Task AS int) AS Planning_Task, Planning_Lead_Time AS Planning_Lead_Days,   
Operational_Criticality, Manufacturer AS Task_Manufacturer_Code,   
Part_SOS,Part AS Primary_Part_Number,  Group_Number, Part_Number AS Rotable_Part_Number,    
Warranty_Period_Days AS Warranty_Days, Warranty_Period_Usage AS Warranty_Usage,   
--AL: 15/09/08  
--SAPQUOM AS UOM,   
UOM,  
CAST(CASE WHEN Schedule_Type_Id IN(1,3) THEN 0 ELSE 1 END AS int) AS Schedule_On_Last_Scheduled,  
[First], Frequency AS Interval, Final, Last_Change_Usage,   
YEAR(Last_Change_Date)*10000+MONTH(Last_Change_Date)*100+DAY(Last_Change_Date) AS Last_Change_Date,   
  
/*VV E309 ''*/ ExternalIdentifier AS External_Identifier,   
CASE Scheduling_Group_Type WHEN 2 THEN NULL ELSE Scheduling_Group END AS Suppression_Group,  
CASE Scheduling_Group_Type WHEN 2 THEN NULL ELSE Scheduling_Group_Counter END AS Suppression_Counter,  
CASE Scheduling_Group_Type WHEN 2 THEN NULL ELSE   
 CASE SchedulingGroupSubtypeId WHEN 1 THEN Suppression_Tolerance_Hours ELSE NULL END  
END AS Sibling_Interval,  
CASE Scheduling_Group_Type WHEN 2 THEN Scheduling_Group ELSE NULL END AS Dependency_Group,  
CASE Scheduling_Group_Type WHEN 2 THEN Scheduling_Group_Counter ELSE NULL END AS Dependency_Counter,  
Inspection_Logic_Task_Type, InspectionOffset AS Inspection_Logic_Offset, Maintenance_Strategy_Id AS Performance_Strategy,   
PerformanceStrategyReason AS Performance_Strategy_Reason, Changeout_Guidelines, /*GD #2175*/ERPComponentCode AS ERP_Component_Code, 
ERPModifierCode AS ERP_Modifier_Code, ERPSchedulingTask AS ERP_Scheduling_Task, SchedulingTask AS Scheduling_Task, 
/*VV E309 '' AS Last_Occurrence, '' AS Last_Occ_Date,   
'' AS Last_Scheduled,'' AS Last_Sched_Date,*/  
LastOcc AS Last_Occurrence, YEAR(LastOccDate)*10000+MONTH(LastOccDate)*100+DAY(LastOccDate) AS Last_Occ_Date,  
 CASE WHEN @UseSchedulingSystemLastOcc =1 AND SchedulingTaskId>0 THEN Ext_Last_Sched_Occ ELSE AMT_Last_Sched_Occ END AS Last_Scheduled,    
 dbo.DATE_TO_INT_STR_F(CASE   
 WHEN @UseSchedulingSystemLastOcc =1 AND SchedulingTaskId>0 THEN Ext_Last_Sched_Date   
 ELSE AMT_Last_Sched_Date END,0) AS Last_Sched_Date,    
  
/*VV CR8964*/  
NextOcc AS Next_Occurrence,YEAR(NextOccDate)*10000+MONTH(NextOccDate)*100+DAY(NextOccDate) AS Next_Occ_Date, 
Next_Occ_Type ,
CASE WHEN Job_Code IS NULL THEN NULL  
WHEN @GlobalCodes=0 THEN Job_Code   
ELSE ISNULL(Global_Job_Code,@DefGlobalJobCode) END AS Job_Code,   
ISNULL(@PrimCurr,Currency) AS Currency, Std_Job_Ref AS Standard_Job_Reference,   
ISNULL(WO_Code,@DefCostBearer) AS Cost_Bearer, Cost_Centre_Code AS Cost_Centre, Work_Group_Code AS Work_Group,  
   
CASE WHEN @GlobalCodes=0 THEN PartType ELSE Global_Part_Type END as Part_Type,  
  
Health_Safety,   
CASE @TodaysPricing WHEN 1 THEN YEAR(GETDATE())*10000+MONTH(GETDATE())*100+DAY(GETDATE())  
ELSE YEAR(Pricing_Date)*10000+MONTH(Pricing_Date)*100+DAY(Pricing_Date) END AS Pricing_Date,   
  
QtyVolume AS Consumable_Qty, PercentTopUp AS Consumable_Top_Up,   
UnitPrice/(CASE @PrimeCurrency WHEN 1 THEN ExRate ELSE 1.00 END) AS Consumable_Price,   
  
PartsCost * (CASE @TodaysPricing WHEN 1 THEN CumPartsEscalation ELSE 1.00 END)/(CASE @PrimeCurrency WHEN 1 THEN ExRate ELSE 1.00 END) AS Parts_Sell,   
  
LaborCost * (CASE @TodaysPricing WHEN 1 THEN CumLaborEscalation ELSE 1.00 END)/(CASE @PrimeCurrency WHEN 1 THEN ExRate ELSE 1.00 END) AS Labour_Sell,   
MiscCost * (CASE @TodaysPricing WHEN 1 THEN CumMiscEscalation ELSE 1.00 END)/(CASE @PrimeCurrency WHEN 1 THEN ExRate ELSE 1.00 END) AS Misc_Sell,  
   
CASE Labour_Hrs_Field WHEN 1 THEN 0 ELSE 1 END AS Shop_Labour,   
LaborHours AS Labour_Hours,   
ActivityCode AS Labour_Activity,   
Duration AS Duration_Hours, Part_Expense, Labour_Expense, Misc_Expense, Part_EDC, Labour_EDC, Misc_EDC,   
LaborShare AS Labour_Split, Crane_Cost, Pct_Freight AS Freight_Perc_Parts,   
Avg_No_People AS Avg_People_Vehicle,Avg_Daily_Work_Hrs AS Avg_Daily_Work_Hours,  Avg_Travel_Hrs AS Avg_Travel_Hours,   
Travel_Recovery_Rate_L AS Travel_Labour_Rate,Travel_Distance, Travel_Recovery_Rate_V AS Travel_Rate,  
Misc_Trip_Cost AS Misc_Cost_Per_Trip, 'AMT' AS System_Source,  
CASE ReviewStatusID WHEN 3/*Confirmed*/ THEN 1 ELSE 0 END AS Planning_Confirmed,
/*VV E316*/  
TagId AS Tag_Id, PartRating AS Rating
FROM EXPORT_PROJ_TASK_V  
WHERE   
(@EquipmentTypeId='' OR Equipment_Type_Id IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@EquipmentTypeId))) AND  
(@BranchId='' OR BranchId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@BranchId))) AND  
(@SiteId='' OR SiteId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@SiteId))) AND  
(@FleetId='' OR FleetId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@FleetId))) AND  
(@EqpPlanId='' OR EqpPlanId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@EqpPlanId))) AND  
(@ModelId='' OR ModelId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@ModelId))) AND  
(@RegionId='' OR Region_Id IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@RegionId))) AND  
(@DivisionId='' OR Division_Id IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@DivisionId))) AND  
(@EqpCriticalityId='' OR Eqp_Criticality_Id IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@EqpCriticalityId))) AND  
(@EqpClassId='' OR Eqp_Class_Id IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@EqpClassId))) AND  
(@EqpGroupId='' OR Equipment_Group_Id IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@EqpGroupId))) AND  
(@EqpCategoryId='' OR Eqp_Category_Id IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@EqpCategoryId))) AND  
(@EqpCostCentreId='' OR CostCentreID IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@EqpCostCentreId))) AND  
(@CostResponsibilityId='' OR Cost_Responsibility_Id IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@CostResponsibilityId))) AND  
(@ProjectionHeaderId='' OR ProjHeaderId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@ProjectionHeaderId))) AND  
(@ParentEquipmentId='' OR EqpPlanId IN (SELECT EqpPlanId FROM dbo.EQP_SIBLINGS_F(@ParentEquipmentId))) AND  
(@EqpLocationId='' OR Eqp_Location_Id IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@EqpLocationId))) AND  
(@DateFrom IS NULL OR Last_Mod_Date>=@DateFrom)  
ORDER BY  
Model, SerialNumber, Reg_Counter, EqpPlan, ProjName,  
CASE WHEN @GlobalCodes=0 THEN Component_Code ELSE ISNULL(Global_Component_Code,@gccDefcc) END,  
Modifier_Code,Task_Type, Task_Counter  
GO



/****** Object:  StoredProcedure [dbo].[DEFECTS_IMPORT_P]    Script Date: 04/06/2011 15:16:53 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[DEFECTS_IMPORT_P]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[DEFECTS_IMPORT_P]
GO

/****** Object:  StoredProcedure [dbo].[DEFECTS_IMPORT_P]    Script Date: 04/06/2011 15:16:53 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


 
CREATE Procedure [dbo].[DEFECTS_IMPORT_P]
/******************************************************************************
	File: 
	Name: TASK_ADD_P

	Called By: 

	Desc: 1. Add Defects(Non Strategy Backlog)           

	Auth: Gurdeep Dhillon
	Date: 29 Mar 2011
*******************************************************************************
		Change History
*******************************************************************************
Date:		Author:		Description:
	--------	--------	----------------------------------------
	11 Apr 11	GD			added (LTRIM(RTRIM)) while loading data
	21 Apr 11   GD			changed column name External_Backlog_Id to ExternalBacklogId
	16 May 11	GD			Fixed Bug #1724
	29 Jul 11   GD          E610 -Write whole record for Connector and just description for File Import
	24 Sep 11   GD          fixed 2481 changed the data type of Import Record to varchar(MAX)
	17 Oct 11   GD          Fixed Issue 2634
*******************************************************************************/
	/* Param List */


	@xmlDocument XML = '<BACKLOGs></BACKLOGs>',
	@ImportBatchName varchar(1000) = '',
	@UserName VARCHAR(50) = '',
	@UserId int=0,
	@nRecInserted int = 0 OUTPUT,	
	@nRecRejected int = 0 OUTPUT,
	@NoErrors int=0 OUTPUT,
	@Message VARCHAR(max) = ''OUTPUT ,
	@InterfaceSource int=0
	
AS
DECLARE @GeneralMode int  
DECLARE @SourceId int   
DECLARE @SymptomId int  
DECLARE @CauseId int  
DECLARE @RepairCodeId int  
DECLARE @PriorityId int
DECLARE @TStatusO int
DECLARE @Planning_Notes  varchar(8000)  
DECLARE @PartsRequired bit  
DECLARE @PartsOrdered BIT
  
DECLARE @SourceD int   
DECLARE @SymptomD int  
DECLARE @CauseD int  
DECLARE @RepairCodeD int  
DECLARE @PriorityD int
DECLARE @CustomerRef varchar(100)
DECLARE @JobCodeD int
DECLARE @ModifierD int
DECLARE @TaskTypeD int
DECLARE @ApplicationCodeD int
DECLARE @Occurrence_Type_D int
DECLARE @Authorised int
DECLARE @ComponentCodeD int
  
DECLARE @Description varchar(500)  
DECLARE @EqpPlanID int   
DECLARE @TaskTypeID int   
DECLARE @ComponentCodeID int   
DECLARE @ModifierID int   
DECLARE @ApplicationCodeID int   
DECLARE @OccurrenceTypeId int   
DECLARE @DateNotified datetime   
DECLARE @PlannedLabourHours float   
--DECLARE @WorkOrder varchar(50)   
DECLARE @WorkOrderID int  
DECLARE @WorkGroupId int 
DECLARE @Customer_Ref varchar(100)
DECLARE @External_BacklogId varchar(50)
DECLARE @PlannedDuration FLOAT
DECLARE @PerformedBy varchar(11)
DECLARE @ExpressAddTaskInstructions varchar(8000)
DECLARE @Task_Planned_TimeD int
DECLARE @Task_Planned_Time_ID int
DECLARE @JobCodeId int
  
DECLARE @CostBearerID int  
DECLARE @SiteId int   
DECLARE @CostCentreId int  
DECLARE @BranchId int  
DECLARE @CustomerId int   
DECLARE @P_EDCId int  
DECLARE @L_EDCId int   
DECLARE @M_EDCId int  
DECLARE @TaskAuthorised bit
DECLARE @Task_Instructions varchar(8000)   
  
DECLARE @TargetDate datetime  
DECLARE @EmployeeId int  
DECLARE @RaisedById int  
DECLARE @SIMSCodeId int  
DECLARE @PartsReady bit  
DECLARE @ResourceReady bit
DECLARE @AMTPlanningModeId int  
DECLARE @OccurrenceTypeD int  
  
DECLARE @opAdded varchar(max)  
DECLARE @xmlOperLabour varchar(max)  

DECLARE @docHandle  int
DECLARE @CurrDate datetime
DECLARE @TotalNumberofRecords INT
DECLARE @ModelSerialSeparator varchar(5)
DECLARE @TypeVarchar int
DECLARE @ErrParsing int
DECLARE @TypeInt int
DECLARE @TypeFloat int
DECLARE @TypeBit int
DECLARE	@TypeDateInt int
DECLARE @ErrBusinessRules int
DECLARE @ErrSystemConfiguration int

DECLARE @AutoLookupPartsReadyStatus bit 

DECLARE @Count1 int  
  
SET @CurrDate=GETDATE()
SET @ErrBusinessRules=3
SET @ErrSystemConfiguration=2
 
DECLARE @Counter int  
SET @Counter=0  

SET @ErrParsing=1
SET @TypeVarchar =1
SET @TypeInt =2
SET @TypeFloat =3
SET @TypeBit =4
SET	@TypeDateInt =5
SET @TStatusO=1 
SET @GeneralMode=1  

SELECT @ModelSerialSeparator = ISNULL(ModelSerialSeparator,'') FROM AMT_VARIABLE

EXEC sp_xml_preparedocument @docHandle OUTPUT, @xmlDocument

--Create Temporay table
CREATE TABLE #I_BL
(	Line_Num int IDENTITY(1,1) NOT NULL,
	EqpPlanId int,
	External_Backlog_Id varchar(1000) COLLATE DATABASE_DEFAULT ,
	Model  varchar(1000) COLLATE DATABASE_DEFAULT ,
	Serial_Number varchar(1000) COLLATE DATABASE_DEFAULT ,
	Equipment_Plan varchar(1000) COLLATE DATABASE_DEFAULT ,
	Registration_Counter varchar(1000) COLLATE DATABASE_DEFAULT ,
	Task_Description varchar(1000) COLLATE DATABASE_DEFAULT ,
    Planning_Notes varchar(8000) COLLATE DATABASE_DEFAULT ,
    Customer_Ref varchar(1000) COLLATE DATABASE_DEFAULT ,
    Component_Code varchar(1000) COLLATE DATABASE_DEFAULT ,
    Modifier_Code varchar(1000) COLLATE DATABASE_DEFAULT ,
    Task_Type varchar(1000) COLLATE DATABASE_DEFAULT ,
    Task_Counter varchar(1000) COLLATE DATABASE_DEFAULT ,
    Occurrence_Type varchar(1000) COLLATE DATABASE_DEFAULT ,
    Job_Code varchar(1000) COLLATE DATABASE_DEFAULT ,
    Source varchar(1000) COLLATE DATABASE_DEFAULT ,
    Raised_By_Employee_Number varchar(1000) COLLATE DATABASE_DEFAULT ,
    Notified_Date varchar(1000) COLLATE DATABASE_DEFAULT ,
    Priority varchar(1000) COLLATE DATABASE_DEFAULT ,
    Perform_At varchar(1000) COLLATE DATABASE_DEFAULT ,
    Performed_By_Date varchar(1000) COLLATE DATABASE_DEFAULT ,
    Authorised  varchar(1000) COLLATE DATABASE_DEFAULT ,
    Parts_Required varchar(1000) COLLATE DATABASE_DEFAULT ,
    Parts_Ordered varchar(1000) COLLATE DATABASE_DEFAULT ,
    Parts_Ready varchar(1000) COLLATE DATABASE_DEFAULT ,
    Other_Resources_Ready varchar(1000) COLLATE DATABASE_DEFAULT,
    Symptom varchar(1000) COLLATE DATABASE_DEFAULT ,
    Cause varchar(1000) COLLATE DATABASE_DEFAULT ,
    Task_Instruction varchar(1000) COLLATE DATABASE_DEFAULT ,
    Expected_Duration varchar(1000) COLLATE DATABASE_DEFAULT,
    Expected_Labour_Hours varchar(1000) COLLATE DATABASE_DEFAULT,
    Workorder_Number varchar(1000) COLLATE DATABASE_DEFAULT,
    --Added to pass to the stored procedure TASK_ADD_P
    RaisedByID int,
    ComponentCodeID int,
    ModifierID int,
    ApplicationCodeID int,
    SymptomId int,
    CauseId int, 
    JobCodeId int,  
    SourceId int,
    TaskTypeId int,
    Occurrence_Type_Id int,
    Priority_ID int,
    Task_Planned_TimeID int,
    
    PRIMARY KEY(Line_Num) 
)
	--Insert values from XML to temporary table
	INSERT INTO  #I_BL(
	External_Backlog_Id,
	Model,
	Serial_Number,
	Equipment_Plan,
	Registration_Counter,
	Task_Description,
    Planning_Notes,
    Customer_Ref,
    Component_Code,
    Modifier_Code,
    Task_Type,
    Task_Counter,
    Occurrence_Type,
    Job_Code,
    Source,
    Raised_By_Employee_Number ,
    Notified_Date,
    Priority,
    Perform_At,
    Performed_By_Date,
    Authorised,
    Parts_Required,
    Parts_Ordered,
    Parts_Ready,
    Other_Resources_Ready,
    Symptom,
    Cause,
    Task_Instruction,
    Expected_Duration,
    Expected_Labour_Hours,
    Workorder_Number 
		)
	SELECT
	NULLIF(LTRIM(RTRIM(External_Backlog_Id)),'') AS External_Backlog_Id,
	NULLIF(LTRIM(RTRIM(Model)),'') AS Model,
	NULLIF(LTRIM(RTRIM(Serial_Number)),'') AS Serial_Number,
	NULLIF(LTRIM(RTRIM(Equipment_Plan)),'') AS Equipment_Plan,
	NULLIF(LTRIM(RTRIM(Registration_Counter)),'') AS Registration_Counter,
	NULLIF(LTRIM(RTRIM(Task_Description)),'') AS Task_Description,
	NULLIF(LTRIM(RTRIM(Planning_Notes)),'') AS Planning_Notes,					
	NULLIF(LTRIM(RTRIM(Customer_Ref)),'') AS Customer_Ref,
	NULLIF(LTRIM(RTRIM(Component_Code)),'') AS Component_Code,
	NULLIF(LTRIM(RTRIM(Modifier_Code)),'') AS Modifier_Code,
	NULLIF(LTRIM(RTRIM(Task_Type)),'') AS Task_Type,
	NULLIF(LTRIM(RTRIM(Task_Counter)),'') AS Task_Counter,
	NULLIF(LTRIM(RTRIM(Occurrence_Type)),'') AS Occurrence_Type,		
	NULLIF(LTRIM(RTRIM(Job_Code)),'') AS Job_Code,	
	NULLIF(LTRIM(RTRIM(Source)),'') AS Source,	
	NULLIF(LTRIM(RTRIM(Raised_By_Employee_Number)),'') AS Raised_By_Employee_Number,	
	NULLIF(LTRIM(RTRIM(Notified_Date)),'') AS Notified_Date,	
	NULLIF(LTRIM(RTRIM(Priority)),'') AS Priority,
	NULLIF(LTRIM(RTRIM(Perform_At)),'') AS Perform_At,	
	NULLIF(LTRIM(RTRIM(Performed_By_Date)),'') AS Performed_By_Date,	
	NULLIF(LTRIM(RTRIM(Authorised)),'') AS Authorised,	
	NULLIF(LTRIM(RTRIM(Parts_Required)),'') AS Parts_Required,	
	NULLIF(LTRIM(RTRIM(Parts_Ordered)),'') AS Parts_Ordered,	
	NULLIF(LTRIM(RTRIM(Parts_Ready)),'') AS Parts_Ready,	
	NULLIF(LTRIM(RTRIM(Other_Resources_Ready)),'') AS Other_Resources_Ready,	
	NULLIF(LTRIM(RTRIM(Symptom)),'') AS Symptom,	
	NULLIF(LTRIM(RTRIM(Cause)),'') AS Cause,	
	NULLIF(LTRIM(RTRIM(Task_Instruction)),'') AS Task_Instruction,	
	NULLIF(LTRIM(RTRIM(Expected_Duration)),'') AS Expected_Duration,	
	NULLIF(LTRIM(RTRIM(Expected_Labour_Hours)),'') AS Expected_Labour_Hours,	
    NULLIF(LTRIM(RTRIM(Workorder_Number)),'') AS Workorder_Number    
	FROM OPENXML(@docHandle, N'/BACKLOGs/BACKLOG', 2) WITH #I_BL
	
SELECT @Count1=COUNT(*) FROM #I_BL

--Create table for error messages records	
CREATE TABLE #z_Message(MessageId int IDENTITY(1,1),Line_No int,
ErrorDescription varchar(5000) COLLATE DATABASE_DEFAULT,
EqpPlanId int,ProjectId int,ErrorType int,ImportRecord VARCHAR(MAX)
PRIMARY KEY(MessageId))

--ignore existing record with External_Backlog_Id
IF EXISTS(SELECT * FROM #I_BL WHERE External_Backlog_Id IN(SELECT distinct(ExternalBacklogId) FROM TASK))
BEGIN		
		DELETE FROM  #I_BL
		WHERE External_Backlog_Id IN(SELECT ExternalBacklogId FROM TASK) 
END

--Check data type
INSERT INTO #z_Message(Line_No,ErrorDescription,ErrorType,ImportRecord)
SELECT Line_Num,CASE  WHEN Model IS NULL THEN 'Missing Required Filed:Model' ELSE dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Model',20,Model,0) END +
CASE  WHEN Serial_Number IS NULL THEN 'Missing Required Filed :Serial_Number' ELSE dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Serial_Number', 50,Serial_Number,0) END +
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Equipment_Plan', 50,Equipment_Plan,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Registration_Counter', 20,Registration_Counter,0)+
CASE  WHEN Task_Description IS NULL THEN 'Missing Required Filed :Task_Description' ELSE dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Task_Description', 500,Task_Description,0) END +
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Planning_Notes', 8000,Planning_Notes,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Customer_Ref', 100,Customer_Ref,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Component_Code', 10,Component_Code,0) +
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Modifier_Code', 50,Modifier_Code,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Task_Type', 10,Task_Type,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Task_Counter', 100,Task_Counter,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Occurrence_Type', 10,Occurrence_Type,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Job_Code', 10,Job_Code,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Source', 50,Source,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Raised_By_Employee_Number', 50,Raised_By_Employee_Number,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeDateInt,'Notified_Date', 11,Notified_Date,0)+
CASE  WHEN Priority IS NULL THEN 'Missing Required Filed :Priority' ELSE dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Priority', 1,Priority,0) END +
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Perform_At', 50,Perform_At,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeDateInt,'Performed_By_Date', 11,Performed_By_Date,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeBit,'Authorised', 1,Authorised,0)  +
dbo.CHECK_IMPORT_DATA_F(@TypeBit,'Parts_Required', 1,Parts_Required,0)  +
dbo.CHECK_IMPORT_DATA_F(@TypeBit,'Parts_Ordered', 1,Parts_Ordered,0)  +
dbo.CHECK_IMPORT_DATA_F(@TypeBit,'Other_Resources_Ready', 1,Other_Resources_Ready,0)  +
dbo.CHECK_IMPORT_DATA_F(@TypeBit,'Parts_Ready', 1,Parts_Ready,0)  +
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Symptom', 100,Symptom,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Cause', 150,Cause,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Task_Instruction',8000,Task_Instruction,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeFloat,'Expected_Duration', 0,Expected_Duration,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeFloat,'Expected_Labour_Hours', 0,Expected_Labour_Hours,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Workorder_Number', 50,Workorder_Number,0)   as ErrorDescription ,
@ErrParsing AS ErrorType,
CASE WHEN @InterfaceSource = 0 THEN '' ELSE (SELECT External_Backlog_Id,Model,Serial_Number,Equipment_Plan,Registration_Counter,Task_Description,Planning_Notes,Customer_Ref,Component_Code, Modifier_Code, Task_Type, Task_Counter, Occurrence_Type,Job_Code, Source,Raised_By_Employee_Number , Notified_Date, Priority, Perform_At, Performed_By_Date, Authorised,Parts_Required,Parts_Ordered,Parts_Ready,Other_Resources_Ready,Symptom, Cause, Task_Instruction, Expected_Duration, Expected_Labour_Hours, Workorder_Number  FROM  #I_BL TEMPBACKLOG WHERE TEMPBACKLOG.Line_Num = #I_BL.Line_Num FOR XML PATH('BACKLOG'),ROOT('BACKLOGs')) END
  AS ImportRecord

FROM
#I_BL


--Delete lines without any error message	
DELETE #z_Message WHERE ErrorDescription=''	


----Delete records having some data type errors
IF EXISTS(SELECT Line_No FROM #z_Message)
BEGIN
	DELETE #I_BL WHERE Line_Num IN(SELECT Line_No FROM #z_Message)
END

IF NOT EXISTS(SELECT Line_Num FROM #I_BL) GOTO FINISH

/*Defaults*/  
SELECT @RepairCodeD=Repair_Code_ID FROM REPAIR_CODE WHERE Default_Record = 1  
SELECT @SymptomD=Symptom_ID FROM SYMPTOM WHERE Default_Record = 1  
SELECT @CauseD=Cause_ID FROM CAUSE WHERE Default_Record = 1  
SELECT @SourceD= Source_Id FROM SOURCE where Default_Record = 1  
SELECT @OccurrenceTypeD=OccurrenceTypeId FROM tblOccurrenceTypes WHERE Default_Record=1 
SELECT @JobCodeD=JobCodeID from tblJobCodes WHERE Default_Record=1
SELECT @ModifierD=ModifierID FROM tblModifierCodes WHERE Default_Record=1
SELECT @ApplicationCodeD=ApplicationCodeID from tblApplicationCodes WHERE Default_Record=1
SELECT @Occurrence_Type_D=OccurrenceTypeId from tblOccurrenceTypes WHERE Default_Record=1
SELECT @TaskTypeD=TaskTypeID FROM tblTaskTypes WHERE Default_Record=1
SELECT @ComponentCodeD=ComponentCodeID FROM tblComponentCodes WHERE Default_Record=1
SELECT @Task_Planned_TimeD=Task_Planned_Time_ID from TASK_PLANNED_TIME where Default_Record=1

  	   
----Update IDs corresponding to given Codes
	UPDATE B 
	SET 
		--Required fields		
		B.Priority_ID=PR.Priority_ID,		
		--optional fields
		B.RaisedByID = CASE WHEN Raised_By_Employee_Number IS NULL THEN NULL ELSE e.Employee_ID END,	
		B.ComponentCodeID = CASE WHEN Component_Code IS NULL  THEN @ComponentCodeD ELSE CC.ComponentCodeID END,
		B.TaskTypeId = CASE WHEN Task_Type IS NULL  THEN @TaskTypeD ELSE TT.TaskTypeID END,
		B.ModifierID = CASE WHEN Modifier_Code IS NULL  THEN @ModifierD ELSE MC.ModifierID END,
		B.JobCodeId = CASE WHEN Job_Code IS NULL THEN @JobCodeD  ELSE JC.JobCodeID END,
		B.SourceId = CASE WHEN Source IS NULL THEN @SourceD ELSE SR.Source_ID END,
		B.SymptomId = CASE When Symptom IS NULL THEN @SymptomD ELSE S.Symptom_ID	END ,
		B.CauseId = CASE When Cause IS NULL THEN @CauseD ELSE C.Cause_ID	END	,
		B.ApplicationCodeID = CASE When Task_Counter IS NULL THEN @ApplicationCodeD ELSE AC.ApplicationCodeID	END ,
		B.Occurrence_Type_Id = CASE When Occurrence_Type IS NULL THEN @Occurrence_Type_D ELSE OC.OccurrenceTypeId	END,
		B.Authorised = CASE When Authorised IS NULL then 0 ELSE Authorised END,
		B.Parts_Required = CASE WHEN Parts_Required IS NULL THEN 0 ELSE Parts_Required END,
		B.Parts_Ordered = CASE WHEN Parts_Ordered IS NULL  THEN 0 ELSE Parts_Ordered END,
		B.Parts_Ready = CASE WHEN B.Parts_Ready IS NULL THEN 0 ELSE Parts_Ready END,
		B.Other_Resources_Ready = CASE WHEN Other_Resources_Ready IS NULL THEN 0 ELSE Parts_Ordered END,
		B.Task_Planned_TimeID =CASE WHEN Perform_At IS NULL THEN @Task_Planned_TimeD ELSE TP.Task_Planned_Time_ID END,
		B.Expected_Duration=CASE WHEN Expected_Duration IS NOT NULL THEN Expected_Duration ELSE 0 END,
		B.Expected_Labour_Hours=CASE WHEN Expected_Labour_Hours IS NOT NULL THEN Expected_Labour_Hours ELSE 0 END
	FROM #I_BL B
	LEFT JOIN
	EMPLOYEE e 
	ON e.EmployeeNumber=B.Raised_By_Employee_Number
	LEFT JOIN
	tblComponentCodes CC
	ON  B.Component_Code=CC.Code
	LEFT JOIN 
	tblApplicationCodes AC	
	ON B.Task_Counter=AC.Code
	LEFT JOIN tblTaskTypes TT
	ON B.Task_Type=TT.Code
	LEFT JOIN
	SYMPTOM S
	ON B.Symptom=S.Description
	LEFT JOIN
	CAUSE C
	ON C.Description=B.Cause
	LEFT JOIN
	SOURCE SR
	ON 
	SR.Description=B.Source
	LEFT JOIN
	tblJobCodes JC
	ON  JC.Code=B.Job_Code
	LEFT JOIN
	tblModifierCodes MC
	ON MC.Code = B.Modifier_Code
	LEFT JOIN 
	tblOccurrenceTypes OC
	ON OC.OccurrenceType=B.Occurrence_Type
	LEFT JOIN 
	PRIORITY PR
	ON PR.Short_Description=B.Priority
	LEFT JOIN TASK_PLANNED_TIME TP
	ON TP.Description=B.Perform_At
	
----Delete records for which code does not exist in database
IF EXISTS(
	SELECT * FROM #I_BL 
		WHERE  Priority_ID IS NULL OR (Raised_By_Employee_Number IS NOT NULL AND RaisedByID IS NULL) OR (Task_Type IS NOT NULL AND TaskTypeId IS NULL) OR (Component_Code IS NOT NULL AND ComponentCodeID IS NULL) OR (Modifier_Code IS NOT NULL AND ModifierID  IS NULL)
		OR (Job_Code IS NOT NULL AND JobCodeId IS NULL) OR (SOURCE IS NOT NULL AND SourceId IS NULL) OR (Symptom IS NOT NULL AND SymptomId IS NULL) OR (Cause IS NOT NULL AND CauseId IS NULL) OR 
		(Task_Counter IS NOT NULL AND ApplicationCodeID IS NULL) OR (Occurrence_Type IS NOT NULL AND Occurrence_Type_Id IS NULL) OR (Perform_At IS NOT NULL AND Task_Planned_TimeID IS NULL)
		)
BEGIN
  INSERT INTO #z_Message (Line_No,ErrorDescription,ErrorType,ImportRecord)
		SELECT Line_Num,
		CASE WHEN RaisedByID IS NULL THEN 'Raised_By_Employee_Number , ' ELSE '' END +
		CASE WHEN ComponentCodeID IS NULL THEN 'Component_Code, ' ELSE '' END +
		CASE WHEN TaskTypeId IS NULL THEN 'Task_Type, ' ELSE '' END +
		CASE WHEN ModifierID IS NULL THEN 'Modifier_Code, ' ELSE '' END +
		CASE WHEN SymptomId IS NULL THEN 'Symptom, '  ELSE ''END +
		CASE WHEN JobCodeId IS NULL THEN 'Job_Code, ' ELSE '' END +
		CASE WHEN CauseId IS NULL THEN 'Cause, '  ELSE '' END +
		CASE WHEN ApplicationCodeID IS NULL THEN 'Task_Counter, '  ELSE '' END +
		CASE WHEN Occurrence_Type_Id IS NULL THEN 'Occurrence_Type, '  ELSE '' END +
		CASE WHEN Priority_ID IS NULL THEN 'Priority, '  ELSE '' END +
		CASE WHEN Task_Planned_TimeID IS NULL THEN 'Perform_At, '  ELSE '' END +
		CASE WHEN SourceId IS NULL THEN 'Source'  ELSE ''  END +' does not exist in database' as ErrorDescription,@ErrSystemConfiguration ,CASE WHEN @InterfaceSource = 0 THEN '' ELSE (SELECT External_Backlog_Id,Model,Serial_Number,Equipment_Plan,Registration_Counter,Task_Description,Planning_Notes,Customer_Ref,Component_Code, Modifier_Code, Task_Type, Task_Counter, Occurrence_Type,Job_Code, Source,Raised_By_Employee_Number , Notified_Date, Priority, Perform_At, Performed_By_Date, Authorised,Parts_Required,Parts_Ordered,Parts_Ready,Other_Resources_Ready,Symptom, Cause, Task_Instruction, Expected_Duration, Expected_Labour_Hours, Workorder_Number  FROM  #I_BL TEMPBACKLOG WHERE TEMPBACKLOG.Line_Num = #I_BL.Line_Num FOR XML PATH('BACKLOG'),ROOT('BACKLOGs')) END
		AS ImportRecord FROM #I_BL 
		WHERE Priority_ID IS NULL OR (Raised_By_Employee_Number IS NOT NULL AND RaisedByID IS NULL) OR (Task_Type IS NOT NULL AND TaskTypeId IS NULL) OR (Component_Code IS NOT NULL AND ComponentCodeID IS NULL) OR (Modifier_Code IS NOT NULL AND ModifierID  IS NULL)
		OR (Job_Code IS NOT NULL AND JobCodeId IS NULL) OR (SOURCE IS NOT NULL AND SourceId IS NULL) OR (Symptom IS NOT NULL AND SymptomId IS NULL) OR (Cause IS NOT NULL AND CauseId IS NULL)OR
		(Task_Counter IS NOT NULL AND ApplicationCodeID IS NULL) OR (Occurrence_Type IS NOT NULL AND Occurrence_Type_Id IS NULL) OR (Perform_At IS NOT NULL AND Task_Planned_TimeID IS NULL)
		
	DELETE FROM #I_BL WHERE Line_Num in(SELECT Line_No FROM #z_Message)
END

	
--Determine EqpPlanId from combination of Model+Serial+Registration counter
	UPDATE #I_BL 
	SET EqpPlanId =EQP.EqpPlanId
	FROM #I_BL
	INNER JOIN		
	   (SELECT EP.EqpPlanId
		,EP.Equipment_Type_Id, CASE @ModelSerialSeparator 
		WHEN '' THEN E.SerialNumber ELSE REPLACE(E.SerialNumber,M.Model+@ModelSerialSeparator,'') END AS SerialNumber,Reg_Counter,M.Model		
		FROM
		tblEqpPlans EP
		INNER JOIN
		tblEquipment E
		ON EP.EquipmentId=E.EquipmentId
		INNER JOIN
		tblModels M 
		ON E.ModelId=M.ModelId /*Real*/) EQP
		ON		
		EQP.SerialNumber=#I_BL.Serial_Number AND 
	    EQP.Reg_Counter=#I_BL.Registration_Counter AND EQP.Model=#I_BL.Model AND EQP.Equipment_Type_Id=1		
		   
--If Registration counter did not match
		If EXISTS(SELECT EqpPlanId FROM #I_BL WHERE EqpPlanId IS NULL)
		 BEGIN
			UPDATE B SET
			B.EqpPlanId =EQP.EqpPlanId
			FROM	
			#I_BL B		
				INNER JOIN
			(SELECT EP.EqpPlanId,EP.EqpPlan,
			CASE @ModelSerialSeparator 
			WHEN '' THEN E.SerialNumber ELSE REPLACE(E.SerialNumber,M.Model+@ModelSerialSeparator,'') END AS SerialNumber,
			M.Model
			FROM
			tblEqpPlans EP
				INNER JOIN
			tblEquipment E
				ON EP.EquipmentId=E.EquipmentId
				INNER JOIN
			tblModels M 
				ON E.ModelId=M.ModelId
			WHERE EP.Equipment_Type_Id=1/*Real equipment*/ AND EP.Eqp_Terminated=0) EQP
				ON B.Model=EQP.Model AND B.Serial_Number=EQP.SerialNumber
			WHERE B.EqpPlanId IS NULL 			
		END 
		

--If there is no EqpPlanId for the given combination of Model+Serial+Registration counter
IF EXISTS(
		SELECT * FROM #I_BL 
		WHERE  EqpPlanId IS NULL 
		)
BEGIN
  INSERT INTO #z_Message (Line_No,ErrorDescription,ErrorType,ImportRecord)
		SELECT Line_Num,'EqpPlanId does not exist for given combination of Model+Serial+Registration counter',@ErrSystemConfiguration ,CASE WHEN @InterfaceSource = 0 THEN '' ELSE (SELECT External_Backlog_Id,Model,Serial_Number,Equipment_Plan,Registration_Counter,Task_Description,Planning_Notes,Customer_Ref,Component_Code, Modifier_Code, Task_Type, Task_Counter, Occurrence_Type,Job_Code, Source,Raised_By_Employee_Number , Notified_Date, Priority, Perform_At, Performed_By_Date, Authorised,Parts_Required,Parts_Ordered,Parts_Ready,Other_Resources_Ready,Symptom, Cause, Task_Instruction, Expected_Duration, Expected_Labour_Hours, Workorder_Number  FROM  #I_BL TEMPBACKLOG WHERE TEMPBACKLOG.Line_Num = #I_BL.Line_Num FOR XML PATH('BACKLOG'),ROOT('BACKLOGs')) END
		AS ImportRecord
		FROM #I_BL 
		WHERE  EqpPlanId IS NULL 	
		
	DELETE FROM #I_BL WHERE Line_Num in(SELECT Line_No FROM #z_Message)
END

IF NOT EXISTS(SELECT Line_Num FROM #I_BL) GOTO FINISH

--Call Stored Procedure TASK_ADD_P
SELECT @Counter=MAX(Line_Num) FROM  #I_BL

SET XACT_ABORT ON  
  
WHILE @Counter>0 
 
BEGIN
   
 SET @EqpPlanID=0
 
 SELECT 
 @External_BacklogId=BL.External_Backlog_Id,
 @Description =BL.Task_Description,
 @Planning_Notes=BL.Planning_Notes,
 @CustomerRef=BL.Customer_Ref, 
 @ComponentCodeID=BL.ComponentCodeID,
 @ModifierID=BL.ModifierID,
 @TaskTypeD=BL.TaskTypeId,
 @ApplicationCodeID=BL.ApplicationCodeID,
 @OccurrenceTypeId=BL.Occurrence_Type_Id,
 @JobCodeId=BL.JobCodeId,
 @SourceId=BL.SourceId,
 @RaisedById= BL.RaisedByID,
 @DateNotified=BL.Notified_Date,
 @PriorityId=BL.Priority_ID,
 @Task_Planned_Time_ID=BL.Task_Planned_TimeID,
 @PerformedBy=BL.Performed_By_Date, 
 @PartsRequired=BL.Parts_Required,
 @PartsOrdered=BL.Parts_Ordered,
 @PartsReady=BL.Parts_Ready, 
 @ResourceReady=BL.Other_Resources_Ready,
 @SymptomId=BL.SymptomId,
 @CauseId=BL.CauseId,
 @ExpressAddTaskInstructions=BL.Task_Instruction,
 @PlannedDuration=BL.Expected_Duration ,
 @PlannedLabourHours=BL.Expected_Labour_Hours,
 @WorkOrderID=A.WorkOrderId,
 @SiteId=S.SiteId,
 @EqpPlanID=BL.EqpPlanId, 
 @Authorised=BL.Authorised,
 @BranchId=B.BranchId,@CostBearerId=EP.Default_Cost_Bearer_ID,
 @CostCentreId=EP.Cost_Centre_ID,
 @P_EDCId=EP.Parts_Entry_Distribution_Code_Id,
 @L_EDCId=EP.Labour_Entry_Distribution_Code_Id,
 @M_EDCId=EP.Misc_Entry_Distribution_Code_Id,
 @CustomerId=EP.Customer_Id,  
 @AMTPlanningModeId=EP.Advanced_Planning 
 FROM  #I_BL BL  
 LEFT JOIN
 tblEqpPlans EP ON EP.EqpPlanId=BL.EqpPlanId
 INNER JOIN  
 tblFleets F  
 ON EP.FleetId=F.FleetId  
 INNER JOIN  
 tblSites S  
 ON F.SiteId=S.SiteId  
 INNER JOIN  
 tblBranches B  
 ON S.BranchId=B.BranchId  
 LEFT JOIN  
(SELECT Site_Id,Work_Group_Id FROM WORK_GROUP WHERE Default_Record=1) WG  
 ON S.SiteId=WG.Site_Id  
 LEFT JOIN
 (SELECT WO.WorkOrderId, WO.WorkOrderNumber,WO.EqpPlanId FROM
 tblWorkOrders WO
 LEFT JOIN
 TASK T
	ON WO.WorkOrderId=T.work_order_id
	WHERE  WO.WorkOrderId=WO.AMTParentWorkOrderId AND T.Work_Order_ID IS NULL) A
	ON BL.Workorder_Number=A.WorkOrderNumber
	AND BL.EqpPlanId=A.EqpPlanId
 WHERE Line_Num=@Counter
   
 IF @EqpPlanID>0 
  
 BEGIN  
 
  SET @Message=''  
 
  BEGIN TRANSACTION  
  EXEC TASK_ADD_P  
   @Event_ID =Null,   
   @Description =@Description,      
   @Eqp_Plan_ID =@EqpPlanID,   
   @Task_Type_ID =@TaskTypeD,   
   @Component_Code_ID =@ComponentCodeID,   
   @Modifier_ID =@ModifierID,   
   @Application_Code_ID =@ApplicationCodeID,   
   @Occurrence_Type_Id =@OccurrenceTypeId,   
   @Priority_ID =@PriorityId,   
   @Source_ID =@SourceId,   
   @Task_Status_ID =@TStatusO,   
   @Date_Notified =@DateNotified,   
   @Component_ID =Null,   
   @Symptom_ID =@SymptomId,   
   @Symptom_Notes =Null,  
   @Cause_ID =@CauseId,   
   @Cause_Notes =Null,   
   @Repair_Code_ID =@JobCodeId,   
   @Repair_Notes =NULL,  
   @Group_No=Null,   
   @Part_No=Null,   
   @EMI_Ref=Null,  
   @EMIssueId =NULL,  
   @Redo=0,   
   @Task_Planned_Time_ID=@Task_Planned_Time_ID,   
   @Customer_Ref=@CustomerRef,   
   @Employee_ID =Null,   
   @Expected_Duration =@PlannedDuration,   
   @Expected_Labor_Hours =@PlannedLabourHours,   
   @Planning_Notes =@Planning_Notes,  
   @Actual_Duration =0,   
   @Actual_Labor_Hrs =0,   
   @Primary_Cause =0,   
   @Notes =NULL,  
   @Task_Mode_ID =@GeneralMode,  
   @PartsStatusRequired =@PartsRequired,   
   @PartsStatusOrdered=@PartsOrdered,  
   @PartsStatusReady=@PartsReady,  
   @Labour_Resources_Identified=1,  
   @Location_Identified =1,  
   @Tooling_Resources_Identified=1,  
   @RaisedByID=@RaisedById,  
   @Work_Order_ID =@WorkOrderID,  
   @Strategy_Usage=Null,  
   @Strategy_QUOM_ID =Null,  
   @Strategy_Proj_Task_Opt_ID =Null,  
   @Planned_Proj_Task_Opt_ID =Null,  
   @Strategy_Date =Null,  
   @Strategy_Locked =0,  
   @Part_Description  =Null,     
   @Group_Description =Null,  
   @Event_Last_Mod_Date=Null,  
   @Create_By_User_ID =0,  
   @NewTask_ID =0,   
   @Message =@Message OUTPUT,  
   @Sort_Order =NULL,  
   @WO_Create_Date =NULL,  
   @Parts_Available_Date =NULL,  
   @Parts_Order_Details =NULL,  
   @WO_Counter =0,  
   @Work_Order_Number_External=NULL,   
   @Cost_Bearer_ID =@CostBearerID,  
   @Task_Warranty =0,  
   @Redo_Work_Order_ID =null,  
   @ViewWarranty =0,  
   @BreakDown =0,  
   @PlannedDownTime  =NULL,  
   @ActualDownTime  =NULL,  
   @PlannedOffset  =0,  
   @SiteId =@SiteId,  
   @WorkLocation= NULL,  
   @BranchId =@BranchId,  
   @CustomerId =@CustomerId,  
   @PartsCostExpenseId =NULL,  
   @LabourCostExpenseId =NULL,  
   @MiscCostExpenseId =NULL,  
   @SpecificOperationCodes  =0,  
   @WorkOrderDate = NULL,  
   @WarrantyClaimable =0,  
   @ReviewedEmployeeId  =NULL,  
   @WarrantyNotes  =NULL,  
   @WarrantyDays  =0,  
   @WarrantyUsage  =0,  
   @WarrantyDaysArchived  =0,  
   @WarrantyUsageAcrhived  =0,  
   @WarrantySupplierId  =NULL,  
   @ClaimRef = NULL,  
   @SupplierRef  =NULL,  
   @SummaryDescription = NULL,  
   @ClaimStatusId  =NULL,  
   @ClaimedByEmployeeId  =NULL,  
   @ClaimeDate  =NULL,  
   @ClaimDescription =NULL,  
   @JobPartsCost =0,  
   @JobLabourCost =0,  
   @JobMiscCost =0,  
   @ClaimedPartsCost =0,  
   @ClaimedLabourCost =0,  
   @ClaimedMiscCost  =0,  
   @RecPartsCost =0,  
   @RecLabourCost  =0,  
   @RecMiscCost  =0,  
   @SupplierContact = NULL,  
   @TaskAuthorised=@Authorised,  
   @ProjTaskId =0,  
   @ActualOffset=0,   
   @AMTPlanningModeId =@AMTPlanningModeId,  
   @opAdded =@opAdded,  
   @CreateWO =0,  
   @ReplacePrimaryTask =0,  
   @TaskAuthorisationAmount=-3,    
   @MeasurementTBL ='',  
   @ConditionMonitoringIntervention  = 0,  
   @FailedPartListPosition = '',  
   @FailedPartListGroup = '',  
   @FailedPartLifeAchieved = 0,  
   @PartSerialNoRemoved= '',  
   @PartSerialNoInstalled = '' ,  
   @LifeConfirmed  = 0,  
   @OriginalPartTypeId  = NULL,  
   @SerialNoIn = '',  
   @SerialNoOut = '',  
   @IsOverwriteLife  = 0,  
   @OverwriteLifeAchieved = NULL ,  
   @LastNotified =NULL,  
   @ResourceStatusReady =@ResourceReady,  
   @AuthorisationRequestByID= 0,  
   @External_Backlog_Id=@External_BacklogId,
   @Performed_By_Date=@PerformedBy,
   @ExpressAddTaskInstruction=@ExpressAddTaskInstructions
  
   IF ISNULL(@Message,'')<>''  
   BEGIN  
    SET @Message='Defects Import ' + ': '+@Message  
    SELECT @Message  
      
    ROLLBACK TRANSACTION  
   END   
   ELSE     
    COMMIT TRANSACTION     
   END  
     
  SET @Counter=@Counter-1     
  END  

FINISH:

SET @NoErrors=@Count1-(SELECT COUNT(*) FROM #z_Message)
SET @NoErrors=ISNULL(@NoErrors,0)

IF EXISTS(SELECT ImportFileName FROM IMPORT_ERROR WHERE ImportFileName=@ImportBatchName)
BEGIN
	DELETE IMPORT_ERROR WHERE ImportFileName=@ImportBatchName
END
	

IF EXISTS(SELECT MessageId FROM #z_Message)
BEGIN
	INSERT INTO IMPORT_ERROR(ImportFileName,Line_No,ErrorDescription,ImportErrorTypeId,LastModDate,ImportRecord,ImportSourceId)
	SELECT @ImportBatchName AS ImportFileName,CASE WHEN @InterfaceSource = 0 THEN Line_No END,ErrorDescription,
	ISNULL(ErrorType,@ErrBusinessRules) AS ImportErrorTypeId, 
	@CurrDate AS LastModDate,CONVERT(VARCHAR(MAX),ImportRecord),@InterfaceSource AS ImportSourceId
	FROM #z_Message
END	
SELECT @nRecRejected =COUNT(DISTINCT Line_No) FROM #z_Message
SELECT @nRecInserted =COUNT(DISTINCT Line_Num) FROM #I_BL 
DROP TABLE #I_BL,#z_Message

GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PROJECTED_TASK_IMPORT_P]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PROJECTED_TASK_IMPORT_P]
GO

create  PROCEDURE [dbo].[PROJECTED_TASK_IMPORT_P]
/******************************************************************************
	File: 
	Name: PROJECTED_TASK_IMPORT_P
	Desc: 1. PROJECTED_TASK_IMPORT_P

	Auth: Koushik Nagarajan
	Date: 16-June-2007
*******************************************************************************
		Change History
*******************************************************************************
	Date:		Author:		Description:
	--------	--------	----------------------------------------
	09-09-2007	KN			Updated Projected Task if the Next occ is Changed.
	11-09-2007	KN			Updated the FIRST only if it not NULL.
	17-09-2007	KN			Updated the LAST CHANGE/ FIRST Rules.
	14-may-2008	KN			DELETE Linked Cost Allocation while Deleting the Scheduling Task.
	 1-Aug-2008	VV			Changes in import for 8.2
	 5 Sep 2008	VV			If manufacturer is not found, raise error
	15 Sep 2008	KN			Populated Review Status Id while Adding a Projected Task.
	16 Sep 2008	KN			Reset Next Occ if it not a Planning Task.
	16 Sep 2008 AL			Replace SAPQUOM with Short_Desc
	23 Sep 2008	KN			Chose Corrrect Projection Type while selecting the Scheduling Task.
	23 Oct 2008	VV			Took out the check for strategy task in MESSAGE table.
							CR7575 Pricing date must be less or equal current date
	 3 Nov 2008	VV			CR7646 labour share shall be set to 100 if null
							CR7648 Default planning lead time is not being used where this is not supplied (or is ZERO)
							CR7649 Planning_Task flag
	4 Nov 2008	VV/KN		Set planning lead days to 0 if planning flag is set to 0
	7-Nov-2008	VV			CR7687 Relink to scheduling tasks . Also fixed work group.
   13-Nov-2008	VV			Fixed duplicated records
   17-Nov-2008	VV			Do not show component code or equipment missing errors if task is inactive
							Changed Query which identifies projected task groups
	19-Nov-2008	VV			Put Distinct into scheduling task add
	21-Nov-2008	VV			CR7741 Changed equipment_No from 12 to 20
	24-Nov-2008	VV			Added Update_Scheduling_Task_Only
	28-Nov-2008	VV			CR7749 If dates are 0 set them to NULL
							Fixed Last_Occ_Date
	 5-Dec-2008	VV			CR7772 Delete scheduling task details only for the inactive tasks
	 8-Dec-2008	VV			CR7775 Do not set last change usage to 0 if it is empty
	12 Jan 09	V Vasylyeva	CR7825 Repair Reserve task is not deleted if parent task performance strategy is set 
							to blank.
	14-Apr-09	V Vasylyeva	CR7985 Increased Task_Counter from 10 to 50 char
	21-Apr-09	V Vasylyeva	CR8010 If performance strategy is not supplied do not reset the performance strategy and 
							do not delete the task.
	25-May-09	V Vasylyeva	CR8131: Increase UOM to 50 char
	 2-Jul-09	V Vasylyeva	CR8302: added EXEC LABOUR_RATES_MISSING_ADD_P
	20 Aug 2009	V Vasylyeva	CR8375	Increasing Modifier Code to 50 char
	28 Sep 2009	V Vasylyeva	CR8400: Part number shall be 50 char
	26 Nov 2009	AL			CR8457: removed End_Use_Code and AllCompCode
	 2 Jun 2010	V Vasylyeva	CR8888: Do not delete if the plant jornals are linked 
	 28-Aug-10	K Nagarajan	#288: Allow zero counter
	 5 Oct 2010	V Vasylyeva	E316 Added Tag_Id, Rating
	 11-Jan-11	K Nagarajan	Enhancement#395: Interval will no longer be a required field
  	24 Mar 11   G Dhillon   Changed the length of Task_Counter from 50 to 100 
 	07 Apr 11   G Dhillon   Changed the length of External_Identifier from 50 to 100
 							Changed the length of Equipment_No from 20 to 50
 							Changed the length of TAG_ID from 50 to 100
    10 May 11   G Dhillon   Changed the where condition ISNULL(IPT.ProjTaskId,0) to have ISNULL for external identifier check 
    12 May 11	G Dhillon	#Enh:527 to choose external identifier to update strategy task
    10 May 11	V Vasylyeva	#1837: Errors in import
    28 Jul 11   G Dhillon   #2234-Fixed the issue of NULL UOM
    01 Aug 11   G Dhillon   #E610-Write whole record for Connector and just description for File Import
    05 Aug 11   G Dhillon	#E610 Added condition of filename while adding error record into import error
	 5 Sep 11	V Vasylyeva	#2370: Where the last Performed in the interface file> last performed in AMT 
							then update last scheduled to the value from the interface file.
							Note1: On creation then just create with the data that has been provided 
							(ie create with whatever last scheduled has been provided).
							Note 2:  Last Scheduled/performed could be either USAGE or DATE.  
							Always base this off the DATE.
	24 Sep 11   GD          fixed 2481 changed the data type of Import Record to varchar(MAX)
	17 Oct 11   GD          Fixed 2634
*******************************************************************************/
	/* Param List */
	@ImportFileName varchar(1000),
	@NoErrors int=0 OUTPUT,
	@EqpProjIdTo int=0,
	@Esc_Desc_Prices bit=0,
	@LeavePricingDate bit=0,
	@NewPricingDate datetime=NULL,
	@InterfaceSource int=0
	
AS


SET NOCOUNT ON
DECLARE @ModelSerialSeparator varchar(5)
DECLARE @TodaysDate datetime
DECLARE @ErrorTypeBusRules int
DECLARE @ErrorTypeParsing int
DECLARE @PlanningDaysDefault INT
DECLARE @ToleranceHours INT
DECLARE @ApplySpecialNextOccToIgnoreRules BIT
DECLARE @PrimaryCurrency int
DECLARE @TypeCur int
DECLARE @TypeBud int
DECLARE @TypeAlt int
DECLARE @TypeArc int
DECLARE @TypeCen int
DECLARE @TypeEC int
DECLARE @TypeED int
DECLARE @SubSystemId INT
DECLARE @DefCB int
DECLARE @DefJobCodeId int
DECLARE @DefOccTypeId int
DECLARE @DefGCC int
DECLARE @DefPartTypeId int
DECLARE @DefGPT int
DECLARE @LastPerfUOM int
DECLARE @LastPerfDate int
DECLARE @UseSchedulingSystemLastOcc bit
DECLARE @ProjTaskId varchar(max)
DECLARE @EscCosts bit
--#Enh 527
DECLARE @UpdateStrategyTaskCodes bit

DECLARE @TypeVarchar int
DECLARE @TypeInt int
DECLARE @TypeFloat int
DECLARE @TypeBit int
DECLARE	@TypeDateInt int


SET @TypeVarchar =1
SET @TypeInt =2
SET @TypeFloat =3
SET @TypeBit =4
SET	@TypeDateInt =5

SET @ErrorTypeParsing=1

SET @EscCosts=0

SET @LastPerfUOM =1
SET @LastPerfDate=3

SET @TypeCur =1
SET @TypeBud =2
SET @TypeAlt =3
SET @TypeArc =4
SET @TypeCen =5
SET @TypeEC =6
SET @TypeED =7

--This is used by copy in projection
SET @EqpProjIdTo=ISNULL(@EqpProjIdTo,0)

IF @Esc_Desc_Prices=1 AND @NewPricingDate IS NOT NULL 
BEGIN
	SET @EscCosts=1
END

DECLARE @LineBreak VARCHAR(2)
SET @LineBreak = CHAR(13) + CHAR(10)

SET @ErrorTypeBusRules=3
SET @NoErrors=0

SET @TodaysDate=GETDATE()

SELECT @ModelSerialSeparator = ISNULL(ModelSerialSeparator,''),
@ApplySpecialNextOccToIgnoreRules = ApplySpecialNextOccToIgnoreRules,
@UseSchedulingSystemLastOcc=UseSchedulingSystemLastOcc
FROM AMT_VARIABLE

SELECT @PlanningDaysDefault = Varchar_Value FROM AMT_TYPED_VARIABLE WHERE Value_Name = 'PlanningDaysDefault'
SELECT @ToleranceHours = Varchar_Value FROM AMT_TYPED_VARIABLE WHERE Value_Name = 'DefaultToleranceHours'

SELECT @PrimaryCurrency=CurrencyId FROM tblCurrencies WHERE PrimaryCurr<>0
SELECT @DefCB=CostBearerId FROM tblCostBearers WHERE Default_Value=1
SELECT @DefGCC=AMT_Component_Code_Id FROM GLOBAL_COMPONENT_CODES WHERE Default_Record<>0
SELECT @DefOccTypeId=OccurrenceTypeId FROM tblOccurrenceTypes WHERE Default_Record<>0
SELECT @DefJobCodeId=JobCodeID FROM tblJobCodes WHERE Default_Record<>0
SELECT @DefPartTypeId=PartTypeId FROM tblPartTypes WHERE PartTypeDefault<>0
SELECT @UpdateStrategyTaskCodes= Varchar_Value FROM AMT_TYPED_VARIABLE where Value_Name='ImportStrategyTaskUseExternalIdentifier'

--Parse the data

CREATE TABLE #z_Message(MessageId int IDENTITY(1,1),Line_No int,ErrorDescription varchar(3000) COLLATE DATABASE_DEFAULT,ImportRecord VARCHAR(MAX)
PRIMARY KEY (MessageId))

INSERT INTO #z_Message(Line_No,ErrorDescription,ImportRecord)
SELECT Line_No, dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Equipment_No', /*VV 21-Nov-08*/50,Equipment_No,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Model', 20,Model,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Serial_No', 50,Serial_No,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Registration_Counter', 20,Registration_Counter,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Equip_Name', 50,Equip_Name,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeInt,'Projection_Type', 0,Projection_Type,1)+
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Projection_Name', 50,Projection_Name,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Description', 100,Task_Description,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeBit,'Global_Code', 0,Global_Code,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Component_Code', 10,Component_Code,0)+
/*VV CR8375*/
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Modifier_Code', 50,Modifier_Code,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Task_Type', 10,Task_Type,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Task_Counter', /*GD 24-Mar-2011 50*/100,Task_Counter,1)+
dbo.CHECK_IMPORT_DATA_F(@TypeBit,'Inactive_Task', 0,Inactive_Task,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeBit,'Unassigned_Task', 0,Unassigned_Task,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeBit,'Planning_Task', 0,Planning_Task,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeInt,'Planning_Lead_Days', 0,Planning_Lead_Days,1)+
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Operational_Criticality', 50,Operational_Criticality,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Task_Manufacturer_Code', 20,Task_Manufacturer_Code,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Part_SOS', 10,Part_SOS,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Primary_Part_Number', 50,Primary_Part_Number,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Group_Number', 50,Group_Number,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Rotable_Part_Number', 20,Rotable_Part_Number,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeFloat,'Warranty_Days', 0,Warranty_Days,1)+
dbo.CHECK_IMPORT_DATA_F(@TypeFloat,'Warranty_Usage', 0,Warranty_Usage,1)+
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'UOM', 50,UOM,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeBit,'Schedule_On_Last_Scheduled', 0,Schedule_On_Last_Scheduled,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeFloat,'First', 0,[First],1)+
dbo.CHECK_IMPORT_DATA_F(@TypeFloat,'Interval', 0,Interval,1)+
dbo.CHECK_IMPORT_DATA_F(@TypeFloat,'Final', 0,Final,1)+
dbo.CHECK_IMPORT_DATA_F(@TypeFloat,'Last_Change_Usage', 0,Last_Change_Usage,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeDateInt,'Last_Change_Date', 0,Last_Change_Date,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'External_Identifier', 100,External_Identifier,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Suppression_Group', 20,Suppression_Group,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeInt,'Suppression_Counter', 0,Suppression_Counter,1)+
dbo.CHECK_IMPORT_DATA_F(@TypeInt,'Sibling_Interval', 0,Sibling_Interval,1)+
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Dependency_Group', 20,Dependency_Group,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeInt,'Dependency_Counter', 0,Dependency_Counter,1)+
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Inspection_Logic_Task_Type', 10,Inspection_Logic_Task_Type,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeFloat,'Inspection_Logic_Offset', 0,Inspection_Logic_Offset,1)+
dbo.CHECK_IMPORT_DATA_F(@TypeInt,'Performance_Strategy', 0,Performance_Strategy,1)+
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Performance_Strategy_Reason', 200,Performance_Strategy_Reason,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Changeout_Guidelines', 1000,Changeout_Guidelines,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'ERP_Component_Code', 10,ERP_Component_Code,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'ERP_Modifier_Code', 10,ERP_Modifier_Code,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'ERP_Scheduling_Task', 50,ERP_Scheduling_Task,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Scheduling_Task', 30,Scheduling_Task,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeFloat,'Last_Occurrence', 0,Last_Occurrence,1)+
dbo.CHECK_IMPORT_DATA_F(@TypeDateInt,'Last_Occ_Date', 0,Last_Occ_Date,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeFloat,'Last_Scheduled', 0,Last_Scheduled,1)+
dbo.CHECK_IMPORT_DATA_F(@TypeDateInt,'Last_Sched_Date', 0,Last_Sched_Date,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeFloat,'Next_Occurrence', 0,Next_Occurrence,1)+
dbo.CHECK_IMPORT_DATA_F(@TypeDateInt,'Next_Occ_Date', 0,Next_Occ_Date,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Job_Code', 10,Job_Code,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Currency', 3,Currency,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Standard_Job_Reference', 500,Standard_Job_Reference,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Cost_Bearer', 10,Cost_Bearer,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Cost_Centre', 30,Cost_Centre,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Work_Group', 10,Work_Group,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Part_Type', 10,Part_Type,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Health_Safety', 50,Health_Safety,0)+
dbo.CHECK_IMPORT_DATA_F(@TypedateInt,'Pricing_Date', 0,Pricing_Date,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeFloat,'Consumable_Qty', 0,Consumable_Qty,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeFloat,'Consumable_Top_Up', 0,Consumable_Top_Up,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeFloat,'Consumable_Price', 0,Consumable_Price,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeFloat,'Parts_Sell', 0,Parts_Sell,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeFloat,'Labour_Sell', 0,Labour_Sell,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeFloat,'Misc_Sell', 0,Misc_Sell,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeBit,'Shop_Labour', 0,Shop_Labour,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeFloat,'Labour_Hours', 0,Labour_Hours,1)+
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Labour_Activity', 50,Labour_Activity,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeFloat,'Duration_Hours', 0,Duration_Hours,1)+
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Part_Expense', 10,Part_Expense,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Labour_Expense', 10,Labour_Expense,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Misc_Expense', 10,Misc_Expense,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Part_EDC', 50,Part_EDC,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Labour_EDC', 50,Labour_EDC,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Misc_EDC', 50,Misc_EDC,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeFloat,'Labour_Split', 0,Labour_Split,1)+
dbo.CHECK_IMPORT_DATA_F(@TypeFloat,'Crane_Cost', 0,Crane_Cost,1)+
dbo.CHECK_IMPORT_DATA_F(@TypeFloat,'Freight_Perc_Parts', 0,Freight_Perc_Parts,1)+
dbo.CHECK_IMPORT_DATA_F(@TypeFloat,'Avg_People_Vehicle', 0,Avg_People_Vehicle,1)+
dbo.CHECK_IMPORT_DATA_F(@TypeFloat,'Avg_Daily_Work_Hours', 0,Avg_Daily_Work_Hours,1)+
dbo.CHECK_IMPORT_DATA_F(@TypeFloat,'Avg_Travel_Hours', 0,Avg_Travel_Hours,1)+
dbo.CHECK_IMPORT_DATA_F(@TypeFloat,'Travel_Labour_Rate', 0,Travel_Labour_Rate,1)+
dbo.CHECK_IMPORT_DATA_F(@TypeFloat,'Travel_Distance', 0,Travel_Distance,1)+
dbo.CHECK_IMPORT_DATA_F(@TypeFloat,'Travel_Rate', 0,Travel_Rate,1)+
dbo.CHECK_IMPORT_DATA_F(@TypeFloat,'Misc_Cost_Per_Trip', 0,Misc_Cost_Per_Trip,1)+
/*VV 26-Nov 2008*/
dbo.CHECK_IMPORT_DATA_F(@TypeBit,'Update_Scheduling_Task_Only', 0,Update_Scheduling_Task_Only,0)+

dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'System_Source', 20,System_Source,0)+
/*VV E316*/
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Tag_Id', 100,Tag_Id,0)+
dbo.CHECK_IMPORT_DATA_F(@TypeVarchar,'Rating', 50,Rating,0) 
AS ErrorDescription,
CASE WHEN @InterfaceSource = 0 THEN '' ELSE (SELECT Model,Equipment_No,Serial_No, Registration_Counter,Equip_Name,Projection_Type,Projection_Name,Task_Description,Global_Code,Component_Code,Modifier_Code
 ,Task_Type,Task_Counter,Inactive_Task,Unassigned_Task,Planning_Task,Planning_Lead_Days,Operational_Criticality,Task_Manufacturer_Code,Part_SOS,Primary_Part_Number,Group_Number,Rotable_Part_Number,Warranty_Days,Warranty_Usage,UOM,Schedule_On_Last_Scheduled,[First] ,Interval ,Final ,Last_Change_Usage,Last_Change_Date,External_Identifier,Suppression_Group,Suppression_Counter,Sibling_Interval ,Dependency_Group ,Dependency_Counter,Inspection_Logic_Task_Type,Inspection_Logic_Offset,Performance_Strategy,Performance_Strategy_Reason,Changeout_Guidelines,ERP_Component_Code,ERP_Modifier_Code,ERP_Scheduling_Task,Scheduling_Task,Last_Occurrence,Last_Occ_Date,Last_Scheduled,Last_Sched_Date,Next_Occurrence,Next_Occ_Date,Job_Code,Currency,Standard_Job_Reference,Cost_Bearer,Cost_Centre,Work_Group,Part_Type,Health_Safety,Pricing_Date,Consumable_Qty,Consumable_Top_Up,Consumable_Price,Parts_Sell,Labour_Sell,Misc_Sell,Shop_Labour,Labour_Hours,Labour_Activity ,Duration_Hours,Part_Expense,Labour_Expense,Misc_Expense,Part_EDC,Labour_EDC ,Misc_EDC,Labour_Split ,Crane_Cost,Freight_Perc_Parts,Avg_People_Vehicle,Avg_Daily_Work_Hours,Avg_Travel_Hours,Travel_Labour_Rate,Travel_Distance,Travel_Rate,Misc_Cost_Per_Trip,Update_Scheduling_Task_Only,System_Source ,Tag_Id,Rating 
 FROM IMPORT_PROJECTION  IP WHERE IP.Line_No = IMPORT_PROJECTION.Line_No for XML PATH('I_PROJECTEDTASK'),ROOT('I_PROJECTEDTASKs')) END
  as ImportRecord

FROM IMPORT_PROJECTION WHERE Import_File_Name=@ImportFileName



--E#395
UPDATE IMPORT_PROJECTION 
SET UOM = ''
WHERE Import_File_Name=@ImportFileName AND NULLIF(Interval,'')  IS NULL

CREATE TABLE #z_I_PROJECTED_TASKS	(
		Line_No INT PRIMARY KEY,
		EqpPlanId INT ,
		EqpProjId INT ,
		ProjTaskId INT ,
		Equipment_No VARCHAR(50) COLLATE database_default /*VV 21-Nov-2008*/,
		ModelId  int,
		SerialNumber VARCHAR(50) COLLATE database_default  ,
		Reg_Counter VARCHAR(20) COLLATE database_default  ,
		Equip_Name  VARCHAR(50) COLLATE database_default ,
		Projection_Type_Id INT ,
		Projection_Name varchar(50) COLLATE database_default ,
		Task_Description varchar(100) COLLATE database_default ,
		ComponentCodeId  int ,
		ModifierId int,
		TaskTypeId int ,
		ApplicationCodeId int,
		Inactive_Task BIT ,
		Unscheduled INT ,
		Planning_Task BIT ,
		Planning_Lead_Time INT ,
		Operational_Criticality_Id int ,
		ManufacturerId int ,
		Part_SOS_Id int,
		PartId int,
		Group_Number VARCHAR(50) COLLATE database_default ,
		Rotable_Part_Id int,
		Warranty_Days FLOAT ,
		Warranty_Usage FLOAT ,
		QUOMId int,
		Schedule_On_Last_Scheduled INT ,
		[First] float  ,
		Frequency FLOAT ,
		Final float,
		Last_Change_Usage FLOAT ,
		Last_Change_Date DATETIME ,
		External_Identifier VARCHAR(100) COLLATE database_default ,
		Schedule_Type_Id int,
		Scheduling_Group_Id int,
		Scheduling_Group_Counter int,
		InspectionTaskTypeId int,
		InspectionOffset float,
		Maintenance_Strategy_Id int,
		PerformanceStrategyReason VARCHAR(200) COLLATE database_default ,
		Changeout_Guidelines VARCHAR(1000) COLLATE database_default ,
		ERP_Component_Code varchar(10) COLLATE database_default ,
		ERP_Modifier_Code varchar(10) COLLATE database_default ,
		ERP_Scheduling_Task varchar(50) COLLATE database_default ,
		SchedulingTaskId int ,
		Last_Occurrence FLOAT ,
		Last_Occ_Date DATETIME ,
		Last_Scheduled FLOAT ,
		Last_Sched_Date DATETIME ,
		Next_Occurrence FLOAT ,
		Next_Occ_Date DATETIME ,
		JobCodeId int,
		CurrencyId int,
		Standard_Job_Reference VARCHAR(500) COLLATE database_default ,
		Cost_Bearer_ID int,
		Cost_Centre_Id int,	
		Work_Group_Id int,
		PartTypeId int,
		Health_Safety_Id int,
		Pricing_Date DATETIME ,
		QtyVolume float,
		PercentTopUp float,
		UnitPrice float,
		PartsCost FLOAT ,
		LaborCost FLOAT ,
		MiscCost FLOAT ,
		Labour_Hrs_Field BIT ,
		LaborHours FLOAT ,
		Labour_Activity_Id int,
		Duration FLOAT ,
		Parts_Cost_Expense_ID int,
		Labour_Cost_Expense_ID int,
		Misc_Cost_Expense_ID int,
		Parts_EDC_ID int,
		Labour_EDC_ID int,
		Misc_EDC_ID int,
		LaborShare float,
		Crane_Cost float,
		Pct_Freight float,
		Avg_No_People float,
		Avg_Daily_Work_Hrs float,
		Avg_Travel_Hrs float,
		Travel_Recovery_Rate_L float,
		Travel_Distance float,
		Travel_Recovery_Rate_V float,
		Misc_Trip_Cost float,
		SystemSourceId int,
		Component_Code varchar(10) COLLATE DATABASE_DEFAULT,
		/*VV CR8375*/
		Modifier_Code varchar(50) COLLATE DATABASE_DEFAULT,
		Task_Type varchar(10) COLLATE DATABASE_DEFAULT,
		Task_Counter varchar(/*VV 14-Apr-2009 10*//*VV 17-Oct-2011 50*/100) COLLATE DATABASE_DEFAULT,
		Job_Code varchar(10) COLLATE DATABASE_DEFAULT,
		Scheduling_Group varchar(20) COLLATE DATABASE_DEFAULT,
		Sibling_Interval int,
		Scheduling_Group_Type int,
		SchedulingGroupSubTypeId int,
		Work_Group varchar(10) COLLATE DATABASE_DEFAULT,
		Operational_Criticality varchar(50) COLLATE DATABASE_DEFAULT,
		Labour_Activity varchar(50) COLLATE DATABASE_DEFAULT,
		Health_Safety varchar(50) COLLATE DATABASE_DEFAULT,
		Cost_Centre varchar(30) COLLATE DATABASE_DEFAULT,
		Part_Expense varchar(10) COLLATE DATABASE_DEFAULT,
		Labour_Expense varchar(10) COLLATE DATABASE_DEFAULT,
		Misc_Expense varchar(10) COLLATE DATABASE_DEFAULT,
		System_Source varchar(20) COLLATE DATABASE_DEFAULT,
		Primary_Part_Number varchar(50) COLLATE DATABASE_DEFAULT,
		Part_Type varchar(10) COLLATE DATABASE_DEFAULT,
		Eqp_Terminated bit,
		UpdateSchedulingTask bit,
		SiteId int,
		Model varchar(20) COLLATE DATABASE_DEFAULT,
		Valid bit DEFAULT 1,
		Cost_Bearer varchar(10) COLLATE DATABASE_DEFAULT,
		Currency varchar(3) COLLATE DATABASE_DEFAULT,
		PTGroupMin int,
		PTGroupMax int,
		Global_Code bit,
		Inspection_Logic_Task_Type varchar(10) COLLATE DATABASE_DEFAULT,
		Part_SOS varchar(10) COLLATE DATABASE_DEFAULT,
		UOM varchar(50) COLLATE DATABASE_DEFAULT,
		Scheduling_Task varchar(30) COLLATE DATABASE_DEFAULT,
		Consumable bit,
		RotableId int,
		Task_Header_Id int,
		NewProjTaskId int,
		UpdateTask bit,
		UpdateOpt bit,
		UpdateJob bit,
		ProjTaskOptId int,
		ProjTaskAmtId int,
		RRTask bit,
		Cost_Allocation_Id int,
		PricedJobId int,
		Task_Manufacturer varchar(20) COLLATE DATABASE_DEFAULT,
		/*VV 26 Nov 2008*/
		Update_Scheduling_Task_Only int,
		/*VV E316*/
		Tag_Id varchar(100) COLLATE DATABASE_DEFAULT,
		Rating varchar(50) COLLATE DATABASE_DEFAULT,
		PartRatingId int,
		--#Enh:527 to choose external identifier to update strategy task
		UpdateStrategyTaskCodes bit
	)

INSERT INTO #z_I_PROJECTED_TASKS
(Line_No,EqpPlanId,EqpProjId,ProjTaskId,Equipment_No,ModelId,
SerialNumber,Reg_Counter,Equip_Name,Projection_Type_Id,Projection_Name,
Task_Description,ComponentCodeId,ModifierId,TaskTypeId,ApplicationCodeId,
Inactive_Task,Unscheduled,Planning_Task,Planning_Lead_Time,Operational_Criticality_Id,
ManufacturerId,Part_SOS_Id,PartId,Group_Number,Rotable_Part_Id,Warranty_Days,
Warranty_Usage,QUOMId,Schedule_On_Last_Scheduled,[First],Frequency,Final,Last_Change_Usage,
Last_Change_Date,External_Identifier,Schedule_Type_Id,Scheduling_Group_Id,Scheduling_Group_Counter,
InspectionTaskTypeId,InspectionOffset,Maintenance_Strategy_Id, PerformanceStrategyReason,
Changeout_Guidelines,ERP_Component_Code,ERP_Modifier_Code,ERP_Scheduling_Task,SchedulingTaskId,
Last_Occurrence,Last_Occ_Date,Last_Scheduled,Last_Sched_Date,Next_Occurrence,Next_Occ_Date,
JobCodeId,CurrencyId,Standard_Job_Reference,Cost_Bearer_ID,Cost_Centre_Id,	Work_Group_Id,
PartTypeId,Health_Safety_Id,Pricing_Date,QtyVolume,PercentTopUp,UnitPrice,PartsCost,LaborCost,
MiscCost,Labour_Hrs_Field,LaborHours,Labour_Activity_Id,Duration,Parts_Cost_Expense_ID,
Labour_Cost_Expense_ID,Misc_Cost_Expense_ID,Parts_EDC_ID,Labour_EDC_ID,Misc_EDC_ID,
LaborShare,Crane_Cost,Pct_Freight,Avg_No_People,Avg_Daily_Work_Hrs,Avg_Travel_Hrs,
Travel_Recovery_Rate_L,Travel_Distance,Travel_Recovery_Rate_V,Misc_Trip_Cost,
SystemSourceId,Component_Code,Modifier_Code,Task_Type,Task_Counter,
Job_Code,Scheduling_Group,Sibling_Interval,Scheduling_Group_Type,
SchedulingGroupSubTypeId,Work_Group,Operational_Criticality,Labour_Activity,Health_Safety,
Cost_Centre,Part_Expense,Labour_Expense,Misc_Expense,System_Source,Primary_Part_Number,
Part_Type,Eqp_Terminated,Model,Cost_Bearer,Currency,Global_Code,Inspection_Logic_Task_Type,
Part_SOS,UpdateSchedulingTask,UOM,Scheduling_Task,Task_Manufacturer,
/*VV 26 Nov 2008*/Update_Scheduling_Task_Only,/*VV E316*/Tag_Id,Rating,UpdateStrategyTaskCodes)
SELECT
IP.Line_No,EQP.EqpPlanId,NULL AS EqpProjId,NULL AS ProjTaskId,NULLIF(IP.Equipment_No,'') AS Equipment_No,
M.ModelId,IP.Serial_No AS SerialNumber,IP.Registration_Counter AS Reg_Counter,
IP.Equip_Name,dbo.EXPORT_PROJECTION_TYPE_F(ISNULL(CAST(IP.Projection_Type AS int),1), 0) AS Projection_Type_Id,
IP.Projection_Name,NULLIF(IP.Task_Description,'') AS Task_Description,NULL AS ComponentCodeId,NULL AS ModifierId,
NULL AS TaskTypeId,NULL AS ApplicationCodeId,
ISNULL(NULLIF(IP.Inactive_Task,''),0) AS Inactive_Task,
ISNULL(NULLIF(IP.Unassigned_Task,''),0) AS Unscheduled,
ISNULL(NULLIF(IP.Planning_Task,''),0) AS Planning_Task,
CAST(ISNULL(/*VV 3-Nov-08*/NULLIF(IP.Planning_Lead_Days,''),0) AS int) AS Planning_Lead_Time,
NULL AS Operational_Criticality_Id,MA.ManufacturerId,
NULL AS Part_SOS_Id,NULL AS PartId,
NULLIF(IP.Group_Number,''),RP.Rotable_Part_Id,
CAST(ISNULL(NULLIF(Warranty_Days,''),0) AS float) AS Warranty_Days,
CAST(ISNULL(NULLIF(Warranty_Usage,''),0) AS float) AS Warranty_Usage,
QUOM.QUOMId,
CAST(ISNULL(NULLIF(Schedule_On_Last_Scheduled,''),0) AS bit) AS Schedule_On_Last_Scheduled,
CAST(NULLIF(IP.[First],'') AS float) AS [First],
--E#395
CAST(ISNULL(NULLIF(IP.Interval,''),99999) AS float) AS Frequency,
CAST(ISNULL(NULLIF(IP.Final,''),0) AS float) AS Final,
--VV 8-Dec-2008
--CAST(ISNULL(NULLIF(IP.Last_Change_Usage,''),0) AS float) AS Last_Change_Usage,
CAST(NULLIF(IP.Last_Change_Usage,'') AS float) AS Last_Change_Usage,
/*VV 28-Nov-2008*/
CASE 
WHEN IP.Last_Change_Date ='' THEN NULL 
WHEN CAST(IP.Last_Change_Date AS float)=0 THEN NULL
ELSE CAST(IP.Last_Change_Date AS datetime) END AS Last_Change_Date,

CASE ISNULL(NULLIF(IP.Unassigned_Task,''),0) WHEN 1 THEN NULL ELSE NULLIF(IP.External_Identifier,'') END AS External_Identifier,
CASE 
WHEN IP.Schedule_On_Last_Scheduled='1' AND ISNULL(IP.UOM,'')<>'' THEN 2
WHEN IP.Schedule_On_Last_Scheduled='1' AND ISNULL(IP.UOM,'')='' THEN 4
WHEN ISNULL(IP.UOM,'')<>'' THEN 1
WHEN ISNULL(IP.UOM,'')='' THEN 3
END AS Schedule_Type_Id,
NULL AS Scheduling_Group_Id,
CASE /*there shall be either suppression or dependency group*/
WHEN NULLIF(Suppression_Group,'') IS NOT NULL THEN CAST(NULLIF(IP.Suppression_Counter,'') AS int)
WHEN NULLIF(Dependency_Group,'') IS NOT NULL THEN CAST(NULLIF(IP.Dependency_Counter,'') AS int)
ELSE NULL END AS Scheduling_Group_Counter,
NULL AS InspectionTaskTypeId,CAST(ISNULL(NULLIF(IP.Inspection_Logic_Offset,''),0) AS float) AS InspectionOffset,
CAST(NULLIF(NULLIF(IP.Performance_Strategy,''),0) AS int) AS Maintenance_Strategy_Id, 
NULLIF(IP.Performance_Strategy_Reason,'') AS PerformanceStrategyReason,
NULLIF(IP.Changeout_Guidelines,'') AS Changeout_Guidelines,
NULLIF(IP.ERP_Component_Code,'') AS ERP_Component_Code,NULLIF(IP.ERP_Modifier_Code,'') AS ERP_Modifier_Code,
NULLIF(IP.ERP_Scheduling_Task,'') AS ERP_Scheduling_Task,
CASE ISNULL(NULLIF(IP.Unassigned_Task,''),0) WHEN 1 THEN NULL ELSE SCT.SchedulingTaskId END AS SchedulingTaskId,
CAST(NULLIF(IP.Last_Occurrence,'') AS float) AS Last_Occurrence,
/*VV 28-Nov-2008*/
CASE 
WHEN IP.Last_Occ_Date = '' THEN NULL
WHEN CAST(IP.Last_Occ_Date AS float) = 0 THEN NULL  
ELSE CAST(IP.Last_Occ_Date AS datetime) END AS Last_Occ_Date,

CAST(NULLIF(IP.Last_Scheduled,'') AS float) AS Last_Scheduled,
/*VV 28-Nov-2008*/
CASE 
WHEN IP.Last_Sched_Date = '' THEN NULL 
WHEN CAST(IP.Last_Sched_Date AS float) = 0 THEN NULL
ELSE CAST(IP.Last_Sched_Date AS datetime) END AS Last_Sched_Date,

CAST(NULLIF(IP.Next_Occurrence,'') AS float) AS Next_Occurrence,
/*VV 28-Nov-2008*/
CASE 
WHEN IP.Next_Occ_Date = '' THEN NULL 
WHEN CAST(IP.Next_Occ_Date AS float) = 0 THEN NULL
ELSE CAST(IP.Next_Occ_Date AS datetime) END AS Next_Occ_Date,

NULL AS JobCodeId,CUR.CurrencyId,NULLIF(Standard_Job_Reference,'') AS Standard_Job_Reference,
CB.CostBearerId AS Cost_Bearer_ID,NULL AS Cost_Centre_Id,NULL AS Work_Group_Id,
NULL AS PartTypeId,NULL AS Health_Safety_Id,

CASE 
WHEN IP.Pricing_Date = '' THEN @TodaysDate 
/*VV 28-Nov-2008*/
WHEN CAST(IP.Pricing_Date AS float) = 0 THEN @TodaysDate
--VV 23 oct 2008
WHEN CAST(IP.Pricing_Date AS datetime)>@TodaysDate THEN @TodaysDate
ELSE CAST(IP.Pricing_Date AS datetime) END AS Pricing_Date,		 

CAST(ISNULL(NULLIF(IP.Consumable_Qty,''),0) AS float) AS QtyVolume,
CAST(ISNULL(NULLIF(IP.Consumable_Top_Up,''),0) AS float) AS PercentTopUp,
CAST(ISNULL(NULLIF(IP.Consumable_Price,''),0) AS float) AS UnitPrice,
CAST(ISNULL(NULLIF(IP.Parts_Sell,''),0) AS float) AS PartsCost,
CAST(ISNULL(NULLIF(IP.Labour_Sell,''),0) AS float) AS LaborCost,
CAST(ISNULL(NULLIF(IP.Misc_Sell,''),0) AS float) AS MiscCost,
CASE CAST(ISNULL(NULLIF(IP.Shop_Labour,''),0) AS bit) WHEN 0 THEN 1 ELSE 0 END AS Labour_Hrs_Field,
CAST(ISNULL(NULLIF(IP.Labour_Hours,''),0) AS float) AS LaborHours,
NULL AS Labour_Activity_Id,
CAST(ISNULL(NULLIF(IP.Duration_Hours,''),0) AS float) AS Duration,
NULL AS Parts_Cost_Expense_ID,
NULL AS Labour_Cost_Expense_ID,
NULL AS Misc_Cost_Expense_ID,
PEDC.Id AS Parts_EDC_ID,
LEDC.Id AS Labour_EDC_ID,
MEDC.Id AS Misc_EDC_ID,
CAST(ISNULL(NULLIF(IP.Labour_Split,''),/*VV 3-Nov-08 Set the default labour share to 100*/100) AS float) AS LaborShare,
CAST(ISNULL(NULLIF(IP.Crane_Cost,''),0) AS float) AS Crane_Cost,
CAST(ISNULL(NULLIF(IP.Freight_Perc_Parts,''),0) AS float) AS Pct_Freight,
CAST(ISNULL(NULLIF(IP.Avg_People_Vehicle,''),0) AS float) AS Avg_No_People,
CAST(ISNULL(NULLIF(IP.Avg_Daily_Work_Hours,''),0) AS float) AS Avg_Daily_Work_Hrs,
CAST(ISNULL(NULLIF(IP.Avg_Travel_Hours,''),0) AS float) AS Avg_Travel_Hrs,
CAST(ISNULL(NULLIF(IP.Travel_Labour_Rate,''),0) AS float) AS Travel_Recovery_Rate_L,
CAST(ISNULL(NULLIF(IP.Travel_Distance,''),0) AS float) AS Travel_Distance,
CAST(ISNULL(NULLIF(IP.Travel_Rate,''),0) AS float) AS Travel_Recovery_Rate_V,
CAST(ISNULL(NULLIF(IP.Misc_Cost_Per_Trip,''),0) AS float) AS Misc_Trip_Cost,
NULL AS SystemSourceId,NULLIF(IP.Component_Code,'') AS Component_Code,
NULLIF(IP.Modifier_Code,'') AS Modifier_Code,NULLIF(IP.Task_Type,'') AS Task_Type,
NULLIF(IP.Task_Counter,'') AS Task_Counter,NULLIF(IP.Job_Code,'') AS Job_Code,
ISNULL(NULLIF(IP.Suppression_Group,''),NULLIF(IP.Dependency_Group,'')) AS Scheduling_Group,
NULLIF(IP.Sibling_Interval,'') AS Sibling_Interval,
CASE 
WHEN ISNULL(IP.Suppression_Group,'')<>'' THEN 1
WHEN ISNULL(IP.Dependency_Group,'')<>'' THEN 2
ELSE NULL END
AS Scheduling_Group_Type,
CASE 
WHEN ISNULL(IP.Suppression_Group,'')<>'' AND ISNULL(IP.Sibling_Interval,'')<>'' THEN 1
ELSE 0 END AS SchedulingGroupSubTypeId,
NULLIF(IP.Work_Group,'') AS Work_Group,
NULLIF(IP.Operational_Criticality,'') AS Operational_Criticality,
NULLIF(IP.Labour_Activity,'') AS Labour_Activity,NULLIF(IP.Health_Safety,'') AS Health_Safety,
NULLIF(IP.Cost_Centre,'') AS Cost_Centre, NULLIF(IP.Part_Expense,'') AS Part_Expense,
NULLIF(IP.Labour_Expense,'') AS Labour_Expense,NULLIF(IP.Misc_Expense,'') AS Misc_Expense,
NULLIF(IP.System_Source,'') AS System_Source,NULLIF(IP.Primary_Part_Number,'') AS Primary_Part_Number,
NULLIF(IP.Part_Type,'') AS Part_Type,EQP.Eqp_Terminated,NULLIF(IP.Model,'') AS Model,
NULLIF(IP.Cost_Bearer,'') AS Cost_Bearer,NULLIF(IP.Currency,'') AS Currency,
CAST(ISNULL(NULLIF(IP.Global_Code,''),0) AS bit) AS Global_Code,
NULLIF(Inspection_Logic_Task_Type,'') AS Inspection_Logic_Task_Type,
NULLIF(Part_SOS,'') AS Part_SOS,
CAST(SIGN(SCT.SchedulingTaskId) AS bit) AS UpdateSchedulingTask,
NULLIF(UOM,'') AS UOM,NULLIF(Scheduling_Task,'') AS Scheduling_Task,
NULLIF(Task_Manufacturer_Code,'') AS Task_Manufacturer,
/*VV 26 Nov 2008*/
ISNULL(NULLIF(IP.Update_Scheduling_Task_Only,''),0) AS Update_Scheduling_Task_Only,
/*VV E316*/NULLIF(Tag_Id,'') AS Tag_Id,
NULLIF(Rating,'') AS Rating,
0 as UpdateStrategyTaskCodes
FROM
IMPORT_PROJECTION IP
	LEFT JOIN
(SELECT EP.EqpPlanId,EP.EqpPlan,
CASE @ModelSerialSeparator 
WHEN '' THEN E.SerialNumber ELSE REPLACE(E.SerialNumber,M.Model+@ModelSerialSeparator,'') END AS SerialNumber,
M.Model,EP.Reg_Counter,EP.Eqp_Terminated
FROM
tblEqpPlans EP
	INNER JOIN
tblEquipment E
	ON EP.EquipmentId=E.EquipmentId
	INNER JOIN
tblModels M 
	ON E.ModelId=M.ModelId) EQP

	ON IP.Model=EQP.Model AND 
	(
	   (CAST(IP.Projection_Type AS int) IN(1,2,5,6/*Import Type Current,Budget,Alternate,Archived*/) AND 
		IP.Serial_No=EQP.SerialNumber AND 
		IP.Registration_Counter=EQP.Reg_Counter)
	OR
		(CAST(IP.Projection_Type AS int) IN(3,4,7/*Import Type Estimate Current,Centreline,Estimate-Draft*/) AND
		 IP.Equip_Name=EQP.EqpPlan)
	)
	LEFT JOIN
tblModels M 
	ON IP.Model=M.Model
	LEFT JOIN
tblManufacturers MA
	ON IP.Task_Manufacturer_Code=MA.Manufacturer
	LEFT JOIN
tblQUOMs QUOM
-- AL: 16/09/08
--	ON IP.UOM=QUOM.SAPQUOM
	ON IP.UOM=QUOM.Short_Desc
	LEFT JOIN
tblCurrencies CUR
	ON IP.Currency=CUR.Currency
	LEFT JOIN
tblCostBearers CB
	ON IP.Cost_Bearer=CB.WO_Code
	LEFT JOIN
ENTRY_DISTRIBUTION_CODE PEDC
	ON IP.Part_EDC=PEDC.EDC_Id
	LEFT JOIN
ENTRY_DISTRIBUTION_CODE LEDC
	ON IP.Labour_EDC=LEDC.EDC_Id
	LEFT JOIN
ENTRY_DISTRIBUTION_CODE MEDC
	ON IP.Misc_EDC=MEDC.EDC_Id
	LEFT JOIN 
SCHEDULING_TASK SCT 
	ON dbo.EXPORT_PROJECTION_TYPE_F(ISNULL(CAST(IP.Projection_Type AS int),1), 0) = 1 AND -- MOD BY KN 23092008 (IP.Projection_Type = 1 AND )
	   IP.External_Identifier = SCT.ExternalIdentifier /*AND 
	   EQP.EqpPlanId=SCT.EqpPlanId*/
	LEFT JOIN
ROTABLE_PART RP
	ON IP.Rotable_Part_Number=RP.Part_Number
WHERE IP.Import_File_Name=@ImportFileName AND Line_No NOT IN(SELECT Line_No FROM #z_Message WHERE ErrorDescription<>'')



IF EXISTS(SELECT Line_No FROM #z_Message WHERE ErrorDescription<>'')
BEGIN
	
	INSERT INTO IMPORT_ERROR(ImportFileName,Line_No,ErrorDescription,ImportErrorTypeId,LastModDate,ImportRecord,ImportSourceId)
	SELECT @ImportFileName AS ImportFileName,CASE WHEN @InterfaceSource = 0 THEN Line_No END,ErrorDescription, @ErrorTypeParsing AS ImportErrorTypeId,
	GETDate() AS LastModDate,CONVERT(VARCHAR(MAX),ImportRecord),@InterfaceSource as ImportSourceId
	FROM #z_Message WHERE ErrorDescription<>''

	DELETE IPT FROM
	#z_I_PROJECTED_TASKS IPT
		INNER JOIN
	#z_Message M
		ON IPT.Line_No=M.Line_No
	WHERE M.ErrorDescription<>''

	TRUNCATE TABLE #z_Message

	IF NOT EXISTS(SELECT * FROM #z_I_PROJECTED_TASKS)
	BEGIN
		GOTO END_IMPORT
	END
END




IF @EqpProjIdTo>0
BEGIN
	UPDATE IPT SET
	IPT.EqpPlanId =EQP.EqpPlanId ,
	IPT.EqpProjId=EQP.EqpProjId,
	IPT.ModelId  =EQP.ModelId,
	IPT.Projection_Type_Id =EQP.Projection_Type_Id ,
	IPT.Projection_Name=EQP.EqpProjName,
	IPT.SiteId=EQP.SiteId
	FROM
	#z_I_PROJECTED_TASKS IPT
		CROSS JOIN
	(SELECT EPR.EqpProjId,EPR.EqpPlanId,E.ModelId,EPR.Projection_Type_Id,
	EPR.EqpProjName,F.SiteId
	FROM
	tblEqpProjs EPR
		INNER JOIN
	tblEqpPlans EP
		ON EPR.EqpPlanId=EP.EqpPlanId
		INNER JOIN
	tblEquipment E
		ON EP.EquipmentId=E.EquipmentId
		INNER JOIN
	tblFleets F
		ON EP.FleetId=F.FleetId
	WHERE EPR.EqpProjId=@EqpProjIdTo) EQP
END


--Set equipment if registration counter did not match
If ISNULL(@EqpProjIdTo,0)=0 AND EXISTS(SELECT EqpPlanId FROM #z_I_PROJECTED_TASKS WHERE EqpPlanId IS NULL AND 
			Projection_Type_Id IN(@TypeCur,@TypeBud,@TypeAlt))
BEGIN
	UPDATE IPT SET
	IPT.EqpPlanId =EQP.EqpPlanId
	FROM
	#z_I_PROJECTED_TASKS IPT
		INNER JOIN
	(SELECT EP.EqpPlanId,EP.EqpPlan,
	CASE @ModelSerialSeparator 
	WHEN '' THEN E.SerialNumber ELSE REPLACE(E.SerialNumber,M.Model+@ModelSerialSeparator,'') END AS SerialNumber,
	M.Model
	FROM
	tblEqpPlans EP
		INNER JOIN
	tblEquipment E
		ON EP.EquipmentId=E.EquipmentId
		INNER JOIN
	tblModels M 
		ON E.ModelId=M.ModelId
	WHERE EP.Equipment_Type_Id=1/*Real equipment*/ AND EP.Eqp_Terminated=0) EQP
		ON IPT.Model=EQP.Model AND IPT.SerialNumber=EQP.SerialNumber
	WHERE IPT.EqpPlanId IS NULL AND IPT.Projection_Type_Id IN(@TypeCur,@TypeBud,@TypeAlt)
	
END



/***************************************************/
	-- ADD NEW CODES
/***************************************************/

-- Component Codes
IF EXISTS(
		SELECT IPT.Component_Code FROM 
		#z_I_PROJECTED_TASKS IPT
			LEFT JOIN 
		tblComponentCodes CC 
			ON CC.Code = IPT.Component_Code	
		WHERE IPT.Unscheduled=0 AND IPT.Inactive_Task=0 AND IPT.Global_Code=0 AND IPT.Component_Code IS NOT NULL AND CC.ComponentCodeId IS NULL
)
BEGIN

	SELECT TOP 1 @SubSystemId = SubSystemID FROM tblSubSystems WHERE Unassigned <> 0

	INSERT INTO tblComponentCodes (Code, SubSystemId, [Description], BudgetCode, LastModByUserId, LastModDate, CreateByUserId, CreateDate)
	SELECT DISTINCT IPT.Component_Code,	@SubSystemId, IPT.Component_Code, 1, 0, @TodaysDate, 0, @TodaysDate
	FROM 
	#z_I_PROJECTED_TASKS IPT
	LEFT JOIN 
	tblComponentCodes CC 
		ON CC.Code = IPT.Component_Code	
	WHERE IPT.Unscheduled=0 AND IPT.Inactive_Task=0 AND IPT.Global_Code=0 AND IPT.Component_Code IS NOT NULL AND CC.ComponentCodeId IS NULL
END

-- Modifier Codes
INSERT INTO tblModifierCodes
(Code, [Description], BudgetCode,LastModByUserId, LastModDate, CreateByUserId, CreateDate)
SELECT DISTINCT IPT.Modifier_Code,	IPT.Modifier_Code, 1, 0, @TodaysDate, 0, @TodaysDate
FROM
#z_I_PROJECTED_TASKS IPT
	LEFT JOIN tblModifierCodes MC ON MC.Code = IPT.Modifier_Code	
WHERE IPT.Inactive_Task=0 AND IPT.Modifier_Code IS NOT NULL AND MC.ModifierId IS NULL

-- Task Types
INSERT INTO tblTaskTypes
(Code, [Description], LastModByUserId, LastModDate, CreateByUserId, CreateDate)

SELECT DISTINCT IPT.Task_Type, 0, 0, @TodaysDate, 0, @TodaysDate
FROM
	#z_I_PROJECTED_TASKS IPT
	LEFT JOIN tblTaskTypes TT ON TT.Code = IPT.Task_Type	
WHERE IPT.Unscheduled=0 AND IPT.Inactive_Task=0 AND IPT.Task_Type IS NOT NULL AND TT.TaskTypeId IS NULL
UNION
SELECT DISTINCT IPT.Inspection_Logic_Task_Type, 0, 0, @TodaysDate, 0, @TodaysDate
FROM
	#z_I_PROJECTED_TASKS IPT
	LEFT JOIN tblTaskTypes TT ON TT.Code = IPT.Inspection_Logic_Task_Type	
WHERE IPT.Unscheduled=0 AND IPT.Inactive_Task=0 AND IPT.Inspection_Logic_Task_Type IS NOT NULL AND TT.TaskTypeId IS NULL

-- Task Counter
INSERT INTO tblApplicationCodes
(Code, [Description], BudgetCode, LastModByUserId, LastModDate, CreateByUserId, CreateDate)
SELECT DISTINCT IPT.Task_Counter,	IPT.Task_Counter, 1, 0, @TodaysDate, 0, @TodaysDate
FROM
	#z_I_PROJECTED_TASKS IPT
	LEFT JOIN tblApplicationCodes AC ON AC.Code = IPT.Task_Counter	
WHERE IPT.Inactive_Task=0 AND IPT.Task_Counter IS NOT NULL AND AC.ApplicationCodeId IS NULL

-- Add JobCode if it's a new one
DECLARE @GlobalJobCodeId int
SET @GlobalJobCodeId = 0
SELECT TOP 1 @GlobalJobCodeId=Global_Job_Id FROM GLOBAL_JOB_CODES WHERE Default_Record<>0
IF @GlobalJobCodeId>0
BEGIN
	INSERT tblJobCodes (Code, Description, LastModByUserId, LastModDate, CreateByUserId, CreateDate, Global_Job_Code_Id)
	SELECT DISTINCT IPT.Job_Code, IPT.Job_Code, 0, GETDATE(), 0, GETDATE(), @GlobalJobCodeId
	FROM 
	#z_I_PROJECTED_TASKS  IPT
		LEFT JOIN 
	tblJobCodes JC 
		ON JC.Code =  IPT.Job_Code
	WHERE IPT.Inactive_Task=0 AND IPT.Global_Code=0 AND IPT.Job_Code IS NOT NULL AND JC.JobCodeId IS NULL

END

--drop table z_I_PROJECTED_TASKS
--select * into z_I_PROJECTED_TASKS from #z_I_PROJECTED_TASKS
--return

-- Work Group
INSERT INTO WORK_GROUP
(Description, Site_ID, Work_Group_Code)
SELECT DISTINCT IPT.Work_Group,/*VV 7-Nov-08*/ F.SiteId, IPT.Work_Group
FROM
#z_I_PROJECTED_TASKS IPT
	INNER JOIN
tblEqpPlans EP
	ON IPT.EqpPlanId=EP.EqpPlanId
	INNER JOIN
tblFleets F
	ON EP.FleetId=F.FleetId
	LEFT JOIN 
WORK_GROUP WG 
	ON WG.Work_Group_Code = IPT.Work_Group AND WG.Site_Id = F.SiteId
WHERE  IPT.Inactive_Task=0 AND IPT.Work_Group IS NOT NULL AND WG.Work_Group_Id IS NULL

-- Opeartional Criticality
INSERT INTO OPERATIONAL_CRITICALITY(Operational_Criticality)
SELECT DISTINCT IPT.Operational_Criticality
FROM
	#z_I_PROJECTED_TASKS IPT
	LEFT JOIN OPERATIONAL_CRITICALITY OC ON OC.Operational_Criticality = IPT.Operational_Criticality
WHERE  IPT.Inactive_Task=0 AND IPT.Operational_Criticality IS NOT NULL AND OC.Operational_Criticality_Id IS NULL


-- Labour Activity
--VV CR8302
IF EXISTS(SELECT IPT.Labour_Activity FROM
	#z_I_PROJECTED_TASKS IPT
	LEFT JOIN tblLabourActivities LA ON LA.ActivityCode = IPT.Labour_Activity
WHERE  IPT.Inactive_Task=0 AND IPT.Labour_Activity IS NOT NULL AND LA.LabourActivityId IS NULL)
BEGIN
	INSERT INTO tblLabourActivities(ActivityCode, LabourActivity, LastModByUserId, LastModDate, 
	CreateByUserId, CreateDate)
	SELECT DISTINCT IPT.Labour_Activity, IPT.Labour_Activity,0,@TodaysDate,0,@TodaysDate
	FROM
	#z_I_PROJECTED_TASKS IPT
		LEFT JOIN 
	tblLabourActivities LA ON 
		LA.ActivityCode = IPT.Labour_Activity
	WHERE  IPT.Inactive_Task=0 AND IPT.Labour_Activity IS NOT NULL AND LA.LabourActivityId IS NULL

	EXEC LABOUR_RATES_MISSING_ADD_P
END

-- VV E316 Part Rating
INSERT INTO PART_RATING(PartRating)
SELECT DISTINCT IPT.Rating
FROM
#z_I_PROJECTED_TASKS IPT
	LEFT JOIN 
PART_RATING PR 
	ON IPT.Rating=PR.PartRating
WHERE  IPT.Inactive_Task=0 AND IPT.Rating IS NOT NULL AND PR.PartRatingId IS NULL

-- Health Safety
INSERT INTO HEALTH_SAFETY(Health_Safety)
SELECT DISTINCT IPT.Health_Safety
FROM
	#z_I_PROJECTED_TASKS IPT
	LEFT JOIN HEALTH_SAFETY HS ON HS.Health_Safety = IPT.Health_Safety
WHERE  IPT.Inactive_Task=0 AND IPT.Health_Safety IS NOT NULL AND HS.Health_Safety_Id IS NULL

-- Cost Centre,
INSERT INTO COST_CENTRE(Cost_Centre_Code, Cost_Centre_Desc)
SELECT DISTINCT IPT.Cost_Centre,IPT.Cost_Centre
FROM
	#z_I_PROJECTED_TASKS IPT
	LEFT JOIN COST_CENTRE CC ON CC.Cost_Centre_Code = IPT.Cost_Centre
WHERE  IPT.Inactive_Task=0 AND IPT.Cost_Centre IS NOT NULL AND CC.Cost_Centre_Id IS NULL

-- Cost Expense (P,L,M)
INSERT INTO COST_EXPENSE(Cost_Expense_Code, Cost_Expense_Desc)
SELECT DISTINCT IPT.Part_Expense,IPT.Part_Expense
FROM
	#z_I_PROJECTED_TASKS IPT
	LEFT JOIN COST_EXPENSE CE ON CE.Cost_Expense_Code = IPT.Part_Expense 
WHERE IPT.Inactive_Task=0 AND IPT.Part_Expense IS NOT NULL AND CE.Cost_Expense_Id IS NULL
UNION
SELECT DISTINCT IPT.Misc_Expense,IPT.Misc_Expense
FROM
	#z_I_PROJECTED_TASKS IPT
	LEFT JOIN COST_EXPENSE CE ON CE.Cost_Expense_Code = IPT.Misc_Expense 
WHERE IPT.Inactive_Task=0 AND IPT.Misc_Expense IS NOT NULL AND CE.Cost_Expense_Id IS NULL
UNION 
SELECT DISTINCT IPT.Labour_Expense,IPT.Labour_Expense
FROM
	#z_I_PROJECTED_TASKS IPT
	LEFT JOIN COST_EXPENSE CE ON CE.Cost_Expense_Code = IPT.Labour_Expense 
WHERE IPT.Inactive_Task=0 AND IPT.Labour_Expense IS NOT NULL AND CE.Cost_Expense_Id IS NULL


-- System Source
INSERT INTO SYSTEM_SOURCE(System_Source_Code)
SELECT DISTINCT IPT.System_Source
FROM
	#z_I_PROJECTED_TASKS IPT
	LEFT JOIN SYSTEM_SOURCE SS ON SS.System_Source_Code = IPT.System_Source 
WHERE IPT.Inactive_Task=0 AND IPT.System_Source IS NOT NULL AND SS.System_Source_Id IS NULL

-- Add Scheduling Groups 
INSERT INTO PROJ_TASK_SCHEDULING_GROUP
(Scheduling_Group, Scheduling_Group_Type, Suppression_Tolerance_Hours,SchedulingGroupSubtypeId, ExternalSource)
SELECT IPT.Scheduling_Group, IPT.Scheduling_Group_Type,
CASE IPT.Scheduling_Group_Type 
WHEN 1/*Suppression*/ THEN ISNULL(NULLIF(MAX(IPT.Sibling_Interval),0),@ToleranceHours) ELSE 0 END AS Suppression_Tolerance_Hours,
CASE WHEN MAX(IPT.Sibling_Interval) IS NULL THEN 0 ELSE 1 END AS SchedulingGroupSubtypeId, 
1 AS ExternalSource
FROM #z_I_PROJECTED_TASKS IPT
	LEFT JOIN 
PROJ_TASK_SCHEDULING_GROUP PTSG 
	ON IPT.Scheduling_Group=PTSG.Scheduling_Group 
	AND IPT.Scheduling_Group_Type=PTSG.Scheduling_Group_Type
WHERE IPT.Inactive_Task=0 AND IPT.Scheduling_Group_Type IS NOT NULL AND PTSG.Scheduling_Group_Id IS NULL
GROUP BY IPT.Scheduling_Group, IPT.Scheduling_Group_Type


SELECT @DefGPT=Global_Part_Type_Id FROM GLOBAL_PART_TYPES WHERE Default_Record=1
IF @DefGPT>0
BEGIN
	INSERT INTO tblPartTypes
	(PartType,PartTypeDesc,LastModByUserId,LastModDate,CreateByUserId,CreateDate,Global_Part_Type_Id,
	Fluid_Part_Type,PartTypeDefault)
	SELECT DISTINCT IPT.Part_Type AS PartType,IPT.Part_Type AS PartTypeDesc,
	0 AS LastModByUserId,GETDATE() AS LastModDate,0 AS CreateByUserId,GETDATE() AS CreateDate,
	@DefGPT AS Global_Part_Type_Id,0 AS Fluid_Part_Type,0 AS PartTypeDefault
	FROM 
	#z_I_PROJECTED_TASKS IPT
		LEFT JOIN 
	tblPartTypes PT
		ON IPT.Part_Type=PT.PartType
	WHERE IPT.Inactive_Task=0 AND IPT.Global_Code=0 AND IPT.Part_Type IS NOT NULL AND PT.PartType IS NULL
END

INSERT INTO SOURCE_OF_SUPPLY
(Sos_Code, Sos_Description, Last_Mod_By_User_ID, Last_Mod_Date,	Create_By_User_ID, Create_Date)
SELECT DISTINCT IPT.Part_SOS AS Sos_Code, IPT.Part_SOS AS Sos_Description, 0, GETDATE(), 0, GETDATE()
FROM 
#z_I_PROJECTED_TASKS IPT
	LEFT JOIN 
SOURCE_OF_SUPPLY SOS
	ON IPT.Part_SOS=SOS.Sos_Code
WHERE IPT.Inactive_Task=0 AND IPT.Part_SOS IS NOT NULL AND SOS.Sos_Code IS NULL


CREATE TABLE #z_tblParts(/*VV CR8400*/Part varchar(50) COLLATE DATABASE_DEFAULT,Source_Of_Supply_Id int
PRIMARY KEY(Part,Source_Of_Supply_Id))

INSERT INTO #z_tblParts(Part,Source_Of_Supply_Id)
SELECT DISTINCT IPT.Primary_Part_Number AS Part,SOS.Source_Of_Supply_Id
FROM
#z_I_PROJECTED_TASKS IPT
	INNER JOIN
SOURCE_OF_SUPPLY SOS
	ON IPT.Part_SOS=SOS.Sos_Code
	LEFT JOIN
tblParts P
	ON IPT.Primary_Part_Number=P.Part AND SOS.Source_Of_Supply_Id=P.Source_Of_Supply_Id
WHERE IPT.Inactive_Task=0 AND IPT.Primary_Part_Number IS NOT NULL AND P.Part IS NULL


IF @@ROWCOUNT>0
BEGIN
	SET XACT_ABORT ON
	BEGIN TRANSACTION

	INSERT INTO tblParts
	(Part,PartDescription,Part_Type_Id,Source_Of_Supply_Id)
	SELECT Part,Part AS PartDescription,@DefPartTypeId AS Part_Type_Id,Source_Of_Supply_Id
	FROM #z_tblParts
	
	INSERT INTO tblPartPrices
	(PartId,CurrencyId,Part_Sell,Full_Credit_Sell,Partial_Credit_Sell,Price_Group_ID,
	LastModByUserId,LastModDate,CreateByUserId,CreateDate,Part_Cost,Full_Credit_Cost,
	Partial_Credit_Cost)
	SELECT P.PartId,C.CurrencyId,0 AS Part_Sell,0 AS Full_Credit_Sell,0 AS Partial_Credit_Sell,
	PG.Price_Group_ID,	0 AS LastModByUserId,GETDATE() AS LastModDate,0 AS CreateByUserId,
	GETDATE() AS CreateDate,0 AS Part_Cost,0 AS Full_Credit_Cost,
	0 AS Partial_Credit_Cost
	FROM
	tblParts P
		INNER JOIN
	#z_tblParts Z
		ON P.Part=Z.Part AND P.Source_Of_Supply_Id=Z.Source_Of_Supply_Id
		CROSS JOIN
	tblCurrencies C
		CROSS JOIN
	PRICE_GROUP PG
	
	COMMIT TRANSACTION
END

DROP TABLE #z_tblParts

--drop table z_I_PROJECTED_TASKS
--select * into z_I_PROJECTED_TASKS from #z_I_PROJECTED_TASKS 
--return

UPDATE IPT SET
IPT.SiteId=F.SiteId,
IPT.EqpProjId = EPR.EqpProjId,
IPT.ManufacturerId= CASE 
					WHEN IPT.Task_Manufacturer IS NULL THEN ISNULL(IPT.ManufacturerId,ET.ManufacturerId)
					ELSE IPT.ManufacturerId END,
IPT.ComponentCodeId=CASE IPT.Global_Code 
					WHEN 1 THEN ISNULL(CCG.ComponentCodeId,@DefGCC)
					ELSE CC.ComponentCodeId END,
IPT.ModifierId=ISNULL(MC.ModifierId,0),
IPT.TaskTypeId=TT.TaskTypeId,
IPT.InspectionTaskTypeId=ITT.TaskTypeId,
IPT.ApplicationCodeId=ISNULL(AC.ApplicationCodeId,0),
IPT.JobCodeId=CASE IPT.Global_Code 
			  WHEN 1 THEN ISNULL(JCG.JobCodeId,@DefJobCodeId)
			  ELSE JC.JobCodeId END,
IPT.Work_Group_Id=WG.Work_Group_Id,
IPT.Operational_Criticality_Id=OC.Operational_Criticality_Id,
IPT.Labour_Activity_Id=LA.LabourActivityId,
IPT.Health_Safety_Id=HS.Health_Safety_Id,
IPT.Cost_Centre_Id=COC.Cost_Centre_Id,
IPT.Parts_Cost_Expense_ID=PCE.Cost_Expense_Id,
IPT.Labour_Cost_Expense_ID=LCE.Cost_Expense_Id,
IPT.Misc_Cost_Expense_ID=MCE.Cost_Expense_Id,
IPT.SystemSourceId=SSO.System_Source_Id,
IPT.Scheduling_Group_Id=PTSG.Scheduling_Group_Id,
IPT.Scheduling_Group_Type=PTSG.Scheduling_Group_Type,
IPT.SchedulingGroupSubtypeId=PTSG.SchedulingGroupSubtypeId,
IPT.PartTypeId=CASE IPT.Global_Code 
			  WHEN 1 THEN ISNULL(PTYG.PartTypeId,@DefPartTypeId)
			  ELSE PTY.PartTypeId END,
IPT.Part_SOS_Id=PSOS.Source_Of_Supply_Id,
IPT.PartId=P.PartId,
IPT.Last_Occurrence=ISNULL(CASE WHEN IPT.Last_Occurrence IS NULL AND IPT.Last_Occ_Date IS NOT NULL AND EPR.EqpProjId>0 THEN  dbo.GET_USAGE_FROM_DATE_NO_CHECK_TERM_F(/*VV 28-Nov-2008*/EPR.EqpProjId, IPT.QUOMId, IPT.Last_Occ_Date) ELSE IPT.Last_Occurrence END,0),
IPT.Last_Occ_Date=CASE WHEN IPT.Last_Occurrence IS NOT NULL AND IPT.Last_Occ_Date IS NULL AND EPR.EqpProjId>0 THEN  dbo.GET_DATE_FROM_USAGE_EQP_F(/*VV 28-Nov-2008*/EPR.EqpProjId, IPT.QUOMId, IPT.Last_Occurrence, 0, NULL, NULL, NULL, NULL) ELSE IPT.Last_Occ_Date END,
/*VV E316*/
IPT.PartRatingId=PAR.PartRatingId
FROM
#z_I_PROJECTED_TASKS IPT
	INNER JOIN
tblEqpPlans E
	ON IPT.EqpPlanId=E.EqpPlanId
	INNER JOIN
tblEquipment ET
	ON E.EquipmentId=ET.EquipmentId
	INNER JOIN
tblFleets F
	ON E.FleetId=F.FleetId
	LEFT JOIN
tblEqpProjs EPR 
	ON IPT.EqpPlanId=EPR.EqpPlanId AND
	   IPT.Projection_Type_Id=EPR.Projection_Type_Id AND
	   (IPT.Projection_Type_Id IN(@TypeCur,@TypeBud,@TypeCen,@TypeEC)
		OR (IPT.Projection_Type_Id IN(@TypeAlt,@TypeArc,@TypeED) AND IPT.Projection_Name=EPR.EqpProjName))
	LEFT JOIN
tblComponentCodes CC
	ON IPT.Global_Code=0 AND IPT.Component_Code=CC.Code
	LEFT JOIN 
tblTaskTypes TT 
	ON IPT.Task_Type=TT.Code 
	LEFT JOIN 
tblModifierCodes MC 
	ON IPT.Modifier_Code=MC.Code
	LEFT JOIN 
tblApplicationCodes AC 
	ON IPT.Task_Counter=AC.Code
	LEFT JOIN
OPERATIONAL_CRITICALITY OC
	ON IPT.Operational_Criticality=OC.Operational_Criticality
	LEFT JOIN
SOURCE_OF_SUPPLY PSOS
	ON IPT.Part_SOS=PSOS.Sos_Code
	LEFT JOIN
tblParts P
	ON PSOS.Source_Of_Supply_Id=P.Source_Of_Supply_Id AND IPT.Primary_Part_Number=P.Part
	LEFT JOIN
PROJ_TASK_SCHEDULING_GROUP PTSG
	ON IPT.Scheduling_Group=PTSG.Scheduling_Group AND IPT.Scheduling_Group_Type=PTSG.Scheduling_Group_Type
	LEFT JOIN 
tblTaskTypes ITT 
	ON IPT.Inspection_Logic_Task_Type=ITT.Code 
	LEFT JOIN
tblJobCodes JC
	ON IPT.Global_Code=0 AND IPT.Job_Code=JC.Code
	LEFT JOIN
tblCurrencies CUR
	ON IPT.Currency=CUR.Currency
	LEFT JOIN
COST_CENTRE COC
	ON IPT.Cost_Centre=COC.Cost_Centre_Code
	LEFT JOIN
WORK_GROUP WG
	ON IPT.Work_Group=WG.Work_Group_Code AND F.SiteId=WG.Site_Id
	LEFT JOIN
tblPartTypes PTY
	ON IPT.Global_Code=0 AND IPT.Part_Type=PTY.PartType
	LEFT JOIN
HEALTH_SAFETY HS
	ON IPT.Health_Safety=HS.Health_Safety
	LEFT JOIN
tblLabourActivities LA
	ON IPT.Labour_Activity=LA.ActivityCode
	LEFT JOIN
COST_EXPENSE PCE
	ON IPT.Part_Expense=PCE.Cost_Expense_Code
	LEFT JOIN
COST_EXPENSE LCE
	ON IPT.Labour_Expense=LCE.Cost_Expense_Code
	LEFT JOIN
COST_EXPENSE MCE
	ON IPT.Misc_Expense=MCE.Cost_Expense_Code
	LEFT JOIN
SYSTEM_SOURCE SSO
	ON IPT.System_Source=SSO.System_Source_Code
	LEFT JOIN 
GLOBAL_COMPONENT_CODES GCC 
	ON IPT.Global_Code=1 AND IPT.Component_Code=GCC.Global_Component_Code
	LEFT JOIN 
GLOBAL_COMPONENT_CODE_LINK GCCL 
	ON GCC.Global_Id=GCCL.Global_Component_Code_Id
	LEFT JOIN
tblComponentCodes CCG
	ON GCCL.AMT_Component_Code_Id=CCG.ComponentCodeID
	LEFT JOIN 
GLOBAL_PART_TYPES GPT 
	ON IPT.Global_Code=1 AND IPT.Part_Type=GPT.Global_Part_Type
	LEFT JOIN
tblPartTypes PTYG
	ON GPT.Global_Part_Type_Id=PTYG.Global_Part_Type_Id
	LEFT JOIN 
GLOBAL_JOB_CODES GJC 
	ON IPT.Global_Code=1 AND IPT.Job_Code=GJC.Global_Job_Code
	LEFT JOIN
tblJobCodes JCG
	ON GJC.Global_Job_Id=JCG.Global_Job_Code_Id
	/*VV E316*/
	LEFT JOIN
PART_RATING PAR
	ON IPT.Rating=PAR.PartRating



--E#395 - Update For an UPDATE:
--Do NOT update the frequency in AMT. 
--Do not update the UOM either if the Interval = NULL.  ie the user can set the UOM for the task in AMT and this is not updated with the interface file. 

UPDATE IPT
SET
	/*VV #1837*/
	IPT.ProjTaskId=PT.ProjTaskId,
	IPT.Frequency = CASE WHEN IPT.Frequency = 99999 AND PT.ProjTaskId IS NOT NULL THEN PT.Frequency ELSE IPT.Frequency END ,
	IPT.UOM = CASE WHEN IPT.Frequency = 99999 AND PT.ProjTaskId IS NOT NULL THEN Q.Short_Desc ELSE IPT.UOM END ,
	IPT.QuomId = CASE WHEN IPT.Frequency = 99999 AND PT.ProjTaskId IS NOT NULL THEN PT.UsageQUomId ELSE IPT.QuomId END 
FROM
#z_I_PROJECTED_TASKS IPT
	INNER JOIN
tblEqpPlans E
	ON IPT.EqpPlanId=E.EqpPlanId
	INNER JOIN
tblEqpProjs EPR
	ON IPT.EqpProjId=EPR.EqpProjId
	LEFT JOIN
tblProjTasks PT
	ON IPT.EqpProjId=PT.EqpProjId AND 
	   IPT.ComponentCodeId=PT.ComponentCodeId AND
	   IPT.ModifierId =PT.ModifierId AND
	   IPT.TaskTypeId=PT.TaskTypeId AND
	   IPT.ApplicationCodeId=PT.ApplicationCodeId
	  LEFT JOIN
tblQuoms Q ON Q.QuomId = PT.UsageQuomId
--Enhancement 527
--WHERE PT.ProjTaskId IS NOT NULL


--#Enh:527 to choose external identifier to update strategy task
If(@UpdateStrategyTaskCodes=1)
BEGIN
	UPDATE IPT
	SET
		IPT.ProjTaskId=PT.ProjTaskId,
		IPT.Frequency = CASE WHEN IPT.Frequency = 99999 AND PT.ProjTaskId IS NOT NULL THEN PT.Frequency ELSE IPT.Frequency END ,
		IPT.UOM = CASE WHEN IPT.Frequency = 99999 AND PT.ProjTaskId IS NOT NULL THEN Q.Short_Desc ELSE IPT.UOM END ,
		IPT.QuomId = CASE WHEN IPT.Frequency = 99999 AND PT.ProjTaskId IS NOT NULL THEN PT.UsageQUomId ELSE IPT.QuomId END ,
		IPT.ProjTaskOptId=PTO.ProjTaskOptId
	FROM
	#z_I_PROJECTED_TASKS IPT
	INNER JOIN
	tblEqpPlans E
	ON IPT.EqpPlanId=E.EqpPlanId
	INNER JOIN
	tblEqpProjs EPR
	ON IPT.EqpProjId=EPR.EqpProjId
	INNER JOIN
	tblProjTasks PT
	ON IPT.EqpProjId=PT.EqpProjId AND
	IPT.External_Identifier=PT.ExternalIdentifier
	LEFT JOIN
	tblQuoms Q ON Q.QuomId = PT.UsageQuomId
	LEFT JOIN
	tblProjTaskOpts PTO
	ON PT.ProjTaskId=PTO.ProjTaskId
	WHERE ISNULL(IPT.External_Identifier,'')<>''
END

UPDATE IPT SET
--Enhancement 527
--IPT.ProjTaskId=PT.ProjTaskId,
IPT.ProjTaskOptId=PTO.ProjTaskOptId,
IPT.RRTask=CASE WHEN ISNULL(PT.ParentTaskId,0)>0 THEN 1 ELSE 0 END,
IPT.First = CASE 
			WHEN IPT.Unscheduled<>0 THEN 0
			WHEN IPT.First IS NOT NULL THEN IPT.First 
			WHEN PT.First IS NOT NULL THEN PT.First -- KN 20070911 -- UPDATE FIRST IF NOT NULL
			WHEN IPT.QuomId IS NULL THEN IPT.Frequency 
			ELSE/*QUOMId>0*/
				CASE WHEN 
						(CASE	
						WHEN IPT.Last_Change_Usage IS NOT NULL THEN IPT.Last_Change_Usage
						WHEN IPT.QUOMId=PT.UsageQUOMId AND PT.Last_Change_Usage IS NOT NULL THEN PT.Last_Change_Usage
						WHEN (IPT.Last_Occurrence IS NOT NULL OR IPT.Last_Occ_Date IS NOT NULL) THEN ISNULL(IPT.Last_Occurrence,0)
						ELSE 0
						END) < ISNULL(EPSU.StartUsage,0)
					THEN
						(CASE	
						WHEN IPT.Last_Change_Usage IS NOT NULL THEN IPT.Last_Change_Usage
						WHEN IPT.QUOMId=PT.UsageQUOMId AND PT.Last_Change_Usage IS NOT NULL THEN PT.Last_Change_Usage
						WHEN (IPT.Last_Occurrence IS NOT NULL OR IPT.Last_Occ_Date IS NOT NULL) THEN ISNULL(IPT.Last_Occurrence,0)
						ELSE 0
						END)
							
					ELSE 0
				END  + IPT.Frequency
			END ,
IPT.Last_Change_Usage = CASE	WHEN
									(CASE	
										WHEN IPT.Unscheduled=1 OR IPT.Projection_Type_Id=@TypeCen OR PT.ParentTaskId>0 THEN 0
										WHEN IPT.QUOMId IS NULL THEN 0
										WHEN IPT.Last_Change_Usage IS NOT NULL THEN IPT.Last_Change_Usage 
										WHEN IPT.QUOMId=PT.UsageQUOMId AND PT.Last_Change_Usage IS NOT NULL THEN PT.Last_Change_Usage
										WHEN (IPT.Last_Occurrence IS NOT NULL OR IPT.Last_Occ_Date IS NOT NULL) THEN ISNULL(IPT.Last_Occurrence,0)
										ELSE 0
									 END)<ISNULL(EPSU.StartUsage,0)
								THEN
									(CASE	
										WHEN IPT.Unscheduled=1 OR IPT.Projection_Type_Id=@TypeCen OR PT.ParentTaskId>0 THEN 0
										WHEN IPT.QUOMId IS NULL THEN 0
										WHEN IPT.Last_Change_Usage IS NOT NULL THEN IPT.Last_Change_Usage 
										WHEN IPT.QUOMId=PT.UsageQUOMId AND PT.Last_Change_Usage IS NOT NULL THEN PT.Last_Change_Usage
										WHEN (IPT.Last_Occurrence IS NOT NULL OR IPT.Last_Occ_Date IS NOT NULL) THEN ISNULL(IPT.Last_Occurrence,0)
										ELSE 0
									 END)
								ELSE 0 END,

IPT.Last_Change_Date =  CASE WHEN
								(CASE 
									WHEN IPT.Unscheduled=1 OR IPT.Projection_Type_Id=@TypeCen OR PT.ParentTaskId>0 THEN E.StartDate
									WHEN IPT.Last_Change_Date IS NOT NULL THEN IPT.Last_Change_Date 
									WHEN PT.Last_Change_Date IS NOT NULL THEN PT.Last_Change_Date
									WHEN IPT.Last_Occurrence IS NOT NULL OR IPT.Last_Occ_Date IS NOT NULL THEN ISNULL(IPT.Last_Occ_Date,E.StartDate)
									ELSE E.StartDate 
								 END)<E.StartDate
							THEN 
								(CASE 
									WHEN IPT.Unscheduled=1 OR IPT.Projection_Type_Id=@TypeCen OR PT.ParentTaskId>0 THEN E.StartDate
									WHEN IPT.Last_Change_Date IS NOT NULL THEN IPT.Last_Change_Date 
									WHEN PT.Last_Change_Date IS NOT NULL THEN PT.Last_Change_Date
									WHEN IPT.Last_Occurrence IS NOT NULL OR IPT.Last_Occ_Date IS NOT NULL THEN ISNULL(IPT.Last_Occ_Date,E.StartDate)
									ELSE E.StartDate 
								 END)
							ELSE E.StartDate END,
IPT.Planning_Task=CASE WHEN IPT.Unscheduled=1 OR PT.ParentTaskId>0 THEN 0
					   WHEN IPT.Projection_Type_Id=@TypeCur AND /* VV 3-Nov-08 IPT.External_Identifier*/ IPT.Scheduling_Task IS NOT NULL THEN 1
				  ELSE IPT.Planning_Task END,
IPT.Planning_Lead_Time=CASE WHEN IPT.Unscheduled=1 OR PT.ParentTaskId>0 THEN 0
						    WHEN (IPT.Projection_Type_Id=@TypeCur AND /* VV 3-Nov-08 IPT.External_Identifier*/ IPT.Scheduling_Task IS NOT NULL) 
									THEN ISNULL(NULLIF(IPT.Planning_Lead_Time,0),@PlanningDaysDefault)
							WHEN IPT.Planning_Task=1 THEN ISNULL(NULLIF(IPT.Planning_Lead_Time,0),@PlanningDaysDefault)
							WHEN IPT.Planning_Task=0 THEN 0 /*VV/KN 4-Nov-2008*/
					   ELSE IPT.Planning_Lead_Time END,
IPT.Task_Description =ISNULL(IPT.Task_Description,PT.Task_Description), -- DO NOT UPDATE IF NULL FROM THE INTERFACE
/*VV E316*/
IPT.Tag_Id=ISNULL(IPT.Tag_Id,PT.TagId), -- DO NOT UPDATE IF NULL FROM THE INTERFACE
IPT.PartId=CASE WHEN IPT.Unscheduled=1 OR PT.ParentTaskId>0 THEN NULL ELSE IPT.PartId END,
IPT.Standard_Job_Reference=CASE WHEN IPT.Unscheduled=1 OR PT.ParentTaskId>0 THEN NULL ELSE IPT.Standard_Job_Reference END,
IPT.Warranty_Usage=CASE WHEN IPT.Unscheduled=1 OR PT.ParentTaskId>0 THEN 0 ELSE IPT.Warranty_Usage END,
IPT.Warranty_Days=CASE WHEN IPT.Unscheduled=1 OR PT.ParentTaskId>0 THEN 0 ELSE IPT.Warranty_Days END,
IPT.RotableId=CASE WHEN IPT.Unscheduled=1 OR PT.ParentTaskId>0 OR IPT.Projection_Type_Id<>@TypeCur THEN NULL ELSE RPM.Rotable_Part_Id END,
IPT.Consumable=CASE 
			WHEN IPT.Unscheduled=1 OR PT.ParentTaskId>0 THEN 0
			WHEN IPT.Standard_Job_Reference IS NOT NULL THEN 0
			WHEN IPT.QtyVolume<>0 OR IPT.PercentTopUp<>0 OR IPT.UnitPrice<>0 THEN 1
			ELSE 0 END,
IPT.Pricing_date=CASE WHEN @LeavePricingDate=0 AND @NewPricingDate IS NOT NULL THEN @NewPricingDate
				 WHEN IPT.Projection_Type_Id IN(@TypeBud,@TypeEC,@TypeED) THEN EPR.Pricing_Date
				 ELSE IPT.Pricing_Date END,

LaborCost=CASE @EscCosts WHEN 1 THEN ceCur.CumLaborEscalation/ceNew.CumLaborEscalation ELSE 1.00 END *IPT.LaborCost,
PartsCost=CASE	
			/* Do not escalate parts cost if consumable, just copy it across.
			We don't change unit price, qty, top up pct.*/
			WHEN (CASE 
					WHEN IPT.Unscheduled=1 OR PT.ParentTaskId>0 THEN 0
					WHEN IPT.Standard_Job_Reference IS NOT NULL THEN 0
					WHEN IPT.QtyVolume<>0 OR IPT.PercentTopUp<>0 OR IPT.UnitPrice<>0 THEN 1
					ELSE 0 END)=1 THEN 1.00
			WHEN @EscCosts =1 THEN cpeCur.CumPartsEscalation/cpeNew.CumPartsEscalation ELSE 1.00 END *IPT.PartsCost,
MiscCost=CASE @EscCosts WHEN 1 THEN ceCur.CumMiscEscalation/ceNew.CumMiscEscalation ELSE 1.00 END *IPT.MiscCost,
/*VV 21-Apr-2009*/
Maintenance_Strategy_Id=ISNULL(IPT.Maintenance_Strategy_Id,PT.Maintenance_Strategy_Id)
FROM
#z_I_PROJECTED_TASKS IPT
	INNER JOIN
tblEqpPlans E
	ON IPT.EqpPlanId=E.EqpPlanId
	INNER JOIN
tblEqpProjs EPR
	ON IPT.EqpProjId=EPR.EqpProjId
	LEFT JOIN
tblProjTasks PT
	ON IPT.ProjTaskId=PT.ProjTaskId  	   
	   /* --Enhancement 527
	   IPT.ComponentCodeId=PT.ComponentCodeId AND
	   IPT.ModifierId =PT.ModifierId AND
	   IPT.TaskTypeId=PT.TaskTypeId AND
	   IPT.ApplicationCodeId=PT.ApplicationCodeId*/
	LEFT JOIN
tblProjTaskOpts PTO
	ON PT.ProjTaskId=PTO.ProjTaskId
	LEFT JOIN 
tblEqpPlanStartUsages EPSU 
	ON IPT.EqpPlanId = EPSU.EqpPlanId AND IPT.QuomId=EPSU.StartUsageQuomId
	LEFT JOIN
ROTABLE_PART_MODEL RPM
	ON IPT.ModelId=RPM.Model_Id AND IPT.Rotable_Part_Id=RPM.Rotable_Part_Id
	LEFT JOIN 
tblCostEscalations ceCur 
	ON ceCur.EscalationDate <= IPT.Pricing_Date -- @oldTaskPricingDate
	   AND ceCur.EndDate > IPT.Pricing_Date -- @oldTaskPricingDate
	LEFT JOIN 
tblCostPartsEscalations cpeCur 
	ON ceCur.CostEscalationId =cpeCur.CostEscalationId
	AND cpeCur.ManufacturerId= IPT.ManufacturerId
	LEFT JOIN 
tblCostEscalations ceNew 
	ON ceNew.EscalationDate <= @NewPricingDate
	AND ceNew.EndDate > @NewPricingDate
	LEFT JOIN 
tblCostPartsEscalations cpeNew 
	ON ceNew.CostEscalationId =cpeNew.CostEscalationId
		AND cpeNew.ManufacturerId= IPT.ManufacturerId



--proj task import file can have multiple records for proj tasks
--Identify the groups	
UPDATE IPT SET PTGroupMin=A.PTGroupMin,PTGroupMax=A.PTGroupMax
FROM
#z_I_PROJECTED_TASKS IPT
	INNER JOIN
(SELECT EqpProjId,ComponentCodeId,ModifierId,TaskTypeId,ApplicationCodeId,
Inactive_Task,Unscheduled,Planning_Task,Planning_Lead_Time,Operational_Criticality_Id,
ManufacturerId,Part_SOS_Id,PartId,Group_Number,Rotable_Part_Id,Warranty_Days,
Warranty_Usage,QUOMId,Schedule_On_Last_Scheduled,[First],Frequency,Final,Last_Change_Usage,
Last_Change_Date,External_Identifier,Schedule_Type_Id,Scheduling_Group_Id,Scheduling_Group_Counter,
InspectionTaskTypeId,InspectionOffset,Maintenance_Strategy_Id, PerformanceStrategyReason,
Changeout_Guidelines,ERP_Component_Code,ERP_Modifier_Code,ERP_Scheduling_Task,SchedulingTaskId,
Last_Occurrence,Last_Occ_Date,Last_Scheduled,Last_Sched_Date,Next_Occurrence,Next_Occ_Date,
Task_Description,
MIN(Line_No) AS PTGroupMin,MAX(Line_No) AS PTGroupMax,
/*VV 26-Nov-2008*/Update_Scheduling_Task_Only,
/*VV E316*/Tag_Id,PartRatingId
FROM #z_I_PROJECTED_TASKS
GROUP BY
EqpProjId,ComponentCodeId,ModifierId,TaskTypeId,ApplicationCodeId,
Inactive_Task,Unscheduled,Planning_Task,Planning_Lead_Time,Operational_Criticality_Id,
ManufacturerId,Part_SOS_Id,PartId,Group_Number,Rotable_Part_Id,Warranty_Days,
Warranty_Usage,QUOMId,Schedule_On_Last_Scheduled,[First],Frequency,Final,Last_Change_Usage,
Last_Change_Date,External_Identifier,Schedule_Type_Id,Scheduling_Group_Id,Scheduling_Group_Counter,
InspectionTaskTypeId,InspectionOffset,Maintenance_Strategy_Id, PerformanceStrategyReason,
Changeout_Guidelines,ERP_Component_Code,ERP_Modifier_Code,ERP_Scheduling_Task,SchedulingTaskId,
Last_Occurrence,Last_Occ_Date,Last_Scheduled,Last_Sched_Date,Next_Occurrence,Next_Occ_Date,
/*VV 13-Nov-2008*/Task_Description,/*VV 26-Nov-2008*/Update_Scheduling_Task_Only,
/*VV E316*/Tag_Id,PartRatingId) A
	ON IPT.EqpProjId = A.EqpProjId AND 
		ISNULL(IPT.ComponentCodeId,0)=ISNULL(A.ComponentCodeId,0) AND
		ISNULL(IPT.ModifierId,0)=ISNULL(A.ModifierId,0) AND
		ISNULL(IPT.TaskTypeId,0)=ISNULL(A.TaskTypeId,0) AND
		ISNULL(IPT.ApplicationCodeId,0)=ISNULL(A.ApplicationCodeId,0) AND
		ISNULL(IPT.Inactive_Task,0)=ISNULL(A.Inactive_Task,0) AND
		ISNULL(IPT.Unscheduled,0)=ISNULL(A.Unscheduled,0) AND
		ISNULL(IPT.Planning_Task,0)=ISNULL(A.Planning_Task,0) AND
		ISNULL(IPT.Planning_Lead_Time,0)=ISNULL(A.Planning_Lead_Time,0) AND
		ISNULL(IPT.Operational_Criticality_Id,0)=ISNULL(A.Operational_Criticality_Id,0) AND
		ISNULL(IPT.ManufacturerId,0)=ISNULL(A.ManufacturerId,0) AND
		ISNULL(IPT.Part_SOS_Id,0)=ISNULL(A.Part_SOS_Id,0) AND
		ISNULL(IPT.PartId,0)=ISNULL(A.PartId,0) AND
		ISNULL(IPT.Group_Number,'')=ISNULL(A.Group_Number,'') AND
		ISNULL(IPT.Rotable_Part_Id,0)=ISNULL(A.Rotable_Part_Id,0) AND
		ISNULL(IPT.Warranty_Days,0)=ISNULL(A.Warranty_Days,0) AND
		ISNULL(IPT.Warranty_Usage,0)=ISNULL(A.Warranty_Usage,0) AND
		ISNULL(IPT.QUOMId,0)=ISNULL(A.QUOMId,0) AND
		ISNULL(IPT.Schedule_On_Last_Scheduled,0)=ISNULL(A.Schedule_On_Last_Scheduled,0) AND
		ISNULL(IPT.[First],0)=ISNULL(A.[First],0) AND
		ISNULL(IPT.Frequency,0)=ISNULL(A.Frequency,0) AND
		ISNULL(IPT.Final,0)=ISNULL(A.Final,0) AND
		ISNULL(IPT.Last_Change_Usage,0)=ISNULL(A.Last_Change_Usage,0) AND
		ISNULL(IPT.Last_Change_Date,@TodaysDate)=ISNULL(A.Last_Change_Date,@TodaysDate) AND
		ISNULL(IPT.External_Identifier,'')=ISNULL(A.External_Identifier,'') AND
		ISNULL(IPT.Schedule_Type_Id,0)=ISNULL(A.Schedule_Type_Id,0) AND
		ISNULL(IPT.Scheduling_Group_Id,0)=ISNULL(A.Scheduling_Group_Id,0) AND
		ISNULL(IPT.Scheduling_Group_Counter,-1)=ISNULL(A.Scheduling_Group_Counter,-1) AND
		ISNULL(IPT.InspectionTaskTypeId,0)=ISNULL(A.InspectionTaskTypeId,0) AND
		ISNULL(IPT.InspectionOffset,0)=ISNULL(A.InspectionOffset,0) AND
		ISNULL(IPT.Maintenance_Strategy_Id,0)=ISNULL(A.Maintenance_Strategy_Id,0) AND 
		ISNULL(IPT.PerformanceStrategyReason,'')=ISNULL(A.PerformanceStrategyReason,'') AND
		ISNULL(IPT.Changeout_Guidelines,'')=ISNULL(A.Changeout_Guidelines,'') AND
		ISNULL(IPT.ERP_Component_Code,'')=ISNULL(A.ERP_Component_Code,'') AND
		ISNULL(IPT.ERP_Modifier_Code,'')=ISNULL(A.ERP_Modifier_Code,'') AND
		ISNULL(IPT.ERP_Scheduling_Task,'')=ISNULL(A.ERP_Scheduling_Task,'') AND
		ISNULL(IPT.SchedulingTaskId,0)=ISNULL(A.SchedulingTaskId,0) AND
		ISNULL(IPT.Last_Occurrence,0)=ISNULL(A.Last_Occurrence,0) AND
		ISNULL(IPT.Last_Occ_Date,@TodaysDate)=ISNULL(A.Last_Occ_Date,@TodaysDate) AND
		ISNULL(IPT.Last_Scheduled,0)=ISNULL(A.Last_Scheduled,0) AND
		ISNULL(IPT.Last_Sched_Date,@TodaysDate)=ISNULL(A.Last_Sched_Date,@TodaysDate) AND
		ISNULL(IPT.Next_Occurrence,0)=ISNULL(A.Next_Occurrence,0) AND
		ISNULL(IPT.Next_Occ_Date,@TodaysDate)=ISNULL(A.Next_Occ_Date,@TodaysDate) AND
		ISNULL(IPT.Task_Description,'')=ISNULL(A.Task_Description,'') AND
		/*VV 26-Nov-2008*/
		ISNULL(IPT.Update_Scheduling_Task_Only,0)=ISNULL(A.Update_Scheduling_Task_Only,0) AND
		/*VV E316*/
		ISNULL(IPT.Tag_Id,'')=ISNULL(A.Tag_Id,'') AND
		ISNULL(IPT.PartRatingId,0)=ISNULL(A.PartRatingId,0)
		


/***************************************************/
	-- LOG AND DELETE INVALID ROWS
/***************************************************/

--drop table z_I_PROJECTED_TASKS
--select * into z_I_PROJECTED_TASKS from #z_I_PROJECTED_TASKS
--return

--strategy task have rotable components linked to them.

INSERT INTO #z_Message(Line_No,ErrorDescription,ImportRecord)
SELECT IPT.Line_No,' Strategy Task cannot be deleted as Rotable Component is linked to it;',CASE WHEN @InterfaceSource = 0 THEN '' ELSE (SELECT Model,Equipment_No,Serial_No, Registration_Counter,Equip_Name,Projection_Type,Projection_Name,Task_Description,Global_Code,Component_Code,Modifier_Code
 ,Task_Type,Task_Counter,Inactive_Task,Unassigned_Task,Planning_Task,Planning_Lead_Days,Operational_Criticality,Task_Manufacturer_Code,Part_SOS,Primary_Part_Number,Group_Number,Rotable_Part_Number,Warranty_Days,Warranty_Usage,UOM,Schedule_On_Last_Scheduled,[First] ,Interval ,Final ,Last_Change_Usage,Last_Change_Date,External_Identifier,Suppression_Group,Suppression_Counter,Sibling_Interval ,Dependency_Group ,Dependency_Counter,Inspection_Logic_Task_Type,Inspection_Logic_Offset,Performance_Strategy,Performance_Strategy_Reason,Changeout_Guidelines,ERP_Component_Code,ERP_Modifier_Code,ERP_Scheduling_Task,Scheduling_Task,Last_Occurrence,Last_Occ_Date,Last_Scheduled,Last_Sched_Date,Next_Occurrence,Next_Occ_Date,Job_Code,Currency,Standard_Job_Reference,Cost_Bearer,Cost_Centre,Work_Group,Part_Type,Health_Safety,Pricing_Date,Consumable_Qty,Consumable_Top_Up,Consumable_Price,Parts_Sell,Labour_Sell,Misc_Sell,Shop_Labour,Labour_Hours,Labour_Activity ,Duration_Hours,Part_Expense,Labour_Expense,Misc_Expense,Part_EDC,Labour_EDC ,Misc_EDC,Labour_Split ,Crane_Cost,Freight_Perc_Parts,Avg_People_Vehicle,Avg_Daily_Work_Hours,Avg_Travel_Hours,Travel_Labour_Rate,Travel_Distance,Travel_Rate,Misc_Cost_Per_Trip,Update_Scheduling_Task_Only,System_Source ,Tag_Id,Rating 
 FROM IMPORT_PROJECTION  IP where IP.Line_No = IPT.Line_No AND IP.Import_File_Name=@ImportFileName FOR XML PATH('I_PROJECTEDTASK'),ROOT('I_PROJECTEDTASKs')) END  AS ImportRecord

FROM
#z_I_PROJECTED_TASKS IPT
	INNER JOIN
tblProjTasks PT
	ON IPT.ProjTaskId=PT.ProjTaskId
WHERE IPT.Inactive_Task=1 AND PT.Rotable_Part_id>0

--drop table z_I_PROJECTED_TASKS
--select * into z_I_PROJECTED_TASKS from #z_I_PROJECTED_TASKS
--return
--strategy task have rotable component history linked to them

INSERT INTO #z_Message(Line_No,ErrorDescription,ImportRecord)
SELECT DISTINCT IPT.Line_No,' Strategy Task cannot be deleted as Rotable Component History is linked to it;',CASE WHEN @InterfaceSource = 0 THEN '' ELSE (SELECT Model,Equipment_No,Serial_No, Registration_Counter,Equip_Name,Projection_Type,Projection_Name,Task_Description,Global_Code,Component_Code,Modifier_Code
 ,Task_Type,Task_Counter,Inactive_Task,Unassigned_Task,Planning_Task,Planning_Lead_Days,Operational_Criticality,Task_Manufacturer_Code,Part_SOS,Primary_Part_Number,Group_Number,Rotable_Part_Number,Warranty_Days,Warranty_Usage,UOM,Schedule_On_Last_Scheduled,[First] ,Interval ,Final ,Last_Change_Usage,Last_Change_Date,External_Identifier,Suppression_Group,Suppression_Counter,Sibling_Interval ,Dependency_Group ,Dependency_Counter,Inspection_Logic_Task_Type,Inspection_Logic_Offset,Performance_Strategy,Performance_Strategy_Reason,Changeout_Guidelines,ERP_Component_Code,ERP_Modifier_Code,ERP_Scheduling_Task,Scheduling_Task,Last_Occurrence,Last_Occ_Date,Last_Scheduled,Last_Sched_Date,Next_Occurrence,Next_Occ_Date,Job_Code,Currency,Standard_Job_Reference,Cost_Bearer,Cost_Centre,Work_Group,Part_Type,Health_Safety,Pricing_Date,Consumable_Qty,Consumable_Top_Up,Consumable_Price,Parts_Sell,Labour_Sell,Misc_Sell,Shop_Labour,Labour_Hours,Labour_Activity ,Duration_Hours,Part_Expense,Labour_Expense,Misc_Expense,Part_EDC,Labour_EDC ,Misc_EDC,Labour_Split ,Crane_Cost,Freight_Perc_Parts,Avg_People_Vehicle,Avg_Daily_Work_Hours,Avg_Travel_Hours,Travel_Labour_Rate,Travel_Distance,Travel_Rate,Misc_Cost_Per_Trip,Update_Scheduling_Task_Only,System_Source ,Tag_Id,Rating 
 FROM IMPORT_PROJECTION  IP where IP.Line_No = IPT.Line_No AND IP.Import_File_Name=@ImportFileName FOR XML PATH('I_PROJECTEDTASK'),ROOT('I_PROJECTEDTASKs')) END AS ImportRecord
FROM
#z_I_PROJECTED_TASKS IPT
	INNER JOIN
ROTABLE_INUSE RI 
	ON IPT.ProjTaskId =RI.Proj_Task_Id
WHERE IPT.Inactive_Task=1 

/*VV CR8888*/
INSERT INTO #z_Message(Line_No,ErrorDescription,ImportRecord)
SELECT DISTINCT IPT.Line_No,' Strategy Task cannot be deleted as Plant Asset Jornal records are linked to it;',CASE WHEN @InterfaceSource = 0 THEN '' ELSE (SELECT Model,Equipment_No,Serial_No, Registration_Counter,Equip_Name,Projection_Type,Projection_Name,Task_Description,Global_Code,Component_Code,Modifier_Code
 ,Task_Type,Task_Counter,Inactive_Task,Unassigned_Task,Planning_Task,Planning_Lead_Days,Operational_Criticality,Task_Manufacturer_Code,Part_SOS,Primary_Part_Number,Group_Number,Rotable_Part_Number,Warranty_Days,Warranty_Usage,UOM,Schedule_On_Last_Scheduled,[First] ,Interval ,Final ,Last_Change_Usage,Last_Change_Date,External_Identifier,Suppression_Group,Suppression_Counter,Sibling_Interval ,Dependency_Group ,Dependency_Counter,Inspection_Logic_Task_Type,Inspection_Logic_Offset,Performance_Strategy,Performance_Strategy_Reason,Changeout_Guidelines,ERP_Component_Code,ERP_Modifier_Code,ERP_Scheduling_Task,Scheduling_Task,Last_Occurrence,Last_Occ_Date,Last_Scheduled,Last_Sched_Date,Next_Occurrence,Next_Occ_Date,Job_Code,Currency,Standard_Job_Reference,Cost_Bearer,Cost_Centre,Work_Group,Part_Type,Health_Safety,Pricing_Date,Consumable_Qty,Consumable_Top_Up,Consumable_Price,Parts_Sell,Labour_Sell,Misc_Sell,Shop_Labour,Labour_Hours,Labour_Activity ,Duration_Hours,Part_Expense,Labour_Expense,Misc_Expense,Part_EDC,Labour_EDC ,Misc_EDC,Labour_Split ,Crane_Cost,Freight_Perc_Parts,Avg_People_Vehicle,Avg_Daily_Work_Hours,Avg_Travel_Hours,Travel_Labour_Rate,Travel_Distance,Travel_Rate,Misc_Cost_Per_Trip,Update_Scheduling_Task_Only,System_Source ,Tag_Id,Rating 
 FROM IMPORT_PROJECTION  IP where IP.Line_No = IPT.Line_No AND IP.Import_File_Name=@ImportFileName for XML PATH('I_PROJECTEDTASK'),ROOT('I_PROJECTEDTASKs')) END AS ImportRecord
FROM
#z_I_PROJECTED_TASKS IPT
	INNER JOIN
CBD_ADJUSTMENT A 
	ON IPT.ProjTaskId =A.ProjTaskId
WHERE IPT.Inactive_Task=1

CREATE TABLE #z_DONOTDELETE(ProjTaskId int PRIMARY KEY(ProjTaskId))

IF EXISTS(SELECT Line_No FROM #z_Message WHERE ErrorDescription<>'')
BEGIN
	
	INSERT INTO IMPORT_ERROR(ImportFileName,Line_No,ErrorDescription,ImportErrorTypeId,LastModDate,ImportRecord,ImportSourceId)
	SELECT @ImportFileName AS ImportFileName,CASE WHEN @InterfaceSource = 0 THEN Line_No END,ErrorDescription, @ErrorTypeBusRules AS ImportErrorTypeId,
	GETDate() AS LastModDate,CONVERT(VARCHAR(MAX),ImportRecord),@InterfaceSource
	FROM #z_Message WHERE ErrorDescription<>''

	--If @EqpProjIdTo is supplied the procedure will delete the tasks which are not in the file
	-- this tasks cannot be deleted because of the business rules.
	IF @EqpProjIdTo>0
	BEGIN
		INSERT INTO #z_DONOTDELETE(ProjTaskId)
		SELECT DISTINCT IPT.ProjTaskId 
		FROM 
		#z_I_PROJECTED_TASKS IPT
			INNER JOIN
		#z_Message M
			ON IPT.Line_No=M.Line_No
			LEFT JOIN
		#z_DONOTDELETE D
			ON IPT.ProjTaskId=D.ProjTaskId
		WHERE IPT.ProjTaskId>0 AND D.ProjTaskId IS NULL
	END

	DELETE IPT FROM
	#z_I_PROJECTED_TASKS IPT
		INNER JOIN
	#z_Message M
		ON IPT.Line_No=M.Line_No
	WHERE M.ErrorDescription<>''

	TRUNCATE TABLE #z_Message

	IF NOT EXISTS(SELECT * FROM #z_I_PROJECTED_TASKS)
	BEGIN
		GOTO END_IMPORT
	END

END


--Other rules

INSERT INTO #z_Message(Line_No,ErrorDescription,ImportRecord)
SELECT Line_No,
CASE WHEN IPT.EqpPlanId IS NULL THEN ' Unable to find the Equipment;' ELSE '' END+
CASE WHEN IPT.EqpProjId IS NULL THEN ' Unable to find the Projection;' ELSE '' END+
CASE WHEN IPT.ComponentCodeId/* VV 13-Nov-08 Component_Code*/ IS NULL THEN ' Component_Code is not specified;' ELSE '' END+
CASE WHEN IPT.TaskTypeId/*VV 13-Nov-08 Task_Type*/ IS NULL THEN ' Task_Type is not specified;' ELSE '' END+
CASE WHEN IPT.Model IS NULL THEN ' Model is not specified;' ELSE '' END+
CASE WHEN IPT.Inactive_Task = 0 AND ISNULL(IPT.Frequency,0) <=0 THEN ' Interval should be greater than zero;' ELSE '' END+
CASE WHEN IPT.Projection_Type_Id=@TypeArc THEN ' Archived Projection is not updated;' ELSE '' END AS ErrorDescription,
CASE WHEN @InterfaceSource = 0 THEN '' ELSE (SELECT Model,Equipment_No,Serial_No, Registration_Counter,Equip_Name,Projection_Type,Projection_Name,Task_Description,Global_Code,Component_Code,Modifier_Code
 ,Task_Type,Task_Counter,Inactive_Task,Unassigned_Task,Planning_Task,Planning_Lead_Days,Operational_Criticality,Task_Manufacturer_Code,Part_SOS,Primary_Part_Number,Group_Number,Rotable_Part_Number,Warranty_Days,Warranty_Usage,UOM,Schedule_On_Last_Scheduled,[First] ,Interval ,Final ,Last_Change_Usage,Last_Change_Date,External_Identifier,Suppression_Group,Suppression_Counter,Sibling_Interval ,Dependency_Group ,Dependency_Counter,Inspection_Logic_Task_Type,Inspection_Logic_Offset,Performance_Strategy,Performance_Strategy_Reason,Changeout_Guidelines,ERP_Component_Code,ERP_Modifier_Code,ERP_Scheduling_Task,Scheduling_Task,Last_Occurrence,Last_Occ_Date,Last_Scheduled,Last_Sched_Date,Next_Occurrence,Next_Occ_Date,Job_Code,Currency,Standard_Job_Reference,Cost_Bearer,Cost_Centre,Work_Group,Part_Type,Health_Safety,Pricing_Date,Consumable_Qty,Consumable_Top_Up,Consumable_Price,Parts_Sell,Labour_Sell,Misc_Sell,Shop_Labour,Labour_Hours,Labour_Activity ,Duration_Hours,Part_Expense,Labour_Expense,Misc_Expense,Part_EDC,Labour_EDC ,Misc_EDC,Labour_Split ,Crane_Cost,Freight_Perc_Parts,Avg_People_Vehicle,Avg_Daily_Work_Hours,Avg_Travel_Hours,Travel_Labour_Rate,Travel_Distance,Travel_Rate,Misc_Cost_Per_Trip,Update_Scheduling_Task_Only,System_Source ,Tag_Id,Rating 
 FROM IMPORT_PROJECTION  IP where IP.Line_No = IPT.Line_No AND IP.Import_File_Name=@ImportFileName FOR XML PATH('I_PROJECTEDTASK'),ROOT('I_PROJECTEDTASKs')) END AS ImportRecord
FROM #z_I_PROJECTED_TASKS IPT
WHERE (/*VV 17-Nov-2008*/IPT.Inactive_Task = 0) AND
(
IPT.EqpPlanId IS NULL OR 
IPT.EqpProjId IS NULL OR 
IPT.ComponentCodeId/* VV 13-Nov-08 Component_Code*/ IS NULL OR 
IPT.TaskTypeId/*VV 13-Nov-08 Task_Type*/ IS NULL OR 
IPT.Model IS NULL OR 
ISNULL(IPT.Frequency,0) = 0 OR
IPT.Projection_Type_Id=@TypeArc)


IF EXISTS(SELECT Line_No FROM #z_Message WHERE ErrorDescription<>'')
BEGIN
	
	INSERT INTO IMPORT_ERROR(ImportFileName,Line_No,ErrorDescription,ImportErrorTypeId,LastModDate,ImportRecord,ImportSourceId)
	SELECT @ImportFileName AS ImportFileName,CASE WHEN @InterfaceSource = 0 THEN Line_No END,ErrorDescription, @ErrorTypeBusRules AS ImportErrorTypeId,
	GETDate() AS LastModDate,CONVERT(VARCHAR(MAX),ImportRecord),@InterfaceSource
	FROM #z_Message WHERE ErrorDescription<>''

	DELETE IPT FROM
	#z_I_PROJECTED_TASKS IPT
		INNER JOIN
	#z_Message M
		ON IPT.Line_No=M.Line_No
	WHERE M.ErrorDescription<>''

	TRUNCATE TABLE #z_Message

	IF NOT EXISTS(SELECT * FROM #z_I_PROJECTED_TASKS)
	BEGIN
		GOTO END_IMPORT
	END
END


--RR Task cannot have more than 1 Job
INSERT INTO #z_Message(Line_No,ErrorDescription,ImportRecord)
SELECT
IPT.Line_No,' Repair Reserve Task cannot have more than 1 Job;' AS ErrorDescription,CASE WHEN @InterfaceSource = 0 THEN '' ELSE (SELECT Model,Equipment_No,Serial_No, Registration_Counter,Equip_Name,Projection_Type,Projection_Name,Task_Description,Global_Code,Component_Code,Modifier_Code
 ,Task_Type,Task_Counter,Inactive_Task,Unassigned_Task,Planning_Task,Planning_Lead_Days,Operational_Criticality,Task_Manufacturer_Code,Part_SOS,Primary_Part_Number,Group_Number,Rotable_Part_Number,Warranty_Days,Warranty_Usage,UOM,Schedule_On_Last_Scheduled,[First] ,Interval ,Final ,Last_Change_Usage,Last_Change_Date,External_Identifier,Suppression_Group,Suppression_Counter,Sibling_Interval ,Dependency_Group ,Dependency_Counter,Inspection_Logic_Task_Type,Inspection_Logic_Offset,Performance_Strategy,Performance_Strategy_Reason,Changeout_Guidelines,ERP_Component_Code,ERP_Modifier_Code,ERP_Scheduling_Task,Scheduling_Task,Last_Occurrence,Last_Occ_Date,Last_Scheduled,Last_Sched_Date,Next_Occurrence,Next_Occ_Date,Job_Code,Currency,Standard_Job_Reference,Cost_Bearer,Cost_Centre,Work_Group,Part_Type,Health_Safety,Pricing_Date,Consumable_Qty,Consumable_Top_Up,Consumable_Price,Parts_Sell,Labour_Sell,Misc_Sell,Shop_Labour,Labour_Hours,Labour_Activity ,Duration_Hours,Part_Expense,Labour_Expense,Misc_Expense,Part_EDC,Labour_EDC ,Misc_EDC,Labour_Split ,Crane_Cost,Freight_Perc_Parts,Avg_People_Vehicle,Avg_Daily_Work_Hours,Avg_Travel_Hours,Travel_Labour_Rate,Travel_Distance,Travel_Rate,Misc_Cost_Per_Trip,Update_Scheduling_Task_Only,System_Source ,Tag_Id,Rating 
 FROM IMPORT_PROJECTION  IP where IP.Line_No = IPT.Line_No AND IP.Import_File_Name=@ImportFileName FOR XML PATH('I_PROJECTEDTASK'),ROOT('I_PROJECTEDTASKs')) END AS ImportRecord
FROM 
#z_I_PROJECTED_TASKS IPT 
	INNER JOIN 
(SELECT IPT.PTGroupMin
FROM 
#z_I_PROJECTED_TASKS IPT 
	INNER JOIN 
tblProjTasks PT 
	ON IPT.ProjTaskId=PT.ProjTaskId
WHERE IPT.Inactive_Task = 0 AND PT.ParentTaskId>0
GROUP BY IPT.PTGroupMin,PT.ParentTaskId
HAVING COUNT(PT.ParentTaskId)>1) A
	ON IPT.PTGroupMin=A.PTGroupMin

-- External identifier exists in some other projected tasks
INSERT INTO #z_Message(Line_No,ErrorDescription,ImportRecord)
SELECT
IPT.Line_No,' External identifier exists in some other projected tasks;' AS ErrorDescription,CASE WHEN @InterfaceSource = 0 THEN '' ELSE (SELECT Model,Equipment_No,Serial_No, Registration_Counter,Equip_Name,Projection_Type,Projection_Name,Task_Description,Global_Code,Component_Code,Modifier_Code
 ,Task_Type,Task_Counter,Inactive_Task,Unassigned_Task,Planning_Task,Planning_Lead_Days,Operational_Criticality,Task_Manufacturer_Code,Part_SOS,Primary_Part_Number,Group_Number,Rotable_Part_Number,Warranty_Days,Warranty_Usage,UOM,Schedule_On_Last_Scheduled,[First] ,Interval ,Final ,Last_Change_Usage,Last_Change_Date,External_Identifier,Suppression_Group,Suppression_Counter,Sibling_Interval ,Dependency_Group ,Dependency_Counter,Inspection_Logic_Task_Type,Inspection_Logic_Offset,Performance_Strategy,Performance_Strategy_Reason,Changeout_Guidelines,ERP_Component_Code,ERP_Modifier_Code,ERP_Scheduling_Task,Scheduling_Task,Last_Occurrence,Last_Occ_Date,Last_Scheduled,Last_Sched_Date,Next_Occurrence,Next_Occ_Date,Job_Code,Currency,Standard_Job_Reference,Cost_Bearer,Cost_Centre,Work_Group,Part_Type,Health_Safety,Pricing_Date,Consumable_Qty,Consumable_Top_Up,Consumable_Price,Parts_Sell,Labour_Sell,Misc_Sell,Shop_Labour,Labour_Hours,Labour_Activity ,Duration_Hours,Part_Expense,Labour_Expense,Misc_Expense,Part_EDC,Labour_EDC ,Misc_EDC,Labour_Split ,Crane_Cost,Freight_Perc_Parts,Avg_People_Vehicle,Avg_Daily_Work_Hours,Avg_Travel_Hours,Travel_Labour_Rate,Travel_Distance,Travel_Rate,Misc_Cost_Per_Trip,Update_Scheduling_Task_Only,System_Source ,Tag_Id,Rating 
 FROM IMPORT_PROJECTION  IP where IP.Line_No = IPT.Line_No AND IP.Import_File_Name=@ImportFileName FOR XML PATH('I_PROJECTEDTASK'),ROOT('I_PROJECTEDTASKs')) END AS ImportRecord
FROM 
tblProjTasks PT 
	INNER JOIN
tblEqpProjs EPR
	ON PT.EqpProjId=EPR.EqpProjId AND EPR.Projection_Type_Id=@TypeCur AND PT.EqpProjId<>@EqpProjIdTo
	INNER JOIN
#z_I_PROJECTED_TASKS IPT 
	ON 
	   PT.ExternalIdentifier = IPT.External_Identifier AND 
	   PT.ProjTaskId <> ISNULL(IPT.ProjTaskId,0) 
		
WHERE IPT.Inactive_Task = 0 

-- Duplicate External identifier
INSERT INTO #z_Message(Line_No,ErrorDescription,ImportRecord)
SELECT
IPT.Line_No,' Duplicate External Identifier;' AS ErrorDescription,CASE WHEN @InterfaceSource = 0 THEN '' ELSE (SELECT Model,Equipment_No,Serial_No, Registration_Counter,Equip_Name,Projection_Type,Projection_Name,Task_Description,Global_Code,Component_Code,Modifier_Code
 ,Task_Type,Task_Counter,Inactive_Task,Unassigned_Task,Planning_Task,Planning_Lead_Days,Operational_Criticality,Task_Manufacturer_Code,Part_SOS,Primary_Part_Number,Group_Number,Rotable_Part_Number,Warranty_Days,Warranty_Usage,UOM,Schedule_On_Last_Scheduled,[First] ,Interval ,Final ,Last_Change_Usage,Last_Change_Date,External_Identifier,Suppression_Group,Suppression_Counter,Sibling_Interval ,Dependency_Group ,Dependency_Counter,Inspection_Logic_Task_Type,Inspection_Logic_Offset,Performance_Strategy,Performance_Strategy_Reason,Changeout_Guidelines,ERP_Component_Code,ERP_Modifier_Code,ERP_Scheduling_Task,Scheduling_Task,Last_Occurrence,Last_Occ_Date,Last_Scheduled,Last_Sched_Date,Next_Occurrence,Next_Occ_Date,Job_Code,Currency,Standard_Job_Reference,Cost_Bearer,Cost_Centre,Work_Group,Part_Type,Health_Safety,Pricing_Date,Consumable_Qty,Consumable_Top_Up,Consumable_Price,Parts_Sell,Labour_Sell,Misc_Sell,Shop_Labour,Labour_Hours,Labour_Activity ,Duration_Hours,Part_Expense,Labour_Expense,Misc_Expense,Part_EDC,Labour_EDC ,Misc_EDC,Labour_Split ,Crane_Cost,Freight_Perc_Parts,Avg_People_Vehicle,Avg_Daily_Work_Hours,Avg_Travel_Hours,Travel_Labour_Rate,Travel_Distance,Travel_Rate,Misc_Cost_Per_Trip,Update_Scheduling_Task_Only,System_Source ,Tag_Id,Rating 
 FROM IMPORT_PROJECTION  IP where IP.Line_No = IPT.Line_No AND IP.Import_File_Name=@ImportFileName FOR XML PATH('I_PROJECTEDTASK'),ROOT('I_PROJECTEDTASKs')) END AS ImportRecord
FROM 
#z_I_PROJECTED_TASKS IPT 
	INNER JOIN
(
	SELECT External_Identifier
	FROM #z_I_PROJECTED_TASKS 
	WHERE Projection_Type_Id=@TypeCur AND Inactive_Task = 0
	GROUP BY External_Identifier
	HAVING COUNT(DISTINCT PTGroupMin)>1
) DUP 
	ON IPT.External_Identifier=DUP.External_Identifier
WHERE IPT.Projection_Type_Id=@TypeCur AND IPT.Inactive_Task = 0

--System_Source for new scheduling tasks is required
INSERT INTO #z_Message(Line_No,ErrorDescription,ImportRecord)
SELECT IPT.Line_No,' Cannot add scheduling task. System Source is required;',CASE WHEN @InterfaceSource = 0 THEN '' ELSE (SELECT Model,Equipment_No,Serial_No, Registration_Counter,Equip_Name,Projection_Type,Projection_Name,Task_Description,Global_Code,Component_Code,Modifier_Code
 ,Task_Type,Task_Counter,Inactive_Task,Unassigned_Task,Planning_Task,Planning_Lead_Days,Operational_Criticality,Task_Manufacturer_Code,Part_SOS,Primary_Part_Number,Group_Number,Rotable_Part_Number,Warranty_Days,Warranty_Usage,UOM,Schedule_On_Last_Scheduled,[First] ,Interval ,Final ,Last_Change_Usage,Last_Change_Date,External_Identifier,Suppression_Group,Suppression_Counter,Sibling_Interval ,Dependency_Group ,Dependency_Counter,Inspection_Logic_Task_Type,Inspection_Logic_Offset,Performance_Strategy,Performance_Strategy_Reason,Changeout_Guidelines,ERP_Component_Code,ERP_Modifier_Code,ERP_Scheduling_Task,Scheduling_Task,Last_Occurrence,Last_Occ_Date,Last_Scheduled,Last_Sched_Date,Next_Occurrence,Next_Occ_Date,Job_Code,Currency,Standard_Job_Reference,Cost_Bearer,Cost_Centre,Work_Group,Part_Type,Health_Safety,Pricing_Date,Consumable_Qty,Consumable_Top_Up,Consumable_Price,Parts_Sell,Labour_Sell,Misc_Sell,Shop_Labour,Labour_Hours,Labour_Activity ,Duration_Hours,Part_Expense,Labour_Expense,Misc_Expense,Part_EDC,Labour_EDC ,Misc_EDC,Labour_Split ,Crane_Cost,Freight_Perc_Parts,Avg_People_Vehicle,Avg_Daily_Work_Hours,Avg_Travel_Hours,Travel_Labour_Rate,Travel_Distance,Travel_Rate,Misc_Cost_Per_Trip,Update_Scheduling_Task_Only,System_Source ,Tag_Id,Rating 
 FROM IMPORT_PROJECTION  IP where IP.Line_No = IPT.Line_No AND IP.Import_File_Name=@ImportFileName FOR XML PATH('I_PROJECTEDTASK'),ROOT('I_PROJECTEDTASKs')) END AS ImportRecord
FROM
#z_I_PROJECTED_TASKS IPT
WHERE SystemSourceId IS NULL AND IPT.Inactive_Task=0 AND Projection_Type_Id=@TypeCur 
AND External_Identifier IS NOT NULL AND SchedulingTaskId IS NULL

--Duplicate component codes
INSERT INTO #z_Message(Line_No,ErrorDescription,ImportRecord)
SELECT Line_No,' More than one record with same combination of codes;' AS ErrorDescription,CASE WHEN @InterfaceSource = 0 THEN '' ELSE (SELECT Model,Equipment_No,Serial_No, Registration_Counter,Equip_Name,Projection_Type,Projection_Name,Task_Description,Global_Code,Component_Code,Modifier_Code
 ,Task_Type,Task_Counter,Inactive_Task,Unassigned_Task,Planning_Task,Planning_Lead_Days,Operational_Criticality,Task_Manufacturer_Code,Part_SOS,Primary_Part_Number,Group_Number,Rotable_Part_Number,Warranty_Days,Warranty_Usage,UOM,Schedule_On_Last_Scheduled,[First] ,Interval ,Final ,Last_Change_Usage,Last_Change_Date,External_Identifier,Suppression_Group,Suppression_Counter,Sibling_Interval ,Dependency_Group ,Dependency_Counter,Inspection_Logic_Task_Type,Inspection_Logic_Offset,Performance_Strategy,Performance_Strategy_Reason,Changeout_Guidelines,ERP_Component_Code,ERP_Modifier_Code,ERP_Scheduling_Task,Scheduling_Task,Last_Occurrence,Last_Occ_Date,Last_Scheduled,Last_Sched_Date,Next_Occurrence,Next_Occ_Date,Job_Code,Currency,Standard_Job_Reference,Cost_Bearer,Cost_Centre,Work_Group,Part_Type,Health_Safety,Pricing_Date,Consumable_Qty,Consumable_Top_Up,Consumable_Price,Parts_Sell,Labour_Sell,Misc_Sell,Shop_Labour,Labour_Hours,Labour_Activity ,Duration_Hours,Part_Expense,Labour_Expense,Misc_Expense,Part_EDC,Labour_EDC ,Misc_EDC,Labour_Split ,Crane_Cost,Freight_Perc_Parts,Avg_People_Vehicle,Avg_Daily_Work_Hours,Avg_Travel_Hours,Travel_Labour_Rate,Travel_Distance,Travel_Rate,Misc_Cost_Per_Trip,Update_Scheduling_Task_Only,System_Source ,Tag_Id,Rating 
 FROM IMPORT_PROJECTION  IP where IP.Line_No = IPT.Line_No AND IP.Import_File_Name=@ImportFileName FOR XML PATH('I_PROJECTEDTASK'),ROOT('I_PROJECTEDTASKs')) END AS ImportRecord
FROM 
#z_I_PROJECTED_TASKS IPT  
INNER JOIN
(
	SELECT ComponentCodeId,ModifierId,TaskTypeId,ApplicationCodeId,
	/*VV 13-Nov-2008 Component_Code, Modifier_Code, Task_Type, Task_Counter,*/
	EqpProjId
	FROM #z_I_PROJECTED_TASKS 
	WHERE Inactive_Task = 0
	GROUP BY EqpProjId,ComponentCodeId,ModifierId,TaskTypeId,ApplicationCodeId
	/* VV 13-Nov-2008 Component_Code, Modifier_Code, Task_Type, Task_Counter*/
	HAVING COUNT(DISTINCT PTGroupMin)>1
) DUP 
	ON IPT.EqpProjId=DUP.EqpProjId
	   AND IPT.ComponentCodeId=DUP.ComponentCodeId 
	   AND IPT.ModifierId=DUP.ModifierId
	   AND IPT.TaskTypeId=DUP.TaskTypeId
	   AND IPT.ApplicationCodeId=DUP.ApplicationCodeId

	/* VV 13-Nov-2008 AND IPT.Component_Code=DUP.Component_Code 
	AND IPT.Modifier_Code=DUP.Modifier_Code
	AND IPT.Task_Type=DUP.Task_Type
	AND IPT.Task_Counter=DUP.Task_Counter*/

--raise error if manufacturer does not exist
INSERT INTO #z_Message(Line_No,ErrorDescription,ImportRecord)
SELECT Line_No,' Manufacturer not found;' AS ErrorDescription,
CASE WHEN @InterfaceSource = 0 THEN '' ELSE (SELECT Model,Equipment_No,Serial_No, Registration_Counter,Equip_Name,Projection_Type,Projection_Name,Task_Description,Global_Code,Component_Code,Modifier_Code
,Task_Type,Task_Counter,Inactive_Task,Unassigned_Task,Planning_Task,Planning_Lead_Days,Operational_Criticality,Task_Manufacturer_Code,Part_SOS,Primary_Part_Number,Group_Number,Rotable_Part_Number,Warranty_Days,Warranty_Usage,UOM,Schedule_On_Last_Scheduled,[First] ,Interval ,Final ,Last_Change_Usage,Last_Change_Date,External_Identifier,Suppression_Group,Suppression_Counter,Sibling_Interval ,Dependency_Group ,Dependency_Counter,Inspection_Logic_Task_Type,Inspection_Logic_Offset,Performance_Strategy,Performance_Strategy_Reason,Changeout_Guidelines,ERP_Component_Code,ERP_Modifier_Code,ERP_Scheduling_Task,Scheduling_Task,Last_Occurrence,Last_Occ_Date,Last_Scheduled,Last_Sched_Date,Next_Occurrence,Next_Occ_Date,Job_Code,Currency,Standard_Job_Reference,Cost_Bearer,Cost_Centre,Work_Group,Part_Type,Health_Safety,Pricing_Date,Consumable_Qty,Consumable_Top_Up,Consumable_Price,Parts_Sell,Labour_Sell,Misc_Sell,Shop_Labour,Labour_Hours,Labour_Activity ,Duration_Hours,Part_Expense,Labour_Expense,Misc_Expense,Part_EDC,Labour_EDC ,Misc_EDC,Labour_Split ,Crane_Cost,Freight_Perc_Parts,Avg_People_Vehicle,Avg_Daily_Work_Hours,Avg_Travel_Hours,Travel_Labour_Rate,Travel_Distance,Travel_Rate,Misc_Cost_Per_Trip,Update_Scheduling_Task_Only,System_Source ,Tag_Id,Rating 
FROM IMPORT_PROJECTION  IP where IP.Line_No = IPT.Line_No AND IP.Import_File_Name=@ImportFileName FOR XML PATH('I_PROJECTEDTASK'),ROOT('I_PROJECTEDTASKs')) END AS ImportRecord
FROM #z_I_PROJECTED_TASKS IPT WHERE IPT.Inactive_Task = 0 AND ManufacturerId IS NULL

--QUOM is not found
INSERT INTO #z_Message(Line_No,ErrorDescription,ImportRecord)
SELECT Line_No,' UOM not found;' AS ErrorDescription,
CASE WHEN @InterfaceSource = 0 THEN '' ELSE (SELECT Model,Equipment_No,Serial_No, Registration_Counter,Equip_Name,Projection_Type,Projection_Name,Task_Description,Global_Code,Component_Code,Modifier_Code
,Task_Type,Task_Counter,Inactive_Task,Unassigned_Task,Planning_Task,Planning_Lead_Days,Operational_Criticality,Task_Manufacturer_Code,Part_SOS,Primary_Part_Number,Group_Number,Rotable_Part_Number,Warranty_Days,Warranty_Usage,UOM,Schedule_On_Last_Scheduled,[First] ,Interval ,Final ,Last_Change_Usage,Last_Change_Date,External_Identifier,Suppression_Group,Suppression_Counter,Sibling_Interval ,Dependency_Group ,Dependency_Counter,Inspection_Logic_Task_Type,Inspection_Logic_Offset,Performance_Strategy,Performance_Strategy_Reason,Changeout_Guidelines,ERP_Component_Code,ERP_Modifier_Code,ERP_Scheduling_Task,Scheduling_Task,Last_Occurrence,Last_Occ_Date,Last_Scheduled,Last_Sched_Date,Next_Occurrence,Next_Occ_Date,Job_Code,Currency,Standard_Job_Reference,Cost_Bearer,Cost_Centre,Work_Group,Part_Type,Health_Safety,Pricing_Date,Consumable_Qty,Consumable_Top_Up,Consumable_Price,Parts_Sell,Labour_Sell,Misc_Sell,Shop_Labour,Labour_Hours,Labour_Activity ,Duration_Hours,Part_Expense,Labour_Expense,Misc_Expense,Part_EDC,Labour_EDC ,Misc_EDC,Labour_Split ,Crane_Cost,Freight_Perc_Parts,Avg_People_Vehicle,Avg_Daily_Work_Hours,Avg_Travel_Hours,Travel_Labour_Rate,Travel_Distance,Travel_Rate,Misc_Cost_Per_Trip,Update_Scheduling_Task_Only,System_Source ,Tag_Id,Rating 
FROM IMPORT_PROJECTION  IP where IP.Line_No = IPT.Line_No AND IP.Import_File_Name=@ImportFileName FOR XML PATH('I_PROJECTEDTASK'),ROOT('I_PROJECTEDTASKs')) END AS ImportRecord
FROM #z_I_PROJECTED_TASKS IPT 
WHERE IPT.Inactive_Task = 0 
AND QUOMId IS NULL 
AND ISNULL(UOM,'')<>''

-- Currency is not in AMT
INSERT INTO #z_Message(Line_No,ErrorDescription,ImportRecord)
SELECT Line_No,' Currency not found;' AS ErrorDescription,
CASE WHEN @InterfaceSource = 0 THEN '' ELSE (SELECT Model,Equipment_No,Serial_No, Registration_Counter,Equip_Name,Projection_Type,Projection_Name,Task_Description,Global_Code,Component_Code,Modifier_Code
,Task_Type,Task_Counter,Inactive_Task,Unassigned_Task,Planning_Task,Planning_Lead_Days,Operational_Criticality,Task_Manufacturer_Code,Part_SOS,Primary_Part_Number,Group_Number,Rotable_Part_Number,Warranty_Days,Warranty_Usage,UOM,Schedule_On_Last_Scheduled,[First] ,Interval ,Final ,Last_Change_Usage,Last_Change_Date,External_Identifier,Suppression_Group,Suppression_Counter,Sibling_Interval ,Dependency_Group ,Dependency_Counter,Inspection_Logic_Task_Type,Inspection_Logic_Offset,Performance_Strategy,Performance_Strategy_Reason,Changeout_Guidelines,ERP_Component_Code,ERP_Modifier_Code,ERP_Scheduling_Task,Scheduling_Task,Last_Occurrence,Last_Occ_Date,Last_Scheduled,Last_Sched_Date,Next_Occurrence,Next_Occ_Date,Job_Code,Currency,Standard_Job_Reference,Cost_Bearer,Cost_Centre,Work_Group,Part_Type,Health_Safety,Pricing_Date,Consumable_Qty,Consumable_Top_Up,Consumable_Price,Parts_Sell,Labour_Sell,Misc_Sell,Shop_Labour,Labour_Hours,Labour_Activity ,Duration_Hours,Part_Expense,Labour_Expense,Misc_Expense,Part_EDC,Labour_EDC ,Misc_EDC,Labour_Split ,Crane_Cost,Freight_Perc_Parts,Avg_People_Vehicle,Avg_Daily_Work_Hours,Avg_Travel_Hours,Travel_Labour_Rate,Travel_Distance,Travel_Rate,Misc_Cost_Per_Trip,Update_Scheduling_Task_Only,System_Source ,Tag_Id,Rating 
FROM IMPORT_PROJECTION  IP where IP.Line_No = IPT.Line_No AND IP.Import_File_Name=@ImportFileName FOR XML PATH('I_PROJECTEDTASK'),ROOT('I_PROJECTEDTASKs')) END AS ImportRecord
FROM  #z_I_PROJECTED_TASKS IPT WHERE IPT.Inactive_Task = 0 AND CurrencyId IS NULL AND ISNULL(Currency,'')<>''

--Cost Bearer is not found
INSERT INTO #z_Message(Line_No,ErrorDescription,ImportRecord)
SELECT Line_No,' Cost Bearer not found;' AS ErrorDescription,
CASE WHEN @InterfaceSource = 0 THEN '' ELSE (SELECT Model,Equipment_No,Serial_No, Registration_Counter,Equip_Name,Projection_Type,Projection_Name,Task_Description,Global_Code,Component_Code,Modifier_Code
,Task_Type,Task_Counter,Inactive_Task,Unassigned_Task,Planning_Task,Planning_Lead_Days,Operational_Criticality,Task_Manufacturer_Code,Part_SOS,Primary_Part_Number,Group_Number,Rotable_Part_Number,Warranty_Days,Warranty_Usage,UOM,Schedule_On_Last_Scheduled,[First] ,Interval ,Final ,Last_Change_Usage,Last_Change_Date,External_Identifier,Suppression_Group,Suppression_Counter,Sibling_Interval ,Dependency_Group ,Dependency_Counter,Inspection_Logic_Task_Type,Inspection_Logic_Offset,Performance_Strategy,Performance_Strategy_Reason,Changeout_Guidelines,ERP_Component_Code,ERP_Modifier_Code,ERP_Scheduling_Task,Scheduling_Task,Last_Occurrence,Last_Occ_Date,Last_Scheduled,Last_Sched_Date,Next_Occurrence,Next_Occ_Date,Job_Code,Currency,Standard_Job_Reference,Cost_Bearer,Cost_Centre,Work_Group,Part_Type,Health_Safety,Pricing_Date,Consumable_Qty,Consumable_Top_Up,Consumable_Price,Parts_Sell,Labour_Sell,Misc_Sell,Shop_Labour,Labour_Hours,Labour_Activity ,Duration_Hours,Part_Expense,Labour_Expense,Misc_Expense,Part_EDC,Labour_EDC ,Misc_EDC,Labour_Split ,Crane_Cost,Freight_Perc_Parts,Avg_People_Vehicle,Avg_Daily_Work_Hours,Avg_Travel_Hours,Travel_Labour_Rate,Travel_Distance,Travel_Rate,Misc_Cost_Per_Trip,Update_Scheduling_Task_Only,System_Source ,Tag_Id,Rating 
FROM IMPORT_PROJECTION  IP where IP.Line_No = IPT.Line_No AND IP.Import_File_Name=@ImportFileName FOR XML PATH('I_PROJECTEDTASK'),ROOT('I_PROJECTEDTASKs')) END AS ImportRecord
FROM  #z_I_PROJECTED_TASKS IPT WHERE IPT.Inactive_Task = 0 AND Cost_Bearer_Id IS NULL AND ISNULL(Cost_Bearer,'')<>''

--Check unassigned task rules
INSERT INTO #z_Message(Line_No,ErrorDescription,ImportRecord)
SELECT Line_No,
CASE
WHEN (IPT.Unscheduled=1 AND IPT.ComponentCodeId IS NULL)
	THEN ' Unassigned Component Code not found;' 
WHEN (SS.UnsCompCodeID>0 AND IPT.Unscheduled=0) OR (IPT.Task_Type='UN' AND IPT.Unscheduled=0)
	THEN ' Task shall be marked as Unassigned;'
END AS ErrorDescription, 
CASE WHEN @InterfaceSource = 0 THEN '' ELSE (SELECT Model,Equipment_No,Serial_No, Registration_Counter,Equip_Name,Projection_Type,Projection_Name,Task_Description,Global_Code,Component_Code,Modifier_Code
,Task_Type,Task_Counter,Inactive_Task,Unassigned_Task,Planning_Task,Planning_Lead_Days,Operational_Criticality,Task_Manufacturer_Code,Part_SOS,Primary_Part_Number,Group_Number,Rotable_Part_Number,Warranty_Days,Warranty_Usage,UOM,Schedule_On_Last_Scheduled,[First] ,Interval ,Final ,Last_Change_Usage,Last_Change_Date,External_Identifier,Suppression_Group,Suppression_Counter,Sibling_Interval ,Dependency_Group ,Dependency_Counter,Inspection_Logic_Task_Type,Inspection_Logic_Offset,Performance_Strategy,Performance_Strategy_Reason,Changeout_Guidelines,ERP_Component_Code,ERP_Modifier_Code,ERP_Scheduling_Task,Scheduling_Task,Last_Occurrence,Last_Occ_Date,Last_Scheduled,Last_Sched_Date,Next_Occurrence,Next_Occ_Date,Job_Code,Currency,Standard_Job_Reference,Cost_Bearer,Cost_Centre,Work_Group,Part_Type,Health_Safety,Pricing_Date,Consumable_Qty,Consumable_Top_Up,Consumable_Price,Parts_Sell,Labour_Sell,Misc_Sell,Shop_Labour,Labour_Hours,Labour_Activity ,Duration_Hours,Part_Expense,Labour_Expense,Misc_Expense,Part_EDC,Labour_EDC ,Misc_EDC,Labour_Split ,Crane_Cost,Freight_Perc_Parts,Avg_People_Vehicle,Avg_Daily_Work_Hours,Avg_Travel_Hours,Travel_Labour_Rate,Travel_Distance,Travel_Rate,Misc_Cost_Per_Trip,Update_Scheduling_Task_Only,System_Source ,Tag_Id,Rating 
FROM IMPORT_PROJECTION  IP where IP.Line_No = IPT.Line_No AND IP.Import_File_Name=@ImportFileName FOR XML PATH('I_PROJECTEDTASK'),ROOT('I_PROJECTEDTASKs')) END AS ImportRecord
FROM 
#z_I_PROJECTED_TASKS IPT 
	LEFT JOIN
tblSubSystems SS
	ON IPT.ComponentCodeId=SS.UnsCompCodeID
WHERE (IPT.Inactive_Task = 0) AND
((IPT.Unscheduled=1 AND IPT.ComponentCodeId IS NULL) OR
(SS.UnsCompCodeID>0 AND IPT.Unscheduled=0) OR 
(IPT.Task_Type='UN' AND IPT.Unscheduled=0))



--Check duplicate job codes and currency
INSERT INTO #z_Message(Line_No,ErrorDescription,ImportRecord)
SELECT DISTINCT Line_No,' More than one record with same combination of Currency and Job Code in the task;' AS ErrorDescription,
CASE WHEN @InterfaceSource = 0 THEN '' ELSE (SELECT Model,Equipment_No,Serial_No, Registration_Counter,Equip_Name,Projection_Type,Projection_Name,Task_Description,Global_Code,Component_Code,Modifier_Code
,Task_Type,Task_Counter,Inactive_Task,Unassigned_Task,Planning_Task,Planning_Lead_Days,Operational_Criticality,Task_Manufacturer_Code,Part_SOS,Primary_Part_Number,Group_Number,Rotable_Part_Number,Warranty_Days,Warranty_Usage,UOM,Schedule_On_Last_Scheduled,[First] ,Interval ,Final ,Last_Change_Usage,Last_Change_Date,External_Identifier,Suppression_Group,Suppression_Counter,Sibling_Interval ,Dependency_Group ,Dependency_Counter,Inspection_Logic_Task_Type,Inspection_Logic_Offset,Performance_Strategy,Performance_Strategy_Reason,Changeout_Guidelines,ERP_Component_Code,ERP_Modifier_Code,ERP_Scheduling_Task,Scheduling_Task,Last_Occurrence,Last_Occ_Date,Last_Scheduled,Last_Sched_Date,Next_Occurrence,Next_Occ_Date,Job_Code,Currency,Standard_Job_Reference,Cost_Bearer,Cost_Centre,Work_Group,Part_Type,Health_Safety,Pricing_Date,Consumable_Qty,Consumable_Top_Up,Consumable_Price,Parts_Sell,Labour_Sell,Misc_Sell,Shop_Labour,Labour_Hours,Labour_Activity ,Duration_Hours,Part_Expense,Labour_Expense,Misc_Expense,Part_EDC,Labour_EDC ,Misc_EDC,Labour_Split ,Crane_Cost,Freight_Perc_Parts,Avg_People_Vehicle,Avg_Daily_Work_Hours,Avg_Travel_Hours,Travel_Labour_Rate,Travel_Distance,Travel_Rate,Misc_Cost_Per_Trip,Update_Scheduling_Task_Only,System_Source ,Tag_Id,Rating 
FROM IMPORT_PROJECTION  IP where IP.Line_No = IPT.Line_No AND IP.Import_File_Name=@ImportFileName FOR XML PATH('I_PROJECTEDTASK'),ROOT('I_PROJECTEDTASKs')) END AS ImportRecord
FROM  
#z_I_PROJECTED_TASKS IPT  
INNER JOIN
(
	SELECT EqpProjId, PTGroupMin/*VV 17-Nov-2008 ,PTGroupMax*/
	FROM #z_I_PROJECTED_TASKS
	WHERE Inactive_Task = 0
	GROUP BY EqpProjId,PTGroupMin/*VV 17-Nov-2008 PTGroupMax*/,JobCodeId/* VV 13-Nov-2008 Job_Code*/,Currency
	HAVING COUNT(*) > 1
) DUP 
	ON IPT.EqpProjId=DUP.EqpProjId
	/*VV 17-Nov-2008 AND IPT.Line_No>=DUP.PTGroupMin AND IPT.Line_No<=DUP.PTGroupMax*/
	AND IPT.PTGroupMin=DUP.PTGroupMin


--duplicate Standard Jobs
INSERT INTO #z_Message(Line_No,ErrorDescription,ImportRecord)
SELECT DISTINCT Line_No,' There are duplicate Standard Jobs in the task;' AS ErrorDescription,
CASE WHEN @InterfaceSource = 0 THEN '' ELSE (SELECT Model,Equipment_No,Serial_No, Registration_Counter,Equip_Name,Projection_Type,Projection_Name,Task_Description,Global_Code,Component_Code,Modifier_Code
,Task_Type,Task_Counter,Inactive_Task,Unassigned_Task,Planning_Task,Planning_Lead_Days,Operational_Criticality,Task_Manufacturer_Code,Part_SOS,Primary_Part_Number,Group_Number,Rotable_Part_Number,Warranty_Days,Warranty_Usage,UOM,Schedule_On_Last_Scheduled,[First] ,Interval ,Final ,Last_Change_Usage,Last_Change_Date,External_Identifier,Suppression_Group,Suppression_Counter,Sibling_Interval ,Dependency_Group ,Dependency_Counter,Inspection_Logic_Task_Type,Inspection_Logic_Offset,Performance_Strategy,Performance_Strategy_Reason,Changeout_Guidelines,ERP_Component_Code,ERP_Modifier_Code,ERP_Scheduling_Task,Scheduling_Task,Last_Occurrence,Last_Occ_Date,Last_Scheduled,Last_Sched_Date,Next_Occurrence,Next_Occ_Date,Job_Code,Currency,Standard_Job_Reference,Cost_Bearer,Cost_Centre,Work_Group,Part_Type,Health_Safety,Pricing_Date,Consumable_Qty,Consumable_Top_Up,Consumable_Price,Parts_Sell,Labour_Sell,Misc_Sell,Shop_Labour,Labour_Hours,Labour_Activity ,Duration_Hours,Part_Expense,Labour_Expense,Misc_Expense,Part_EDC,Labour_EDC ,Misc_EDC,Labour_Split ,Crane_Cost,Freight_Perc_Parts,Avg_People_Vehicle,Avg_Daily_Work_Hours,Avg_Travel_Hours,Travel_Labour_Rate,Travel_Distance,Travel_Rate,Misc_Cost_Per_Trip,Update_Scheduling_Task_Only,System_Source ,Tag_Id,Rating 
FROM IMPORT_PROJECTION  IP where IP.Line_No = IPT.Line_No AND IP.Import_File_Name=@ImportFileName FOR XML PATH('I_PROJECTEDTASK'),ROOT('I_PROJECTEDTASKs')) END AS ImportRecord
FROM  
#z_I_PROJECTED_TASKS IPT  
INNER JOIN
(
	SELECT EqpProjId, PTGroupMin/*VV 17-Nov-2008 ,PTGroupMax*/
	FROM #z_I_PROJECTED_TASKS
	WHERE Inactive_Task = 0 AND ISNULL(Standard_Job_Reference,'')<>''
	GROUP BY EqpProjId,PTGroupMin,/* VV 17-Nov-2008 PTGroupMax,*/Standard_Job_Reference
	HAVING COUNT(*) > 1
) DUP 
	ON IPT.EqpProjId=DUP.EqpProjId
	/*VV 17-Nov-2008 AND IPT.Line_No>=DUP.PTGroupMin AND IPT.Line_No<=DUP.PTGroupMax*/
	AND IPT.PTGroupMin=DUP.PTGroupMin



CREATE TABLE #z_ProjTasks(ProjTaskId int,EqpProjId int,Scheduling_Group_Id int,
QUOMId int,Schedule_Type_Id int,Scheduling_Group_Counter int,InspectionTaskTypeId int,
TaskTypeId int,Scheduling_Group_Type int PRIMARY KEY(ProjTaskId,EqpProjId))

INSERT INTO #z_ProjTasks(ProjTaskId,EqpProjId,Scheduling_Group_Id,
QUOMId,Schedule_Type_Id,Scheduling_Group_Counter,InspectionTaskTypeId,TaskTypeId,Scheduling_Group_Type)

SELECT PT.ProjTaskId,PT.EqpProjId,PT.Scheduling_Group_Id,PT.UsageQUOMId AS QUOMId,
PT.Schedule_Type_Id,PT.Scheduling_Group_Counter,PT.InspectionTaskTypeId,PT.TaskTypeId,
PTSG.Scheduling_Group_Type
FROM
tblProjTasks PT
	INNER JOIN
(SELECT DISTINCT EqpProjId FROM #z_I_PROJECTED_TASKS WHERE EqpProjId>0 AND EqpProjId<>@EqpProjIdTo
/*VV 17-Nov-2008*/ AND Inactive_Task=0) EPR
	ON PT.EqpProjId=EPR.EqpProjId
	LEFT JOIN
PROJ_TASK_SCHEDULING_GROUP PTSG
	ON PT.Scheduling_Group_Id=PTSG.Scheduling_Group_Id
	LEFT JOIN
#z_I_PROJECTED_TASKS IPT
	ON PT.ProjTaskId=IPT.ProjTaskId
WHERE (IPT.ProjTaskId IS NULL) 
AND (PT.Scheduling_Group_Id>0 OR PT.InspectionTaskTypeId>0)


--All tasks in the sibiling group shall have the same UOM.
INSERT INTO #z_Message(Line_No,ErrorDescription,ImportRecord)
SELECT IPT.Line_No,' All tasks in Sibiling Group shall have the same UOM;',
CASE WHEN @InterfaceSource = 0 THEN '' ELSE (SELECT Model,Equipment_No,Serial_No, Registration_Counter,Equip_Name,Projection_Type,Projection_Name,Task_Description,Global_Code,Component_Code,Modifier_Code
,Task_Type,Task_Counter,Inactive_Task,Unassigned_Task,Planning_Task,Planning_Lead_Days,Operational_Criticality,Task_Manufacturer_Code,Part_SOS,Primary_Part_Number,Group_Number,Rotable_Part_Number,Warranty_Days,Warranty_Usage,UOM,Schedule_On_Last_Scheduled,[First] ,Interval ,Final ,Last_Change_Usage,Last_Change_Date,External_Identifier,Suppression_Group,Suppression_Counter,Sibling_Interval ,Dependency_Group ,Dependency_Counter,Inspection_Logic_Task_Type,Inspection_Logic_Offset,Performance_Strategy,Performance_Strategy_Reason,Changeout_Guidelines,ERP_Component_Code,ERP_Modifier_Code,ERP_Scheduling_Task,Scheduling_Task,Last_Occurrence,Last_Occ_Date,Last_Scheduled,Last_Sched_Date,Next_Occurrence,Next_Occ_Date,Job_Code,Currency,Standard_Job_Reference,Cost_Bearer,Cost_Centre,Work_Group,Part_Type,Health_Safety,Pricing_Date,Consumable_Qty,Consumable_Top_Up,Consumable_Price,Parts_Sell,Labour_Sell,Misc_Sell,Shop_Labour,Labour_Hours,Labour_Activity ,Duration_Hours,Part_Expense,Labour_Expense,Misc_Expense,Part_EDC,Labour_EDC ,Misc_EDC,Labour_Split ,Crane_Cost,Freight_Perc_Parts,Avg_People_Vehicle,Avg_Daily_Work_Hours,Avg_Travel_Hours,Travel_Labour_Rate,Travel_Distance,Travel_Rate,Misc_Cost_Per_Trip,Update_Scheduling_Task_Only,System_Source ,Tag_Id,Rating 
FROM IMPORT_PROJECTION  IP where IP.Line_No = IPT.Line_No AND IP.Import_File_Name=@ImportFileName FOR XML PATH('I_PROJECTEDTASK'),ROOT('I_PROJECTEDTASKs')) END AS ImportRecord
FROM
#z_I_PROJECTED_TASKS IPT
	INNER JOIN
(SELECT EqpProjId,Scheduling_Group_Id 
FROM
	(SELECT IPT.EqpProjId,IPT.Scheduling_Group_Id,QUOMId
	FROM 
	#z_I_PROJECTED_TASKS IPT 
	WHERE IPT.Inactive_Task=0 AND 
	IPT.Scheduling_Group_Id>0 AND 
	IPT.Scheduling_Group_Type=1 AND 
	SchedulingGroupSubtypeId=1
		UNION ALL
	SELECT PT.EqpProjId,PT.Scheduling_Group_Id,QUOMId
	FROM 
	#z_ProjTasks PT
		INNER JOIN
	PROJ_TASK_SCHEDULING_GROUP PTSG 
		ON PT.Scheduling_Group_Id=PTSG.Scheduling_Group_Id
	WHERE PTSG.SchedulingGroupSubtypeId=1 AND PTSG.Scheduling_Group_Type=1) A
GROUP BY EqpProjId,Scheduling_Group_Id
HAVING COUNT(DISTINCT ISNULL(QUOMId,0))>1) B
	ON IPT.EqpProjId=B.EqpProjId AND IPT.Scheduling_Group_Id=B.Scheduling_Group_Id
WHERE IPT.Inactive_Task=0

--All tasks in the group shall have the same schedule type
INSERT INTO #z_Message(Line_No,ErrorDescription,ImportRecord)
SELECT IPT.Line_No,' All tasks in Scheduling Group shall have the same Schedule Type;',
CASE WHEN @InterfaceSource = 0 THEN '' ELSE (SELECT Model,Equipment_No,Serial_No, Registration_Counter,Equip_Name,Projection_Type,Projection_Name,Task_Description,Global_Code,Component_Code,Modifier_Code
,Task_Type,Task_Counter,Inactive_Task,Unassigned_Task,Planning_Task,Planning_Lead_Days,Operational_Criticality,Task_Manufacturer_Code,Part_SOS,Primary_Part_Number,Group_Number,Rotable_Part_Number,Warranty_Days,Warranty_Usage,UOM,Schedule_On_Last_Scheduled,[First] ,Interval ,Final ,Last_Change_Usage,Last_Change_Date,External_Identifier,Suppression_Group,Suppression_Counter,Sibling_Interval ,Dependency_Group ,Dependency_Counter,Inspection_Logic_Task_Type,Inspection_Logic_Offset,Performance_Strategy,Performance_Strategy_Reason,Changeout_Guidelines,ERP_Component_Code,ERP_Modifier_Code,ERP_Scheduling_Task,Scheduling_Task,Last_Occurrence,Last_Occ_Date,Last_Scheduled,Last_Sched_Date,Next_Occurrence,Next_Occ_Date,Job_Code,Currency,Standard_Job_Reference,Cost_Bearer,Cost_Centre,Work_Group,Part_Type,Health_Safety,Pricing_Date,Consumable_Qty,Consumable_Top_Up,Consumable_Price,Parts_Sell,Labour_Sell,Misc_Sell,Shop_Labour,Labour_Hours,Labour_Activity ,Duration_Hours,Part_Expense,Labour_Expense,Misc_Expense,Part_EDC,Labour_EDC ,Misc_EDC,Labour_Split ,Crane_Cost,Freight_Perc_Parts,Avg_People_Vehicle,Avg_Daily_Work_Hours,Avg_Travel_Hours,Travel_Labour_Rate,Travel_Distance,Travel_Rate,Misc_Cost_Per_Trip,Update_Scheduling_Task_Only,System_Source ,Tag_Id,Rating 
FROM IMPORT_PROJECTION  IP where IP.Line_No = IPT.Line_No AND IP.Import_File_Name=@ImportFileName FOR XML PATH('I_PROJECTEDTASK'),ROOT('I_PROJECTEDTASKs')) END AS ImportRecord

FROM
#z_I_PROJECTED_TASKS IPT
	INNER JOIN
(SELECT EqpProjId,Scheduling_Group_Id 
FROM
	(SELECT IPT.EqpProjId,IPT.Scheduling_Group_Id,
	CASE WHEN IPT.Schedule_Type_Id IN(1,3) THEN 1 ELSE 2 END AS Schedule_Type
	FROM 
	#z_I_PROJECTED_TASKS IPT 
	WHERE IPT.Inactive_Task=0 AND IPT.Scheduling_Group_Id>0
		UNION ALL
	SELECT PT.EqpProjId,PT.Scheduling_Group_Id,
	CASE WHEN PT.Schedule_Type_Id IN(1,3) THEN 1 ELSE 2 END AS Schedule_Type
	FROM 
	#z_ProjTasks PT
	WHERE PT.Scheduling_Group_Id>0
) A
GROUP BY EqpProjId,Scheduling_Group_Id
HAVING COUNT(DISTINCT Schedule_Type)>1) B
	ON IPT.EqpProjId=B.EqpProjId AND IPT.Scheduling_Group_Id=B.Scheduling_Group_Id
WHERE IPT.Inactive_Task=0

--Task priority is not set
INSERT INTO #z_Message(Line_No,ErrorDescription,ImportRecord)
SELECT IPT.Line_No,' Task priority is not set;',
CASE WHEN @InterfaceSource = 0 THEN '' ELSE (SELECT Model,Equipment_No,Serial_No, Registration_Counter,Equip_Name,Projection_Type,Projection_Name,Task_Description,Global_Code,Component_Code,Modifier_Code
,Task_Type,Task_Counter,Inactive_Task,Unassigned_Task,Planning_Task,Planning_Lead_Days,Operational_Criticality,Task_Manufacturer_Code,Part_SOS,Primary_Part_Number,Group_Number,Rotable_Part_Number,Warranty_Days,Warranty_Usage,UOM,Schedule_On_Last_Scheduled,[First] ,Interval ,Final ,Last_Change_Usage,Last_Change_Date,External_Identifier,Suppression_Group,Suppression_Counter,Sibling_Interval ,Dependency_Group ,Dependency_Counter,Inspection_Logic_Task_Type,Inspection_Logic_Offset,Performance_Strategy,Performance_Strategy_Reason,Changeout_Guidelines,ERP_Component_Code,ERP_Modifier_Code,ERP_Scheduling_Task,Scheduling_Task,Last_Occurrence,Last_Occ_Date,Last_Scheduled,Last_Sched_Date,Next_Occurrence,Next_Occ_Date,Job_Code,Currency,Standard_Job_Reference,Cost_Bearer,Cost_Centre,Work_Group,Part_Type,Health_Safety,Pricing_Date,Consumable_Qty,Consumable_Top_Up,Consumable_Price,Parts_Sell,Labour_Sell,Misc_Sell,Shop_Labour,Labour_Hours,Labour_Activity ,Duration_Hours,Part_Expense,Labour_Expense,Misc_Expense,Part_EDC,Labour_EDC ,Misc_EDC,Labour_Split ,Crane_Cost,Freight_Perc_Parts,Avg_People_Vehicle,Avg_Daily_Work_Hours,Avg_Travel_Hours,Travel_Labour_Rate,Travel_Distance,Travel_Rate,Misc_Cost_Per_Trip,Update_Scheduling_Task_Only,System_Source ,Tag_Id,Rating 
FROM IMPORT_PROJECTION  IP where IP.Line_No = IPT.Line_No AND IP.Import_File_Name=@ImportFileName FOR XML PATH('I_PROJECTEDTASK'),ROOT('I_PROJECTEDTASKs')) END AS ImportRecord

FROM
#z_I_PROJECTED_TASKS IPT
WHERE IPT.Inactive_Task=0 AND IPT.Scheduling_Group_Id>0 AND ISNULL(IPT.Scheduling_Group_Counter, -1 ) < 0

--drop table z_I_PROJECTED_TASKS--,z_ProjTasks
--select * into z_I_PROJECTED_TASKS from #z_I_PROJECTED_TASKS
--select * into z_ProjTasks from #z_ProjTasks
--return

--There are duplicate Task Priority in Depnedency Group 
INSERT INTO #z_Message(Line_No,ErrorDescription,ImportRecord)
SELECT IPT.Line_No,' There are duplicate Task Priority in Depenedency Group;',
CASE WHEN @InterfaceSource = 0 THEN '' ELSE (SELECT Model,Equipment_No,Serial_No, Registration_Counter,Equip_Name,Projection_Type,Projection_Name,Task_Description,Global_Code,Component_Code,Modifier_Code
,Task_Type,Task_Counter,Inactive_Task,Unassigned_Task,Planning_Task,Planning_Lead_Days,Operational_Criticality,Task_Manufacturer_Code,Part_SOS,Primary_Part_Number,Group_Number,Rotable_Part_Number,Warranty_Days,Warranty_Usage,UOM,Schedule_On_Last_Scheduled,[First] ,Interval ,Final ,Last_Change_Usage,Last_Change_Date,External_Identifier,Suppression_Group,Suppression_Counter,Sibling_Interval ,Dependency_Group ,Dependency_Counter,Inspection_Logic_Task_Type,Inspection_Logic_Offset,Performance_Strategy,Performance_Strategy_Reason,Changeout_Guidelines,ERP_Component_Code,ERP_Modifier_Code,ERP_Scheduling_Task,Scheduling_Task,Last_Occurrence,Last_Occ_Date,Last_Scheduled,Last_Sched_Date,Next_Occurrence,Next_Occ_Date,Job_Code,Currency,Standard_Job_Reference,Cost_Bearer,Cost_Centre,Work_Group,Part_Type,Health_Safety,Pricing_Date,Consumable_Qty,Consumable_Top_Up,Consumable_Price,Parts_Sell,Labour_Sell,Misc_Sell,Shop_Labour,Labour_Hours,Labour_Activity ,Duration_Hours,Part_Expense,Labour_Expense,Misc_Expense,Part_EDC,Labour_EDC ,Misc_EDC,Labour_Split ,Crane_Cost,Freight_Perc_Parts,Avg_People_Vehicle,Avg_Daily_Work_Hours,Avg_Travel_Hours,Travel_Labour_Rate,Travel_Distance,Travel_Rate,Misc_Cost_Per_Trip,Update_Scheduling_Task_Only,System_Source ,Tag_Id,Rating 
FROM IMPORT_PROJECTION  IP where IP.Line_No = IPT.Line_No AND IP.Import_File_Name=@ImportFileName FOR XML PATH('I_PROJECTEDTASK'),ROOT('I_PROJECTEDTASKs')) END AS ImportRecord

FROM
#z_I_PROJECTED_TASKS IPT
	INNER JOIN
(SELECT EqpProjId,Scheduling_Group_Id,Scheduling_Group_Counter
FROM
	(SELECT IPT.EqpProjId,IPT.Scheduling_Group_Id,IPT.Scheduling_Group_Counter
	FROM 
	#z_I_PROJECTED_TASKS IPT 
	WHERE IPT.Inactive_Task=0 AND IPT.Scheduling_Group_Id>0 AND IPT.Scheduling_Group_Type=2
	GROUP BY IPT.EqpProjId,IPT.Scheduling_Group_Id,IPT.Scheduling_Group_Counter,IPT.PTGroupMin
		UNION ALL
	SELECT PT.EqpProjId,PT.Scheduling_Group_Id,PT.Scheduling_Group_Counter
	FROM 
	#z_ProjTasks PT
	WHERE PT.Scheduling_Group_Id>0 AND PT.Scheduling_Group_Type=2
) A
GROUP BY EqpProjId,Scheduling_Group_Id,Scheduling_Group_Counter
HAVING COUNT(Scheduling_Group_Id)>1) B
	ON IPT.EqpProjId=B.EqpProjId AND IPT.Scheduling_Group_Id=B.Scheduling_Group_Id AND IPT.Scheduling_Group_Counter=B.Scheduling_Group_Counter
WHERE IPT.Inactive_Task=0

--Inspection Logic

--The Task Type selected for inspection cannot be the Task Type of another "Inspection Logic Task"

INSERT INTO #z_Message(Line_No,ErrorDescription,ImportRecord)
SELECT IPT.Line_No,' The Task Type selected for Inspection cannot be the Task Type of another "Inspection Logic Task";',
CASE WHEN @InterfaceSource = 0 THEN '' ELSE (SELECT Model,Equipment_No,Serial_No, Registration_Counter,Equip_Name,Projection_Type,Projection_Name,Task_Description,Global_Code,Component_Code,Modifier_Code
,Task_Type,Task_Counter,Inactive_Task,Unassigned_Task,Planning_Task,Planning_Lead_Days,Operational_Criticality,Task_Manufacturer_Code,Part_SOS,Primary_Part_Number,Group_Number,Rotable_Part_Number,Warranty_Days,Warranty_Usage,UOM,Schedule_On_Last_Scheduled,[First] ,Interval ,Final ,Last_Change_Usage,Last_Change_Date,External_Identifier,Suppression_Group,Suppression_Counter,Sibling_Interval ,Dependency_Group ,Dependency_Counter,Inspection_Logic_Task_Type,Inspection_Logic_Offset,Performance_Strategy,Performance_Strategy_Reason,Changeout_Guidelines,ERP_Component_Code,ERP_Modifier_Code,ERP_Scheduling_Task,Scheduling_Task,Last_Occurrence,Last_Occ_Date,Last_Scheduled,Last_Sched_Date,Next_Occurrence,Next_Occ_Date,Job_Code,Currency,Standard_Job_Reference,Cost_Bearer,Cost_Centre,Work_Group,Part_Type,Health_Safety,Pricing_Date,Consumable_Qty,Consumable_Top_Up,Consumable_Price,Parts_Sell,Labour_Sell,Misc_Sell,Shop_Labour,Labour_Hours,Labour_Activity ,Duration_Hours,Part_Expense,Labour_Expense,Misc_Expense,Part_EDC,Labour_EDC ,Misc_EDC,Labour_Split ,Crane_Cost,Freight_Perc_Parts,Avg_People_Vehicle,Avg_Daily_Work_Hours,Avg_Travel_Hours,Travel_Labour_Rate,Travel_Distance,Travel_Rate,Misc_Cost_Per_Trip,Update_Scheduling_Task_Only,System_Source ,Tag_Id,Rating 
FROM IMPORT_PROJECTION  IP where IP.Line_No = IPT.Line_No AND IP.Import_File_Name=@ImportFileName FOR XML PATH('I_PROJECTEDTASK'),ROOT('I_PROJECTEDTASKs')) END AS ImportRecord

FROM
#z_I_PROJECTED_TASKS IPT
	INNER JOIN
(SELECT EqpProjId,TaskTypeId FROM #z_ProjTasks WHERE InspectionTaskTypeId>0) PT
	ON IPT.EqpProjId=PT.EqpProjId AND IPT.InspectionTaskTypeId=PT.TaskTypeId
WHERE IPT.Inactive_Task=0

DROP TABLE #z_ProjTasks

INSERT INTO #z_Message(Line_No,ErrorDescription,ImportRecord)
SELECT DISTINCT IPT.Line_No,' The Task Type selected for Inspection cannot be the Task Type of another "Inspection Logic Task";',
CASE WHEN @InterfaceSource = 0 THEN '' ELSE (SELECT Model,Equipment_No,Serial_No, Registration_Counter,Equip_Name,Projection_Type,Projection_Name,Task_Description,Global_Code,Component_Code,Modifier_Code
,Task_Type,Task_Counter,Inactive_Task,Unassigned_Task,Planning_Task,Planning_Lead_Days,Operational_Criticality,Task_Manufacturer_Code,Part_SOS,Primary_Part_Number,Group_Number,Rotable_Part_Number,Warranty_Days,Warranty_Usage,UOM,Schedule_On_Last_Scheduled,[First] ,Interval ,Final ,Last_Change_Usage,Last_Change_Date,External_Identifier,Suppression_Group,Suppression_Counter,Sibling_Interval ,Dependency_Group ,Dependency_Counter,Inspection_Logic_Task_Type,Inspection_Logic_Offset,Performance_Strategy,Performance_Strategy_Reason,Changeout_Guidelines,ERP_Component_Code,ERP_Modifier_Code,ERP_Scheduling_Task,Scheduling_Task,Last_Occurrence,Last_Occ_Date,Last_Scheduled,Last_Sched_Date,Next_Occurrence,Next_Occ_Date,Job_Code,Currency,Standard_Job_Reference,Cost_Bearer,Cost_Centre,Work_Group,Part_Type,Health_Safety,Pricing_Date,Consumable_Qty,Consumable_Top_Up,Consumable_Price,Parts_Sell,Labour_Sell,Misc_Sell,Shop_Labour,Labour_Hours,Labour_Activity ,Duration_Hours,Part_Expense,Labour_Expense,Misc_Expense,Part_EDC,Labour_EDC ,Misc_EDC,Labour_Split ,Crane_Cost,Freight_Perc_Parts,Avg_People_Vehicle,Avg_Daily_Work_Hours,Avg_Travel_Hours,Travel_Labour_Rate,Travel_Distance,Travel_Rate,Misc_Cost_Per_Trip,Update_Scheduling_Task_Only,System_Source ,Tag_Id,Rating 
FROM IMPORT_PROJECTION  IP where IP.Line_No = IPT.Line_No AND IP.Import_File_Name=@ImportFileName FOR XML PATH('I_PROJECTEDTASK'),ROOT('I_PROJECTEDTASKs')) END AS ImportRecord

FROM
#z_I_PROJECTED_TASKS IPT
	INNER JOIN
#z_I_PROJECTED_TASKS PT
	ON IPT.Inactive_Task=0 AND PT.Inactive_Task=0 AND
	   IPT.EqpProjId=PT.EqpProjId AND 
	   IPT.InspectionTaskTypeId=PT.TaskTypeId AND
	   IPT.PTGroupMin<>PT.PTGroupMin
WHERE PT.InspectionTaskTypeId>0

--The Task Type selected for inspection cannot be the same as the Task type of the task
INSERT INTO #z_Message(Line_No,ErrorDescription,ImportRecord)
SELECT IPT.Line_No,' The Task Type selected for Inspection cannot be the same as the Task Type of the task;',
CASE WHEN @InterfaceSource = 0 THEN '' ELSE (SELECT Model,Equipment_No,Serial_No, Registration_Counter,Equip_Name,Projection_Type,Projection_Name,Task_Description,Global_Code,Component_Code,Modifier_Code
,Task_Type,Task_Counter,Inactive_Task,Unassigned_Task,Planning_Task,Planning_Lead_Days,Operational_Criticality,Task_Manufacturer_Code,Part_SOS,Primary_Part_Number,Group_Number,Rotable_Part_Number,Warranty_Days,Warranty_Usage,UOM,Schedule_On_Last_Scheduled,[First] ,Interval ,Final ,Last_Change_Usage,Last_Change_Date,External_Identifier,Suppression_Group,Suppression_Counter,Sibling_Interval ,Dependency_Group ,Dependency_Counter,Inspection_Logic_Task_Type,Inspection_Logic_Offset,Performance_Strategy,Performance_Strategy_Reason,Changeout_Guidelines,ERP_Component_Code,ERP_Modifier_Code,ERP_Scheduling_Task,Scheduling_Task,Last_Occurrence,Last_Occ_Date,Last_Scheduled,Last_Sched_Date,Next_Occurrence,Next_Occ_Date,Job_Code,Currency,Standard_Job_Reference,Cost_Bearer,Cost_Centre,Work_Group,Part_Type,Health_Safety,Pricing_Date,Consumable_Qty,Consumable_Top_Up,Consumable_Price,Parts_Sell,Labour_Sell,Misc_Sell,Shop_Labour,Labour_Hours,Labour_Activity ,Duration_Hours,Part_Expense,Labour_Expense,Misc_Expense,Part_EDC,Labour_EDC ,Misc_EDC,Labour_Split ,Crane_Cost,Freight_Perc_Parts,Avg_People_Vehicle,Avg_Daily_Work_Hours,Avg_Travel_Hours,Travel_Labour_Rate,Travel_Distance,Travel_Rate,Misc_Cost_Per_Trip,Update_Scheduling_Task_Only,System_Source ,Tag_Id,Rating 
FROM IMPORT_PROJECTION  IP where IP.Line_No = IPT.Line_No AND IP.Import_File_Name=@ImportFileName FOR XML PATH('I_PROJECTEDTASK'),ROOT('I_PROJECTEDTASKs')) END AS ImportRecord

FROM #z_I_PROJECTED_TASKS IPT WHERE IPT.Inactive_Task=0 AND IPT.InspectionTaskTypeId=IPT.TaskTypeId   

--The Task Type selected for inspection cannot be Unassigned
INSERT INTO #z_Message(Line_No,ErrorDescription,ImportRecord)
SELECT IPT.Line_No,' The Task Type selected for Inspection cannot be Unassigned;',
CASE WHEN @InterfaceSource = 0 THEN '' ELSE (SELECT Model,Equipment_No,Serial_No, Registration_Counter,Equip_Name,Projection_Type,Projection_Name,Task_Description,Global_Code,Component_Code,Modifier_Code
,Task_Type,Task_Counter,Inactive_Task,Unassigned_Task,Planning_Task,Planning_Lead_Days,Operational_Criticality,Task_Manufacturer_Code,Part_SOS,Primary_Part_Number,Group_Number,Rotable_Part_Number,Warranty_Days,Warranty_Usage,UOM,Schedule_On_Last_Scheduled,[First] ,Interval ,Final ,Last_Change_Usage,Last_Change_Date,External_Identifier,Suppression_Group,Suppression_Counter,Sibling_Interval ,Dependency_Group ,Dependency_Counter,Inspection_Logic_Task_Type,Inspection_Logic_Offset,Performance_Strategy,Performance_Strategy_Reason,Changeout_Guidelines,ERP_Component_Code,ERP_Modifier_Code,ERP_Scheduling_Task,Scheduling_Task,Last_Occurrence,Last_Occ_Date,Last_Scheduled,Last_Sched_Date,Next_Occurrence,Next_Occ_Date,Job_Code,Currency,Standard_Job_Reference,Cost_Bearer,Cost_Centre,Work_Group,Part_Type,Health_Safety,Pricing_Date,Consumable_Qty,Consumable_Top_Up,Consumable_Price,Parts_Sell,Labour_Sell,Misc_Sell,Shop_Labour,Labour_Hours,Labour_Activity ,Duration_Hours,Part_Expense,Labour_Expense,Misc_Expense,Part_EDC,Labour_EDC ,Misc_EDC,Labour_Split ,Crane_Cost,Freight_Perc_Parts,Avg_People_Vehicle,Avg_Daily_Work_Hours,Avg_Travel_Hours,Travel_Labour_Rate,Travel_Distance,Travel_Rate,Misc_Cost_Per_Trip,Update_Scheduling_Task_Only,System_Source ,Tag_Id,Rating 
FROM IMPORT_PROJECTION  IP where IP.Line_No = IPT.Line_No AND IP.Import_File_Name=@ImportFileName FOR XML PATH('I_PROJECTEDTASK'),ROOT('I_PROJECTEDTASKs')) END AS ImportRecord

FROM #z_I_PROJECTED_TASKS IPT WHERE IPT.Inactive_Task=0 AND IPT.Inspection_Logic_Task_Type='UN'  

--The scheduling type must always be LAST PERFORMED for Inspection Logic
INSERT INTO #z_Message(Line_No,ErrorDescription,ImportRecord)
SELECT IPT.Line_No,' The Scheduling Type must always be LAST PERFORMED for Inspection Logic;',
CASE WHEN @InterfaceSource = 0 THEN '' ELSE (SELECT Model,Equipment_No,Serial_No, Registration_Counter,Equip_Name,Projection_Type,Projection_Name,Task_Description,Global_Code,Component_Code,Modifier_Code
,Task_Type,Task_Counter,Inactive_Task,Unassigned_Task,Planning_Task,Planning_Lead_Days,Operational_Criticality,Task_Manufacturer_Code,Part_SOS,Primary_Part_Number,Group_Number,Rotable_Part_Number,Warranty_Days,Warranty_Usage,UOM,Schedule_On_Last_Scheduled,[First] ,Interval ,Final ,Last_Change_Usage,Last_Change_Date,External_Identifier,Suppression_Group,Suppression_Counter,Sibling_Interval ,Dependency_Group ,Dependency_Counter,Inspection_Logic_Task_Type,Inspection_Logic_Offset,Performance_Strategy,Performance_Strategy_Reason,Changeout_Guidelines,ERP_Component_Code,ERP_Modifier_Code,ERP_Scheduling_Task,Scheduling_Task,Last_Occurrence,Last_Occ_Date,Last_Scheduled,Last_Sched_Date,Next_Occurrence,Next_Occ_Date,Job_Code,Currency,Standard_Job_Reference,Cost_Bearer,Cost_Centre,Work_Group,Part_Type,Health_Safety,Pricing_Date,Consumable_Qty,Consumable_Top_Up,Consumable_Price,Parts_Sell,Labour_Sell,Misc_Sell,Shop_Labour,Labour_Hours,Labour_Activity ,Duration_Hours,Part_Expense,Labour_Expense,Misc_Expense,Part_EDC,Labour_EDC ,Misc_EDC,Labour_Split ,Crane_Cost,Freight_Perc_Parts,Avg_People_Vehicle,Avg_Daily_Work_Hours,Avg_Travel_Hours,Travel_Labour_Rate,Travel_Distance,Travel_Rate,Misc_Cost_Per_Trip,Update_Scheduling_Task_Only,System_Source ,Tag_Id,Rating 
FROM IMPORT_PROJECTION  IP where IP.Line_No = IPT.Line_No AND IP.Import_File_Name=@ImportFileName FOR XML PATH('I_PROJECTEDTASK'),ROOT('I_PROJECTEDTASKs')) END AS ImportRecord

FROM #z_I_PROJECTED_TASKS IPT WHERE 
IPT.Inactive_Task=0 AND IPT.InspectionTaskTypeId>0 AND IPT.Schedule_Type_Id IN(2,4)  


--UOM does not exist in projection
INSERT INTO #z_Message(Line_No,ErrorDescription,ImportRecord)
SELECT IPT.Line_No,' UOM does not exist in projection;', 
CASE WHEN @InterfaceSource = 0 THEN '' ELSE (SELECT Model,Equipment_No,Serial_No, Registration_Counter,Equip_Name,Projection_Type,Projection_Name,Task_Description,Global_Code,Component_Code,Modifier_Code
,Task_Type,Task_Counter,Inactive_Task,Unassigned_Task,Planning_Task,Planning_Lead_Days,Operational_Criticality,Task_Manufacturer_Code,Part_SOS,Primary_Part_Number,Group_Number,Rotable_Part_Number,Warranty_Days,Warranty_Usage,UOM,Schedule_On_Last_Scheduled,[First] ,Interval ,Final ,Last_Change_Usage,Last_Change_Date,External_Identifier,Suppression_Group,Suppression_Counter,Sibling_Interval ,Dependency_Group ,Dependency_Counter,Inspection_Logic_Task_Type,Inspection_Logic_Offset,Performance_Strategy,Performance_Strategy_Reason,Changeout_Guidelines,ERP_Component_Code,ERP_Modifier_Code,ERP_Scheduling_Task,Scheduling_Task,Last_Occurrence,Last_Occ_Date,Last_Scheduled,Last_Sched_Date,Next_Occurrence,Next_Occ_Date,Job_Code,Currency,Standard_Job_Reference,Cost_Bearer,Cost_Centre,Work_Group,Part_Type,Health_Safety,Pricing_Date,Consumable_Qty,Consumable_Top_Up,Consumable_Price,Parts_Sell,Labour_Sell,Misc_Sell,Shop_Labour,Labour_Hours,Labour_Activity ,Duration_Hours,Part_Expense,Labour_Expense,Misc_Expense,Part_EDC,Labour_EDC ,Misc_EDC,Labour_Split ,Crane_Cost,Freight_Perc_Parts,Avg_People_Vehicle,Avg_Daily_Work_Hours,Avg_Travel_Hours,Travel_Labour_Rate,Travel_Distance,Travel_Rate,Misc_Cost_Per_Trip,Update_Scheduling_Task_Only,System_Source ,Tag_Id,Rating 
FROM IMPORT_PROJECTION  IP where IP.Line_No = IPT.Line_No AND IP.Import_File_Name=@ImportFileName FOR XML PATH('I_PROJECTEDTASK'),ROOT('I_PROJECTEDTASKs')) END AS ImportRecord
FROM
#z_I_PROJECTED_TASKS IPT 
	LEFT JOIN 
(SELECT DISTINCT EPR.EqpProjId,ISNULL(USR.ChildQUOMId,EPR.EndQUOMId) AS QUOMId
FROM         
tblUsageSteps US INNER JOIN
tblUsageStepRels USR ON US.UsageStepId = USR.UsageStepId INNER JOIN
tblUsageProfiles UP ON US.UsageProfileId = UP.UsageProfileId RIGHT OUTER JOIN
tblEqpProjs EPR ON UP.UsageProfileId = EPR.ProjUsageProfileId
WHERE EPR.EqpProjId IN(SELECT EqpProjId FROM #z_I_PROJECTED_TASKS WHERE EqpProjId>0 AND Inactive_Task=0)) A
	ON IPT.EqpProjId=A.EqpProjId AND ISNULL(IPT.QUOMId,0)=ISNULL(A.QUOMId,0)
WHERE IPT.Inactive_Task=0 AND ISNULL(IPT.QUOMId,0)<>0 AND A.EqpProjId IS NULL


IF EXISTS(SELECT Line_No FROM #z_Message WHERE ErrorDescription<>'')
BEGIN
	

	INSERT INTO IMPORT_ERROR(ImportFileName,Line_No,ErrorDescription,ImportErrorTypeId,LastModDate,ImportRecord,ImportSourceId)
	SELECT @ImportFileName AS ImportFileName,CASE WHEN @InterfaceSource = 0 THEN Line_No END,ErrorDescription, @ErrorTypeBusRules AS ImportErrorTypeId,
	GETDate() AS LastModDate,CONVERT(VARCHAR(MAX),ImportRecord),@InterfaceSource
	FROM #z_Message WHERE ErrorDescription<>''

	DELETE IPT FROM
	#z_I_PROJECTED_TASKS IPT
		INNER JOIN
	#z_Message M
		ON IPT.Line_No=M.Line_No
	WHERE M.ErrorDescription<>''

	TRUNCATE TABLE #z_Message

	IF NOT EXISTS(SELECT * FROM #z_I_PROJECTED_TASKS)
	BEGIN
		GOTO END_IMPORT
	END
END



INSERT INTO TASK_HEADER (Description, Component_code, Modifier_code, task_type, application_code)
SELECT     cc1.Code + '.' + mc1.Code + '.' + tt1.Code + '.' + ac1.Code + ' ' + cc1.Description, cc1.Code, mc1.Code, tt1.Code, ac1.Code
FROM         dbo.TASK_HEADER th INNER JOIN
                      dbo.tblComponentCodes cc ON th.Component_Code = cc.Code INNER JOIN
                      dbo.tblApplicationCodes ac ON th.Application_Code = ac.Code INNER JOIN
                      dbo.tblTaskTypes tt ON th.Task_Type = tt.Code INNER JOIN
                      dbo.tblModifierCodes mc ON th.Modifier_Code = mc.Code RIGHT OUTER JOIN
                      #z_I_PROJECTED_TASKS t ON cc.ComponentCodeID = t.ComponentCodeID AND ac.ApplicationCodeID = t.ApplicationCodeID AND 
                      tt.TaskTypeID = t.TaskTypeID AND mc.ModifierID = t.ModifierID INNER JOIN
                      dbo.tblComponentCodes cc1 ON t.ComponentCodeID = cc1.ComponentCodeID INNER JOIN
                      dbo.tblModifierCodes mc1 ON t.ModifierID = mc1.ModifierID INNER JOIN
                      dbo.tblTaskTypes tt1 ON t.TaskTypeID = tt1.TaskTypeID INNER JOIN
                      dbo.tblApplicationCodes ac1 ON t.ApplicationCodeID = ac1.ApplicationCodeID
WHERE     (th.Task_Header_Id IS NULL)
GROUP BY cc1.Code + '.' + mc1.Code + '.' + tt1.Code + '.' + ac1.Code + ' ' + cc1.Description, cc1.Code, mc1.Code, tt1.Code, ac1.Code


--Apply business rules
UPDATE IPT SET
IPT.CurrencyId=ISNULL(IPT.CurrencyId,@PrimaryCurrency),
IPT.Pricing_Date=ISNULL(IPT.Pricing_Date,GETDATE()),
IPT.Schedule_Type_Id=CASE IPT.Planning_Task /*Planning task was set earlier in the first update statement*/
				WHEN 1 THEN IPT.Schedule_Type_Id
				ELSE
					CASE WHEN IPT.QUOMId>0 THEN @LastPerfUOM ELSE @LastPerfDate END
				END,

IPT.InspectionTaskTypeId=NULLIF(CAST(IPT.Planning_Task AS int),0)*IPT.InspectionTaskTypeId/*null for planning task*/,
IPT.InspectionOffset=CAST(IPT.Planning_Task AS int)*IPT.InspectionOffset/*0 for planning task*/,
IPT.Scheduling_Group_Id=NULLIF(CAST(IPT.Planning_Task AS int),0)*IPT.Scheduling_Group_Id/*null for planning task*/,
IPT.Scheduling_Group_Counter=NULLIF(CAST(Planning_Task AS int),0)*IPT.Scheduling_Group_Counter/*null for planning task*/,
IPT.SchedulingTaskId=NULLIF(CAST(Planning_Task AS int),0)*IPT.SchedulingTaskId/*null for planning task*/,
IPT.QtyVolume=CASE WHEN IPT.Consumable=1 THEN IPT.QtyVolume ELSE 0 END,
IPT.PercentTopUp=CASE WHEN IPT.Consumable=1 THEN IPT.PercentTopUp ELSE 0 END,
IPT.UnitPrice=CASE WHEN IPT.Consumable=1 THEN IPT.UnitPrice ELSE 0 END,
IPT.PartsCost=CASE WHEN IPT.Consumable=1 THEN dbo.CONSUMABLE_PART_PRICE_F(QtyVolume,UnitPrice,PercentTopUp) ELSE IPT.PartsCost END,
IPT.Task_Header_Id=TH.Task_Header_Id,
IPT.Last_Change_Usage =CASE WHEN IPT.QUOMId IS NULL /*If QUOMId is null Last_Change_Usage was set to 0*/
							THEN CAST(IPT.Last_Change_Date AS float) - CAST(EP.StartDate as float)
							ELSE IPT.Last_Change_Usage END,
IPT.PartId=CASE WHEN IPT.RotableId>0 THEN NULL ELSE PartId END
FROM
TASK_HEADER th 
	INNER JOIN
tblComponentCodes cc 
	ON th.Component_Code = cc.Code 
	INNER JOIN
tblApplicationCodes ac 
	ON th.Application_Code = ac.Code 
	INNER JOIN
tblTaskTypes tt 
	ON th.Task_Type = tt.Code 
	INNER JOIN
tblModifierCodes mc 
	ON th.Modifier_Code = mc.Code 
	INNER JOIN
#z_I_PROJECTED_TASKS IPT 
	ON cc.ComponentCodeID = IPT.ComponentCodeID AND AC.ApplicationCodeID = IPT.ApplicationCodeID AND 
	tt.TaskTypeID = IPT.TaskTypeID AND mc.ModifierID = IPT.ModifierID 
	INNER JOIN 
tblEqpPlans EP 
	ON IPT.EqpPlanId = EP.EqpPlanId
	LEFT JOIN
(SELECT EqpPlanId,StartUsageQUOMId,StartUsage FROM tblEqpPlanStartUsages 
WHERE EqpPlanId IN(SELECT EqpPlanId FROM #z_I_PROJECTED_TASKS WHERE EqpPlanId>0) ) EPSU
	ON IPT.EqpPlanId=EPSU.EqpPlanId AND IPT.QUOMId=EPSU.StartUsageQUOMId


--Check the other business rules
INSERT INTO #z_Message(Line_No,ErrorDescription,ImportRecord)
SELECT IPT.Line_No,
[dbo].[PROJ_TASK_BUSINESS_RULES_F]
(IPT.EqpProjId,
NULL,/*@ComponentCodeId int, DO NOT CHECK*/
IPT.ModifierId,
IPT.TaskTypeId,
IPT.ApplicationCodeId,	
IPT.Schedule_Type_Id, 
IPT.Scheduling_Group_Id, 
IPT.Scheduling_Group_Counter, 
IPT.QUOMId,/*@usageQUOMId int,*/
-1, /*@ProjTaskId int, DO NOT CHECK*/
IPT.Last_Change_Date,
IPT.Last_Change_Usage,
NULL ,/*InspectionTaskTypeId int, DO NOT CHECK*/
0,/*@InspectionOffset float,* DO NOT CHECK*/
Planning_Task,
NULL,/*@ParentTaskId int, DO NOT CHECK*/
Frequency,
EP.StartDate,
0/*@CheckGroup bit DO NOT CHECK*/,
''/*@ExternalIdentifier do not check*/) AS ErrorDescription,
CASE WHEN @InterfaceSource = 0 THEN '' ELSE (SELECT Model,Equipment_No,Serial_No, Registration_Counter,Equip_Name,Projection_Type,Projection_Name,Task_Description,Global_Code,Component_Code,Modifier_Code
,Task_Type,Task_Counter,Inactive_Task,Unassigned_Task,Planning_Task,Planning_Lead_Days,Operational_Criticality,Task_Manufacturer_Code,Part_SOS,Primary_Part_Number,Group_Number,Rotable_Part_Number,Warranty_Days,Warranty_Usage,UOM,Schedule_On_Last_Scheduled,[First] ,Interval ,Final ,Last_Change_Usage,Last_Change_Date,External_Identifier,Suppression_Group,Suppression_Counter,Sibling_Interval ,Dependency_Group ,Dependency_Counter,Inspection_Logic_Task_Type,Inspection_Logic_Offset,Performance_Strategy,Performance_Strategy_Reason,Changeout_Guidelines,ERP_Component_Code,ERP_Modifier_Code,ERP_Scheduling_Task,Scheduling_Task,Last_Occurrence,Last_Occ_Date,Last_Scheduled,Last_Sched_Date,Next_Occurrence,Next_Occ_Date,Job_Code,Currency,Standard_Job_Reference,Cost_Bearer,Cost_Centre,Work_Group,Part_Type,Health_Safety,Pricing_Date,Consumable_Qty,Consumable_Top_Up,Consumable_Price,Parts_Sell,Labour_Sell,Misc_Sell,Shop_Labour,Labour_Hours,Labour_Activity ,Duration_Hours,Part_Expense,Labour_Expense,Misc_Expense,Part_EDC,Labour_EDC ,Misc_EDC,Labour_Split ,Crane_Cost,Freight_Perc_Parts,Avg_People_Vehicle,Avg_Daily_Work_Hours,Avg_Travel_Hours,Travel_Labour_Rate,Travel_Distance,Travel_Rate,Misc_Cost_Per_Trip,Update_Scheduling_Task_Only,System_Source ,Tag_Id,Rating 
FROM IMPORT_PROJECTION  IP where IP.Line_No = IPT.Line_No AND IP.Import_File_Name=@ImportFileName FOR XML PATH('I_PROJECTEDTASK'),ROOT('I_PROJECTEDTASKs')) END AS ImportRecord

FROM
#z_I_PROJECTED_TASKS IPT
	INNER JOIN
(SELECT PTGroupMin FROM #z_I_PROJECTED_TASKS GROUP BY PTGroupMin) A
	ON IPT.Line_No=A.PTGroupMin
	INNER JOIN
tblEqpPlans EP
	ON IPT.EqpPlanId=EP.EqpPlanId


IF EXISTS(SELECT Line_No FROM #z_Message WHERE ErrorDescription<>'')
BEGIN
	

	INSERT INTO IMPORT_ERROR(ImportFileName,Line_No,ErrorDescription,ImportErrorTypeId,LastModDate,ImportRecord,ImportSourceId)
	SELECT @ImportFileName AS ImportFileName,CASE WHEN @InterfaceSource = 0 THEN Line_No END,ErrorDescription, @ErrorTypeBusRules AS ImportErrorTypeId,
	GETDate() AS LastModDate,CONVERT(VARCHAR(MAX),ImportRecord),@InterfaceSource
	FROM #z_Message WHERE ErrorDescription<>''

	DELETE IPT FROM
	#z_I_PROJECTED_TASKS IPT
		INNER JOIN
	#z_Message M
		ON IPT.PTGroupMin=M.Line_No
	WHERE M.ErrorDescription<>''

	IF NOT EXISTS(SELECT * FROM #z_I_PROJECTED_TASKS)
	BEGIN
		GOTO END_IMPORT
	END

END

DROP TABLE #z_Message

IF NOT EXISTS(SELECT * FROM #z_I_PROJECTED_TASKS)
BEGIN
	GOTO END_IMPORT
END

--drop table z_I_PROJECTED_TASKS
--select * into z_I_PROJECTED_TASKS from #z_I_PROJECTED_TASKS
--return

--Delete projected tasks

SET @ProjTaskId=''

IF EXISTS(SELECT ProjTaskId FROM #z_I_PROJECTED_TASKS WHERE Inactive_Task=1 AND ProjTaskId>0)
BEGIN

--	SELECT @ProjTaskId=@ProjTaskId+CAST(ProjTaskId as varchar)+','
--	FROM #z_I_PROJECTED_TASKS WHERE Inactive_Task=1 AND ProjTaskId>0
--	GROUP BY ProjTaskId

	SELECT @ProjTaskId = (SELECT CAST(ProjTaskId as varchar)+','
	FROM #z_I_PROJECTED_TASKS WHERE Inactive_Task=1 AND ProjTaskId>0
	GROUP BY ProjTaskId
		 FOR XML PATH('') )

	SET @ProjTaskId=ISNULL(@ProjTaskId,'')

	SET XACT_ABORT ON
	BEGIN TRANSACTION
	
	EXEC TASK_DELETE_MULTI_EQP @eqpPlanID='',@EqpProjHeaderId =NULL,@ProjTaskHeaderId =NULL, @forceDelete=1,@ProjTaskId=@ProjTaskId,@CheckRules=0

	-- DELETE SCHEDULING TASK
	IF EXISTS(SELECT ProjTaskId FROM #z_I_PROJECTED_TASKS WHERE Inactive_Task=1 AND SchedulingTaskId>0)
	BEGIN

		SET XACT_ABORT ON

		DELETE CAD FROM 
		COST_ALLOCATION_DETAIL CAD 
			INNER JOIN 
		COST_ALLOCATION CA 
			ON CA.Cost_Allocation_id = CAD.Cost_Allocation_id
			INNER JOIN
		#z_I_PROJECTED_TASKS IPT
			ON CA.Scheduling_Task_Id=IPT.SchedulingTaskId
		--VV 5-Dec-2008
		WHERE IPT.Inactive_Task=1
		
		DELETE CA FROM
		COST_ALLOCATION CA
			INNER JOIN
		#z_I_PROJECTED_TASKS IPT
			ON CA.Scheduling_Task_Id=IPT.SchedulingTaskId
		--VV 5-Dec-2008
		WHERE IPT.Inactive_Task=1

		DELETE ST FROM
		SCHEDULING_TASK ST
			INNER JOIN
		#z_I_PROJECTED_TASKS IPT
			ON ST.SchedulingTaskId=IPT.SchedulingTaskId
		--VV 5-Dec-2008
		WHERE IPT.Inactive_Task=1

	END

	COMMIT TRANSACTION
END



DELETE #z_I_PROJECTED_TASKS WHERE Inactive_Task=1



--Delete the tasks which are not in the file
IF @EqpProjIdTo>0 AND EXISTS(SELECT PT.ProjTaskId FROM 
				tblProjTasks PT
					LEFT JOIN
				#z_I_PROJECTED_TASKS IPT
					ON PT.ProjTaskId=IPT.ProjTaskId
					LEFT JOIN
				#z_DONOTDELETE D
					ON PT.ProjTaskId=D.ProjTaskId
				WHERE PT.EqpProjId=@EqpProjIdTo 
				AND IPT.ProjTaskId IS NULL AND D.ProjTaskId IS NULL)
BEGIN
	SET @ProjTaskId=''

	SELECT @ProjTaskId = (SELECT CAST(PT.ProjTaskId as varchar)+',' FROM
	tblProjTasks PT
		LEFT JOIN
	#z_I_PROJECTED_TASKS IPT
		ON PT.ProjTaskId=IPT.ProjTaskId
		LEFT JOIN
	#z_DONOTDELETE D
		ON PT.ProjTaskId=D.ProjTaskId
	WHERE PT.EqpProjId=@EqpProjIdTo 
	AND IPT.ProjTaskId IS NULL AND D.ProjTaskId IS NULL
	GROUP BY PT.ProjTaskId
		 FOR XML PATH('') )

	SET @ProjTaskId=ISNULL(@ProjTaskId,'')

	EXEC TASK_DELETE_MULTI_EQP @eqpPlanID='',@EqpProjHeaderId =NULL,@ProjTaskHeaderId =NULL,@forceDelete=1,@ProjTaskId=@ProjTaskId

END



IF (SELECT COUNT(*) FROM #z_I_PROJECTED_TASKS)=0 
BEGIN
	--SELECT @NoErrors=COUNT(*) FROM IMPORT_ERROR WHERE ImportFileName=@ImportFileName
	/*VV 17-Nov-2008*/
	GOTO END_IMPORT
	RETURN
END

--Add/Update Scheduling tasks
IF EXISTS(SELECT SchedulingTaskId FROM #z_I_PROJECTED_TASKS WHERE Inactive_Task=0 AND SchedulingTaskId>0)
BEGIN
	UPDATE SCHEDULING_TASK SET  
	QUOMId = IPT.QUOMId,            
	Interval = IPT.Frequency, 	
	NextOccurrence = 
	CASE 
	WHEN @ApplySpecialNextOccToIgnoreRules = 1 THEN
		CASE 
		WHEN ISNULL(IPT.Last_Occurrence,0) > /*@PrevSTLastOccurrence*/
				ISNULL(ISNULL(CASE 
							  WHEN NULLIF(ST.LastOccurrence,0) IS NULL AND ST.LastOccurrenceDate IS NOT NULL 
							  THEN  dbo.GET_USAGE_FROM_DATE_NO_CHECK_TERM_F(IPT.EqpProjId,ST.QuomId, ST.LastOccurrenceDate) 
							  ELSE ST.LastOccurrence 
							  END,0),0) 
		THEN NULL 
		ELSE IPT.Next_Occurrence END
	ELSE IPT.Next_Occurrence 
	END, 
	NextOccDate = 
		CASE 
		WHEN @ApplySpecialNextOccToIgnoreRules = 1 THEN 
			CASE 
			WHEN ISNULL(IPT.Last_Occurrence,0) > /*@PrevSTLastOccurrence*/
				 ISNULL(ISNULL(CASE 
							   WHEN NULLIF(ST.LastOccurrence,0) IS NULL AND ST.LastOccurrenceDate IS NOT NULL 
							   THEN  dbo.GET_USAGE_FROM_DATE_NO_CHECK_TERM_F(IPT.EqpProjId,ST.QuomId, ST.LastOccurrenceDate) 
							   ELSE ST.LastOccurrence 
							   END,0),0) 
			THEN NULL 
			ELSE IPT.Next_Occ_Date END
		ELSE IPT.Next_Occ_Date
		END, 
	
	NextOccurrenceToIgnore = 
		CASE 
		WHEN @ApplySpecialNextOccToIgnoreRules = 1 THEN 
			CASE 
			WHEN ISNULL(IPT.Last_Occurrence,0) > /*@PrevSTLastOccurrence*/
				ISNULL(ISNULL(CASE 
							  WHEN NULLIF(ST.LastOccurrence,0) IS NULL AND ST.LastOccurrenceDate IS NOT NULL 
							  THEN  dbo.GET_USAGE_FROM_DATE_NO_CHECK_TERM_F(IPT.EqpProjId,ST.QuomId, ST.LastOccurrenceDate) 
							  ELSE ST.LastOccurrence 
							  END,0),0) 
			THEN IPT.Next_Occurrence 
			ELSE NULL END
		ELSE NULL 
		END, 
	NextOccDateToIgnore = 
		CASE 
		WHEN @ApplySpecialNextOccToIgnoreRules = 1 THEN
			CASE 
			WHEN ISNULL(IPT.Last_Occurrence,0) > /*@PrevSTLastOccurrence*/
				ISNULL(ISNULL(CASE 
							  WHEN NULLIF(ST.LastOccurrence,0) IS NULL AND ST.LastOccurrenceDate IS NOT NULL 
							  THEN  dbo.GET_USAGE_FROM_DATE_NO_CHECK_TERM_F(IPT.EqpProjId,ST.QuomId, ST.LastOccurrenceDate) 
							  ELSE ST.LastOccurrence 
							  END,0),0) 
			THEN IPT.Next_Occ_Date 
			ELSE NULL END 
		ELSE NULL
	END,
	ERPComponentCode = IPT.ERP_Component_Code, 
	ERPModifierCode = IPT.ERP_Modifier_Code, 
	ERPSchedulingTask = IPT.ERP_Scheduling_Task,
	/*VV #2370*/
	LastScheduled = CASE WHEN IPT.Last_Occ_Date IS NULL THEN ST.LastScheduled 
						 WHEN ISNULL(ST.LastOccurrenceDate,CAST(0 AS datetime)) < IPT.Last_Occ_Date THEN IPT.Last_Scheduled
						 ELSE ST.LastScheduled END, 
						 
	LastScheduledDate =CASE WHEN IPT.Last_Occ_Date IS NULL THEN ST.LastScheduledDate 
						 WHEN ISNULL(ST.LastOccurrenceDate,CAST(0 AS datetime)) < IPT.Last_Occ_Date THEN IPT.Last_Sched_Date
						 ELSE ST.LastScheduledDate END,
	
	LastOccurrence =IPT.Last_Occurrence, 
	LastOccurrenceDate =IPT.Last_Occ_Date,
	LastModDate = @TodaysDate
	FROM
	#z_I_PROJECTED_TASKS IPT
		INNER JOIN
	SCHEDULING_TASK ST
		ON IPT.SchedulingTaskId=ST.SchedulingTaskId
	WHERE IPT.Inactive_Task=0
END

IF EXISTS(SELECT External_Identifier FROM #z_I_PROJECTED_TASKS IPT 
			WHERE IPT.Inactive_Task=0 AND ISNULL(External_Identifier,'') IS NOT NULL
			AND IPT.Scheduling_Task IS NOT NULL
			AND IPT.Projection_Type_Id=@TypeCur
			AND IPT.SchedulingTaskId IS NULL)
BEGIN
	INSERT INTO SCHEDULING_TASK
	  ( 
		EquipmentNo, 
		ComponentCodeId, 
		ModifierCodeId, 
		SchedulingTask, 
		EqpPlanId, 
		Model, 
		SerialNo, 
		QUOMId, 
		Interval, 
		LastOccurrence, 
		LastOccurrenceDate, 
		LastScheduled, 
		LastScheduledDate,
		NextOccurrence,
		NextOccDate, 
		NextOccurrenceToIgnore, 
		NextOccDateToIgnore,
		System_Source_ID,
		ExternalIdentifier,
		ERPComponentCode,
		ERPModifierCode,
		ERPSchedulingTask
	)
	SELECT  /*VV 19-Nov-2008*/DISTINCT   
	IPT.Equipment_No, 
	IPT.ComponentCodeId, 
	IPT.ModifierId, 
	IPT.Scheduling_Task, 
	IPT.EqpPlanId, 
	IPT.Model, 
	IPT.SerialNumber, 
	IPT.QUOMId, 
	IPT.Frequency, 
	IPT.Last_Occurrence, 
	Last_Occ_Date, 
	IPT.Last_Scheduled, 
	IPT.Last_Sched_Date,
	IPT.Next_Occurrence,
	IPT.Next_Occ_Date, 
	NULL,--@NextOccurrenceToIgnore, 
	NULL,--@NextOccDateToIgnore,
	IPT.SystemSourceID,
	IPT.External_Identifier,
	IPT.ERP_Component_Code, 
	IPT.ERP_Modifier_Code, 
	IPT.ERP_Scheduling_Task
	FROM #z_I_PROJECTED_TASKS IPT 
	WHERE IPT.Inactive_Task=0 
	AND ISNULL(External_Identifier,'') IS NOT NULL
	AND IPT.Scheduling_Task IS NOT NULL
	AND IPT.Projection_Type_Id=@TypeCur
	AND IPT.SchedulingTaskId IS NULL

	UPDATE IPT SET IPT.SchedulingTaskId=ST.SchedulingTaskId
	FROM 
	SCHEDULING_TASK ST
		INNER JOIN
	#z_I_PROJECTED_TASKS IPT
		ON ST.ExternalIdentifier=IPT.External_Identifier
	WHERE IPT.Inactive_Task=0 AND IPT.SchedulingTaskId IS NULL
	/*VV 26-Nov-2008*/AND IPT.Projection_Type_Id=@TypeCur
	
END

/*VV 26-Nov-2008

Update the values from the linked SCHEDULING_TASK for the tasks where only the
scheduling task details need to be updated
*/ 
IF EXISTS(SELECT ProjTaskId FROM #z_I_PROJECTED_TASKS 
WHERE ProjTaskId>0 AND SchedulingTaskId>0 AND Update_Scheduling_Task_Only=1) 
BEGIN
	SET @ProjTaskId=''

	SELECT @ProjTaskId = (SELECT CAST(ProjTaskId AS varchar)+',' FROM
	#z_I_PROJECTED_TASKS WHERE ProjTaskId>0 AND SchedulingTaskId>0 AND Update_Scheduling_Task_Only=1
	GROUP BY ProjTaskId
		 FOR XML PATH('') )

	SET @ProjTaskId=ISNULL(@ProjTaskId,'')

	--print @projTaskId
	SET XACT_ABORT ON
	BEGIN TRANSACTION
		EXEC SCHEDULING_TASK_TO_PROJ_TASK_P @ProjTaskIdMany=@ProjTaskId
	COMMIT TRANSACTION

	DELETE #z_I_PROJECTED_TASKS WHERE Update_Scheduling_Task_Only=1

	IF (SELECT COUNT(*) FROM #z_I_PROJECTED_TASKS)=0 
	BEGIN
		GOTO END_IMPORT
		RETURN
	END
END

-- Check if we need to update projected tasks

UPDATE IPT SET IPT.UpdateTask= CASE WHEN

				PT.ManufacturerId <>IPT.ManufacturerId OR 
				--#Enh:527 to choose external identifier to update strategy task codes or not
				PT.ModifierId<>IPT.ModifierId OR
				PT.ComponentCodeId<>IPT.ComponentCodeId OR
				PT.TaskTypeId<>IPT.TaskTypeId OR
				PT.ApplicationCodeId<>IPT.ApplicationCodeId OR
				
				PT.UsageQUOMId <> CASE WHEN PT.AutomaticUpdate=1 THEN PT.UsageQUOMId ELSE IPT.QUOMId END OR
				PT.Final <> IPT.Final OR
				PT.Last_Change_Usage <> IPT.Last_Change_Usage OR 
				PT.Last_Change_Date <> IPT.Last_Change_Date OR
				ISNULL(PT.Rotable_Part_Id,0) <> ISNULL(IPT.RotableId,0) OR
				ISNULL(PT.Group_Number,'') <> ISNULL(IPT.Group_Number,'') OR
				ISNULL(PT.Part_Id,0) <> ISNULL(IPT.PartId,0) OR
				PT.Planning_Task <> IPT.Planning_Task OR
				PT.Planning_Lead_Time <> IPT.Planning_Lead_Time OR	
				ISNULL(PT.SchedulingTaskId,0)<> ISNULL(IPT.SchedulingTaskId,0) OR
				ISNULL(PT.LastOcc,0)<>ISNULL(CASE WHEN PT.Schedule_Type_Id=IPT.Schedule_Type_Id THEN PT.LastOcc
						ELSE
							CASE WHEN @UseSchedulingSystemLastOcc = 1 AND IPT.SchedulingTaskId > 0 THEN
								CASE WHEN IPT.Schedule_Type_Id IN (@LastPerfUOM,@LastPerfDate) THEN PT.Ext_Last_Occ ELSE PT.Ext_Last_Sched_Occ END
							ELSE
								CASE WHEN IPT.Schedule_Type_Id IN (@LastPerfUOM,@LastPerfDate) THEN PT.AMT_WO_Last_Occ ELSE PT.AMT_Last_Sched_Occ END	
							END
						END,0) OR

				ISNULL(LastOccDate,0)<>ISNULL(CASE WHEN PT.Schedule_Type_Id=IPT.Schedule_Type_Id THEN PT.LastOccDate
							ELSE
								CASE WHEN @UseSchedulingSystemLastOcc = 1 AND IPT.SchedulingTaskId > 0 THEN
									CASE WHEN IPT.Schedule_Type_Id IN (@LastPerfUOM,@LastPerfDate) THEN PT.Ext_Last_Occ_Date ELSE PT.Ext_Last_Sched_Date END
								ELSE
									CASE WHEN IPT.Schedule_Type_Id IN (@LastPerfUOM,@LastPerfDate) THEN PT.AMT_WO_Last_Occ_Date ELSE PT.AMT_Last_Sched_Date END
								END
							END,0) OR
				PT.Schedule_Type_Id<>IPT.Schedule_Type_Id OR
				ISNULL(PT.Scheduling_Group_Id,0)<>ISNULL(IPT.Scheduling_Group_Id,0) OR
				ISNULL(PT.Scheduling_Group_Counter,-1)<>ISNULL(IPT.Scheduling_Group_Counter,-1) OR
				ISNULL(PT.Operational_Criticality_Id,0)<>ISNULL(IPT.Operational_Criticality_Id,0) OR 
				PT.Warranty_Period_Usage<>IPT.Warranty_Usage OR
				PT.Warranty_Period_Days<>IPT.Warranty_Days OR
				ISNULL(PT.Changeout_Guidelines,'')<>ISNULL(IPT.Changeout_Guidelines, '') OR
				ISNULL(PT.Task_Description,'')<>ISNULL(IPT.Task_Description, '') OR
				ISNULL(PT.InspectionTaskTypeId,0)<>ISNULL(IPT.InspectionTaskTypeId,0) OR 
				ISNULL(PT.InspectionOffset,0)<>ISNULL(IPT.InspectionOffset, 0) OR
				ISNULL(PT.ExternalIdentifier,'')<>ISNULL(IPT.External_Identifier,'') OR
				ISNULL(PT.PerformanceStrategyReason,'')<>ISNULL(IPT.PerformanceStrategyReason,'') OR
				ISNULL(PT.RCMComponentStructureId,0)<>ISNULL( CASE WHEN PT.Maintenance_Strategy_Id=IPT.Maintenance_Strategy_Id 
												 THEN PT.RCMComponentStructureId ELSE NULL END,0) OR
				ISNULL(PT.Maintenance_Strategy_Id,0)<>ISNULL(IPT.Maintenance_Strategy_Id, 0) OR
				/*VV E316*/	ISNULL(PT.PartRatingId,0)<>ISNULL(IPT.PartRatingId,0) OR
				ISNULL(PT.TagId,'')<>ISNULL(IPT.Tag_Id,'')
		THEN 1 ELSE 0 END,

IPT.UpdateOpt=CASE WHEN 
					PTO.Frequency<>CASE WHEN PT.AutomaticUpdate=0 THEN IPT.Frequency ELSE PT.Frequency END OR
					PTO.[First]<>IPT.[First]
				THEN 1 ELSE 0 END,
				
--#Enh:527 to choose external identifier to update strategy task codes or not
IPT.UpdateStrategyTaskCodes=CASE WHEN @UpdateStrategyTaskCodes =0 THEN 0 
								 WHEN PT.ModifierId<>IPT.ModifierId OR PT.ComponentCodeId<>IPT.ComponentCodeId OR PT.TaskTypeId<>IPT.TaskTypeId OR PT.ApplicationCodeId<>IPT.ApplicationCodeId THEN 1
								 ELSE 0 END		
FROM 
#z_I_PROJECTED_TASKS IPT
	INNER JOIN
tblProjTasks PT 
	ON IPT.ProjTaskId=PT.ProjTaskId
	INNER JOIN
tblProjTaskOpts PTO
	ON IPT.ProjTaskOptId=PTO.ProjTaskOptId
WHERE IPT.Inactive_Task=0 

--Identify proj Jobs to update
UPDATE IPT SET 
IPT.ProjTaskAmtId=PTA.ProjTaskAmtId
FROM 
#z_I_PROJECTED_TASKS IPT
	INNER JOIN
tblProjTaskAmts PTA
	ON IPT.ProjTaskOptId=PTA.ProjTaskOptId AND
	   ISNULL(IPT.JobCodeId,0)=ISNULL(PTA.JobCodeId,0) AND
	   IPT.CurrencyId=PTA.CurrencyId
/* VV 26-Nov-2008 WHERE IPT.Inactive_Task=0 */

--Check if projTaskAmts need to be updated
UPDATE IPT SET IPT.UpdateJob=CASE WHEN
	ISNULL(SJ.Std_Job_Ref,'')<>ISNULL(IPT.Standard_Job_Reference,'') OR 
	ISNULL(PTA.JobCodeId,0)<> ISNULL(CASE
							  /*If it is updated to be consumable, cost allocations will be deleted*/
							  /*Linked to Std Job*/
							  WHEN IPT.Standard_Job_Reference=SJ.Std_Job_Ref THEN PTA.JobCodeId
							  /*Linked to external cost allocation and this field is not updated by AMT*/
							  WHEN CA.Proj_Task_Amt_Id>0 AND SS.AMTSystemSource=0 AND CAC.JobCode=0 THEN PTA.JobCodeId
							  ELSE IPT.JobCodeId END,0) OR


	ISNULL(IPT.SiteId,0) <>ISNULL(PTA.PerformedAtSiteId, 0) OR
	ISNULL(IPT.PartTypeId,0)<>ISNULL(PTA.PartTypeId,0) OR
	ISNULL(IPT.LaborShare,0)<>ISNULL(PTA.LaborShare,0) OR
	PTA.CurrencyId <> CASE WHEN PT.AutomaticUpdate=1 THEN PTA.CurrencyId ELSE IPT.CurrencyId END OR
	PTA.PartsCost<>CASE WHEN PT.AutomaticUpdate=1 THEN PTA.PartsCost
					WHEN IPT.Projection_Type_Id IN(@TypeCur,@TypeAlt,@TypeCen) AND SJ.Std_Job_Ref=IPT.Standard_Job_Reference THEN PTA.PartsCost
					WHEN IPT.Consumable=1 THEN IPT.PartsCost
					WHEN CA.Proj_Task_Amt_Id>0 AND ISNULL(IPT.Standard_Job_Reference,'')='' THEN PTA.PartsCost
					ELSE IPT.PartsCost END OR
	PTA.LaborCost<>CASE WHEN PT.AutomaticUpdate=1 THEN PTA.LaborCost
					WHEN IPT.Projection_Type_Id IN(@TypeCur,@TypeAlt,@TypeCen) AND SJ.Std_Job_Ref=IPT.Standard_Job_Reference THEN PTA.LaborCost
					WHEN IPT.Consumable=1 THEN IPT.LaborCost /*If it is updated to be consumable, cost allocations will be deleted*/
					WHEN CA.Proj_Task_Amt_Id>0 AND ISNULL(IPT.Standard_Job_Reference,'')='' THEN PTA.LaborCost
					ELSE IPT.LaborCost END OR 
	PTA.MiscCost<>CASE WHEN PT.AutomaticUpdate=1 THEN PTA.MiscCost
					WHEN IPT.Projection_Type_Id IN(@TypeCur,@TypeAlt,@TypeCen) AND SJ.Std_Job_Ref=IPT.Standard_Job_Reference THEN PTA.MiscCost
					WHEN IPT.Consumable=1 THEN IPT.MiscCost /*If it is updated to be consumable, cost allocations will be deleted*/
					WHEN CA.Proj_Task_Amt_Id>0 AND ISNULL(IPT.Standard_Job_Reference,'')='' THEN PTA.MiscCost
					ELSE IPT.MiscCost END OR 
	PTA.LaborHours<>CASE WHEN PT.AutomaticUpdate=1 THEN PTA.LaborHours
					WHEN IPT.Projection_Type_Id IN(@TypeCur,@TypeAlt,@TypeCen) AND SJ.Std_Job_Ref=IPT.Standard_Job_Reference THEN PTA.LaborHours
					WHEN IPT.Consumable=1 THEN IPT.LaborHours /*If it is updated to be consumable, cost allocations will be deleted*/
					WHEN CA.Proj_Task_Amt_Id>0 AND ISNULL(IPT.Standard_Job_Reference,'')='' THEN PTA.LaborHours
					ELSE IPT.LaborHours END OR 
	PTA.Duration<>CASE WHEN PT.AutomaticUpdate=1 THEN PTA.Duration
					WHEN IPT.Projection_Type_Id IN(@TypeCur,@TypeAlt,@TypeCen) AND SJ.Std_Job_Ref=IPT.Standard_Job_Reference THEN PTA.Duration
					WHEN IPT.Consumable=1 THEN IPT.Duration /*If it is updated to be consumable, cost allocations will be deleted*/
					WHEN CA.Proj_Task_Amt_Id>0 AND ISNULL(IPT.Standard_Job_Reference,'')='' THEN PTA.Duration
					ELSE IPT.Duration END OR 

	ISNULL(PTA.Labour_Cost_Expense_Id,0)<>ISNULL(CASE
								/*If it is updated to be consumable, cost allocations will be deleted*/
							  /*Linked to external cost allocation and this field is not updated by AMT*/
							  WHEN CA.Proj_Task_Amt_Id>0 AND SS.AMTSystemSource=0 AND CAC.LabourCostExpense=0 THEN PTA.Labour_Cost_Expense_Id
							  ELSE IPT.Labour_Cost_Expense_Id END,0) OR

	ISNULL(PTA.Misc_Cost_Expense_Id,0)<>ISNULL(CASE
								/*If it is updated to be consumable, cost allocations will be deleted*/
							  /*Linked to external cost allocation and this field is not updated by AMT*/
							  WHEN CA.Proj_Task_Amt_Id>0 AND SS.AMTSystemSource=0 AND CAC.MiscCostExpense=0 THEN PTA.Misc_Cost_Expense_Id
							  ELSE IPT.Misc_Cost_Expense_Id END,0) OR

	ISNULL(PTA.Parts_Cost_Expense_Id,0)<>ISNULL(CASE
								/*If it is updated to be consumable, cost allocations will be deleted*/
							  /*Linked to external cost allocation and this field is not updated by AMT*/
							  WHEN CA.Proj_Task_Amt_Id>0 AND SS.AMTSystemSource=0 AND CAC.PartsCostExpense=0 THEN PTA.Parts_Cost_Expense_Id
							  ELSE IPT.Parts_Cost_Expense_Id END,0) OR


	PTA.Pricing_Date<> CASE WHEN PT.AutomaticUpdate=1 THEN PTA.Pricing_Date ELSE IPT.Pricing_Date END OR

	ISNULL(PTA.Cost_Bearer_ID,0)<>ISNULL(CASE
								/*If it is updated to be consumable, cost allocations will be deleted*/
							  /*Linked to external cost allocation and this field is not updated by AMT*/
							  WHEN CA.Proj_Task_Amt_Id>0 AND SS.AMTSystemSource=0 AND CAC.CostBearer=0 THEN PTA.Cost_Bearer_ID
							  ELSE IPT.Cost_Bearer_ID END,0) OR

	ISNULL(PTA.labour_Activity_Id,0)<>ISNULL(CASE
								/*If it is updated to be consumable, cost allocations will be deleted*/
							  /*Linked to external cost allocation and this field is not updated by AMT*/
							  WHEN CA.Proj_Task_Amt_Id>0 AND SS.AMTSystemSource=0 AND CAC.LabourActivity=0 THEN PTA.labour_Activity_Id
							  ELSE IPT.labour_Activity_Id END,0) OR

	IPT.Crane_Cost<>PTA.Crane_Cost OR
	IPT.Pct_Freight<>PTA.Pct_Freight OR
	IPT.Avg_Daily_Work_Hrs<>PTA.Avg_Daily_Work_Hrs OR
	IPT.Avg_No_People<>PTA.Avg_No_People OR
	IPT.Avg_Travel_Hrs<>PTA.Avg_Travel_Hrs OR
	IPT.Travel_Distance<>PTA.Travel_Distance OR
	IPT.Travel_Recovery_Rate_L<>PTA.Travel_Recovery_Rate_L OR
	IPT.Travel_Recovery_Rate_V<>PTA.Travel_Recovery_Rate_V OR
	IPT.Misc_Trip_Cost<>PTA.Misc_Trip_Cost OR
	IPT.Labour_Hrs_Field<>PTA.Labour_Hrs_Field OR
	ISNULL(IPT.Parts_EDC_ID,0)<>ISNULL(PTA.Parts_EDC_ID,0) OR 
	ISNULL(IPT.Labour_EDC_ID,0)<> ISNULL(PTA.Labour_EDC_ID,0) OR
	ISNULL(IPT.Misc_EDC_ID,0)<> ISNULL(PTA.Misc_EDC_ID,0) OR
	ISNULL(PTA.Cost_Centre_Id,0)<>ISNULL(CASE
								/*If it is updated to be consumable, cost allocations will be deleted*/
							  /*Linked to external cost allocation and this field is not updated by AMT*/
							  WHEN CA.Proj_Task_Amt_Id>0 AND SS.AMTSystemSource=0 AND CAC.CostCentre=0 THEN PTA.Cost_Centre_Id
							  ELSE IPT.Cost_Centre_Id END,0) OR

	ISNULL(PTA.Work_Group_Id,0)<>ISNULL(CASE
								/*If it is updated to be consumable, cost allocations will be deleted*/
							  /*Linked to external cost allocation and this field is not updated by AMT*/
							  WHEN CA.Proj_Task_Amt_Id>0 AND SS.AMTSystemSource=0 AND CAC.WorkGroup=0 THEN PTA.Work_Group_Id
							  ELSE IPT.Work_Group_Id END,0) OR

	ISNULL(IPT.Health_Safety_Id,0)<>ISNULL(PTA.Health_Safety_Id,0) OR	
	IPT.Consumable<>PTA.Consumable OR 
	IPT.QtyVolume<>PTA.QtyVolume OR
	IPT.PercentTopUp<>PTA.PercentTopUp OR
	IPT.UnitPrice<>PTA.UnitPrice
	THEN 1 ELSE 0 END,
	IPT.PricedJobId=CASE WHEN IPT.Standard_Job_Reference=PTA.StdJobReference THEN PTA.PricedJobId ELSE NULL END, 
	IPT.JobCodeId= CASE WHEN IPT.Standard_Job_Reference=PTA.StdJobReference THEN PTA.JobCodeId
				WHEN CA.Proj_Task_Amt_Id>0 AND SS.AMTSystemSource=0 AND CAC.JobCode=0 THEN PTA.JobCodeId
				ELSE IPT.JobCodeId END,
	IPT.CurrencyId = CASE WHEN PT.AutomaticUpdate=1 THEN PTA.CurrencyId ELSE IPT.CurrencyId END,
	IPT.PartsCost=CASE WHEN PT.AutomaticUpdate=1 THEN PTA.PartsCost
					WHEN IPT.Projection_Type_Id IN(@TypeCur,@TypeAlt,@TypeCen) AND SJ.Std_Job_Ref=IPT.Standard_Job_Reference THEN PTA.PartsCost
					WHEN IPT.Consumable=1 THEN IPT.PartsCost
					WHEN CA.Proj_Task_Amt_Id>0 AND ISNULL(IPT.Standard_Job_Reference,'')='' THEN PTA.PartsCost
					ELSE IPT.PartsCost END,
	IPT.LaborCost=CASE WHEN PT.AutomaticUpdate=1 THEN PTA.LaborCost
					WHEN IPT.Projection_Type_Id IN(@TypeCur,@TypeAlt,@TypeCen) AND SJ.Std_Job_Ref=IPT.Standard_Job_Reference THEN PTA.LaborCost
					WHEN IPT.Consumable=1 THEN IPT.LaborCost
					WHEN CA.Proj_Task_Amt_Id>0 AND ISNULL(IPT.Standard_Job_Reference,'')='' THEN PTA.LaborCost
					ELSE IPT.LaborCost END, 
	IPT.MiscCost=CASE WHEN PT.AutomaticUpdate=1 THEN PTA.MiscCost
					WHEN IPT.Projection_Type_Id IN(@TypeCur,@TypeAlt,@TypeCen) AND SJ.Std_Job_Ref=IPT.Standard_Job_Reference THEN PTA.MiscCost
					WHEN IPT.Consumable=1 THEN IPT.MiscCost
					WHEN CA.Proj_Task_Amt_Id>0 AND ISNULL(IPT.Standard_Job_Reference,'')='' THEN PTA.MiscCost
					ELSE IPT.MiscCost END,

	IPT.LaborHours=CASE WHEN PT.AutomaticUpdate=1 THEN PTA.LaborHours
					WHEN IPT.Projection_Type_Id IN(@TypeCur,@TypeAlt,@TypeCen) AND SJ.Std_Job_Ref=IPT.Standard_Job_Reference THEN PTA.LaborHours
					WHEN IPT.Consumable=1 THEN IPT.LaborHours
					WHEN CA.Proj_Task_Amt_Id>0 AND ISNULL(IPT.Standard_Job_Reference,'')='' THEN PTA.LaborHours
					ELSE IPT.LaborHours END,
	IPT.Duration=CASE WHEN PT.AutomaticUpdate=1 THEN PTA.Duration
					WHEN IPT.Projection_Type_Id IN(@TypeCur,@TypeAlt,@TypeCen) AND SJ.Std_Job_Ref=IPT.Standard_Job_Reference THEN PTA.Duration
					WHEN IPT.Consumable=1 THEN IPT.Duration
					WHEN CA.Proj_Task_Amt_Id>0 AND ISNULL(IPT.Standard_Job_Reference,'')='' THEN PTA.Duration
					ELSE IPT.Duration END,

	IPT.Labour_Cost_Expense_Id=CASE
								/*If it is updated to be consumable, cost allocations will be deleted*/
							  /*Linked to external cost allocation and this field is not updated by AMT*/
							  WHEN CA.Proj_Task_Amt_Id>0 AND SS.AMTSystemSource=0 AND CAC.LabourCostExpense=0 THEN PTA.Labour_Cost_Expense_Id
							  ELSE IPT.Labour_Cost_Expense_Id END,

	IPT.Misc_Cost_Expense_Id=CASE
								/*If it is updated to be consumable, cost allocations will be deleted*/
							  /*Linked to external cost allocation and this field is not updated by AMT*/
							  WHEN CA.Proj_Task_Amt_Id>0 AND SS.AMTSystemSource=0 AND CAC.MiscCostExpense=0 THEN PTA.Misc_Cost_Expense_Id
							  ELSE IPT.Misc_Cost_Expense_Id END,

	IPT.Parts_Cost_Expense_Id=CASE
								/*If it is updated to be consumable, cost allocations will be deleted*/
							  /*Linked to external cost allocation and this field is not updated by AMT*/
							  WHEN CA.Proj_Task_Amt_Id>0 AND SS.AMTSystemSource=0 AND CAC.PartsCostExpense=0 THEN PTA.Parts_Cost_Expense_Id
							  ELSE IPT.Parts_Cost_Expense_Id END,


	IPT.Pricing_Date= CASE WHEN PT.AutomaticUpdate=1 THEN PTA.Pricing_Date ELSE IPT.Pricing_Date END,

	IPT.Cost_Bearer_ID=CASE
								/*If it is updated to be consumable, cost allocations will be deleted*/
							  /*Linked to external cost allocation and this field is not updated by AMT*/
							  WHEN CA.Proj_Task_Amt_Id>0 AND SS.AMTSystemSource=0 AND CAC.CostBearer=0 THEN PTA.Cost_Bearer_ID
							  ELSE ISNULL(IPT.Cost_Bearer_ID,@DefCB) END,

	IPT.labour_Activity_Id=CASE
								/*If it is updated to be consumable, cost allocations will be deleted*/
							  /*Linked to external cost allocation and this field is not updated by AMT*/
							  WHEN CA.Proj_Task_Amt_Id>0 AND SS.AMTSystemSource=0 AND CAC.LabourActivity=0 THEN PTA.labour_Activity_Id
							  ELSE IPT.labour_Activity_Id END,
	IPT.Cost_Centre_Id=CASE
						/*If it is updated to be consumable, cost allocations will be deleted*/
					  /*Linked to external cost allocation and this field is not updated by AMT*/
					  WHEN CA.Proj_Task_Amt_Id>0 AND SS.AMTSystemSource=0 AND CAC.CostCentre=0 THEN PTA.Cost_Centre_Id
					  ELSE IPT.Cost_Centre_Id END,

	IPT.Work_Group_Id=CASE
						/*If it is updated to be consumable, cost allocations will be deleted*/
					  /*Linked to external cost allocation and this field is not updated by AMT*/
					  WHEN CA.Proj_Task_Amt_Id>0 AND SS.AMTSystemSource=0 AND CAC.WorkGroup=0 THEN PTA.Work_Group_Id
					  ELSE IPT.Work_Group_Id END,
	IPT.Cost_Allocation_Id=CA.Cost_Allocation_Id
	

FROM 
#z_I_PROJECTED_TASKS IPT
	INNER JOIN
tblProjTaskAmts PTA
	ON IPT.ProjTaskAmtId=PTA.ProjTaskAmtId 
	INNER JOIN
tblProjTaskOpts PTO
	ON PTA.ProjTaskOptId=PTO.ProjTaskOptId
	INNER JOIN
tblProjTasks PT
	ON PT.ProjTaskId=PTO.ProjTaskId
	LEFT JOIN
COST_ALLOCATION CA
	ON PTA.ProjTaskAmtId=CA.Proj_Task_Amt_Id
	LEFT JOIN
SYSTEM_SOURCE SS
	ON CA.System_Source_Id=SS.System_Source_Id
	LEFT JOIN
tblPricedJobs PJ
	ON PTA.PricedJobId=PJ.PricedJobId
	LEFT JOIN
tblStdJobs SJ
	ON PJ.StdJobId=SJ.StdJobId
	CROSS JOIN
COST_ALLOCATION_CONFIGURATION CAC
/*VV 26-Nov-2008 WHERE IPT.Inactive_Task=0 */


--Delete ProjtaskAmts which are missing in the file
CREATE TABLE #z_PTADelete(ProjTaskAmtId int PRIMARY KEY(ProjTaskAmtId))

IF EXISTS(SELECT PTA.ProjTaskAmtId
	FROM
	#z_I_PROJECTED_TASKS IPT
		INNER JOIN
	tblProjTasks PT
		ON IPT.ProjTaskId=PT.ProjTaskId
		INNER JOIN
	tblProjTaskOpts PTO
		ON PT.ProjTaskId=PTO.ProjTaskId
		INNER JOIN
	tblProjTaskAmts PTA
		ON PTO.ProjTaskOptId=PTA.ProjTaskOptId
		LEFT JOIN
	#z_I_PROJECTED_TASKS I
		ON PTA.ProjTaskAmtId=I.ProjTaskAmtId
	WHERE I.ProjTaskAmtId IS NULL )
BEGIN
	INSERT INTO #z_PTADelete(ProjTaskAmtId)
	SELECT DISTINCT PTA.ProjTaskAmtId
	FROM
	#z_I_PROJECTED_TASKS IPT
		INNER JOIN
	tblProjTasks PT
		ON IPT.ProjTaskId=PT.ProjTaskId
		INNER JOIN
	tblProjTaskOpts PTO
		ON PT.ProjTaskId=PTO.ProjTaskId
		INNER JOIN
	tblProjTaskAmts PTA
		ON PTO.ProjTaskOptId=PTA.ProjTaskOptId
		LEFT JOIN
	#z_I_PROJECTED_TASKS I
		ON PTA.ProjTaskAmtId=I.ProjTaskAmtId
	WHERE I.ProjTaskAmtId IS NULL 
END

--Cost Allocations shall be deleted if proj job need to be linked to Std Job or if it is consumable


CREATE TABLE #z_CADelete(ProjTaskAmtId int PRIMARY KEY(ProjTaskAmtId))

IF EXISTS(SELECT IPT.ProjTaskAmtId FROM #z_I_PROJECTED_TASKS IPT
		 WHERE Cost_Allocation_Id>0 AND (ISNULL(IPT.Standard_Job_Reference,'')<>'' OR IPT.Consumable=1))
BEGIN
	INSERT INTO #z_CADelete(ProjTaskAmtId)
	SELECT IPT.ProjTaskAmtId FROM #z_I_PROJECTED_TASKS IPT
	WHERE Cost_Allocation_Id>0 AND (ISNULL(IPT.Standard_Job_Reference,'')<>'' OR IPT.Consumable=1) 
END

--drop table z_I_PROJECTED_TASKS,z_CADelete,z_PTADelete
--select *  into z_I_PROJECTED_TASKS from #z_I_PROJECTED_TASKS
--select *  into z_CADelete from #z_CADelete
--select *  into z_PTADelete from #z_PTADelete
--return



SET XACT_ABORT ON
BEGIN TRANSACTION

--Delete RR tasks if Component Structure is unlinked from the parent task

IF EXISTS(SELECT RR.ParentTaskId FROM
			tblProjTasks RR
				INNER JOIN
			#z_I_PROJECTED_TASKS IPT
				ON RR.ParentTaskId=IPT.ProjTaskId
				INNER JOIN
			tblProjTasks PT
				ON IPT.ProjTaskId=PT.ProjTaskId
			WHERE /*12-Jan-2009 VV*/ ISNULL(PT.Maintenance_Strategy_Id,0)<>ISNULL(IPT.Maintenance_Strategy_Id,0))
BEGIN
	SET @ProjTaskId=''

	SELECT @ProjTaskId = (select CAST(RR.ParentTaskId AS varchar)+',' FROM
		tblProjTasks RR
			INNER JOIN
		#z_I_PROJECTED_TASKS IPT
			ON RR.ParentTaskId=IPT.ProjTaskId
			INNER JOIN
		tblProjTasks PT
			ON IPT.ProjTaskId=PT.ProjTaskId
		WHERE /*12-Jan-2009 VV*/ ISNULL(PT.Maintenance_Strategy_Id,0)<>ISNULL(IPT.Maintenance_Strategy_Id,0) 
		GROUP BY RR.ParentTaskId
	 FOR XML PATH('') )

	SET @ProjTaskId=ISNULL(@ProjTaskId,'')

	EXEC TASK_DELETE_MULTI_EQP @eqpPlanID='',@EqpProjHeaderId =NULL,@ProjTaskHeaderId =NULL,@forceDelete=1,@DeleteRRTasksOnly=1,@ProjTaskId=@ProjTaskId,@CheckRules=1
 
END



IF EXISTS(SELECT UpdateTask FROM #z_I_PROJECTED_TASKS WHERE UpdateTask=1 OR UpdateOpt=1)
BEGIN

	UPDATE PT SET

	--#Enh:527 compare 4 codes
	PT.ModifierId=IPT.ModifierId,
	PT.ComponentCodeId=IPT.ComponentCodeId,
	PT.ApplicationCodeId=IPT.ApplicationCodeId,	
	PT.TaskTypeId=IPT.TaskTypeId,
	PT.Task_Header_Id=IPT.Task_Header_Id,
	
	PT.PlanTaskOptId =CASE IPT.Planning_Task WHEN 0 THEN NULL ELSE PT.PlanTaskOptId END,
	PT.PlanStatus = CASE IPT.Planning_Task WHEN 0 THEN 0 ELSE PT.PlanStatus END, 
	PT.PlanUseCalc=CASE IPT.Planning_Task WHEN 0 THEN 1 ELSE PT.PlanUseCalc END,
	PT.ManufacturerId =IPT.ManufacturerId, 
	PT.UsageMethod=CASE WHEN (CASE WHEN AutomaticUpdate=1 THEN PT.UsageQUOMId ELSE IPT.QUOMId END)>0 THEN 'U' ELSE 'D' END,
	PT.UsageQUOMId = CASE WHEN AutomaticUpdate=1 THEN PT.UsageQUOMId ELSE IPT.QUOMId END, 
	PT.Final = IPT.Final, 
	PT.AddNotComplete = 0, 
	PT.Last_Change_Usage = IPT.Last_Change_Usage, 
	PT.Last_Change_Date = IPT.Last_Change_Date, 
	PT.Rotable_Part_Id = IPT.RotableId,
	PT.Group_Number = IPT.Group_Number,
	PT.Part_Id = IPT.PartId,
	PT.Planning_Task = IPT.Planning_Task, 
	PT.Planning_Lead_Time = IPT.Planning_Lead_Time,	
	PT.SchedulingTaskId=IPT.SchedulingTaskId,
	PT.LastOcc=CASE WHEN PT.Schedule_Type_Id=IPT.Schedule_Type_Id THEN PT.LastOcc
			ELSE
				CASE WHEN @UseSchedulingSystemLastOcc = 1 AND IPT.SchedulingTaskId > 0 THEN
					CASE WHEN IPT.Schedule_Type_Id IN (@LastPerfUOM,@LastPerfDate) THEN PT.Ext_Last_Occ ELSE PT.Ext_Last_Sched_Occ END
				ELSE
					CASE WHEN IPT.Schedule_Type_Id IN (@LastPerfUOM,@LastPerfDate) THEN PT.AMT_WO_Last_Occ ELSE PT.AMT_Last_Sched_Occ END	
				END
			END,

	PT.LastOccDate=CASE WHEN PT.Schedule_Type_Id=IPT.Schedule_Type_Id THEN PT.LastOccDate
				ELSE
					CASE WHEN @UseSchedulingSystemLastOcc = 1 AND IPT.SchedulingTaskId > 0 THEN
						CASE WHEN IPT.Schedule_Type_Id IN (@LastPerfUOM,@LastPerfDate) THEN PT.Ext_Last_Occ_Date ELSE PT.Ext_Last_Sched_Date END
					ELSE
						CASE WHEN IPT.Schedule_Type_Id IN (@LastPerfUOM,@LastPerfDate) THEN PT.AMT_WO_Last_Occ_Date ELSE PT.AMT_Last_Sched_Date END
					END
				END,
	PT.Schedule_Type_Id=IPT.Schedule_Type_Id, 
	PT.Scheduling_Group_Id=IPT.Scheduling_Group_Id,
	PT.Scheduling_Group_Counter=IPT.Scheduling_Group_Counter, 
	PT.Operational_Criticality_Id=IPT.Operational_Criticality_Id, 
	PT.Warranty_Period_Usage=IPT.Warranty_Usage, 
	PT.Warranty_Period_Days=IPT.Warranty_Days, 
	PT.Changeout_Guidelines=IPT.Changeout_Guidelines, 
	PT.Task_Description=IPT.Task_Description, 
	PT.InspectionTaskTypeId=IPT.InspectionTaskTypeId, 
	PT.InspectionOffset=IPT.InspectionOffset, 
	PT.ExternalIdentifier= IPT.External_Identifier,
	PT.PerformanceStrategyReason=IPT.PerformanceStrategyReason,
	PT.RCMComponentStructureId= CASE WHEN PT.Maintenance_Strategy_Id=IPT.Maintenance_Strategy_Id 
									 THEN PT.RCMComponentStructureId ELSE NULL END,
	PT.Maintenance_Strategy_Id=IPT.Maintenance_Strategy_Id, 
	PT.Last_Mod_Date= @TodaysDate,
	PT.ReviewStatusID=CASE IPT.Planning_Task WHEN 0 THEN 1 ELSE PT.ReviewStatusID END,
	PT.ReviewUserID=CASE IPT.Planning_Task WHEN 0 THEN NULL ELSE PT.ReviewUserID END,
	PT.ReviewDate=CASE IPT.Planning_Task WHEN 0 THEN NULL ELSE PT.ReviewDate END,
	PT.Frequency=CASE WHEN PT.AutomaticUpdate=0 THEN IPT.Frequency ELSE PT.Frequency END,
	PT.[First]=IPT.[First],
	-- 15 Sep 08	KN Reset Next Occ if it not a Planning Task.
	PT.NextOcc = CASE IPT.Planning_Task WHEN 0 THEN NULL ELSE PT.NextOcc END,
	PT.NextOccDate = CASE IPT.Planning_Task WHEN 0 THEN NULL ELSE PT.NextOccDate END,
	/*VV E316*/
	PT.TagId=IPT.Tag_Id,
	PT.PartRatingId=IPT.PartRatingId	
	FROM
	tblProjTasks PT
		INNER JOIN
	(SELECT /*VV E316*/DISTINCT ProjTaskId,ManufacturerId, QUOMId,Final, Last_Change_Usage, Last_Change_Date,RotableId,
	Group_Number,PartId,Planning_Task, Planning_Lead_Time,SchedulingTaskId,
	Schedule_Type_Id, Scheduling_Group_Id,Scheduling_Group_Counter, Operational_Criticality_Id, 
	Warranty_Usage, Warranty_Days, Maintenance_Strategy_Id, 
	Changeout_Guidelines, Task_Description, InspectionTaskTypeId, InspectionOffset, 
	External_Identifier,PerformanceStrategyReason,Frequency,[First],
	/*VV E316*/Tag_Id,PartRatingId,ModifierId,ComponentCodeId,ApplicationCodeId,TaskTypeId,Task_Header_Id
	FROM #z_I_PROJECTED_TASKS WHERE ProjTaskId>0 AND (UpdateTask=1 OR UpdateOpt=1)
	) IPT
		ON PT.ProjTaskId=IPT.ProjTaskId
END

IF EXISTS(SELECT UpdateOpt FROM #z_I_PROJECTED_TASKS WHERE UpdateOpt=1)
BEGIN
	UPDATE PTO SET
	PTO.Frequency=CASE WHEN PT.AutomaticUpdate=0 THEN IPT.Frequency ELSE PTO.Frequency END,
	PTO.[First]=IPT.[First]
	FROM
	tblProjTasks PT
		INNER JOIN
	tblProjTaskOpts PTO
		ON PT.ProjTaskId=PTO.ProjTaskId
		INNER JOIN
	#z_I_PROJECTED_TASKS IPT
		ON PTO.ProjTaskOptId=IPT.ProjTaskOptId
	WHERE IPT.UpdateOpt=1
	
END


--Delete cost allocations
IF EXISTS(SELECT ProjTaskAmtId FROM #z_CADelete) OR
EXISTS(SELECT ProjTaskAmtId FROM #z_PTADelete)
BEGIN
	DELETE CAD FROM 
	(SELECT ProjTaskAmtId FROM #z_CADelete UNION SELECT ProjTaskAmtId FROM #z_PTADelete) PTA
	 INNER JOIN
	COST_ALLOCATION CA 
		ON PTA.ProjTaskAmtId = CA.Proj_Task_Amt_Id 
		INNER JOIN
	COST_ALLOCATION_DETAIL CAD 
		ON CA.Cost_Allocation_Id=CAD.Cost_Allocation_Id 
	

	DELETE CA FROM 
	(SELECT ProjTaskAmtId FROM #z_CADelete UNION SELECT ProjTaskAmtId FROM #z_PTADelete) PTA 
		INNER JOIN
	COST_ALLOCATION CA 
		ON PTA.ProjTaskAmtId = CA.Proj_Task_Amt_Id 
END

DROP TABLE #z_CADelete

IF EXISTS(SELECT ProjTaskAmtId FROM #z_PTADelete)
BEGIN
	DELETE PTA FROM 
	tblProjTaskAmts PTA
		INNER JOIN 
	#z_PTADelete A
		ON PTA.ProjTaskAmtId=A.ProjTaskAmtId
END

DROP TABLE #z_PTADelete
		
IF EXISTS(SELECT UpdateJob FROM #z_I_PROJECTED_TASKS WHERE UpdateJob=1)
BEGIN
	
	UPDATE PTA SET
	PTA.PricedJobId=IPT.PricedJobId, 
	PTA.JobCodeId= IPT.JobCodeId,
	PTA.PerformedAtSiteId=IPT.SiteId,
	PTA.PartTypeId=IPT.PartTypeId, 
	PTA.LaborShare=IPT.LaborShare, 
	PTA.CurrencyId = IPT.CurrencyId,
	PTA.PartsCost=IPT.PartsCost,
	PTA.LaborCost=IPT.LaborCost, 
	PTA.MiscCost=IPT.MiscCost,

	PTA.LaborHours=IPT.LaborHours,
	PTA.Duration=IPT.Duration,

	PTA.Labour_Cost_Expense_Id=IPT.Labour_Cost_Expense_Id,

	PTA.Misc_Cost_Expense_Id=IPT.Misc_Cost_Expense_Id,

	PTA.Parts_Cost_Expense_Id=IPT.Parts_Cost_Expense_Id,

	PTA.Pricing_Date= IPT.Pricing_Date,

	PTA.Cost_Bearer_ID=IPT.Cost_Bearer_ID,

	PTA.labour_Activity_Id=IPT.labour_Activity_Id,
	PTA.Crane_Cost=IPT.Crane_Cost,
	PTA.Pct_Freight=IPT.Pct_Freight,
	PTA.Avg_Daily_Work_Hrs=IPT.Avg_Daily_Work_Hrs,
	PTA.Avg_No_People=IPT.Avg_No_People,
	PTA.Avg_Travel_Hrs=IPT.Avg_Travel_Hrs,
	PTA.Travel_Distance=IPT.Travel_Distance,
	PTA.Travel_Recovery_Rate_L=IPT.Travel_Recovery_Rate_L,
	PTA.Travel_Recovery_Rate_V=IPT.Travel_Recovery_Rate_V,
	PTA.Misc_Trip_Cost=IPT.Misc_Trip_Cost,
	PTA.Labour_Hrs_Field=IPT.Labour_Hrs_Field,
	PTA.Parts_EDC_ID=IPT.Parts_EDC_ID, 
	PTA.Labour_EDC_ID=IPT.Labour_EDC_ID,
	PTA.Misc_EDC_ID=IPT.Misc_EDC_ID,
	PTA.Cost_Centre_Id=IPT.Cost_Centre_Id,
	PTA.Work_Group_Id=IPT.Work_Group_Id,
	PTA.Health_Safety_Id=IPT.Health_Safety_Id,
	PTA.Consumable=IPT.Consumable, 
	PTA.QtyVolume=IPT.QtyVolume,
	PTA.PercentTopUp=IPT.PercentTopUp,
	PTA.UnitPrice=IPT.UnitPrice,
	PTA.StdJobReference= CASE WHEN IPT.PricedJobId>0 THEN NULL ELSE IPT.Standard_Job_Reference END
	
	FROM
	#z_I_PROJECTED_TASKS IPT
		INNER JOIN
	tblProjTaskAmts PTA
		ON IPT.ProjTaskAmtId=PTA.ProjTaskAmtId
	WHERE IPT.UpdateJob=1

	--Update AMT cost allocations
	UPDATE CAD SET
	CAD.Job_Code_Id=ISNULL(PTA.JobCodeId,CAD.Job_Code_Id),	
	CAD.Labour_Activity_Id=ISNULL(PTA.Labour_Activity_Id,CAD.Labour_Activity_Id),	
	CAD.Labour_Cost_Expense_ID=ISNULL(PTA.Labour_Cost_Expense_ID,CAD.Labour_Cost_Expense_ID),	
	CAD.Parts_Cost_Expense_ID=ISNULL(PTA.Parts_Cost_Expense_ID,CAD.Parts_Cost_Expense_ID),
	CAD.Misc_Cost_Expense_ID=ISNULL(PTA.Misc_Cost_Expense_ID,CAD.Misc_Cost_Expense_ID),	
	CAD.Cost_Bearer_ID=ISNULL(PTA.Cost_Bearer_ID,CAD.Cost_Bearer_ID),	
	CAD.Cost_Centre_ID=ISNULL(PTA.Cost_Centre_ID,CAD.Cost_Centre_ID),	
	CAD.Work_Group_Id=ISNULL(PTA.Work_Group_Id,CAD.Work_Group_Id)
	FROM
	#z_I_PROJECTED_TASKS IPT
		INNER JOIN
	tblProjTaskAmts PTA
		ON IPT.ProjTaskAmtId=PTA.ProjTaskAmtId
		INNER JOIN
	COST_ALLOCATION CA
		ON PTA.ProjTaskAmtId=CA.Proj_Task_Amt_Id
		INNER JOIN
	COST_ALLOCATION_DETAIL CAD
		ON CA.Cost_Allocation_Id=CAD.Cost_Allocation_Id
		INNER JOIN
	SYSTEM_SOURCE SS
		ON CA.System_Source_Id=SS.System_Source_Id
	WHERE IPT.UpdateJob=1 AND SS.AmtSystemSource=1

END

	--drop table z_I_PROJECTED_TASKS
--	select * into z_I_PROJECTED_TASKS from #z_I_PROJECTED_TASKS
--	commit transaction
--	return


--Add projected tasks
IF EXISTS(SELECT EqpProjID FROM #z_I_PROJECTED_TASKS WHERE ProjTaskId IS NULL)
BEGIN

	INSERT INTO tblProjTasks(
	EqpPlanID,EqpProjID,ComponentCodeId,ModifierId,TaskTypeId,ApplicationCodeId,ManufacturerId,
	UsageMethod,UsageQUOMId,[First],Frequency,Final,Unscheduled,LastModifiedDate,
	Last_Change_Usage,Last_Change_Date,Task_Header_Id,Planning_Task,Planning_Lead_Time,Rotable_Part_Id,
	Group_Number,Part_Id,SchedulingTaskId,Schedule_Type_Id, Scheduling_Group_Id, Scheduling_Group_Counter, 
	Operational_Criticality_Id,Warranty_Period_Usage,Warranty_Period_Days, 	Maintenance_Strategy_Id, 
	Changeout_Guidelines, Task_Description, InspectionTaskTypeId,InspectionOffset,
	ExternalIdentifier,PerformanceStrategyReason,RCMComponentStructureId,ParentTaskId,AutomaticUpdate, 
	ReviewStatusId,/*VV E316*/TagId,PartRatingId)
	SELECT /*VV E316*/DISTINCT EqpPlanID,EqpProjID,ComponentCodeId,ModifierId,TaskTypeId,ApplicationCodeId,ManufacturerId,
	CASE  WHEN QUOMId>0 THEN 'U' ELSE 'D' END AS UsageMethod,
	QUOMId AS UsageQUOMId,[First],Frequency,Final,Unscheduled,@TodaysDate AS LastModifiedDate,
	Last_Change_Usage,Last_Change_Date,Task_Header_Id,Planning_Task,Planning_Lead_Time,RotableId AS Rotable_Part_Id,
	Group_Number,PartId AS Part_Id,SchedulingTaskId,Schedule_Type_Id, Scheduling_Group_Id, Scheduling_Group_Counter, 
	Operational_Criticality_Id,Warranty_Usage AS  Warranty_Period_Usage,Warranty_Days AS Warranty_Period_Days, 
	Maintenance_Strategy_Id, Changeout_Guidelines, Task_Description, InspectionTaskTypeId,InspectionOffset,
	External_Identifier AS ExternalIdentifier,PerformanceStrategyReason,NULL AS RCMComponentStructureId, 
	NULL AS ParentTaskId, 0 AS AutomaticUpdate, 1 AS ReviewStatusId,		-- KN 15-Sep-09	Added ReviewStatusId
	/*VV E316*/Tag_Id,PartRatingId
	FROM #z_I_PROJECTED_TASKS WHERE ProjTaskId IS NULL

	UPDATE IPT SET IPT.ProjTaskId=PT.ProjTaskId,NewProjTaskId=PT.ProjTaskId FROM
	#z_I_PROJECTED_TASKS IPT
		INNER JOIN
	tblProjTasks PT
		ON IPT.EqpProjId=PT.EqpProjId AND IPT.Task_Header_Id=PT.Task_Header_Id
	WHERE IPT.ProjTaskId IS NULL


	INSERT INTO tblProjTaskOpts(ProjTaskId, OccurrenceTypeId, Probability, PlannedOption, [First], Frequency)
	SELECT NewProjTaskId, @DefOccTypeId AS OccurrenceTypeId, 100 AS Probability, 1 AS PlannedOption, [First], 
	Frequency
	FROM #z_I_PROJECTED_TASKS IPT WHERE NewProjTaskId>0
	GROUP BY NewProjTaskId,[First], Frequency

END




--Add ProjTaskAmts
IF EXISTS(SELECT ProjTaskId FROM #z_I_PROJECTED_TASKS WHERE ProjTaskId>0 AND ProjTaskAmtId IS NULL)
BEGIN
	INSERT INTO tblProjTaskAmts
	(PricedJobId, JobCodeId, PerformedAtSiteId, 
	PartTypeId, LaborShare, ProjTaskOptId, 
	CurrencyId, LaborCost, PartsCost, 
	MiscCost, LaborHours, Duration,
	Labour_Cost_Expense_Id, Misc_Cost_Expense_Id, Parts_Cost_Expense_Id,
	Pricing_Date, Cost_Bearer_ID, labour_Activity_Id,
	Crane_Cost, Pct_Freight, Avg_Daily_Work_Hrs, Avg_No_People, 
	Avg_Travel_Hrs, Travel_Distance, Travel_Recovery_Rate_L, Travel_Recovery_Rate_V,
	Misc_Trip_Cost, Labour_Hrs_Field,Parts_EDC_ID,Labour_EDC_ID,Misc_EDC_ID,Cost_Centre_Id,
	Rotable_Repair_Strategy, Action_Required_Id, Rebuild_Location_Id,
	Work_Group_Id, Health_Safety_Id,Consumable,QtyVolume,PercentTopUp,UnitPrice,StdJobPartsMargin,
	StdJobReference
	)
	SELECT
	NULL AS PricedJobId, IPT.JobCodeId, IPT.SiteId AS PerformedAtSiteId, 
	IPT.PartTypeId, IPT.LaborShare, PTO.ProjTaskOptId, 
	IPT.CurrencyId, IPT.LaborCost, IPT.PartsCost, 
	IPT.MiscCost, IPT.LaborHours, IPT.Duration, 
	IPT.Labour_Cost_Expense_Id, IPT.Misc_Cost_Expense_Id, IPT.Parts_Cost_Expense_Id,
	IPT.Pricing_Date, /*VV 26-Nov-2008*/ISNULL(IPT.Cost_Bearer_ID,@DefCB) AS Cost_Bearer_ID, IPT.labour_Activity_Id,
	IPT.Crane_Cost, IPT.Pct_Freight, IPT.Avg_Daily_Work_Hrs, IPT.Avg_No_People, 
	IPT.Avg_Travel_Hrs, IPT.Travel_Distance, IPT.Travel_Recovery_Rate_L, IPT.Travel_Recovery_Rate_V,
	IPT.Misc_Trip_Cost, IPT.Labour_Hrs_Field,IPT.Parts_EDC_ID,IPT.Labour_EDC_ID,IPT.Misc_EDC_ID,IPT.Cost_Centre_Id,
	/*set rotable details for the tasks with 1 job*/
	CASE WHEN IPT.RotableId>0 AND IPT.PTGroupMax=IPT.PTGroupMin THEN 1 ELSE 0 END AS Rotable_Repair_Strategy, 
	CASE WHEN IPT.RotableId>0 AND IPT.PTGroupMax=IPT.PTGroupMin THEN 1 ELSE NULL END AS Action_Required_Id, 
	CASE WHEN IPT.RotableId>0 AND IPT.PTGroupMax=IPT.PTGroupMin THEN IPT.SiteId ELSE NULL END AS Rebuild_Location_Id,
	IPT.Work_Group_Id, IPT.Health_Safety_Id,IPT.Consumable,IPT.QtyVolume,IPT.PercentTopUp,IPT.UnitPrice,
	NULL AS StdJobPartsMargin,IPT.Standard_Job_Reference AS StdJobReference
	FROM 
	tblProjTaskOpts PTO 
		INNER JOIN 
	tblProjTasks PT
		ON PTO.ProjTaskId=PT.ProjTaskId
		INNER JOIN
	#z_I_PROJECTED_TASKS IPT 
		ON PT.ProjTaskId = IPT.ProjTaskId
	WHERE IPT.ProjTaskAmtId IS NULL
END

 
--#Enh:527 update related wororders and workorders settlements
IF(@UpdateStrategyTaskCodes =1)
BEGIN
	SET @ProjTaskId=''
	SELECT @ProjTaskId = (SELECT CAST(IPT.ProjTaskId AS varchar)+',' FROM	
	#z_I_PROJECTED_TASKS IPT
	WHERE  IPT.UpdateStrategyTaskCodes=1
	GROUP BY IPT.ProjTaskId
	FOR XML PATH('') )

	SET @ProjTaskId=ISNULL(@ProjTaskId,'') 

	EXEC UPDATE_STRATEGY_TASK_HISTORY_P @projTaskId=@ProjTaskId
END

--Update Rotable job
IF EXISTS(SELECT IPT.ProjTaskId FROM #z_I_PROJECTED_TASKS IPT WHERE RotableId>0)
BEGIN
	SET @ProjTaskId=''

	SELECT @ProjTaskId = (SELECT CAST(ProjTaskId AS varchar)+',' 
	FROM #z_I_PROJECTED_TASKS WHERE RotableId>0
	GROUP BY ProjTaskId
		 FOR XML PATH('') )

	SET @ProjTaskId=ISNULL(@ProjTaskId,'')

	EXEC UPDATE_ROTABLE_JOB_P @projTasks=@ProjTaskId
END



--Relink EQS tasks
IF EXISTS(SELECT T.Task_Id FROM 
TASK T
	INNER JOIN
#z_I_PROJECTED_TASKS IPT
	ON IPT.Projection_Type_Id=@TypeCur AND T.Eqp_Plan_Id=IPT.EqpPlanId AND T.Task_Header_Id=IPT.Task_Header_Id
WHERE T.Strategy_Proj_Task_Opt_ID IS NULL)
BEGIN
	SET @ProjTaskId=''

	SELECT @ProjTaskId = (SELECT CAST(IPT.ProjTaskId AS varchar)+',' FROM
	TASK T
		INNER JOIN
	#z_I_PROJECTED_TASKS IPT
		ON IPT.Projection_Type_Id=@TypeCur AND T.Eqp_Plan_Id=IPT.EqpPlanId AND T.Task_Header_Id=IPT.Task_Header_Id
	WHERE IPT.ProjTaskId>0 AND T.Strategy_Proj_Task_Opt_ID IS NULL
	GROUP BY IPT.ProjTaskId
		 FOR XML PATH('') )

	SET @ProjTaskId=ISNULL(@ProjTaskId,'')

	EXEC STRATEGY_TASK_LINK_TO_EQS_TASK_P @ProjTaskIdMany=@projTaskId
END


-- update the values from the linked SCHEDULING_TASK
IF EXISTS(SELECT ProjTaskId FROM #z_I_PROJECTED_TASKS WHERE ProjTaskId>0 AND SchedulingTaskId>0) /* VV 7-Nov-2008 AND (UpdateTask=1 OR NewProjTaskId>1))*/
BEGIN
	SET @ProjTaskId=''

	SELECT @ProjTaskId = (SELECT CAST(ProjTaskId AS varchar)+',' FROM
	#z_I_PROJECTED_TASKS WHERE ProjTaskId>0 AND SchedulingTaskId>0 GROUP BY ProjTaskId
		 FOR XML PATH('') )

	SET @ProjTaskId=ISNULL(@ProjTaskId,'')

	--print @projTaskId

	EXEC SCHEDULING_TASK_TO_PROJ_TASK_P @ProjTaskIdMany=@ProjTaskId
END

COMMIT TRANSACTION




IF EXISTS(SELECT Standard_Job_Reference FROM #z_I_PROJECTED_TASKS 
	WHERE PricedJobId IS NULL AND Standard_Job_Reference IS NOT NULL)
BEGIN
	DECLARE @StdJobRef XML
	
	SET @StdJobRef=(SELECT Standard_Job_Reference AS List_Item FROM #z_I_PROJECTED_TASKS 
			WHERE PricedJobId IS NULL AND Standard_Job_Reference IS NOT NULL
			GROUP BY Standard_Job_Reference
			FOR XML RAW('Row'),ROOT('Rows'),ELEMENTS)
END


END_IMPORT:

DROP TABLE #z_I_PROJECTED_TASKS

IF @StdJobRef IS NOT NULL
BEGIN
	EXEC STD_JOB_LINK_P @StdJobRef=@StdJobRef
END




SELECT @NoErrors=COUNT(*) FROM IMPORT_ERROR WHERE ImportFileName=@ImportFileName

IF @NoErrors=0
BEGIN
	DELETE IMPORT_PROJECTION WHERE Import_File_Name=@ImportFileName
END
ELSE
BEGIN
	UPDATE IMPORT_PROJECTION SET Processed=1 WHERE Import_File_Name=@ImportFileName
END


RETURN

GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[IMPORT_ERROR_INSERT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[IMPORT_ERROR_INSERT]
GO



CREATE Procedure [dbo].[IMPORT_ERROR_INSERT]
/******************************************************************************
	File: 
	Name: INSERT_INTO_IMPORT_ERROR

	Called By: Equipment Import

	Desc: inserts the errors into IMPORT_ERROR Table
             

	Auth: Gurdeep Dhillon
	Date: 28-June-2011
*******************************************************************************
		Change History
*******************************************************************************
Date:		Author:		Description:
--------	--------	----------------------------------------
30 June 11   GD         Modified to insert record by record and whole dataset at once
08 Aug 11    GD         Deleted existing errors for file name  
19 Sep 11    GD         fixed issue #2481
*******************************************************************************/
	/* Param List */
	@ImportFileName VARCHAR(1000),
	@LineNo VARCHAR(50) = null,
	@ErrorDescription VARCHAR(3000)= null,
	@ImportErrorTypeId INT,
	@InterfaceSource INT = 0,
	@ImportRecord VARCHAR(MAX) = null  
	
AS

--File Interface
IF @InterfaceSource=0

	BEGIN		
		
		DELETE FROM IMPORT_ERROR WHERE ImportFileName=@ImportFileName AND Line_No=@LineNo
		INSERT INTO IMPORT_ERROR(ImportFileName,Line_No,ErrorDescription,ImportErrorTypeId,LastModDate,ImportSourceId)	
		SELECT @ImportFileName AS ImportFileName,@LineNo AS Line_No,@ErrorDescription AS ErrorDescription, @ImportErrorTypeId AS ImportErrorTypeId,GETDate() AS LastModDate,@InterfaceSource As ImportSourceId
		
		
	END
	
--External Connector
ELSE 
	BEGIN	
		
		INSERT INTO IMPORT_ERROR(ImportFileName,ErrorDescription,ImportErrorTypeId,LastModDate,ImportRecord,ImportSourceId)	
		SELECT @ImportFileName AS ImportFileName, @ErrorDescription  AS ErrorDescription , @ImportErrorTypeId AS ImportErrorTypeId,GETDate() AS LastModDate,@ImportRecord AS ImportRecord,@InterfaceSource AS ImportSourceId		
	
	END

GO



if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[HOLDING_EVENT_UPDATE_NEW_P]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[HOLDING_EVENT_UPDATE_NEW_P]
GO

create   PROCEDURE  [dbo].[HOLDING_EVENT_UPDATE_NEW_P]   
/******************************************************************************  
 Name: HOLDING_EVENT_UPDATE_NEW_P  
  
 Called By: EQSEVTImporter.EventImporter  
  
 Desc: Updates or adds holding events from new Modular Mining events  
               
  
 Auth: Darryl Smith  
 Date: 02-Oct-2002  
*******************************************************************************  
  Change History  
*******************************************************************************  
 Date:		Author:		Description:  
 --------   --------	----------------------------------------  
 04 Aug 11	D Smith		#2130: Only run EVENT_UPDATE_FROM_HOLDING_EVENTS_P once for each Event_ID
 23 Feb 11	V Vasylyeva #1194: took out seconds from HE downtime
 29 Oct 2009  V Vasylyeva  CR8429: New field Plan_Type.  
         Special event merging rule where you can set the time margin for merging   
         Dispatch Downtime Records.   
 21 Oct 2008  V Vasylyeva  Increased size of Code to 50 char.   
         HOLDING_EVENT.Code was increased from 3 to 10 char in the table.  
 15 Oct 2008  V Vasylyeva  Added events merging  
 10 Oct 2008  V Vasylyeva  Added automatic event creation  
 29 OCT 03    H Singh    HACK: donot return rows if Modular Mining Id starts with 0(zero) and ends with EqpPlan  
 2003-May-28 H Singh   Modified Holding_Event Insert. and update to set Ignore flag to 1 or 0  
 2003-May-21 V Vasylyeva  Modified Holding_Event Insert. Included Ignore=0  
 2002-Oct-16 D Smith   Added call to MODULAR_MINING_EVENT_ADD_TO_EXISTING_EVENT_P  
         to update EQS event (for holding events that are linked)  
 2002-Oct-21  D Smith   Updated to include new rules agreed 2002-Oct-18  
 2002-Oct-25 D Smith   Sets Up_Time to Null instead of 0 (XML bulkloader  
         requires a default value for fields)  
 2002-Oct-25 D Smith   Fixed bug (was not resetting variables each time thru loop!)  
 2002-Nov-27 D Smith   Changed type of Modular_Mining_Id variables (Modular files were different to the spec!)  
*******************************************************************************/  
 /* Param List */  
AS  
 DECLARE @HE_Modular_Mining_Id VARCHAR(50)  
 DECLARE @EQS_Event_Id INTEGER  
 DECLARE @Modular_Mining_Id VARCHAR(50)  
 DECLARE @Code VARCHAR(50)  
 DECLARE @Code_Description VARCHAR(255)  
 DECLARE @Description VARCHAR(255)  
 DECLARE @Site_Name VARCHAR(50)  
 DECLARE @Eqp_Name VARCHAR(50)  
 DECLARE @Down_Time DATETIME  
 DECLARE @Up_Time DATETIME  
 DECLARE @Notified_Date DATETIME  
 DECLARE @HE_Id INTEGER  
 DECLARE @Err VARCHAR(1000)  
 DECLARE @Counter int  
 DECLARE @MaxCounter int  
 DECLARE @Holding_Event_Id int  
 DECLARE @EStatusC int  
 DECLARE @PlanType int  
 DECLARE @ImportEventMergeMinutes int  
  
 DECLARE @Ignored bit  
 DECLARE @Modular_Minning_Eqp_Name varchar(50)  
  
 UPDATE MODULAR_EVENT SET Up_Time = Null WHERE Up_Time = 0  
 UPDATE MODULAR_EVENT SET Code = '' WHERE ISNULL(Code, '') = ''  
 UPDATE MODULAR_EVENT SET Code_Description = '' WHERE ISNULL(Code_Description, '') = ''  
  
 SET @EStatusC=3  
 
 DECLARE @PreviousEventId INT --DS 2011-08-04 #2130

 DECLARE HoldingEventCursor CURSOR FAST_FORWARD FOR  
  SELECT  
   Modular_Mining_Id,  
   Code,  
   Code_Description,  
   Description,  
   Site_Name,  
   Eqp_Name,  
   Down_Time,  
   Up_Time,  
   Notified_Date,  
   PlanType  
  FROM  
   MODULAR_EVENT  
  WHERE  
   Current_Batch=1  
  --Hack: HS 29 OCT 03    donot return rows if Modular Mining Id starts with 0(zero) and ends with EqpPlan  
  AND   
   NOT (Modular_Mining_Id LIKE '0' + Eqp_Name)  
  
 OPEN HoldingEventCursor  
  
 -- Get first record  
 FETCH NEXT FROM HoldingEventCursor  
  INTO   
   @Modular_Mining_Id,  
   @Code,  
   @Code_Description,  
   @Description,  
   @Site_Name,  
   @Eqp_Name,  
   @Down_Time,  
   @Up_Time,  
   @Notified_Date,  
   @PlanType  
 WHILE (@@FETCH_STATUS = 0)  
  BEGIN  
   --reset variables  
   SELECT @HE_Modular_Mining_Id = NULL  
   SELECT @EQS_Event_Id = NULL  
   SELECT @HE_Id = NULL  
  
   SELECT @Modular_Minning_Eqp_Name = Modular_Mining_Eqp_Name FROM tblEqppLans WHERE Modular_Mining_Eqp_Name = @Eqp_Name  
   IF ISNULL(@Modular_Minning_Eqp_Name,'') = '' SET @Ignored = 1 ELSE SET @Ignored = 0  
  
   SELECT  
    @HE_Modular_Mining_Id = Modular_Mining_Id,  
    @EQS_Event_Id = Event_Id,  
    @HE_Id = Holding_Event_Id  
   FROM  
    HOLDING_EVENT  
   WHERE  
    Modular_Mining_Id = @Modular_Mining_Id  
  
   if isnull(@HE_Modular_Mining_Id,'') <> ''  
   begin  
    --this Modular downtime event already exists in HOLDING_EVENT  
    UPDATE  
     HOLDING_EVENT  
    SET  
     Modular_Mining_Id = @Modular_Mining_Id,  
     Code = @Code,  
     Code_Description = @Code_Description,  
     Description = @Description,  
     Site_Name = @Site_Name,  
     Eqp_Name = @Eqp_Name,  
     Down_Time = @Down_Time,  
     Up_Time = @Up_Time,  
     Notified_Date = @Notified_Date,  
     Ignore = @Ignored,  
     PlanType=@PlanType  
    WHERE  
     Modular_Mining_Id = @Modular_Mining_Id  
  
	--now, if the HOLDING_EVENT record is linked to an EQS EVENT, update it!
	if isnull(@EQS_Event_Id,0) <> 0 AND (@EQS_Event_Id <> @PreviousEventId)
	begin
		--update the EQS event!
		exec EVENT_UPDATE_FROM_HOLDING_EVENTS_P @EQS_Event_Id

		SET @PreviousEventId = @EQS_Event_Id -- DS 2011-08-03 

	end
   end  
   else  
   begin  
    --this Modular downtime event doesn't exist in HOLDING_EVENT  
    INSERT INTO  
     HOLDING_EVENT  
         
    VALUES  
     (  
     @Modular_Mining_Id,  
     @Code,  
     @Code_Description,  
     @Description,  
     @Site_Name,  
     @Eqp_Name,  
     @Down_Time,  
     @Up_Time,  
     Null,     --Event_Id  
     @Notified_Date,  
     @Ignored,  
     @PlanType  
     )  
   end  
  
   FETCH NEXT FROM HoldingEventCursor  
    INTO   
     @Modular_Mining_Id,  
     @Code,  
     @Code_Description,  
     @Description,  
     @Site_Name,  
     @Eqp_Name,  
     @Down_Time,  
     @Up_Time,  
     @Notified_Date,  
     @PlanType  
  END  
  
 CLOSE HoldingEventCursor  
 DEALLOCATE HoldingEventCursor 
 

 
 --10 Oct 2008  V Vasylyeva  Added automatic event creation  
  
 IF EXISTS(SELECT AutoCreateExtEvent FROM AMT_VARIABLE WHERE AutoCreateExtEvent=1) AND  
 EXISTS(SELECT HE.Holding_Event_Id  
  FROM  
  HOLDING_EVENT HE  
   INNER JOIN  
  MODULAR_EVENT ME  
   ON HE.Modular_Mining_Id=ME.Modular_Mining_Id  
  WHERE ME.Current_Batch=1  
  --Hack: HS 29 OCT 03    donot return rows if Modular Mining Id starts with 0(zero) and ends with EqpPlan  
  AND NOT (ME.Modular_Mining_Id LIKE '0' + ME.Eqp_Name)  
  AND HE.Event_Id IS NULL)  
 BEGIN  
  CREATE TABLE #z_HOLDING_EVENT(Holding_Event_Id int,ListId int IDENTITY(1,1) PRIMARY KEY(Holding_Event_Id,ListId))  
  
  INSERT INTO #z_HOLDING_EVENT(Holding_Event_Id)  
  SELECT HE.Holding_Event_Id  
  FROM  
  HOLDING_EVENT HE  
   INNER JOIN  
  MODULAR_EVENT ME  
   ON HE.Modular_Mining_Id=ME.Modular_Mining_Id  
  WHERE ME.Current_Batch=1  
  --Hack: HS 29 OCT 03    donot return rows if Modular Mining Id starts with 0(zero) and ends with EqpPlan  
  AND NOT (ME.Modular_Mining_Id LIKE '0' + ME.Eqp_Name)  
  AND HE.Event_Id IS NULL  
  GROUP BY HE.Holding_Event_Id,HE.Down_Time  
  ORDER BY HE.Down_Time 
  
  --select * into z_HOLDING_EVENT from #z_HOLDING_EVENT 
  
  
  SET @MaxCounter=@@ROWCOUNT  
  
  IF @MaxCounter>0   
  BEGIN  
   SET @Counter=1  
     
   EXEC AMT_TYPED_VARIABLE_GET_P @Value_Name='ImportEventMergeMinutes', @Varchar_Value=@ImportEventMergeMinutes OUTPUT  
    
   SET @ImportEventMergeMinutes=ISNULL(@ImportEventMergeMinutes,0)  
     
   WHILE @Counter<=@MaxCounter  
   BEGIN  
  
    SET @Holding_Event_Id=NULL  
    SET @Down_Time=NULL  
    SET @Eqp_Name=NULL  
  
    SELECT @Holding_Event_Id=HE.Holding_Event_Id,
    /*VV #1194 @Down_Time=HE.Down_Time, */
    @Down_Time=dbo.FORMAT_DAY_MONTH_YEAR_HRS_MIN_F(HE.Down_Time) ,
    @Eqp_Name=HE.Eqp_Name  
    FROM   
    #z_HOLDING_EVENT Z  
     INNER JOIN  
    HOLDING_EVENT HE  
     ON Z.Holding_Event_Id=HE.Holding_Event_Id  
    WHERE Z.ListId=@Counter AND HE.Event_Id IS NULL  
  
    SET @Counter=@Counter+1  
  
    IF @Holding_Event_Id>0  
    BEGIN  
     SET @EQS_Event_Id=0  
  
     --Check if the MM event shall be added to the existing events  
     SELECT @EQS_Event_Id=E.Event_Id FROM  
     EVENT E  
      INNER JOIN  
     tblEqpPlans EP  
      ON E.Eqp_Plan_Id=EP.EqpPlanId  
      INNER JOIN  
     HOLDING_EVENT HE  
      ON E.Event_Id=HE.Event_Id  
     WHERE E.Event_Status_Id=@EStatusC AND  
     EP.Modular_Mining_Eqp_Name=@Eqp_Name AND  
     @Down_Time>=E.Actual_Down_Time AND  
     @Down_Time<=DATEADD(MINUTE,@ImportEventMergeMinutes, E.Actual_Up_Time)  
  
     IF @EQS_Event_Id>0  
     BEGIN  
      EXEC MODULAR_MINING_EVENT_ADD_TO_EXISTING_EVENT_P @Holding_Event_Id=@Holding_Event_Id,  
       @Event_ID=@EQS_Event_Id,@Error_Description=''  
     END  
     ELSE  
     BEGIN  
      EXEC MODULAR_MINING_EVENT_ADD_TO_NEW_EVENT_P @Holding_Event_Id=@Holding_Event_Id,  
       @New_Event_ID=0,@Error_Description=''  
     END  
    END  
   END --WHILE @Counter>=@MaxCounter  
  END --IF @MaxCounter>0   
 END  
  
 UPDATE  
  MODULAR_EVENT  
 SET  
  Current_Batch = 0  
 WHERE  
  Current_Batch = 1
  
  
  


GO




IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[COST_ADJUSTER_PUT_2_P]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[COST_ADJUSTER_PUT_2_P]
GO


CREATE PROCEDURE [dbo].[COST_ADJUSTER_PUT_2_P]
/******************************************************************************
	
	Name: COST_ADJUSTER_PUT_2_P

	Called By: 

	Desc: 

	Auth: 	Darryl Smith
	Date: 	21st July 2007
*******************************************************************************
		Change History
*******************************************************************************
Date:		Author:		Description:
--------	--------	----------------------------------------
22 Sep 11	D. Smith	#2303: Performance enhancement
15 Aug 11	D. Smith	#2304: Error when Expense Element was selected in the filters
13 Jul 11	D. Smith	Lookup the "zero" modifier code (instead of assuming it is "0")
06/04/09	AL			Fixed collation
12 May 08	A. Lassaun. Fixed second use of EQP_SIBLINGS_F
03 Apr 08	A. Lassaun.	Now uses EQP_SIBLINGS_F 
18 Feb 08	A. Lassaun.	CR7127: Changed Source from 'AMT' to 'Cost Adj'
14 Feb 07	A. Lassaun.	Added parameters @CostResponsibilityId and @ParentEqpPlanID + Removed @EqpTypeId (Current proj only)
05 Sep 07	D. Smith	Fixed bug when creating adjustments after grouping by eqp
20 Aug 07	D. Smith	Fixed bug with updating (removed where clause when select from # table)
20 Aug 07	D. Smith	Modified to only create cost adjuster proj task for eqp to be updated
*******************************************************************************/
	/* Param List */
@EqpClassId varchar(MAX)='',
@EqpGroupId varchar(MAX)='',
@ManufacturerId varchar(MAX)='',
@ModelId varchar(MAX)='',
@FleetId varchar(MAX)='1',
@EqpPlanId varchar(MAX)='',
--@EqpTypeId varchar(MAX)='',	AL: 14/02/08
@EqpCriticalityId varchar(MAX)='',
@EqpLocationId varchar(MAX)='',
@EqpCategoryId varchar(MAX)='',
@RegionId varchar(MAX)='',
@DivisionId varchar(MAX)='',
@BranchId varchar(MAX)='',
@SiteId varchar(MAX)='',
@CostBearerId varchar(MAX)='',
@CostCentreId varchar(MAX)='',
@ExpenseElementId varchar(MAX)='',
@WorkGroupId varchar(MAX)='',
@TaskTypeId varchar(MAX)='',
@SystemId varchar(MAX)='',
@SubsystemId varchar(MAX)='',
@CompCodeId varchar(MAX)='',
@ExcludeStdJobs int=1, -- 0=YES (ie. only return NOT linked to std jobs/cost allocs), 1=NO (ie. only return LINKED to std jobs/cost allocs), 2 = ALL (ie. return ALL)
@IncludeParts bit=1,
@IncludeLabour bit=1,
@IncludeMisc bit=1,
@ActualFromDate datetime = '1-Jan-2005',
@ActualToDate datetime = '1-Jan-2007',
@ProjFromDate datetime = '1-Aug-2007',
@ProjToDate datetime = '1-Jan-2009',
@AnalyseBy1 varchar(MAX)='FleetId',
@AnalyseBy1Desc varchar(MAX)='Fleet',
@AnalyseBy1Id int = 1,
@AnalyseBy2 varchar(MAX)='CostBearerId',
@AnalyseBy2Desc varchar(MAX)='CostBearer',
@AnalyseBy2Id int = 1,
@AnalyseBy3 varchar(MAX)='',
@AnalyseBy3Desc varchar(MAX)='',
@AnalyseBy3Id int = 1,
@AnalyseBy int=0, -- 0=month, 1=quarter, 2=year

@AdjustmentPct float = 106,
@EDIT_CostBearerId int = 1,
@EDIT_CostCentreId int = 1,
@EDIT_CostExpenseId int =1,
@EDIT_WorkGroupId int = -1, -- value of -1 means <Mixed> (ie. multiple - special handling)
@AdjustByActuals BIT = 1,

@CostResponsibilityId varchar(MAX)='',	--AL: 14/02/08 Added
@ParentEqpPlanID varchar(MAX)=''		--AL: 14/02/08 Added


AS
BEGIN

DECLARE @SQL VARCHAR(MAX)
DECLARE @WHERE VARCHAR(MAX)
DECLARE @PROJ_DATE_WHERE VARCHAR(MAX)
DECLARE @ACTUAL_DATE_WHERE VARCHAR(MAX)
DECLARE @AdjusterCompCode VARCHAR(50)
DECLARE @AdjusterCompCodeId INT
DECLARE @AdjusterModCode VARCHAR(50)
DECLARE @AdjustmentAmount float
DECLARE @EqpProjId INT

DECLARE @ProjFromPeriod INT
DECLARE @ProjToPeriod INT
DECLARE @ActualFromPeriod INT
DECLARE @ActualToPeriod INT
DECLARE @ProjNumberOfPeriods INT
DECLARE @ActualNumberOfPeriods INT

DECLARE @WorkGroupCode VARCHAR(50)
DECLARE @CostBearerCode VARCHAR(50)
DECLARE @CostCentreCode VARCHAR(50)
DECLARE @CostExpenseCode VARCHAR(50)

--convert dates to integer "periods" (such as stored in tblRepProjCosts)
SET @ProjFromPeriod = LEFT(CONVERT(VARCHAR, @ProjFromDate, 112),6)
SET @ProjToPeriod = LEFT(CONVERT(VARCHAR, @ProjToDate, 112),6)
SET @ActualFromPeriod = LEFT(CONVERT(VARCHAR, @ActualFromDate, 112),6)
SET @ActualToPeriod = LEFT(CONVERT(VARCHAR, @ActualToDate, 112),6)

SET @ProjNumberOfPeriods = DATEDIFF(m, @ProjFromDate, @ProjToDate) + 1
SET @ActualNumberOfPeriods = DATEDIFF(m, @ActualFromDate, @ActualToDate) + 1

IF @ProjNumberOfPeriods = 0 SET @ProjNumberOfPeriods = 1 --to avoid divide by zero when averaging
IF @ActualNumberOfPeriods = 0 SET @ActualNumberOfPeriods = 1 --to avoid divide by zero when averaging

--*******************************************************************
--create the cost adjuster unassigned task where it does not exist

SELECT @AdjusterCompCode = Varchar_Value FROM AMT_TYPED_VARIABLE WHERE Value_Name = 'CostAdjusterCompCode'
SELECT @AdjusterCompCodeId = ComponentCodeId FROM tblComponentCodes WHERE Code = @AdjusterCompCode

IF @AdjusterCompCodeId IS NULL return

SELECT @AdjusterModCode = Code FROM tblModifierCodes WHERE ModifierID = 0

IF @AdjusterModCode IS NULL return

SET @WHERE = ''

IF (LEN(@EqpClassId) > 0)
	SET @WHERE = @WHERE + 'AND Eqp_Class_Id IN (' + @EqpClassId + ') '
IF (LEN(@EqpGroupId) > 0)
	SET @WHERE = @WHERE + 'AND Equipment_Group_Id IN (' + @EqpGroupId + ') '
IF (LEN(@ManufacturerId) > 0)
	SET @WHERE = @WHERE + 'AND ManufacturerId IN (' + @ManufacturerId + ') '
IF (LEN(@ModelId) > 0)
	SET @WHERE = @WHERE + 'AND ModelId IN (' + @ModelId + ') '
IF (LEN(@FleetId) > 0)
	SET @WHERE = @WHERE + 'AND FleetId IN (' + @FleetId + ') '
IF (LEN(@EqpPlanId) > 0)
	SET @WHERE = @WHERE + 'AND EqpPlanId IN (' + @EqpPlanId + ') '
--AL: 14/02/08
--IF (LEN(@EqpTypeId) > 0)
--	SET @WHERE = @WHERE + 'AND Eqp_Type_Id IN (' + @EqpTypeId + ') '
IF (LEN(@EqpCriticalityId) > 0)
	SET @WHERE = @WHERE + 'AND Eqp_Criticality_Id IN (' + @EqpCriticalityId + ') '
IF (LEN(@EqpLocationId) > 0)
	SET @WHERE = @WHERE + 'AND Eqp_Location_Id IN (' + @EqpLocationId + ') '
IF (LEN(@EqpCategoryId) > 0)
	SET @WHERE = @WHERE + 'AND Eqp_Category_Id IN (' + @EqpCategoryId + ') '
IF (LEN(@RegionId) > 0)
	SET @WHERE = @WHERE + 'AND Region_Id IN (' + @RegionId + ') '
IF (LEN(@DivisionId) > 0)
	SET @WHERE = @WHERE + 'AND Division_Id IN (' + @DivisionId + ') '
IF (LEN(@BranchId) > 0)
	SET @WHERE = @WHERE + 'AND BranchId IN (' + @BranchId + ') '
IF (LEN(@SiteId) > 0)
	SET @WHERE = @WHERE + 'AND SiteId IN (' + @SiteId + ') '

--AL: 14/02/08
IF (LEN(@CostResponsibilityId) > 0)
	SET @WHERE = @WHERE + 'AND Cost_Responsibility_ID IN (' + @CostResponsibilityId + ') '
IF (LEN(@ParentEqpPlanID) > 0)
	SET @WHERE = @WHERE + 'AND EqpPlanID IN (SELECT EqpPlanID FROM dbo.EQP_SIBLINGS_F('+ @ParentEqpPlanID +')) '


CREATE TABLE #z_EqpProjs
	(
	EqpProjId int NOT NULL
	)

SET @SQL = 'INSERT INTO #z_EqpProjs SELECT EqpProjId FROM EQUIPMENT_HIERARCHY_V WHERE CurrentProj <> 0 ' + @WHERE
--print @SQL

EXEC (@SQL)

DECLARE Cur CURSOR FAST_FORWARD FOR
	SELECT EqpPlanId FROM EQUIPMENT_HIERARCHY_V WHERE EqpProjId IN (SELECT EqpProjId FROM #z_EqpProjs)
	AND EqpProjId NOT IN (
	SELECT EP.EqpProjId FROM tblEqpProjs EP INNER JOIN tblProjTasks PT ON EP.EqpProjId = PT.EqpProjId
	INNER JOIN tblComponentCodes CC ON PT.ComponentCodeId = CC.ComponentCodeId
	WHERE CC.Code = @AdjusterCompCode
	AND ISNULL(EP.CurrentProj, 0) <> 0
	)
	AND ISNULL(CurrentProj, 0) <> 0

OPEN Cur
FETCH NEXT FROM Cur INTO @EqpProjId

WHILE @@FETCH_STATUS = 0
BEGIN
	--print 'TEST: ' + CONVERT(VARCHAR, @EqpProjId) + ' ' + CONVERT(VARCHAR, @CompCodeId)
	exec COST_ADJUSTER_TASK_AUTO_ADD_P @EqpProjId, @AdjusterCompCodeId

	FETCH NEXT FROM Cur INTO @EqpProjId
END

CLOSE Cur
DEALLOCATE Cur

DROP TABLE #z_EqpProjs
--*******************************************************************

SET @WHERE = ''

IF (LEN(@EqpClassId) > 0)
	SET @WHERE = @WHERE + 'AND Eqp_Class_Id IN (' + @EqpClassId + ') '
IF (LEN(@EqpGroupId) > 0)
	SET @WHERE = @WHERE + 'AND Equipment_Group_Id IN (' + @EqpGroupId + ') '
IF (LEN(@ManufacturerId) > 0)
	SET @WHERE = @WHERE + 'AND ManufacturerId IN (' + @ManufacturerId + ') '
IF (LEN(@ModelId) > 0)
	SET @WHERE = @WHERE + 'AND ModelId IN (' + @ModelId + ') '
IF (LEN(@FleetId) > 0)
	SET @WHERE = @WHERE + 'AND FleetId IN (' + @FleetId + ') '
IF (LEN(@EqpPlanId) > 0)
	SET @WHERE = @WHERE + 'AND EqpPlanId IN (' + @EqpPlanId + ') '
--AL: 14/02/08
--IF (LEN(@EqpTypeId) > 0)
--	SET @WHERE = @WHERE + 'AND Eqp_Type_Id IN (' + @EqpTypeId + ') '
IF (LEN(@EqpCriticalityId) > 0)
	SET @WHERE = @WHERE + 'AND Eqp_Criticality_Id IN (' + @EqpCriticalityId + ') '
IF (LEN(@EqpLocationId) > 0)
	SET @WHERE = @WHERE + 'AND Eqp_Location_Id IN (' + @EqpLocationId + ') '
IF (LEN(@EqpCategoryId) > 0)
	SET @WHERE = @WHERE + 'AND Eqp_Category_Id IN (' + @EqpCategoryId + ') '
IF (LEN(@RegionId) > 0)
	SET @WHERE = @WHERE + 'AND Region_Id IN (' + @RegionId + ') '
IF (LEN(@DivisionId) > 0)
	SET @WHERE = @WHERE + 'AND Division_Id IN (' + @DivisionId + ') '
IF (LEN(@BranchId) > 0)
	SET @WHERE = @WHERE + 'AND BranchId IN (' + @BranchId + ') '
IF (LEN(@SiteId) > 0)
	SET @WHERE = @WHERE + 'AND SiteId IN (' + @SiteId + ') '
IF (LEN(@CostBearerId) > 0)
	SET @WHERE = @WHERE + 'AND CostBearerId IN (' + @CostBearerId + ') '
IF (LEN(@CostCentreId) > 0)
	SET @WHERE = @WHERE + 'AND Cost_Centre_Id IN (' + @CostCentreId + ') '
IF (LEN(@ExpenseElementId) > 0)
	SET @WHERE = @WHERE + 'AND Cost_Expense_Id IN (' + @ExpenseElementId + ') '
IF (LEN(@WorkGroupId) > 0)
	SET @WHERE = @WHERE + 'AND Work_Group_Id IN (' + @WorkGroupId + ') '
IF (LEN(@TaskTypeId) > 0)
	SET @WHERE = @WHERE + 'AND TaskTypeId IN (' + @TaskTypeId + ') '
IF (LEN(@SystemId) > 0)
	SET @WHERE = @WHERE + 'AND SystemId IN (' + @SystemId + ') '
IF (LEN(@SubsystemId) > 0)
	SET @WHERE = @WHERE + 'AND SubSystemId IN (' + @SubsystemId + ') '
IF (LEN(@CompCodeId) > 0)
	SET @WHERE = @WHERE + 'AND ComponentCodeId IN (' + @CompCodeId + ') '

--AL: 14/02/08
IF (LEN(@CostResponsibilityId) > 0)
	SET @WHERE = @WHERE + 'AND Cost_Responsibility_ID IN (' + @CostResponsibilityId + ') '
IF (LEN(@ParentEqpPlanID) > 0)
	SET @WHERE = @WHERE + 'AND EqpPlanID IN (SELECT EqpPlanID FROM dbo.EQP_SIBLINGS_F('+ @ParentEqpPlanID +')) '

SET @PROJ_DATE_WHERE = 'AND Period>=' + CONVERT(VARCHAR, @ProjFromPeriod) + ' AND Period<=' + CONVERT(VARCHAR, @ProjToPeriod) + ' '
SET @ACTUAL_DATE_WHERE = 'AND CalenderPeriod>=' + CONVERT(VARCHAR, @ActualFromPeriod) + ' AND CalenderPeriod<=' + CONVERT(VARCHAR, @ActualToPeriod) + ' '

SET @SQL = ''
SET @SQL = 'SELECT '
--NOTE: this next line is different to the GET stored procedure...
SET @SQL = @SQL + 'CASE WHEN A.AdjusterEqpPlanId IS NOT NULL THEN A.AdjusterEqpPlanId ELSE B.AdjusterEqpPlanId END AS AdjusterEqpPlanId, '
--NOTE: this next line is different to the GET stored procedure...
SET @SQL = @SQL + 'CASE WHEN A.AdjusterEqpPlan IS NOT NULL THEN A.AdjusterEqpPlan ELSE B.AdjusterEqpPlan END AS AdjusterEqpPlan, '
SET @SQL = @SQL + 'CASE WHEN A.' + @AnalyseBy1 + ' IS NOT NULL THEN A.' + @AnalyseBy1 + ' ELSE B.' + @AnalyseBy1 + ' END AS ' + @AnalyseBy1 + ','
SET @SQL = @SQL + 'CASE WHEN A.' + @AnalyseBy1Desc + ' IS NOT NULL THEN A.' + @AnalyseBy1Desc + ' ELSE B.' + @AnalyseBy1Desc + ' END AS ' + @AnalyseBy1Desc + ','
IF (LEN(@AnalyseBy2) > 0)
BEGIN
	SET @SQL = @SQL + 'CASE WHEN A.' + @AnalyseBy2 + ' IS NOT NULL THEN A.' + @AnalyseBy2 + ' ELSE B.' + @AnalyseBy2 + ' END AS ' + @AnalyseBy2 + ','
	SET @SQL = @SQL + 'CASE WHEN A.' + @AnalyseBy2Desc + ' IS NOT NULL THEN A.' + @AnalyseBy2Desc + ' ELSE B.' + @AnalyseBy2Desc + ' END AS ' + @AnalyseBy2Desc + ','
END
ELSE
	SET @SQL = @SQL + CHAR(39) + CHAR(39) + ' AS NULL2A, ' + CHAR(39) + CHAR(39) + ' AS NULL2B,'
IF (LEN(@AnalyseBy3) > 0)
BEGIN
	SET @SQL = @SQL + 'CASE WHEN A.' + @AnalyseBy3 + ' IS NOT NULL THEN A.' + @AnalyseBy3 + ' ELSE B.' + @AnalyseBy3 + ' END AS ' + @AnalyseBy3 + ','
	SET @SQL = @SQL + 'CASE WHEN A.' + @AnalyseBy3Desc + ' IS NOT NULL THEN A.' + @AnalyseBy3Desc + ' ELSE B.' + @AnalyseBy3Desc + ' END AS ' + @AnalyseBy3Desc + ','
END
ELSE
	SET @SQL = @SQL + CHAR(39) + CHAR(39) + ' AS NULL3A, ' + CHAR(39) + CHAR(39) + ' AS NULL3B,'
--SET @SQL = @SQL + 'ISNULL(B.Actual_Sell,0) AS Actual_Sell, ISNULL(A.Proj_Sell,0) AS Proj_Sell '
--this is calculating the amount based on ANALYSE BY MONTH (ie. just using the number of periods to do the averaging)...
SET @SQL = @SQL + 'ISNULL(B.Actual_Sell,0) / ' + CONVERT(VARCHAR, @ActualNumberOfPeriods) + ' AS Actual_Sell, ISNULL(A.Proj_Sell,0) / ' + CONVERT(VARCHAR, @ProjNumberOfPeriods) + ' AS Proj_Sell '
SET @SQL = @SQL + 'FROM (SELECT '
--NOTE: this next line is different to the GET stored procedure...
SET @SQL = @SQL + 'EqpPlanId AS AdjusterEqpPlanId,EqpPlan AS AdjusterEqpPlan, '
SET @SQL = @SQL + @AnalyseBy1 + ',' + @AnalyseBy1Desc + ','
IF (LEN(@AnalyseBy2) > 0)
	SET @SQL = @SQL + @AnalyseBy2 + ',' + @AnalyseBy2Desc + ','
ELSE
	SET @SQL = @SQL + CHAR(39) + CHAR(39) + ' AS NULL2A, ' + CHAR(39) + CHAR(39) + ' AS NULL2B,'
IF (LEN(@AnalyseBy3) > 0)
	SET @SQL = @SQL + @AnalyseBy3 + ',' + @AnalyseBy3Desc + ','
ELSE
	SET @SQL = @SQL + CHAR(39) + CHAR(39) + ' AS NULL3A, ' + CHAR(39) + CHAR(39) + ' AS NULL3B,'
SET @SQL = @SQL + 'SUM(PrimePartsSell+PrimeLabourSell+PrimeMiscSell'
IF (@IncludeParts = 0)
	SET @SQL = @SQL + '-PrimePartsSell'
IF (@IncludeLabour = 0)
	SET @SQL = @SQL + '-PrimeLabourSell'
IF (@IncludeMisc = 0)
	SET @SQL = @SQL + '-PrimeMiscSell'
SET @SQL = @SQL + ') AS Proj_Sell '
SET @SQL = @SQL + 'FROM COST_ADJUSTER_PROJ_COSTS_V '

IF (@AdjustByActuals = 0) --ie. adjust by projected costs
	SET @SQL = @SQL + ' WHERE 1=1 '
ELSE
	SET @SQL = @SQL + ' WHERE 1=0 ' --ie. leave out projected costs (this improves performance, because the query engine will always evaluate this false condition first)

SET @SQL = @SQL + @WHERE
SET @SQL = @SQL + @PROJ_DATE_WHERE
--NOTE: excluding std jobs/cost allocations only applies to PROJ costs
IF (@ExcludeStdJobs = 0) --ie. only return NOT linked to std jobs/cost allocs
	SET @SQL = @SQL + 'AND (PricedJobId IS NULL AND Cost_Allocation_Id IS NULL) '
ELSE IF (@ExcludeStdJobs = 1) --ie. only return LINKED to std jobs/cost allocs
	SET @SQL = @SQL + 'AND (PricedJobId IS NOT NULL OR Cost_Allocation_Id IS NOT NULL) '
--NOTE: 
SET @SQL = @SQL + 'GROUP BY '
--NOTE: this next line is different to the GET stored procedure...
SET @SQL = @SQL + 'EqpPlanId,EqpPlan, '
SET @SQL = @SQL + @AnalyseBy1 + ',' + @AnalyseBy1Desc
IF (LEN(@AnalyseBy2) > 0)
	SET @SQL = @SQL + ',' + @AnalyseBy2 + ',' + @AnalyseBy2Desc
IF (LEN(@AnalyseBy3) > 0)
	SET @SQL = @SQL + ',' + @AnalyseBy3 + ',' + @AnalyseBy3Desc
SET @SQL = @SQL + ') A FULL OUTER JOIN (SELECT '
--NOTE: this next line is different to the GET stored procedure...
SET @SQL = @SQL + 'EqpPlanId AS AdjusterEqpPlanId,EqpPlan AS AdjusterEqpPlan, '
SET @SQL = @SQL + @AnalyseBy1 + ',' + @AnalyseBy1Desc + ','
IF (LEN(@AnalyseBy2) > 0)
	SET @SQL = @SQL + @AnalyseBy2 + ',' + @AnalyseBy2Desc + ','
ELSE
	SET @SQL = @SQL + CHAR(39) + CHAR(39) + ' AS NULL2A, ' + CHAR(39) + CHAR(39) + ' AS NULL2B,'
IF (LEN(@AnalyseBy3) > 0)
	SET @SQL = @SQL + @AnalyseBy3 + ',' + @AnalyseBy3Desc + ','
ELSE
	SET @SQL = @SQL + CHAR(39) + CHAR(39) + ' AS NULL3A, ' + CHAR(39) + CHAR(39) + ' AS NULL3B,'
SET @SQL = @SQL + 'SUM(PrimePartsSell+PrimeLabourSell+PrimeMiscSell'
IF (@IncludeParts = 0)
	SET @SQL = @SQL + '-PrimePartsSell'
IF (@IncludeLabour = 0)
	SET @SQL = @SQL + '-PrimeLabourSell'
IF (@IncludeMisc = 0)
	SET @SQL = @SQL + '-PrimeMiscSell'
SET @SQL = @SQL + ') AS Actual_Sell '

SET @SQL = @SQL + 'FROM COST_ADJUSTER_ACTUAL_COSTS_V '

IF (@AdjustByActuals = 0) --ie. adjust by projected costs
	SET @SQL = @SQL + ' WHERE 1=0 ' --ie. leave out actual costs (this improves performance, because the query engine will always evaluate this false condition first)
ELSE
	SET @SQL = @SQL + ' WHERE 1=1 '
	
SET @SQL = @SQL + @WHERE
SET @SQL = @SQL + @ACTUAL_DATE_WHERE
SET @SQL = @SQL + 'GROUP BY '
--NOTE: this next line is different to the GET stored procedure...
SET @SQL = @SQL + 'EqpPlanId,EqpPlan, '
SET @SQL = @SQL + @AnalyseBy1 + ',' + @AnalyseBy1Desc
IF (LEN(@AnalyseBy2) > 0)
	SET @SQL = @SQL + ',' + @AnalyseBy2 + ',' + @AnalyseBy2Desc
IF (LEN(@AnalyseBy3) > 0)
	SET @SQL = @SQL + ',' + @AnalyseBy3 + ',' + @AnalyseBy3Desc
SET @SQL = @SQL + ') B ON ISNULL('
--NOTE: this next line is different to the GET stored procedure...
SET @SQL = @SQL + 'A.AdjusterEqpPlanId,0)=ISNULL(B.AdjusterEqpPlanId,0) AND ISNULL('
SET @SQL = @SQL + 'A.' + @AnalyseBy1 + ',0) = ISNULL(B.' + @AnalyseBy1 + ',0) '
IF (LEN(@AnalyseBy2) > 0)
	SET @SQL = @SQL + 'AND ISNULL(A.' + @AnalyseBy2 + ',0) = ISNULL(B.' + @AnalyseBy2 + ',0) '
IF (LEN(@AnalyseBy3) > 0)
	SET @SQL = @SQL + 'AND ISNULL(A.' + @AnalyseBy3 + ',0) = ISNULL(B.' + @AnalyseBy3 + ',0)'
SET @SQL = @SQL + 'WHERE (A.' + @AnalyseBy1 + '=' + CONVERT(VARCHAR, @AnalyseBy1Id) + ' OR B.'+ @AnalyseBy1 + '=' + CONVERT(VARCHAR, @AnalyseBy1Id) + ') '
IF (LEN(@AnalyseBy2) > 0)
	SET @SQL = @SQL + 'AND (A.' + @AnalyseBy2 + '=' + CONVERT(VARCHAR, @AnalyseBy2Id) + ' OR B.'+ @AnalyseBy2 + '=' + CONVERT(VARCHAR, @AnalyseBy2Id) + ') '
IF (LEN(@AnalyseBy3) > 0)
	SET @SQL = @SQL + 'AND (A.' + @AnalyseBy3 + '=' + CONVERT(VARCHAR, @AnalyseBy3Id) + ' OR B.'+ @AnalyseBy3 + '=' + CONVERT(VARCHAR, @AnalyseBy3Id) + ') '

SET @SQL = 'INSERT INTO #COST_ADJUSTER_TEMP ' + @SQL

CREATE TABLE #COST_ADJUSTER_TEMP (
	AdjusterEqpPlanId INT,
	AdjusterEqpPlan VARCHAR(MAX) COLLATE DATABASE_DEFAULT,
	GroupBy1 INT,
	GroupBy1Desc VARCHAR(MAX) COLLATE DATABASE_DEFAULT,
	GroupBy2 INT,
	GroupBy2Desc VARCHAR(MAX) COLLATE DATABASE_DEFAULT,
	GroupBy3 INT,
	GroupBy3Desc VARCHAR(MAX) COLLATE DATABASE_DEFAULT,
	Actual_Sell FLOAT,
	Proj_Sell FLOAT
)

--PRINT @SQL

EXEC (@SQL)

CREATE TABLE #I_JOB_COST (
	Cost_Allocation_Ref VARCHAR(MAX) COLLATE DATABASE_DEFAULT,
	Scheduling_Task_Link BIT,
	Delete_Cost_Allocation BIT,
	Model VARCHAR(MAX) COLLATE DATABASE_DEFAULT,
	Serial_No VARCHAR(MAX) COLLATE DATABASE_DEFAULT,
	Component_Code VARCHAR(MAX) COLLATE DATABASE_DEFAULT,
	Modifier_Code VARCHAR(MAX) COLLATE DATABASE_DEFAULT,
	Work_Group VARCHAR(MAX) COLLATE DATABASE_DEFAULT,
	Cost_Centre VARCHAR(MAX) COLLATE DATABASE_DEFAULT,
	Cost_Bearer VARCHAR(MAX) COLLATE DATABASE_DEFAULT,
	Parts_Expense VARCHAR(MAX) COLLATE DATABASE_DEFAULT,
	Labour_Expense VARCHAR(MAX) COLLATE DATABASE_DEFAULT,
	Misc_Expense VARCHAR(MAX) COLLATE DATABASE_DEFAULT,
	Labour_Activity VARCHAR(MAX) COLLATE DATABASE_DEFAULT,
	Labour_Hours FLOAT, 
	Duration_Hours FLOAT,
	Parts_Sell FLOAT,
	Labour_Sell FLOAT,
	Misc_Sell FLOAT,
	System_Source VARCHAR(MAX) COLLATE DATABASE_DEFAULT
)

SELECT @WorkGroupCode = Work_Group_Code FROM Work_Group WHERE Work_Group_Id = @EDIT_WorkGroupId
SELECT @CostBearerCode = WO_Code FROM tblCostBearers WHERE CostBearerId = @EDIT_CostBearerId
SELECT @CostExpenseCode = Cost_Expense_Code FROM COST_EXPENSE WHERE Cost_Expense_Id = @EDIT_CostExpenseId
SELECT @CostCentreCode = Cost_Centre_Code FROM COST_CENTRE WHERE Cost_Centre_Id = @EDIT_CostCentreId

SET @SQL = 'INSERT #I_JOB_COST SELECT CONVERT(VARCHAR, CAT.AdjusterEqpPlanId) + ' + CHAR(39) + '.' + CHAR(39) + ' + ' + CHAR(39) + @AdjusterCompCode + CHAR(39) + ' + ' + CHAR(39) + '..' + CHAR(39) + ' + ' + CHAR(39) + /*@AdjusterModCode*/ '0' + CHAR(39) + ' AS Cost_Allocation_Ref, '
SET @SQL = @SQL + '0 AS Scheduling_Task_Link, '
SET @SQL = @SQL + '0 AS Delete_Cost_Allocation, '
SET @SQL = @SQL + 'Model, '
SET @SQL = @SQL + 'SerialNumber AS Serial_No, '
SET @SQL = @SQL + CHAR(39) + @AdjusterCompCode + CHAR(39) + ' AS Component_Code, '
SET @SQL = @SQL + CHAR(39) + @AdjusterModCode + CHAR(39) + ' AS Modifier_Code, '
SET @SQL = @SQL + CHAR(39) + ISNULL(@WorkGroupCode,'') + CHAR(39) + ' AS Work_Group, ' --TODO: check for "mixed"???
SET @SQL = @SQL + CHAR(39) + ISNULL(@CostCentreCode,'') + CHAR(39) + ' AS Cost_Centre, ' --TODO: check for "mixed"???
SET @SQL = @SQL + CHAR(39) + ISNULL(@CostBearerCode,'') + CHAR(39) + ' AS Cost_Bearer, ' --TODO: check for "mixed"???
SET @SQL = @SQL + 'null AS Parts_Expense, '
SET @SQL = @SQL + 'null AS Labour_Expense, '
SET @SQL = @SQL + CHAR(39) + ISNULL(@CostExpenseCode,'') + CHAR(39) + ' AS Misc_Cost_Expense, ' --TODO: check for "mixed"???
SET @SQL = @SQL + 'null AS Labour_Activity, '
SET @SQL = @SQL + '0 AS Labour_Hours, '
SET @SQL = @SQL + '0 AS Duration_Hours, '
SET @SQL = @SQL + '0 AS Parts_Sell, '
SET @SQL = @SQL + '0 AS Labour_Sell, '
IF (@AdjustByActuals = 0) --ie. adjust by projected costs
	SET @SQL = @SQL + '(365/360 * CAT.Proj_Sell * ' + CONVERT(VARCHAR, @AdjustmentPct) + '/100) - (CAT.Proj_Sell) AS Misc_Sell, '
ELSE
	SET @SQL = @SQL + '(365/360 * CAT.Actual_Sell * ' + CONVERT(VARCHAR, @AdjustmentPct) + '/100) - (CAT.Proj_Sell) AS Misc_Sell, '
--SET @SQL = @SQL + CHAR(39) + 'AMT' + CHAR(39) + ' AS System_Source '	--AL: 18/02/08
SET @SQL = @SQL + CHAR(39) + 'Cost Adj' + CHAR(39) + ' AS System_Source '	--AL: 18/02/08
SET @SQL = @SQL + 'FROM	EQUIPMENT_HIERARCHY_V EH INNER JOIN #COST_ADJUSTER_TEMP CAT ON EH.EqpPlanId = CAT.AdjusterEqpPlanId WHERE '
SET @SQL = @SQL + 'ISNULL(CurrentProj,0) <> 0 '
--SET @SQL = @SQL + @WHERE
IF (@AdjustByActuals = 0)
	SET @SQL = @SQL + ' AND ISNULL(CAT.Proj_Sell,0) <> 0 '
ELSE
	SET @SQL = @SQL + ' AND ISNULL(CAT.Actual_Sell,0) <> 0 '

--PRINT @SQL 

EXEC (@SQL)

--retrieve all the *other* cost alloc detail records that exist for this eqp's cost adjuster task,
--and pass them to the routine (the routine DELETES all cost alloc detail records, and adds only what is passed)
SET @SQL = 'INSERT #I_JOB_COST SELECT CONVERT(VARCHAR, EqpPlanId) + ' + CHAR(39) + '.' + CHAR(39) + ' + ' + CHAR(39) + @AdjusterCompCode + CHAR(39) + ' + ' + CHAR(39) + '..' + CHAR(39) + ' + ' + CHAR(39) + /*@AdjusterModCode*/ '0' + CHAR(39) + ' AS Cost_Allocation_Ref, '
SET @SQL = @SQL + '0 AS Scheduling_Task_Link, '
SET @SQL = @SQL + '0 AS Delete_Cost_Allocation, '
SET @SQL = @SQL + 'Model, '
SET @SQL = @SQL + 'SerialNumber AS Serial_No, '
SET @SQL = @SQL + CHAR(39) + @AdjusterCompCode + CHAR(39) + ' AS Component_Code, '
SET @SQL = @SQL + CHAR(39) + @AdjusterModCode + CHAR(39) + ' AS Modifier_Code, '
SET @SQL = @SQL + 'Work_Group_Code AS Work_Group, '
SET @SQL = @SQL + 'Cost_Centre_Code AS Cost_Centre, '
SET @SQL = @SQL + 'WO_Code AS Cost_Bearer, '
SET @SQL = @SQL + 'null AS Parts_Expense, '
SET @SQL = @SQL + 'null AS Labour_Expense, '
SET @SQL = @SQL + 'Cost_Expense_Code AS Misc_Expense, '
SET @SQL = @SQL + 'null AS Labour_Activity, '
SET @SQL = @SQL + '0 AS Labour_Hours, '
SET @SQL = @SQL + '0 AS Duration_Hours, '
SET @SQL = @SQL + '0 AS Parts_Sell, '
SET @SQL = @SQL + '0 AS Labour_Sell, '
SET @SQL = @SQL + 'Misc_Cost AS Misc_Sell, '
--SET @SQL = @SQL + CHAR(39) + 'AMT' + CHAR(39) + ' AS System_Source '	--AL: 18/02/08
SET @SQL = @SQL + CHAR(39) + 'Cost Adj' + CHAR(39) + ' AS System_Source '	--AL: 18/02/08
SET @SQL = @SQL + 'FROM	COST_ADJUSTER_GET_EXISTING_V '
SET @SQL = @SQL + ' WHERE Component_Code_Id = ' + CONVERT(VARCHAR, @AdjusterCompCodeId)
--PRINT @SQL 

EXEC (@SQL)

SELECT 
	Cost_Allocation_Ref,
	Scheduling_Task_Link,
	Delete_Cost_Allocation,
	Model,
	Serial_No,
	Component_Code,
	Modifier_Code,
	Work_Group,
	Cost_Centre,
	Cost_Bearer,
	Parts_Expense,
	Labour_Expense,
	Misc_Expense,
	Labour_Activity,
	Labour_Hours, 
	Duration_Hours,
	Parts_Sell,
	Labour_Sell,
	Misc_Sell,
	System_Source
FROM
	#I_JOB_COST I_JOBCOST
ORDER BY Cost_Allocation_Ref
FOR XML AUTO, ELEMENTS 

DROP TABLE #I_JOB_COST
DROP TABLE #COST_ADJUSTER_TEMP

END


GO

/****** Object:  StoredProcedure [dbo].[AMT_WORK_ORDER_CREATE_P]    Script Date: 08/17/2011 16:16:40 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[AMT_WORK_ORDER_CREATE_P]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[AMT_WORK_ORDER_CREATE_P]
GO


/****** Object:  StoredProcedure [dbo].[AMT_WORK_ORDER_CREATE_P]    Script Date: 08/17/2011 16:16:40 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

 
CREATE Procedure [dbo].[AMT_WORK_ORDER_CREATE_P]      
/******************************************************************************      
       
 Name: AMT_WORK_ORDER_CREATE_P      
      
 Called By:       
      
 Desc: Selects data needed to create WO file      
           
    Spec_AMT_Interfaces_Generic Specs.doc        
                   
      
 Auth: Veronika Vasylyeva      
 Date: 12 Jan 2004      
*******************************************************************************      
  Change History      
*******************************************************************************      
 Date:  Author:  Description:      
 -------- -------- ----------------------------------------      
  9 May 11 V Vasylyeva #1627 : If workorder is in auto-create workorder mode       
       use codes from operations.      
 23 Sep 10 K Nagarajan 595: Call Webserivce if the paramter is set to so.      
 06 Aug 10 D Smith  Added a new mode where POId=-1, for "Create ERP WO" when in "Create PO" mode      
 20 Jul 10 V Vasylyeva CR8981: Add Requested_By_Username      
 30 Jun 10 V Vasylyeva CR8947:Replace operation description "Operation 1" with      
       description from workorder header      
 27 Apr 10 K Nagarajan CR8917: AMT is not sending every Parts line in PO Create      
 20 Apr 10 K Nagarajan CR8908: Pass Site_Code instead of Site in PO Create as well.        
 18 Feb 10 V Vasylyeva CR8787: Send the code for each operation BUT if the operation component code = 0      
       then send the Workorder Header codes. This logic applyes to component code,      
       modifier code and job code.      
 24 Sep 09 K Nagarajan CR 8397: Select Site_Code for AMT Workorder Create.      
 29 Jul 09 V Vasylyeva CR8332: Do not select data if create date is null or task counter=0      
 09 Jul 09 KN   CR 8300 - Enhancements       
 12 May 09 KN   CR 8092 - Send WebServicePOCreate column      
 05 May 09 KN   CR 8056 - Change Site_Code to Site       
 01 May 09 KN   Added Part_Description AND Planned_Unit_Price (Enhancement CR 8055)      
 16 Apr 08 KN   Send only the Parts and Misc with PO Counter is null(CR 7996)      
 16 Apr 08 KN   Fix PreDefinedWorkorder if Task in Auto Create Mode(CR 7999)      
 18 Mar 08 KN   Added New Fields.       
 14 Nov 08 DS   Added Supplier fields for PO mode      
 11 Oct 08 DS   Added new mode (Purchase Orders)      
  1 May 2007 V Vasylyeva CR7118. Misc expense element.      
 17 Aug 2007 V Vasylyeva Added file type 3 for backwords compatibility      
 16 Aug 2007 V Vasylyeva Changed parts and segment      
 17 Jul 2007 V Vasylyeva Changed for the new planning module      
 24 Jan 2007 KN  Changed to WorkGroupCode instead of End Use Code      
 20 Nov 2006 AL  Added WOCreate to get usage      
 09 Mar 2006 SI  Added a logic for the new file format      
 17 Oct 2005 V Vasylyeva Added CostBearer, Use      
 18-Aug-2004 V Vasylyeva Changed Strategy completion date to be the same as      
       Strategy date      
 20 Jul 2004 D Smith  Changed Total Cost field to be the sum of P, L and M      
 04 Jun 2004 V Vasylyeva Removed the restrictions for the lenth of      
     the codes (Job Code, Mod code, ...)      
 26 May 2004 M Lam  Added Customer No      
 16 Apr 2004 V Vasylyeva Strategy completion date=Strategy Date + Strategy Duration (hrs)      
 13 Apr 2004 V Vasylyeva New field: QUOM      
  8 Apr 2004 V Vasylyeva New fields: Model,      
     CostCentre,CostResp, EqpCostCode,      
     WorkOrderNumber, Priority, TaskStatus,      
     AppCode, TaskType, OccType, CostActivity      
     16 Feb 2004 V Vasylyeva New fields in WO segment:       
     Parts Estimate, Labour estimate, misc estimate      
 16 feb 2004 V Vasylyeva If Job code or Modifier Code is 0 - select Null for code      
 08 Apr 2011 G Dhillon Added ExternalBacklogId to Header section      
 05 May 2011 G Dhillon   Added Equipment_No to Header section 
 17 Aug 2011 G Dhillon  Added connectorERPWorkorderCreate setting to create ERP workorder in Connector    
*******************************************************************************/      
 /* Param List */      
      
 @TaskId int,      
 @POID int = 0, --Purchase Order ID added 11-Oct-2008 by DS      
 @UserId INT = 0      
AS      
      
DECLARE @ProjTypeC int      
DECLARE @WOCreateFileType int      
DECLARE @ModSerSep varchar(5)      
DECLARE @Currency varchar(3)      
DECLARE @ChooseWODate bit      
DECLARE @FileTypeComaSep int      
DECLARE @FileTypeBComp int      
DECLARE @WebServicePOCreate bit      
DECLARE @connectorERPWorkorderCreate bit     
DECLARE @TaskModeAUTOCREATEWO int      
SET @TaskModeAUTOCREATEWO=2      
      
/*VV CR8947*/      
DECLARE @DescrToReplace varchar(200)      
SET @DescrToReplace='Operation 1'      
      
DECLARE @SupplierId int      
      
 IF @POId > 0      
  SELECT      
   @SupplierId = Supplier_Id      
  FROM      
   PURCHASE_ORDER      
  WHERE      
   Purchase_Order_Id = @POId      
      
SET @ProjTypeC=1      
SET @ChooseWODate=0      
SET @FileTypeComaSep=1      
SET @FileTypeBComp=3      
      
--AMT settings Check which mode is used      
SELECT @WOCreateFileType=WO_Create_File_Type, @ChooseWODate=Choose_WO_Date,      
@ModSerSep=LTRIM(RTRIM(ISNULL(ModelSerialSeparator,''))), @WebServicePOCreate = ISNULL(WebServicePOCreate,0) ,@connectorERPWorkorderCreate=ISNULL(ConnectorERPWorkorderCreate,0) FROM AMT_VARIABLE      
      
--Task details      
DECLARE @z_TASK TABLE(Task_Id int,Eqp_Plan_Id int,Work_Group_Id int, Event_Id int,      
Job_Date datetime,Strategy_Proj_Task_Opt_Id int,      
Priority_Id int,Task_Status_id int,Component_Code_Id int,Modifier_Id int,      
Application_Code_Id int,Task_Type_Id int,Occurrence_Type_id int,Task_Warranty bit,      
Site_id int, WO_Counter int,Work_Location_Id int,TaskDesc varchar(500),Work_Order_Id int,      
StrQUOMId int,CalculateUsage bit,StrategyUsage float,Work_Order varchar(50),       
Work_Order_Number_External varchar(50),Cost_Centre_Id int,Cost_Bearer_Id int,Parts_Cost_Expense_Id int,      
Labour_Cost_Expense_Id int,Misc_Cost_Expense_Id int,Part_Entry_Distribution_Code_Id int,      
Labour_Entry_Distribution_Code_Id int,Misc_Entry_Distribution_Code_Id int,      
Job_Code_Id int,Branch_Id int,Customer_Id int, Specific_Operation_Codes bit,       
Task_Authorised_By_Id int, RaisedById int, Employee_Id int,/*VV CR8981*/AuthorisationRequestByID int, ExternalBacklogId varchar(50)      
PRIMARY KEY(Task_Id))      
      
--Task Operations      
DECLARE @z_TASK_OPERATION TABLE(Task_Operation_Id int,Task_Id int,Job_Code_Id int,      
Proj_Task_Amt_Id int,Cost_Centre_Id int,Cost_Bearer_Id int,Parts_Cost_Expense_Id int,      
Labour_Cost_Expense_Id int,Misc_Cost_Expense_Id int,Parts_Entry_Distribution_Code_Id int,      
Labour_Entry_Distribution_Code_Id int,Misc_Entry_Distribution_Code_Id int,      
Component_Code_Id int, Modifier_Id int,Job_Description varchar(500),Work_Group_Id int      
PRIMARY KEY(Task_Operation_Id))      
      
INSERT INTO @z_TASK(Task_Id,Eqp_Plan_Id,Work_Group_Id, Event_Id,Job_Date,      
Strategy_Proj_Task_Opt_Id,Priority_Id,Task_Status_id,Component_Code_Id,      
Modifier_Id,Application_Code_Id,Task_Type_Id,Occurrence_Type_id,Task_Warranty,Site_id,      
WO_Counter,Work_Location_Id,TaskDesc,Work_Order_Id,StrQUOMId,      
CalculateUsage,StrategyUsage,Work_Order,Work_Order_Number_External,      
Cost_Centre_Id,Cost_Bearer_Id,Parts_Cost_Expense_Id ,      
Labour_Cost_Expense_Id ,Misc_Cost_Expense_Id ,Part_Entry_Distribution_Code_Id ,      
Labour_Entry_Distribution_Code_Id ,Misc_Entry_Distribution_Code_Id,Job_Code_Id,      
Branch_Id,Customer_Id,Specific_Operation_Codes,Task_Authorised_By_Id,RaisedById, Employee_Id,      
/*VV CR8981*/AuthorisationRequestByID,ExternalBacklogId      
)      
      
SELECT T.Task_Id, T.Eqp_Plan_Id,T.Def_Work_Group_Id AS Work_Group_Id, T.Event_Id,      
      
ISNULL(      
CASE       
WHEN @ChooseWODate=1 AND T.Work_Order_Date IS NOT NULL THEN T.Work_Order_Date      
WHEN T.Event_Id>0 THEN       
 CASE WHEN E.Planned_Down_Time>GETDATE() THEN E.Planned_Down_Time ELSE GETDATE() END      
WHEN T.Strategy_Proj_Task_Opt_Id>0 THEN       
 CASE WHEN PT.NextOccDate>GETDATE() THEN PT.NextOccDate ELSE GETDATE() END      
ELSE CASE WHEN T.Planned_Down_Time >GETDATE() THEN T.Planned_Down_Time ELSE GETDATE() END      
END,GETDATE())       
      
AS Job_Date,      
      
T.Strategy_Proj_Task_Opt_Id,T.Priority_Id,T.Task_Status_id,      
T.Component_Code_Id,T.Modifier_Id,T.Application_Code_Id,T.Task_Type_Id,      
T.Occurrence_Type_id,T.Task_Warranty,T.Site_id,T.WO_Counter,      
E.Work_Location_Id,T.Description AS TaskDesc,T.Work_Order_Id,      
PT.UsageQUOMId AS StrQUOMId,      
CASE       
WHEN T.Work_Order_Date IS NOT NULL THEN 1      
WHEN T.Event_Id>0 THEN 1       
WHEN T.Strategy_Proj_Task_Opt_Id>0 AND ISNULL(PT.NextOcc,0)<>0 THEN 0      
ELSE 1 END AS CalculateUsage,      
PT.NextOcc AS StrategyUsage,      
T.Work_Order,      
CASE WHEN T.Task_Mode_ID=@TaskModeAUTOCREATEWO THEN WO.PureWONumber ELSE T.Work_Order_Number_External END AS Work_Order_Number_External,      
T.Cost_Centre_Id,T.Cost_Bearer_Id,T.Parts_Cost_Expense_Id ,      
T.Labour_Cost_Expense_Id ,T.Misc_Cost_Expense_Id ,T.Part_Entry_Distribution_Code_Id ,      
T.Labour_Entry_Distribution_Code_Id ,T.Misc_Entry_Distribution_Code_Id,      
T.Repair_Code_Id AS Job_Code_Id,Branch_Id,Customer_Id,      
/*VV #1627*/      
CASE WHEN T.Task_Mode_ID=@TaskModeAUTOCREATEWO THEN 1 ELSE T.Specific_Operation_Codes END AS Specific_Operation_Codes,      
      
T.Task_Authorised_By_Id,T.RaisedById, T.Employee_Id,/*VV CR8981*/T.AuthorisationRequestByID, T.ExternalBacklogId      
FROM       
TASK T      
 LEFT OUTER JOIN      
[EVENT] E      
 ON T.Event_Id=E.Event_Id      
 LEFT OUTER JOIN      
tblProjTaskOpts PTO       
 ON T.Strategy_Proj_Task_Opt_Id=PTO.ProjTaskOptId      
 LEFT OUTER JOIN      
tblProjTasks PT      
 ON PTO.ProjTaskId=PT.ProjTaskId       
 LEFT OUTER JOIN       
 tblWorkOrders WO      
 ON T.Work_Order_Id = WO.WorkOrderId      
WHERE Task_Id=@TaskId      
/*VV CR8332*/AND T.WO_Counter>0 AND T.WO_Create_Date IS NOT NULL      
      
--If there are no operations, a segment record is created      
-- using Task details      
      
--If use Specific operation codes are set - use codes from operation      
--Else - some of the codes are from task      
      
INSERT INTO @z_TASK_OPERATION (Task_Operation_Id ,Task_Id ,Job_Code_Id ,      
Proj_Task_Amt_Id ,Cost_Centre_Id,Cost_Bearer_Id,Parts_Cost_Expense_Id ,      
Labour_Cost_Expense_Id ,Misc_Cost_Expense_Id ,Parts_Entry_Distribution_Code_Id ,      
Labour_Entry_Distribution_Code_Id ,Misc_Entry_Distribution_Code_Id,      
Component_Code_Id, Modifier_Id,Job_Description,Work_Group_Id)      
      
SELECT      
ISNULL(O.Task_Operation_Id,0) ,T.Task_Id,      
/*VV CR8787      
CASE WHEN (O.Task_Operation_Id IS NULL)*/      
CASE WHEN ISNULL(O.Job_Code_Id,0)=0      
THEN T.Job_Code_Id ELSE O.Job_Code_Id END AS Job_Code_Id ,      
O.Proj_Task_Amt_Id ,      
CASE WHEN (O.Task_Operation_Id IS NULL) OR (T.Specific_Operation_Codes=0)      
THEN T.Cost_Centre_Id ELSE O.Cost_Centre_Id END AS Cost_Centre_Id,      
CASE WHEN (O.Task_Operation_Id IS NULL) OR (T.Specific_Operation_Codes=0)      
THEN T.Cost_Bearer_Id ELSE O.Cost_Bearer_Id END AS Cost_Bearer_Id,      
CASE WHEN (O.Task_Operation_Id IS NULL) OR (T.Specific_Operation_Codes=0)      
THEN T.Parts_Cost_Expense_Id ELSE O.Parts_Cost_Expense_Id END AS Parts_Cost_Expense_Id,      
CASE WHEN (O.Task_Operation_Id IS NULL) OR (T.Specific_Operation_Codes=0)      
THEN T.Labour_Cost_Expense_Id ELSE O.Labour_Cost_Expense_Id END AS Labour_Cost_Expense_Id,      
CASE WHEN (O.Task_Operation_Id IS NULL) OR (T.Specific_Operation_Codes=0)      
THEN T.Misc_Cost_Expense_Id ELSE O.Misc_Cost_Expense_Id END AS Misc_Cost_Expense_Id,      
      
CASE WHEN (O.Task_Operation_Id IS NULL) OR (T.Specific_Operation_Codes=0)      
THEN T.Part_Entry_Distribution_Code_Id ELSE O.Parts_Entry_Distribution_Code_Id END AS Parts_Entry_Distribution_Code_Id,      
CASE WHEN (O.Task_Operation_Id IS NULL) OR (T.Specific_Operation_Codes=0)      
THEN T.Part_Entry_Distribution_Code_Id ELSE O.Labour_Entry_Distribution_Code_Id END AS Labour_Entry_Distribution_Code_Id,      
CASE WHEN (O.Task_Operation_Id IS NULL) OR (T.Specific_Operation_Codes=0)      
THEN T.Part_Entry_Distribution_Code_Id ELSE O.Misc_Entry_Distribution_Code_Id END AS Misc_Entry_Distribution_Code_Id,      
      
/*VV CR8787 CASE WHEN (O.Task_Operation_Id IS NULL)*/      
CASE WHEN ISNULL(O.Component_Code_Id,0)=0      
THEN T.Component_Code_Id ELSE O.Component_Code_Id END AS Component_Code_Id,      
/*VV CR8787 CASE WHEN (O.Task_Operation_Id IS NULL)*/      
CASE WHEN ISNULL(O.Modifier_Code_Id,0)=0      
THEN T.Modifier_Id ELSE O.Modifier_Code_Id END AS Modifier_Id,      
      
      
CASE WHEN (O.Task_Operation_Id IS NULL) THEN T.TaskDesc       
/*VV CR8947*/      
WHEN O.Task_Operation=@DescrToReplace THEN T.TaskDesc      
ELSE O.Task_Operation END AS Job_Description,      
CASE WHEN (O.Task_Operation_Id IS NULL)      
THEN T.Work_Group_Id ELSE O.Work_Group_Id END AS Work_Group_Id      
      
FROM       
@z_TASK T      
 LEFT OUTER JOIN      
TASK_OPERATION O      
 ON T.Task_id=O.Task_Id      
      
      
SET @Currency = (SELECT Currency FROM tblCurrencies WHERE PrimaryCurr<>0)      
      
      
IF @WOCreateFileType=@FileTypeBComp      
BEGIN      
 --Backwords compatibility for version 7.5.3      
 SET @WOCreateFileType=@FileTypeComaSep      
        
 --Work Order Header      
 SELECT      
 MA.Manufacturer_Code AS Manufacturer,      
 CASE        
 WHEN CHARINDEX(@ModSerSep, E.SerialNumber)=0 THEN E.SerialNumber      
 ELSE      
  CASE WHEN LEFT(E.SerialNumber, CHARINDEX(@ModSerSep, E.SerialNumber) - 1)=M.Model THEN      
  RIGHT(E.SerialNumber, LEN(E.SerialNumber) - CHARINDEX(@ModSerSep, E.SerialNumber))      
  ELSE E.SerialNumber END      
 END AS Serial_Number,      
 ISNULL(CONVERT(int,ROUND(       
 CASE CalculateUsage WHEN 0 THEN T.StrategyUsage ELSE       
 dbo.GET_USAGE_FROM_DATE_F(EPR.EqpProjId,ISNULL(T.StrQUOMId,EPR.EndQUOMId),T.Job_Date)      
 END ,0)),0) AS Usage_Reading,      
 ISNULL(WG.Work_Group_Code,'') AS Work_Group_Code,      
 ISNULL(T.TaskDesc,'') AS Job_Description,      
 CAST(T.Task_Id AS varchar)+'-'+CAST(T.WO_Counter AS varchar) AS External_Source_Id,      
 CONVERT(varchar,T.Job_Date,112) AS Job_Date,      
 CASE WHEN T.Strategy_Proj_Task_Opt_Id>0 THEN '1' ELSE '0' END AS Strategy,      
 M.Model,      
 ISNULL(CCE.Cost_Centre_Code,'') AS Cost_Centre,      
 ISNULL(CUS.CustNumber,'') AS Customer_Number,      
 /* CustNumber instead of cost responsibility      
 ISNULL(CR.Cost_Responsibility_Code,'') AS Cost_Responsibility,*/      
 ISNULL(EP.WBS,'') AS Equipment_Cost_Code,      
 ISNULL(T.Work_Order,'') AS Workorder_Number,      
 ISNULL(T.Work_Order_Number_External,'') AS Predefined_Workorder_Number,      
 P.Short_Description AS Priority,      
 TS.Short_Description AS [Status],      
 ISNULL(ISNULL(QUOMS.Short_Desc,QUOME.Short_Desc),'') AS Usage_UOM,      
 @WOCreateFileType AS WOCreateFileType,T.WO_Counter,@WebServicePOCreate AS WebServicePOCreate ,@connectorERPWorkorderCreate AS ConnectorERPWorkorderCreate    
 FROM      
 @z_TASK T      
  INNER JOIN      
 tblEqpPlans EP      
  ON T.Eqp_Plan_Id=EP.EqpPlanId      
  INNER JOIN      
 tblEquipment E      
  ON EP.EquipmentId=E.EquipmentId      
  INNER JOIN      
 tblModels M      
  ON E.ModelId=M.ModelId      
  INNER JOIN      
 tblManufacturers MA      
  ON M.ManufacturerId=MA.ManufacturerId      
  INNER JOIN      
 tblEqpProjs EPR      
  ON EP.EqpPlanId=EPR.EqpPlanId      
  INNER JOIN      
 tblFleets F      
  ON EP.FleetId=F.FleetId      
  INNER JOIN      
 tblSites S      
  ON F.SiteId=S.SiteId      
  INNER JOIN      
 PRIORITY P      
  ON T.Priority_Id=P.Priority_Id      
  INNER JOIN      
 TASK_STATUS TS      
  ON T.Task_Status_Id=TS.Task_Status_Id      
  INNER JOIN      
 tblComponentCodes CC      
  ON T.Component_Code_Id=CC.ComponentCodeId      
  INNER JOIN      
 tblModifierCodes MC      
  ON T.Modifier_Id=MC.ModifierId      
  INNER JOIN      
 tblApplicationCodes AC      
  ON T.Application_Code_Id=AC.ApplicationCodeId      
  INNER JOIN      
 tblTaskTypes TT      
  ON T.Task_Type_Id=TT.TaskTypeId      
  LEFT OUTER JOIN       
 COST_ACTIVITY CA       
  ON TT.Cost_Activity_ID = CA.Cost_Activity_ID      
  LEFT OUTER JOIN      
 WORK_GROUP WG      
  ON T.Work_Group_Id=WG.Work_Group_Id      
  LEFT OUTER JOIN      
 WORK_LOCATION WL      
  ON T.Work_Location_Id=WL.Work_Location_Id      
  LEFT OUTER JOIN      
 COST_RESPONSIBILITY CR      
  ON EP.Cost_Responsibility_Id=CR.Cost_Responsibility_Id      
  LEFT OUTER JOIN      
 tblOccurrenceTypes OT      
  ON T.Occurrence_Type_Id=OT.OccurrenceTypeId      
  LEFT OUTER JOIN      
 tblQUOMs QUOMS      
  ON T.StrQUOMId=QUOMS.QUOMId      
  LEFT OUTER JOIN      
 tblQUOMs QUOME      
  ON EPR.EndQUOMId=QUOME.QUOMId      
  LEFT OUTER JOIN      
 tblSites ST      
  ON T.Site_Id=ST.SiteId      
  LEFT OUTER JOIN      
 tblBranches B      
  ON T.Branch_Id=B.BranchId      
  LEFT OUTER JOIN      
 tblCustomers CUS      
  ON T.Customer_Id=CUS.CustomerId      
  LEFT OUTER JOIN      
 COST_CENTRE CCE      
  ON T.Cost_Centre_Id=CCE.Cost_Centre_Id      
  WHERE EPR.Projection_Type_Id=@ProjTypeC      
      
      
      
 --See Spec_AMT_Interfaces_Generic Specs.doc SEGMENT      
 --Work Order Segment      
 SELECT      
 /*'002' AS Record_Type,*/      
 CAST(T.Task_Id AS varchar)+'-'+CAST(T.WO_Counter AS varchar) AS External_Source_Id,      
 O.Task_Operation_Id AS External_Seg_ID,      
 CASE WHEN O.Component_Code_Id>0 THEN C.Code ELSE '' END AS Component_Code,      
 CASE WHEN O.Modifier_Id>0 THEN MC.Code ELSE '' END AS Modifier_Code,      
 CASE WHEN JC.JobCodeId>0 THEN JC.Code ELSE '' END AS Job_Code,      
 ISNULL(ROUND(L.Std_Hours,2),0) AS Std_Hours,      
 ISNULL(ROUND(P.Parts_Cost_Estimate,2),0) +      
 ISNULL(ROUND(L.Labour_Cost_Estimate,2),0)+      
 ISNULL(ROUND(M.Misc_Cost_Estimate,2),0) AS Price,      
 ISNULL(WL.Job_Location,'') AS Work_Location_Code,      
 ISNULL(ROUND(P.Parts_Cost_Estimate,2),0) AS Parts_Cost_Estimate,      
 ISNULL(ROUND(L.Labour_Cost_Estimate,2),0) AS Labour_Cost_Estimate,      
 ISNULL(ROUND(M.Misc_Cost_Estimate,2),0) AS Misc_Cost_Estimate,      
 CASE WHEN T.Application_Code_Id>0 THEN AC.Code ELSE '' END AS Application_Code,      
 CASE WHEN T.Task_Type_Id>0 THEN TT.Code ELSE '' END AS Task_Type,      
 CASE WHEN T.Occurrence_Type_Id>0 THEN OccurrenceType ELSE '' END AS Occurrence_Type,      
 ISNULL(CA.Cost_Activity_Code,'') AS Maintenance_Activity      
 FROM      
 @z_TASK T      
  INNER JOIN      
 @z_TASK_OPERATION O      
  ON T.Task_Id=O.Task_Id      
  INNER JOIN      
 tblApplicationCodes AC      
  ON T.Application_Code_Id=AC.ApplicationCodeId      
  INNER JOIN      
 tblTaskTypes TT      
  ON T.Task_Type_Id=TT.TaskTypeId      
  LEFT OUTER JOIN      
 tblOccurrenceTypes OT      
  ON T.Occurrence_Type_Id=OT.OccurrenceTypeId      
  LEFT OUTER JOIN      
 tblJobCodes JC      
  ON O.Job_Code_Id=JC.JobCodeId      
  LEFT OUTER JOIN      
 COST_CENTRE CC      
  ON O.Cost_Centre_Id=CC.Cost_Centre_Id      
  LEFT OUTER JOIN      
 tblCostBearers CB      
  ON O.Cost_Bearer_Id=CB.CostBearerId      
  LEFT OUTER JOIN      
 COST_EXPENSE CEP      
  ON O.Parts_Cost_Expense_Id=CEP.Cost_Expense_Id      
  LEFT OUTER JOIN      
 COST_EXPENSE CEL      
  ON O.Labour_Cost_Expense_Id=CEL.Cost_Expense_Id      
  LEFT OUTER JOIN      
 COST_EXPENSE CEM      
  ON O.Labour_Cost_Expense_Id=CEM.Cost_Expense_Id      
  LEFT OUTER JOIN      
 ENTRY_DISTRIBUTION_CODE EDSP      
  ON O.Parts_Entry_Distribution_Code_Id=EDSP.[Id]      
  LEFT OUTER JOIN      
 ENTRY_DISTRIBUTION_CODE EDSL      
  ON O.Labour_Entry_Distribution_Code_Id=EDSL.[Id]      
  LEFT OUTER JOIN      
 ENTRY_DISTRIBUTION_CODE EDSM      
  ON O.Misc_Entry_Distribution_Code_Id=EDSM.[Id]      
  LEFT OUTER JOIN       
 TRANSACTION_TYPE TTP       
  ON EDSP.Transaction_Type_Id=TTP.Transaction_Type_Id      
  LEFT OUTER JOIN       
 TRANSACTION_TYPE TTL       
  ON EDSL.Transaction_Type_Id=TTL.Transaction_Type_Id      
  LEFT OUTER JOIN       
 TRANSACTION_TYPE TTM       
  ON EDSM.Transaction_Type_Id=TTM.Transaction_Type_Id      
  LEFT OUTER JOIN       
 tblProjTaskAmts PTA      
  ON O.Proj_Task_Amt_Id=PTA.ProjTaskAmtId      
  LEFT OUTER JOIN      
 tblComponentCodes C      
  ON O.Component_Code_Id=C.ComponentCodeId      
  LEFT OUTER JOIN      
 tblModifierCodes MC      
  ON O.Modifier_Id=MC.ModifierId      
  LEFT OUTER JOIN      
 WORK_GROUP WG      
  ON O.Work_Group_Id=WG.Work_Group_Id      
  LEFT OUTER JOIN      
 WORK_LOCATION WL      
  ON T.Work_Location_Id=WL.Work_Location_Id      
  LEFT OUTER JOIN       
 COST_ACTIVITY CA       
  ON TT.Cost_Activity_ID = CA.Cost_Activity_ID      
  LEFT OUTER JOIN      
 (SELECT L.Task_Operation_Id, SUM(L.Planned_Labour_Hrs) AS Std_Hours,      
 SUM(L.Planned_Labour_Hrs*L.Planned_Labour_Rate) AS Labour_Cost_Estimate      
  FROM      
 TASK_OPERATION_LABOUR L      
  INNER JOIN       
 @z_TASK_OPERATION O      
  ON L.Task_Operation_Id=O.Task_Operation_Id      
 GROUP BY L.Task_Operation_Id) L      
  ON O.Task_Operation_Id=L.Task_Operation_Id      
  LEFT OUTER JOIN      
 (SELECT P.Task_Operation_Id, SUM(P.Planned_Qty*P.Planned_Unit_Price) AS Parts_Cost_Estimate      
 FROM       
 TASK_OPERATION_PART P       
  INNER JOIN       
 @z_TASK_OPERATION O      
  ON P.Task_Operation_Id=O.Task_Operation_Id      
 GROUP BY P.Task_Operation_Id) P      
  ON O.Task_Operation_Id=P.Task_Operation_Id      
  LEFT OUTER JOIN      
 (SELECT M.Task_Operation_Id, SUM(Planned_Sell) AS Misc_Cost_Estimate      
 FROM       
 TASK_OPERATION_MISC M       
  INNER JOIN       
 @z_TASK_OPERATION O      
  ON M.Task_Operation_Id=O.Task_Operation_Id      
 GROUP BY M.Task_Operation_Id) M      
  ON O.Task_Operation_Id=M.Task_Operation_Id      
      
END      
ELSE      
BEGIN      
      
 IF @POId > 0       
        
  --See Spec_AMT_Interfaces_Generic Specs.doc HEADER      
  --Work Order Header      
  SELECT      
  CAST(T.Task_Id AS varchar)+'-'+CAST(T.WO_Counter AS varchar) AS External_Source_Id,      
  MA.Manufacturer_Code AS Manufacturer,M.Model,      
  CASE        
  WHEN CHARINDEX(@ModSerSep, E.SerialNumber)=0 THEN E.SerialNumber      
  ELSE      
   CASE WHEN LEFT(E.SerialNumber, CHARINDEX(@ModSerSep, E.SerialNumber) - 1)=M.Model THEN      
   RIGHT(E.SerialNumber, LEN(E.SerialNumber) - CHARINDEX(@ModSerSep, E.SerialNumber))      
   ELSE E.SerialNumber END      
  END AS Serial_Number,      
      
  ISNULL(CONVERT(int,ROUND(       
  CASE CalculateUsage WHEN 0 THEN T.StrategyUsage ELSE       
  dbo.GET_USAGE_FROM_DATE_F(EPR.EqpProjId,ISNULL(T.StrQUOMId,EPR.EndQUOMId),T.Job_Date)      
  END ,0)),0) AS Usage_Reading,      
  ISNULL(ISNULL(QUOMS.Short_Desc,QUOME.Short_Desc),'') AS Usage_UOM,      
  ISNULL(WG.Work_Group_Code,'') AS Work_Group_Code,      
  ISNULL(WL.Job_Location,'') AS Work_Location_Code,      
  ISNULL(T.TaskDesc,'') AS Job_Description,      
  CONVERT(varchar,T.Job_Date,112) AS Job_Date,      
  @Currency AS Currency,      
  CASE WHEN T.Strategy_Proj_Task_Opt_Id>0 THEN '1' ELSE '0' END AS Strategy,      
  ISNULL(CR.Cost_Responsibility_Code,'') AS Cost_Responsibility,      
  ISNULL(EP.WBS,'') AS Equipment_Cost_Code,      
  ISNULL(T.Work_Order,'') AS Workorder_Number,      
  ISNULL(T.Work_Order_Number_External,'') AS Predefined_Workorder_Number,      
  P.Short_Description AS Priority,TS.Short_Description AS [Status],      
  CASE WHEN T.Component_Code_Id>0 THEN CC.Code ELSE '' END AS Component_Code,      
  CASE WHEN T.Modifier_Id>0 THEN MC.Code ELSE '' END AS Modifier_Code,      
  CASE WHEN T.Application_Code_Id>0 THEN AC.Code ELSE '' END AS Application_Code,      
  CASE WHEN T.Task_Type_Id>0 THEN TT.Code ELSE '' END AS Task_Type,      
  CASE WHEN T.Occurrence_Type_Id>0 THEN OccurrenceType ELSE '' END AS Occurrence_Type,      
  ISNULL(CA.Cost_Activity_Code,'') AS Maintenance_Activity,      
  CAST(T.Task_Warranty AS varchar) As Warranty,      
  EP.EqpPlan As Equipment_Name,ISNULL(ST.Site_Code,S.Site_Code) AS Site_Code, -- Modified CR8908 KN      
  ISNULL(B.Branch_Code,'') AS Branch_Code,ISNULL(CUS.CustNumber,'') AS Customer_Number,      
  @WOCreateFileType AS WOCreateFileType,T.WO_Counter,      
      
  Supplier_Name AS Supplier_Code,     
  SupplyDescription AS Supplier_Name,      
  Supplier_Contact,      
  Contact_Phone,      
  Date_Raised,      
  LEFT(ECC.First_Name, 1) + '. ' + ECC.Surname AS Company_Contact,      
  LEFT(EAU.First_Name, 1) + '. ' + EAU.Surname AS Authorised_By,      
  PO.Delivery_Date,PO.Delivery_Location,PO.Delivery_Street,      
  PO.Purchase_Notes,      
  @WebServicePOCreate AS WebServicePOCreate,@connectorERPWorkorderCreate AS ConnectorERPWorkorderCreate ,    
  PO.Purchase_Order_Number AS Purchase_Order,      
  ERAISED.EmployeeNumber AS Raised_By_Employee_Number,      
  LEFT(ERAISED.First_Name, 1) + '. ' + ERAISED.Surname AS Raised_By_Employee_Name,      
  CUSER.AMT_User_Login_Name AS Created_By_Username,      
  TAUTH.AMT_User_Login_Name AS Authorised_By_Username,      
  /*VV CR8981*/      
  TAUTHREQ.AMT_User_Login_Name AS Requested_By_Username,        
  RESP_EMP.EmployeeNumber AS Responsible_Employee_Number,      
  LEFT(RESP_EMP.First_Name, 1) + '. ' + RESP_EMP.Surname AS Responsible_Employee_Name      
  FROM      
  @z_TASK T      
   INNER JOIN      
  tblEqpPlans EP      
   ON T.Eqp_Plan_Id=EP.EqpPlanId      
   INNER JOIN      
  tblEquipment E      
   ON EP.EquipmentId=E.EquipmentId      
   INNER JOIN      
  tblModels M      
   ON E.ModelId=M.ModelId      
   INNER JOIN      
  tblManufacturers MA      
   ON M.ManufacturerId=MA.ManufacturerId      
   INNER JOIN      
  tblEqpProjs EPR      
   ON EP.EqpPlanId=EPR.EqpPlanId      
   INNER JOIN      
  tblFleets F      
   ON EP.FleetId=F.FleetId      
   INNER JOIN      
  tblSites S      
   ON F.SiteId=S.SiteId      
   INNER JOIN      
  PRIORITY P      
   ON T.Priority_Id=P.Priority_Id      
   INNER JOIN      
  TASK_STATUS TS      
   ON T.Task_Status_Id=TS.Task_Status_Id      
   INNER JOIN      
  tblComponentCodes CC      
   ON T.Component_Code_Id=CC.ComponentCodeId      
   INNER JOIN      
  tblModifierCodes MC      
   ON T.Modifier_Id=MC.ModifierId      
   INNER JOIN      
  tblApplicationCodes AC      
   ON T.Application_Code_Id=AC.ApplicationCodeId      
   INNER JOIN      
  tblTaskTypes TT      
   ON T.Task_Type_Id=TT.TaskTypeId      
      
   INNER JOIN      
  PURCHASE_ORDER PO      
   ON T.Task_Id = PO.Task_Id      
   INNER JOIN      
  SUPPLIER SUP      
   ON PO.Supplier_Id = SUP.Supplier_Id      
      
   LEFT OUTER JOIN       
  COST_ACTIVITY CA       
   ON TT.Cost_Activity_ID = CA.Cost_Activity_ID      
   LEFT OUTER JOIN      
  WORK_GROUP WG      
   ON T.Work_Group_Id=WG.Work_Group_Id      
   LEFT OUTER JOIN      
  WORK_LOCATION WL      
   ON T.Work_Location_Id=WL.Work_Location_Id      
   LEFT OUTER JOIN      
  COST_RESPONSIBILITY CR      
   ON EP.Cost_Responsibility_Id=CR.Cost_Responsibility_Id      
   LEFT OUTER JOIN      
  tblOccurrenceTypes OT      
   ON T.Occurrence_Type_Id=OT.OccurrenceTypeId      
   LEFT OUTER JOIN      
  tblQUOMs QUOMS      
   ON T.StrQUOMId=QUOMS.QUOMId      
   LEFT OUTER JOIN      
  tblQUOMs QUOME      
   ON EPR.EndQUOMId=QUOME.QUOMId      
   LEFT OUTER JOIN      
  tblSites ST      
   ON T.Site_Id=ST.SiteId      
   LEFT OUTER JOIN      
  tblBranches B      
   ON T.Branch_Id=B.BranchId      
   LEFT OUTER JOIN      
  tblCustomers CUS      
   ON T.Customer_Id=CUS.CustomerId      
  LEFT OUTER JOIN      
 EMPLOYEE ECC      
  ON PO.Company_Contact_Id=ECC.Employee_Id      
  LEFT OUTER JOIN      
 EMPLOYEE EAU      
  ON PO.Authorised_By_Id=EAU.Employee_Id      
  LEFT JOIN AMT_USER TAUTH ON TAUTH.Amt_User_Id = T.Task_Authorised_By_Id      
  /*VV CR8981*/      
  LEFT JOIN AMT_USER TAUTHREQ ON TAUTHREQ.Amt_User_Id = T.AuthorisationRequestByID      
        
  LEFT JOIN AMT_USER CUSER ON CUSER.Amt_User_Id = ISNULL(@UserId,0)      
  LEFT JOIN EMPLOYEE ERAISED ON ERAISED.Employee_Id = T.RaisedById      
  LEFT JOIN EMPLOYEE RESP_EMP ON RESP_EMP.Employee_Id = T.Employee_Id      
   WHERE EPR.Projection_Type_Id=@ProjTypeC      
   AND PO.Purchase_Order_Id = @POId      
      
ELSE IF @POId = -1 -- this is a special case, "Create ERP WO" in "PO Mode" but with no supplier (ie. no parts, no misc)      
        
  --See Spec_AMT_Interfaces_Generic Specs.doc HEADER      
  --Work Order Header      
  SELECT      
  CAST(T.Task_Id AS varchar)+'-'+CAST(T.WO_Counter AS varchar) AS External_Source_Id,      
  MA.Manufacturer_Code AS Manufacturer,M.Model,      
  CASE        
  WHEN CHARINDEX(@ModSerSep, E.SerialNumber)=0 THEN E.SerialNumber      
  ELSE      
   CASE WHEN LEFT(E.SerialNumber, CHARINDEX(@ModSerSep, E.SerialNumber) - 1)=M.Model THEN      
   RIGHT(E.SerialNumber, LEN(E.SerialNumber) - CHARINDEX(@ModSerSep, E.SerialNumber))      
   ELSE E.SerialNumber END      
  END AS Serial_Number,      
      
  ISNULL(CONVERT(int,ROUND(       
  CASE CalculateUsage WHEN 0 THEN T.StrategyUsage ELSE       
  dbo.GET_USAGE_FROM_DATE_F(EPR.EqpProjId,ISNULL(T.StrQUOMId,EPR.EndQUOMId),T.Job_Date)      
  END ,0)),0) AS Usage_Reading,      
  ISNULL(ISNULL(QUOMS.Short_Desc,QUOME.Short_Desc),'') AS Usage_UOM,      
  ISNULL(WG.Work_Group_Code,'') AS Work_Group_Code,      
  ISNULL(WL.Job_Location,'') AS Work_Location_Code,      
  ISNULL(T.TaskDesc,'') AS Job_Description,      
  CONVERT(varchar,T.Job_Date,112) AS Job_Date,      
  @Currency AS Currency,      
  CASE WHEN T.Strategy_Proj_Task_Opt_Id>0 THEN '1' ELSE '0' END AS Strategy,      
  ISNULL(CR.Cost_Responsibility_Code,'') AS Cost_Responsibility,      
  ISNULL(EP.WBS,'') AS Equipment_Cost_Code,      
  ISNULL(T.Work_Order,'') AS Workorder_Number,      
  ISNULL(T.Work_Order_Number_External,'') AS Predefined_Workorder_Number,      
  P.Short_Description AS Priority,TS.Short_Description AS [Status],      
  CASE WHEN T.Component_Code_Id>0 THEN CC.Code ELSE '' END AS Component_Code,      
  CASE WHEN T.Modifier_Id>0 THEN MC.Code ELSE '' END AS Modifier_Code,      
  CASE WHEN T.Application_Code_Id>0 THEN AC.Code ELSE '' END AS Application_Code,      
  CASE WHEN T.Task_Type_Id>0 THEN TT.Code ELSE '' END AS Task_Type,      
  CASE WHEN T.Occurrence_Type_Id>0 THEN OccurrenceType ELSE '' END AS Occurrence_Type,      
  ISNULL(CA.Cost_Activity_Code,'') AS Maintenance_Activity,      
  CAST(T.Task_Warranty AS varchar) As Warranty,      
  EP.EqpPlan As Equipment_Name,ISNULL(ST.Site_Code,S.Site_Code) AS Site_Code, -- Modified CR8908 KN      
  ISNULL(B.Branch_Code,'') AS Branch_Code,ISNULL(CUS.CustNumber,'') AS Customer_Number,      
  @WOCreateFileType AS WOCreateFileType,T.WO_Counter,      
      
  --DS 2010-08-06: There are no supplier fields nor purchase order fields to pass (this is for POId=-1, ie. "Create ERP WO" in "Create PO" mode       
  '' AS Supplier_Code,      
  '' AS Supplier_Name,      
  '' AS Supplier_Contact,      
  '' AS Contact_Phone,      
  getdate() AS Date_Raised,      
      
  '' AS Company_Contact,      
  '' AS Authorised_By,      
        
  GETDATE() AS Delivery_Date,      
  '' AS Delivery_Location,      
  '' AS Delivery_Street,      
  '' AS Purchase_Notes,      
        
  @WebServicePOCreate AS WebServicePOCreate, @connectorERPWorkorderCreate AS ConnectorERPWorkorderCreate ,    
        
  '' AS Purchase_Order,      
        
  ERAISED.EmployeeNumber AS Raised_By_Employee_Number,      
  LEFT(ERAISED.First_Name, 1) + '. ' + ERAISED.Surname AS Raised_By_Employee_Name,      
  CUSER.AMT_User_Login_Name AS Created_By_Username,      
  TAUTH.AMT_User_Login_Name AS Authorised_By_Username,      
  /*VV CR8981*/      
  TAUTHREQ.AMT_User_Login_Name AS Requested_By_Username,        
  RESP_EMP.EmployeeNumber AS Responsible_Employee_Number,      
  LEFT(RESP_EMP.First_Name, 1) + '. ' + RESP_EMP.Surname AS Responsible_Employee_Name,      
  ISNULL(T.externalbacklogid,'') AS External_Backlog_ID,      
  EP.Reference as Equipment_No      
  FROM      
  @z_TASK T      
   INNER JOIN      
  tblEqpPlans EP      
   ON T.Eqp_Plan_Id=EP.EqpPlanId      
   INNER JOIN      
  tblEquipment E      
   ON EP.EquipmentId=E.EquipmentId      
   INNER JOIN      
  tblModels M      
   ON E.ModelId=M.ModelId      
   INNER JOIN      
  tblManufacturers MA      
   ON M.ManufacturerId=MA.ManufacturerId      
   INNER JOIN      
  tblEqpProjs EPR      
   ON EP.EqpPlanId=EPR.EqpPlanId      
   INNER JOIN      
  tblFleets F      
   ON EP.FleetId=F.FleetId      
   INNER JOIN      
  tblSites S      
   ON F.SiteId=S.SiteId      
   INNER JOIN      
  PRIORITY P      
   ON T.Priority_Id=P.Priority_Id      
   INNER JOIN      
  TASK_STATUS TS      
   ON T.Task_Status_Id=TS.Task_Status_Id      
   INNER JOIN      
  tblComponentCodes CC      
   ON T.Component_Code_Id=CC.ComponentCodeId      
   INNER JOIN      
  tblModifierCodes MC      
   ON T.Modifier_Id=MC.ModifierId      
   INNER JOIN      
  tblApplicationCodes AC      
   ON T.Application_Code_Id=AC.ApplicationCodeId      
   INNER JOIN      
  tblTaskTypes TT      
   ON T.Task_Type_Id=TT.TaskTypeId      
      
   LEFT OUTER JOIN       
  COST_ACTIVITY CA       
   ON TT.Cost_Activity_ID = CA.Cost_Activity_ID      
   LEFT OUTER JOIN      
  WORK_GROUP WG      
   ON T.Work_Group_Id=WG.Work_Group_Id      
   LEFT OUTER JOIN      
  WORK_LOCATION WL      
   ON T.Work_Location_Id=WL.Work_Location_Id      
   LEFT OUTER JOIN      
  COST_RESPONSIBILITY CR      
   ON EP.Cost_Responsibility_Id=CR.Cost_Responsibility_Id      
   LEFT OUTER JOIN      
  tblOccurrenceTypes OT      
   ON T.Occurrence_Type_Id=OT.OccurrenceTypeId      
   LEFT OUTER JOIN      
  tblQUOMs QUOMS      
   ON T.StrQUOMId=QUOMS.QUOMId      
   LEFT OUTER JOIN      
  tblQUOMs QUOME      
   ON EPR.EndQUOMId=QUOME.QUOMId      
   LEFT OUTER JOIN      
  tblSites ST      
   ON T.Site_Id=ST.SiteId      
   LEFT OUTER JOIN      
  tblBranches B      
   ON T.Branch_Id=B.BranchId      
   LEFT OUTER JOIN      
  tblCustomers CUS      
   ON T.Customer_Id=CUS.CustomerId      
  LEFT JOIN AMT_USER TAUTH ON TAUTH.Amt_User_Id = T.Task_Authorised_By_Id      
  /*VV CR8981*/      
  LEFT JOIN AMT_USER TAUTHREQ ON TAUTHREQ.Amt_User_Id = T.AuthorisationRequestByID      
        
  LEFT JOIN AMT_USER CUSER ON CUSER.Amt_User_Id = ISNULL(@UserId,0)      
  LEFT JOIN EMPLOYEE ERAISED ON ERAISED.Employee_Id = T.RaisedById      
  LEFT JOIN EMPLOYEE RESP_EMP ON RESP_EMP.Employee_Id = T.Employee_Id      
   WHERE EPR.Projection_Type_Id=@ProjTypeC      
      
ELSE      
  --See Spec_AMT_Interfaces_Generic Specs.doc HEADER      
  --Work Order Header      
  SELECT      
  CAST(T.Task_Id AS varchar)+'-'+CAST(T.WO_Counter AS varchar) AS External_Source_Id,      
  MA.Manufacturer_Code AS Manufacturer,M.Model,      
  CASE        
  WHEN CHARINDEX(@ModSerSep, E.SerialNumber)=0 THEN E.SerialNumber      
  ELSE      
   CASE WHEN LEFT(E.SerialNumber, CHARINDEX(@ModSerSep, E.SerialNumber) - 1)=M.Model THEN      
   RIGHT(E.SerialNumber, LEN(E.SerialNumber) - CHARINDEX(@ModSerSep, E.SerialNumber))      
   ELSE E.SerialNumber END      
  END AS Serial_Number,      
      
  ISNULL(CONVERT(int,ROUND(       
  CASE CalculateUsage WHEN 0 THEN T.StrategyUsage ELSE       
  dbo.GET_USAGE_FROM_DATE_F(EPR.EqpProjId,ISNULL(T.StrQUOMId,EPR.EndQUOMId),T.Job_Date)      
  END ,0)),0) AS Usage_Reading,      
  ISNULL(ISNULL(QUOMS.Short_Desc,QUOME.Short_Desc),'') AS Usage_UOM,      
  ISNULL(WG.Work_Group_Code,'') AS Work_Group_Code,      
  ISNULL(WL.Job_Location,'') AS Work_Location_Code,      
  ISNULL(T.TaskDesc,'') AS Job_Description,      
  CONVERT(varchar,T.Job_Date,112) AS Job_Date,      
  @Currency AS Currency,      
  CASE WHEN T.Strategy_Proj_Task_Opt_Id>0 THEN '1' ELSE '0' END AS Strategy,      
  ISNULL(CR.Cost_Responsibility_Code,'') AS Cost_Responsibility,      
  ISNULL(EP.WBS,'') AS Equipment_Cost_Code,      
  ISNULL(T.Work_Order,'') AS Workorder_Number,      
  ISNULL(T.Work_Order_Number_External,'') AS Predefined_Workorder_Number,      
  P.Short_Description AS Priority,TS.Short_Description AS [Status],      
  CASE WHEN T.Component_Code_Id>0 THEN CC.Code ELSE '' END AS Component_Code,      
  CASE WHEN T.Modifier_Id>0 THEN MC.Code ELSE '' END AS Modifier_Code,      
  CASE WHEN T.Application_Code_Id>0 THEN AC.Code ELSE '' END AS Application_Code,      
  CASE WHEN T.Task_Type_Id>0 THEN TT.Code ELSE '' END AS Task_Type,      
  CASE WHEN T.Occurrence_Type_Id>0 THEN OccurrenceType ELSE '' END AS Occurrence_Type,      
  ISNULL(CA.Cost_Activity_Code,'') AS Maintenance_Activity,      
  CAST(T.Task_Warranty AS varchar) As Warranty,      
  EP.EqpPlan As Equipment_Name,ISNULL(ST.Site_Code,S.Site_Code) AS Site_Code, -- Modified again 23-Sep-09 CR 8397      
  ISNULL(B.Branch_Code,'') AS Branch_Code,ISNULL(CUS.CustNumber,'') AS Customer_Number,      
  @WOCreateFileType AS WOCreateFileType,T.WO_Counter,@WebServicePOCreate AS WebServicePOCreate, @connectorERPWorkorderCreate AS ConnectorERPWorkorderCreate,     
  ERAISED.EmployeeNumber AS Raised_By_Employee_Number,      
  LEFT(ERAISED.First_Name, 1) + '. ' + ERAISED.Surname AS Raised_By_Employee_Name,      
  CUSER.AMT_User_Login_Name AS Created_By_Username,      
  TAUTH.AMT_User_Login_Name AS Authorised_By_Username,      
  /*VV CR8981*/      
  TAUTHREQ.AMT_User_Login_Name AS Requested_By_Username,      
  RESP_EMP.EmployeeNumber AS Responsible_Employee_Number,      
  LEFT(RESP_EMP.First_Name, 1) + '. ' + RESP_EMP.Surname AS Responsible_Employee_Name,      
  ISNULL(T.externalbacklogid,'') AS External_Backlog_ID,      
  EP.Reference as Equipment_No      
  FROM      
  @z_TASK T      
   INNER JOIN      
  tblEqpPlans EP      
   ON T.Eqp_Plan_Id=EP.EqpPlanId      
   INNER JOIN      
  tblEquipment E      
   ON EP.EquipmentId=E.EquipmentId      
   INNER JOIN      
  tblModels M      
   ON E.ModelId=M.ModelId      
   INNER JOIN      
  tblManufacturers MA      
   ON M.ManufacturerId=MA.ManufacturerId      
   INNER JOIN      
  tblEqpProjs EPR      
   ON EP.EqpPlanId=EPR.EqpPlanId      
   INNER JOIN      
  tblFleets F      
   ON EP.FleetId=F.FleetId      
   INNER JOIN      
  tblSites S      
   ON F.SiteId=S.SiteId      
   INNER JOIN      
  PRIORITY P      
   ON T.Priority_Id=P.Priority_Id      
   INNER JOIN      
  TASK_STATUS TS      
   ON T.Task_Status_Id=TS.Task_Status_Id      
   INNER JOIN      
  tblComponentCodes CC      
   ON T.Component_Code_Id=CC.ComponentCodeId      
   INNER JOIN      
  tblModifierCodes MC      
   ON T.Modifier_Id=MC.ModifierId      
   INNER JOIN      
  tblApplicationCodes AC      
   ON T.Application_Code_Id=AC.ApplicationCodeId      
   INNER JOIN      
  tblTaskTypes TT      
   ON T.Task_Type_Id=TT.TaskTypeId      
   LEFT OUTER JOIN       
  COST_ACTIVITY CA       
   ON TT.Cost_Activity_ID = CA.Cost_Activity_ID      
   LEFT OUTER JOIN      
  WORK_GROUP WG      
   ON T.Work_Group_Id=WG.Work_Group_Id      
   LEFT OUTER JOIN      
  WORK_LOCATION WL      
   ON T.Work_Location_Id=WL.Work_Location_Id      
   LEFT OUTER JOIN      
  COST_RESPONSIBILITY CR      
   ON EP.Cost_Responsibility_Id=CR.Cost_Responsibility_Id      
   LEFT OUTER JOIN      
  tblOccurrenceTypes OT      
   ON T.Occurrence_Type_Id=OT.OccurrenceTypeId      
   LEFT OUTER JOIN      
  tblQUOMs QUOMS      
   ON T.StrQUOMId=QUOMS.QUOMId      
   LEFT OUTER JOIN      
  tblQUOMs QUOME      
   ON EPR.EndQUOMId=QUOME.QUOMId      
   LEFT OUTER JOIN      
  tblSites ST      
   ON T.Site_Id=ST.SiteId      
   LEFT OUTER JOIN      
  tblBranches B      
   ON T.Branch_Id=B.BranchId      
   LEFT OUTER JOIN      
  tblCustomers CUS      
   ON T.Customer_Id=CUS.CustomerId      
  LEFT JOIN AMT_USER TAUTH ON TAUTH.Amt_User_Id = T.Task_Authorised_By_Id      
  LEFT JOIN AMT_USER CUSER ON CUSER.Amt_User_Id = ISNULL(@UserId,0)      
  LEFT JOIN EMPLOYEE ERAISED ON ERAISED.Employee_Id = T.RaisedById      
  LEFT JOIN EMPLOYEE RESP_EMP ON RESP_EMP.Employee_Id = T.Employee_Id      
  /*VV CR8981*/      
  LEFT JOIN AMT_USER TAUTHREQ ON TAUTHREQ.Amt_User_Id = T.AuthorisationRequestByID      
   WHERE EPR.Projection_Type_Id=@ProjTypeC      
      
      
      
 --See Spec_AMT_Interfaces_Generic Specs.doc SEGMENT      
 --Work Order Segment      
 SELECT      
 /*'002' AS Record_Type,*/      
 CAST(T.Task_Id AS varchar)+'-'+CAST(T.WO_Counter AS varchar) AS External_Source_Id,      
 O.Task_Operation_Id AS External_Seg_ID,      
 CASE WHEN JC.JobCodeId>0 THEN JC.Code ELSE '' END AS Job_Code,      
 ISNULL(ROUND(L.Std_Hours,2),0) AS Std_Hours,      
 ISNULL(CC.Cost_Centre_Code,'') AS Cost_Centre,      
 ISNULL(CB.WO_Code,'') AS Cost_Bearer,      
 ISNULL(ROUND(P.Parts_Cost_Estimate,2),0) AS Parts_Cost_Estimate,      
 ISNULL(CEP.Cost_Expense_Code,'') AS Parts_Expense_Element,      
 ISNULL(TTP.Transaction_Type_Code,'') AS Parts_Transaction_Type,      
 ISNULL(EDSP.EDC_Id,'') AS Parts_EDC,      
 ISNULL(EDSP.Debit_Account,'') AS Parts_Debit_AC,      
 ISNULL(EDSP.Debit_Account_Suffix,'') AS Parts_Debit_AC_Suffix,      
 ISNULL(EDSP.Credit_Account,'') AS Parts_Credit_AC,      
 ISNULL(EDSP.Credit_Account_Suffix,'') AS Parts_Credit_AC_Suffix,      
 ISNULL(ROUND(L.Labour_Cost_Estimate,2),0) AS Labour_Cost_Estimate,      
 ISNULL(CEL.Cost_Expense_Code,'') AS Labour_Expense_Element,      
 ISNULL(TTL.Transaction_Type_Code,'') AS Labour_Transaction_Type,      
 ISNULL(EDSL.EDC_Id,'') AS Labour_EDC,      
 ISNULL(EDSL.Debit_Account,'') AS Labour_Debit_AC,      
 ISNULL(EDSL.Debit_Account_Suffix,'') AS Labour_Debit_AC_Suffix,      
 ISNULL(EDSL.Credit_Account,'') AS Labour_Credit_AC,      
 ISNULL(EDSP.Credit_Account_Suffix,'') AS Labour_Credit_AC_Suffix,      
 ISNULL(ROUND(M.Misc_Cost_Estimate,2),0) AS Misc_Cost_Estimate,      
 ISNULL(CEM.Cost_Expense_Code,'') AS Misc_Expense_Element,      
 ISNULL(TTM.Transaction_Type_Code,'') AS Misc_Transaction_Type,      
 ISNULL(EDSM.EDC_Id,'') AS Misc_EDC,      
 ISNULL(EDSM.Debit_Account,'') AS Misc_Debit_AC,      
 ISNULL(EDSM.Debit_Account_Suffix,'') AS Misc_Debit_AC_Suffix,      
 ISNULL(EDSL.Credit_Account,'') AS Misc_Credit_AC,      
 ISNULL(EDSP.Credit_Account_Suffix,'') AS Misc_Credit_AC_Suffix,      
 CASE ISNULL(PTA.Labour_Hrs_Field,1) WHEN 1 THEN 'F' ELSE 'S' END AS Labour_Indicator,      
 CASE WHEN O.Component_Code_Id>0 THEN C.Code ELSE '' END AS Component_Code,      
 CASE WHEN O.Modifier_Id>0 THEN MC.Code ELSE '' END AS Modifier_Code,      
 ISNULL(WG.Work_Group_Code,'') AS Work_Group_Code,      
 ISNULL(O.Job_Description,'') AS Job_Description      
      
 FROM      
 @z_TASK T      
  INNER JOIN      
 @z_TASK_OPERATION O      
  ON T.Task_Id=O.Task_Id      
  LEFT OUTER JOIN      
 tblJobCodes JC      
  ON O.Job_Code_Id=JC.JobCodeId      
  LEFT OUTER JOIN      
 COST_CENTRE CC      
  ON O.Cost_Centre_Id=CC.Cost_Centre_Id      
  LEFT OUTER JOIN      
 tblCostBearers CB      
  ON O.Cost_Bearer_Id=CB.CostBearerId      
  LEFT OUTER JOIN      
 COST_EXPENSE CEP      
  ON O.Parts_Cost_Expense_Id=CEP.Cost_Expense_Id      
  LEFT OUTER JOIN      
 COST_EXPENSE CEL      
  ON O.Labour_Cost_Expense_Id=CEL.Cost_Expense_Id      
  LEFT OUTER JOIN      
 COST_EXPENSE CEM      
  ON O.Misc_Cost_Expense_Id=CEM.Cost_Expense_Id      
  LEFT OUTER JOIN      
 ENTRY_DISTRIBUTION_CODE EDSP      
  ON O.Parts_Entry_Distribution_Code_Id=EDSP.[Id]      
  LEFT OUTER JOIN      
 ENTRY_DISTRIBUTION_CODE EDSL      
  ON O.Labour_Entry_Distribution_Code_Id=EDSL.[Id]      
  LEFT OUTER JOIN      
 ENTRY_DISTRIBUTION_CODE EDSM      
  ON O.Misc_Entry_Distribution_Code_Id=EDSM.[Id]      
  LEFT OUTER JOIN       
 TRANSACTION_TYPE TTP       
  ON EDSP.Transaction_Type_Id=TTP.Transaction_Type_Id      
  LEFT OUTER JOIN       
 TRANSACTION_TYPE TTL       
  ON EDSL.Transaction_Type_Id=TTL.Transaction_Type_Id      
  LEFT OUTER JOIN       
 TRANSACTION_TYPE TTM       
  ON EDSM.Transaction_Type_Id=TTM.Transaction_Type_Id      
  LEFT OUTER JOIN       
 tblProjTaskAmts PTA      
  ON O.Proj_Task_Amt_Id=PTA.ProjTaskAmtId      
  LEFT OUTER JOIN      
 tblComponentCodes C      
  ON O.Component_Code_Id=C.ComponentCodeId      
  LEFT OUTER JOIN      
 tblModifierCodes MC      
  ON O.Modifier_Id=MC.ModifierId      
  LEFT OUTER JOIN      
 WORK_GROUP WG      
  ON O.Work_Group_Id=WG.Work_Group_Id      
  LEFT OUTER JOIN      
 (SELECT L.Task_Operation_Id, SUM(L.Planned_Labour_Hrs) AS Std_Hours,      
 SUM(L.Planned_Labour_Hrs*L.Planned_Labour_Rate) AS Labour_Cost_Estimate      
  FROM      
 TASK_OPERATION_LABOUR L      
  INNER JOIN       
 @z_TASK_OPERATION O      
  ON L.Task_Operation_Id=O.Task_Operation_Id      
 GROUP BY L.Task_Operation_Id) L      
  ON O.Task_Operation_Id=L.Task_Operation_Id      
  LEFT OUTER JOIN      
 (SELECT P.Task_Operation_Id, SUM(P.Planned_Qty*P.Planned_Unit_Price) AS Parts_Cost_Estimate      
 FROM       
 TASK_OPERATION_PART P       
  INNER JOIN       
 @z_TASK_OPERATION O      
  ON P.Task_Operation_Id=O.Task_Operation_Id      
 GROUP BY P.Task_Operation_Id) P      
  ON O.Task_Operation_Id=P.Task_Operation_Id      
  LEFT OUTER JOIN      
 (SELECT M.Task_Operation_Id, SUM(Planned_Sell) AS Misc_Cost_Estimate      
 FROM       
 TASK_OPERATION_MISC M       
  INNER JOIN       
 @z_TASK_OPERATION O      
  ON M.Task_Operation_Id=O.Task_Operation_Id      
 GROUP BY M.Task_Operation_Id) M      
  ON O.Task_Operation_Id=M.Task_Operation_Id      
       
END      
--Parts      
       
      
IF @POId > 0      
BEGIN      
      
 IF EXISTS(SELECT P.Task_Operation_Id,P.Part_Number FROM       
  TASK_OPERATION_PART P INNER JOIN @z_TASK_OPERATION O      
  ON P.Task_Operation_Id=O.Task_Operation_Id       
  WHERE ISNULL(P.Part_Number,'')<>'' AND      
  (P.Planned_Qty>0 OR P.Planned_Qty<0 ) AND P.POCounter IS NULL  --KN 27-Apr-2010      
  GROUP BY       
  P.Task_Operation_Id,P.Part_Number      
  HAVING SUM(P.Planned_Qty)>0 OR SUM(P.Planned_Qty)<0)      
 BEGIN      
  SELECT       
  /*'003' AS Record_Type,*/      
  CAST(T.Task_Id AS varchar)+'-'+CAST(T.WO_Counter AS varchar) AS External_Source_Id,      
  O.Task_Operation_Id AS External_Seg_ID,      
  ISNULL(SOS.Sos_Code,'') AS Source_Of_Supply,      
  P.Part_Number,      
  SUM(P.Planned_Qty) AS Part_Qty,      
  CONVERT(varchar,T.Job_Date,112) AS Parts_Required_Date,      
  P.StockCode AS Stock_Code,      
  P.Part_Description,      
  P.Planned_Unit_Price       
  FROM      
  @z_TASK T      
   INNER JOIN      
  @z_TASK_OPERATION O      
   ON T.Task_Id=O.Task_Id      
   INNER JOIN      
  TASK_OPERATION_PART P      
   ON O.Task_Operation_Id=P.Task_Operation_Id      
   LEFT OUTER JOIN      
  SOURCE_OF_SUPPLY SOS      
   ON P.SourceOfSupplyId=SOS.Source_Of_Supply_Id      
  WHERE ISNULL(P.Part_Number,'')<>'' AND      
  (P.Planned_Qty>0 OR P.Planned_Qty<0) AND P.POCounter IS NULL      
  GROUP BY       
  CAST(T.Task_Id AS varchar)+'-'+CAST(T.WO_Counter AS varchar),      
  O.Task_Operation_Id,ISNULL(SOS.Sos_Code,''),      
  P.Part_Number,CONVERT(varchar,T.Job_Date,112),      
  Supplier_Id,P.StockCode, P.Part_Description, P.Planned_Unit_Price       
  HAVING ( SUM(P.Planned_Qty)>0 OR SUM(P.Planned_Qty)<0 )      
  AND Supplier_Id = @SupplierId       
      
 END      
      
 IF EXISTS(SELECT M.Task_Operation_Id,M.Task_Operation_Misc_Desc FROM       
  TASK_OPERATION_MISC M INNER JOIN @z_TASK_OPERATION O      
  ON M.Task_Operation_Id=O.Task_Operation_Id       
  WHERE ISNULL(M.Task_Operation_Misc_Desc,'')<>'' AND      
  (M.Planned_Sell>0)      
  GROUP BY       
  M.Task_Operation_Id,M.Task_Operation_Misc_Desc      
  HAVING SUM(M.Planned_Sell)>0 OR SUM(M.Planned_Sell)<0)      
 BEGIN      
  SELECT       
  /*'004' AS Record_Type,*/      
  CAST(T.Task_Id AS varchar)+'-'+CAST(T.WO_Counter AS varchar) AS External_Source_Id,      
  O.Task_Operation_Id AS External_Seg_ID,      
  M.Task_Operation_Misc_Desc AS Description,      
  CAT.Misc_Category AS Misc_Category,      
  SUM(M.Planned_Sell) AS Planned_Total,      
  M.Notes AS Planning_Notes      
  FROM      
  @z_TASK T      
   INNER JOIN      
  @z_TASK_OPERATION O      
   ON T.Task_Id=O.Task_Id      
   INNER JOIN      
  TASK_OPERATION_MISC M      
   ON O.Task_Operation_Id=M.Task_Operation_Id      
   LEFT OUTER JOIN      
  MISC_CATEGORY CAT      
   ON M.Misc_Category_Id=CAT.Misc_Category_Id      
  WHERE ISNULL(M.Task_Operation_Misc_Desc,'')<>'' AND      
  (M.Planned_Sell > 0 OR M.Planned_Sell > 0)  AND M.POCounter IS NULL      
  GROUP BY       
  CAST(T.Task_Id AS varchar)+'-'+CAST(T.WO_Counter AS varchar),      
  O.Task_Operation_Id,ISNULL(CAT.Misc_Category,''),      
  M.Task_Operation_Misc_Desc,CONVERT(varchar,T.Job_Date,112),      
  Supplier_Id, Misc_Category, Notes      
  HAVING ( SUM(M.Planned_Sell)>0 OR SUM(M.Planned_Sell)<0 )      
  AND Supplier_Id = @SupplierId      
      
  --update the Purchase Order - it has now been exported and cannot be exported again      
  UPDATE      
   PURCHASE_ORDER      
  SET      
   ExportDate = getdate() , ExportUserId = NULLIF(@UserId,0)      
  WHERE      
   Purchase_Order_Id = @POId      
      
 END      
END      
ELSE      
      
BEGIN      
      
 IF EXISTS(SELECT P.Task_Operation_Id,P.Part_Number FROM       
  TASK_OPERATION_PART P INNER JOIN @z_TASK_OPERATION O      
  ON P.Task_Operation_Id=O.Task_Operation_Id       
  WHERE ISNULL(P.Part_Number,'')<>'' AND      
  (P.Planned_Qty>0 OR P.Planned_Qty<0 )      
  GROUP BY       
  P.Task_Operation_Id,P.Part_Number      
  HAVING SUM(P.Planned_Qty)>0 OR SUM(P.Planned_Qty)<0)      
 BEGIN      
  SELECT       
  /*'003' AS Record_Type,*/      
  CAST(T.Task_Id AS varchar)+'-'+CAST(T.WO_Counter AS varchar) AS External_Source_Id,      
  O.Task_Operation_Id AS External_Seg_ID,      
  ISNULL(SOS.Sos_Code,'') AS Source_Of_Supply,      
  P.Part_Number,      
  SUM(P.Planned_Qty) AS Part_Qty,      
  CONVERT(varchar,T.Job_Date,112) AS Parts_Required_Date,      
  P.Part_Description,      
  P.Planned_Unit_Price       
  FROM      
  @z_TASK T      
   INNER JOIN      
  @z_TASK_OPERATION O      
   ON T.Task_Id=O.Task_Id      
   INNER JOIN      
  TASK_OPERATION_PART P      
   ON O.Task_Operation_Id=P.Task_Operation_Id      
   LEFT OUTER JOIN      
  SOURCE_OF_SUPPLY SOS      
   ON P.SourceOfSupplyId=SOS.Source_Of_Supply_Id      
  WHERE ISNULL(P.Part_Number,'')<>'' AND      
  (P.Planned_Qty>0 OR P.Planned_Qty<0)      
  GROUP BY       
  CAST(T.Task_Id AS varchar)+'-'+CAST(T.WO_Counter AS varchar),      
  O.Task_Operation_Id,ISNULL(SOS.Sos_Code,''),      
  P.Part_Number,CONVERT(varchar,T.Job_Date,112),      
  P.Part_Description,      
  P.Planned_Unit_Price       
  HAVING SUM(P.Planned_Qty)>0 OR SUM(P.Planned_Qty)<0      
 END      
      
END      
      
GO






if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WORKORDER_IMPORT_P]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[WORKORDER_IMPORT_P]
GO


CREATE PROCEDURE [dbo].[WORKORDER_IMPORT_P]
/******************************************************************************
	
	Name: WORKORDER_IMPORT_P

	Called By: 

	Desc: 

	Auth: 	Darryl Smith & Koushik Nagarajan
	Date: 	17 Feb 2009
*******************************************************************************
		Change History
*******************************************************************************
Date:		Author:		Description:
--------	--------	----------------------------------------
21-Apr-2009	K Nagarajan	Change the Lenghth of Source of Supply from 10 to 50
04-May-09	K Nagarajan	Set EmployeeNumber to allow Null
20-May-2009	K Nagarajan	CR8082: Fixed Blank Misc Description.
20-May-2009	K Nagarajan	CR8085: Fixed check the Four Codes Depending upon the AMT Variable Setting.
20-May-2009	K Nagarajan	Plugged in WORKORDER_LABOUR_HRS_UPDATE_P 
28-May-2009	K Nagarajan	CR8199: Divide the cost /sell by Exchange Rate.
28-May-2009	K Nagarajan	CR8203: Check the Segment Id belogs to the Source.
09-Jun-2009	AL			Removed End_Use_Code
17-Jun-2009	K Nagarajan CR8279: Assign Workorder's Site (OR) Equipment's Site if WorkGroup Site is NULL
17-Jun-2009	K Nagarajan	CR8273: Use EE as Key Based on Variable Settings.f
07-Sep-2009	K Nagarajan CR8386: Reserved Flag is not being updated properly in the workorder import
18-Sep-2009	K Nagarajan CR8393: Added Expected Availability Date
09-Oct-2009	K Nagarajan	CR8373: Fixed the Finperiod issue (...)
12-Nov-2009 AL			CR8442: Added WODetailsExtSourceMode
24-Dec-2009	K Nagarajan	CR8656: Fixed Error importing Workorder Parts in the mode UseExpenseKey = 1
06 Apr 10	AL			CR8869: implemented logic from TASK_PARTS_READY_STATUS_UPDATE_P
30 Jun 2010	K Nagarajan	Enhancement 230: Import Planned details
07 Oct 2010	K Nagarajan	671: Import failed because of incorrect planned details
24 Mar 2011 G Dhillon	Changed the length of Equipment_Number from 12 to 50
18 Aug 2011 G Dhillon   E610 write whole record for connector
16 Sep 2011	K Nagarajan	2486: Workorder Detail Interface is not updating Planned Labour in AMT FIXED
24 Sep 11   GD          fixed 2481 changed the data type of Import Record to varchar(MAX)
17 Oct 11   GD          Fixed Issue #2634
*******************************************************************************/
	/* Param List */

	@xmlDocument XML = '<I_WOs></I_WOs>',
	@ImportBatchName varchar(1000) = '',
	@UserName VARCHAR(50) = '',
	@UserId int=0,
	@nRecInserted int = 0 OUTPUT,
	@nRecUpdated int = 0 OUTPUT,
	@nRecRejected int = 0 OUTPUT,
	@InterfaceSource int = 0   
	
AS

DECLARE @docHandle  int
DECLARE @CurrDate datetime
DECLARE @TotalNumberofRecords INT
 
SET @CurrDate=GETDATE()

EXEC sp_xml_preparedocument @docHandle OUTPUT, @xmlDocument

CREATE TABLE #I_WO_HEADER
(
	Line_Num int IDENTITY(1,1) NOT NULL,
	External_Source_Id varchar(50) COLLATE DATABASE_DEFAULT NOT NULL ,
	Equipment_Number varchar(50) COLLATE DATABASE_DEFAULT NULL ,
	Model varchar(20) COLLATE DATABASE_DEFAULT NULL ,
	Serial_Number varchar(50) COLLATE DATABASE_DEFAULT NULL ,
	Registration_Counter varchar(20) COLLATE DATABASE_DEFAULT NULL ,
	System_Source varchar(20) COLLATE DATABASE_DEFAULT NOT NULL,
	Task_Id INT NULL,
	UpdatePlannedParts BIT DEFAULT 1,
	UpdatePlannedLabour BIT DEFAULT 1,
	UpdatePlannedMisc BIT DEFAULT 1,
PRIMARY KEY(Line_Num)
)
CREATE INDEX #I_WO_HEADER_IDX ON #I_WO_HEADER(External_Source_Id)

CREATE TABLE  #I_WO_PART
(
	External_Source_Id varchar(50) COLLATE DATABASE_DEFAULT NOT NULL,
	External_Seg_Id int NULL,
	Source_Of_Supply varchar(50) COLLATE DATABASE_DEFAULT NOT NULL,
	Supplier_Code varchar(50) COLLATE DATABASE_DEFAULT NOT NULL,
	Part_Number varchar(50) COLLATE DATABASE_DEFAULT NOT NULL,
	Part_Qty float NOT NULL,
	Part_UOM varchar(50) COLLATE DATABASE_DEFAULT NULL,
	Status INT NULL,
	Expected_Availability_Date datetime NULL,
	Reserved bit NULL,
	Description varchar(8000) COLLATE DATABASE_DEFAULT NULL,
	Cost_Centre varchar(30) COLLATE DATABASE_DEFAULT NULL,
	Expense_Element varchar(10) COLLATE DATABASE_DEFAULT NULL,
	Work_Group_Site varchar(50) COLLATE DATABASE_DEFAULT NULL,
	Work_Group varchar(10) COLLATE DATABASE_DEFAULT NULL,
	Cost_Bearer varchar(10) COLLATE DATABASE_DEFAULT NULL,
	Total_Cost float  NULL ,
	Total_Sell float NOT NULL,
	Fin_Period int NOT NULL,
	Exchange_Rate float NOT NULL,
	Currency varchar(3) COLLATE DATABASE_DEFAULT NOT NULL,
	Task_Operation_Part_Id INT NULL,
	Task_Operation_Id INT NULL ,
	CostBearerId INT NULL,
	WorkGroupId INT NULL,
	ExpenseElementID INT NULL,
	CostCentreId INT NULL,
	SupplierId INT NULL,
	SourceOfSupplyId INT NULL,
	CurrencyId INT NULL,
	Planned_Part_Qty FLOAT NULL,
	Planned_Total_Sell FLOAT NULL
	
)
CREATE INDEX #I_WO_PART_IDX ON #I_WO_PART(External_Source_Id, External_Seg_Id)

CREATE TABLE  #I_WO_LABOUR
(
	External_Source_Id varchar(50) COLLATE DATABASE_DEFAULT NOT NULL,
	External_Seg_Id int NULL,
	Work_Group_Site varchar(50) COLLATE DATABASE_DEFAULT NULL,
	Work_Group varchar(10) COLLATE DATABASE_DEFAULT NULL,
	Employee_Number varchar(50) COLLATE DATABASE_DEFAULT  NULL,
	Hours float NOT NULL,
	Cost_Bearer varchar(10) COLLATE DATABASE_DEFAULT NULL,
	Cost_Centre varchar(30) COLLATE DATABASE_DEFAULT NULL,
	Expense_Element varchar(10) COLLATE DATABASE_DEFAULT NULL,
	Total_Cost float NOT NULL,
	Total_Sell float NOT NULL,
	Fin_Period int NOT NULL,
	Exchange_Rate float NOT NULL,
	Currency varchar(3) COLLATE DATABASE_DEFAULT NOT NULL,
	Task_Operation_Labour_Id INT NULL,
	Task_Operation_Id INT NULL,
	CostBearerId INT NULL,
	WorkGroupId INT NULL,
	ExpenseElementID INT NULL,
	CostCentreId INT NULL,
	EmployeeId INT NULL ,
	CurrencyId INT NULL,
	Planned_Hours FLOAT NULL,
	Planned_Total_Sell FLOAT NULL,
	Planned_Labour_Activity  varchar(50) COLLATE DATABASE_DEFAULT  NULL,
	LabourActivityId INT NULL

)
CREATE INDEX #I_WO_LABOUR_IDX ON #I_WO_LABOUR(External_Source_Id, External_Seg_Id)

CREATE TABLE  #I_WO_MISC
(
	External_Source_Id varchar(50) COLLATE DATABASE_DEFAULT NOT NULL,
	External_Seg_Id int NULL,
	Description varchar(1000) COLLATE DATABASE_DEFAULT NULL,
	Misc_Category varchar(50) COLLATE DATABASE_DEFAULT NOT NULL,
	Cost_Bearer varchar(10) COLLATE DATABASE_DEFAULT NULL,
	Cost_Centre varchar(30) COLLATE DATABASE_DEFAULT NULL,
	Expense_Element varchar(10) COLLATE DATABASE_DEFAULT NULL,
	Work_Group_Site varchar(50) COLLATE DATABASE_DEFAULT NULL,
	Work_Group varchar(10) COLLATE DATABASE_DEFAULT NULL,
	Supplier_Code varchar(50) COLLATE DATABASE_DEFAULT NOT NULL,
	Total_Cost float NOT NULL,
	Total_Sell float NOT NULL,
	Fin_Period int NOT NULL,
	Exchange_Rate float NOT NULL,
	Currency varchar(3) COLLATE DATABASE_DEFAULT NOT NULL,
	Task_Operation_Misc_Id INT NULL,
	Task_Operation_Id INT NULL ,
	CostBearerId INT NULL,
	WorkGroupId INT NULL,
	ExpenseElementID INT NULL,
	CostCentreId INT NULL,
	SupplierId INT NULL,
	MiscCategoryId INT NULL,
	CurrencyId INT NULL,
	Planned_Total_Sell FLOAT NULL
)
CREATE INDEX #I_WO_MISC_IDX ON #I_WO_MISC(External_Source_Id, External_Seg_Id)

CREATE TABLE #z_Message(MessageId int IDENTITY(1,1),Line_No int,ErrorDescription varchar(3000) COLLATE DATABASE_DEFAULT ,ImportRecord VARCHAR(MAX)  
PRIMARY KEY (MessageId))

BEGIN TRY
	INSERT INTO  #I_WO_HEADER(
		External_Source_Id,
		Equipment_Number,
		Model,
		Serial_Number,
		Registration_Counter,
		System_Source)
	SELECT
		External_Source_Id,
		Equipment_Number,
		Model,
		Serial_Number,
		Registration_Counter,
		System_Source
	FROM OPENXML(@docHandle, N'/I_WOs/I_WO/I_WO_HEADER', 2) WITH #I_WO_HEADER

	INSERT INTO  #I_WO_PART(
		External_Source_Id,
		External_Seg_Id,
		Source_Of_Supply,
		Supplier_Code,
		Part_Number,
		Part_Qty,
		Part_UOM,
		Status,
		Expected_Availability_Date,
		Reserved,
		Description,
		Cost_Centre,
		Expense_Element,
		Work_Group_Site,
		Work_Group,
		Cost_Bearer,
		Total_Cost,
		Total_Sell,
		Fin_Period,
		Exchange_Rate,
		Currency,
		Planned_Part_Qty,
		Planned_Total_Sell)
	SELECT
		External_Source_Id,
		ISNULL(External_Seg_Id,0),
		Source_Of_Supply,
		Supplier_Code,
		Part_Number,
		Part_Qty,
		Part_UOM,
		Status,
		Expected_Availability_Date,
		Reserved,
		Description,
		Cost_Centre,
		Expense_Element,
		Work_Group_Site,
		Work_Group,
		Cost_Bearer,
		Total_Cost/Exchange_Rate AS Total_Cost,
		Total_Sell/Exchange_Rate AS Total_Sell,
		Fin_Period,
		Exchange_Rate,
		Currency,
		Planned_Part_Qty,
		Planned_Total_Sell/Exchange_Rate AS Planned_Total_Sell
	FROM OPENXML(@docHandle, N'/I_WOs/I_WO/I_WO_PART', 2) WITH #I_WO_PART

	INSERT INTO  #I_WO_LABOUR(
		External_Source_Id,
		External_Seg_Id,
		Work_Group_Site,
		Work_Group,
		Employee_Number,
		Hours,
		Cost_Bearer,
		Cost_Centre,
		Expense_Element,
		Total_Cost,
		Total_Sell,
		Fin_Period,
		Exchange_Rate,
		Currency,
		Planned_Total_Sell,
		Planned_Labour_Activity,
		Planned_Hours)
	SELECT
		External_Source_Id,
		ISNULL(External_Seg_Id,0),
		Work_Group_Site,
		Work_Group,
		Employee_Number,
		Hours,
		Cost_Bearer,
		Cost_Centre,
		Expense_Element,
		Total_Cost/Exchange_Rate AS Total_Cost,
		Total_Sell/Exchange_Rate AS Total_Sell,
		Fin_Period,
		Exchange_Rate,
		Currency,
		Planned_Total_Sell/Exchange_Rate AS Planned_Total_Sell,
		Planned_Labour_Activity,
		Planned_Hours
	FROM OPENXML(@docHandle, N'/I_WOs/I_WO/I_WO_LABOUR', 2) WITH #I_WO_LABOUR

	INSERT INTO  #I_WO_MISC(
		External_Source_Id,
		External_Seg_Id,
		Description,
		Misc_Category,
		Cost_Bearer,
		Cost_Centre,
		Expense_Element,
		Work_Group_Site,
		Work_Group,
		Supplier_Code,
		Total_Cost,
		Total_Sell,
		Fin_Period,
		Exchange_Rate,
		Currency,
		Planned_Total_Sell)
	SELECT
		External_Source_Id,
		ISNULL(External_Seg_Id,0),
		Description,
		Misc_Category,
		Cost_Bearer,
		Cost_Centre,
		Expense_Element,
		Work_Group_Site,
		Work_Group,
		Supplier_Code,
		Total_Cost/Exchange_Rate AS Total_Cost,
		Total_Sell/Exchange_Rate AS Total_Sell,
		Fin_Period,
		Exchange_Rate,
		Currency,
		Planned_Total_Sell/Exchange_Rate AS Planned_Total_Sell 
	FROM OPENXML(@docHandle, N'/I_WOs/I_WO/I_WO_MISC', 2) WITH #I_WO_MISC

	EXEC sp_xml_removedocument @docHandle

END TRY
BEGIN CATCH
	
-- 	SELECT
--        ERROR_NUMBER() AS ErrorNumber,
--        ERROR_SEVERITY() AS ErrorSeverity,
--        ERROR_STATE() AS ErrorState,
--        ERROR_PROCEDURE() AS ErrorProcedure,
--        ERROR_LINE() AS ErrorLine,
--        ERROR_MESSAGE() AS ErrorMessage;

	DECLARE @ErrorDescription VARCHAR(MAX)
	SET @ErrorDescription =   'Error Line - ' +  CAST(ERROR_LINE() AS VARCHAR) + ' ;Error Message - ' +  ERROR_MESSAGE()
 
	INSERT INTO IMPORT_ERROR(ImportFileName,Line_No,ErrorDescription,ImportErrorTypeId,LastModDate,ImportSourceId)
	SELECT @ImportBatchName AS ImportFileName,0,@ErrorDescription, 1 AS ImportErrorTypeId, GETDate() AS LastModDate,@InterfaceSource AS ImportSourceId
 
	RAISERROR (@ErrorDescription, 16, 1)	  
	RETURN
 

END CATCH
 
--Confirguration Settings
SELECT @TotalNumberofRecords = COUNT(External_Source_Id) FROM #I_WO_HEADER

DECLARE @ManualEntryActualsParts SMALLINT
DECLARE @ManualEntryActualsLabour SMALLINT
DECLARE @ManualEntryActualsMisc SMALLINT
DECLARE @OpEditionLabourCB SMALLINT
DECLARE @OpEditionLabourCC SMALLINT
DECLARE @OpEditionLabourEE SMALLINT
DECLARE @OpEditionMiscCB SMALLINT
DECLARE @OpEditionMiscCC SMALLINT
DECLARE @OpEditionMiscEE SMALLINT
DECLARE @OpEditionMiscWG SMALLINT
DECLARE @OpEditionPartsCB SMALLINT
DECLARE @OpEditionPartsCC SMALLINT
DECLARE @OpEditionPartsEE SMALLINT
DECLARE @OpEditionPartsStockCode SMALLINT
DECLARE @OpEditionPartsWG SMALLINT
DECLARE @UseExpenseElementAsKey SMALLINT
DECLARE @WODetailsExtSourceMode SMALLINT

SET @UseExpenseElementAsKey = 1

SELECT 
	@ManualEntryActualsParts = CASE WHEN Value_Name = 'ManualEntryActualsParts' THEN Varchar_Value  ELSE  @ManualEntryActualsParts END ,
	@ManualEntryActualsLabour = CASE WHEN Value_Name = 'ManualEntryActualsLabour' THEN Varchar_Value  ELSE   @ManualEntryActualsLabour END ,
	@ManualEntryActualsMisc = CASE WHEN Value_Name = 'ManualEntryActualsMisc' THEN Varchar_Value  ELSE  @ManualEntryActualsMisc END ,
	@OpEditionLabourCB = CASE WHEN Value_Name = 'OpEditionLabourCB' THEN Varchar_Value  ELSE  @OpEditionLabourCB END, 
	@OpEditionLabourCC = CASE WHEN Value_Name = 'OpEditionLabourCC' THEN Varchar_Value  ELSE  @OpEditionLabourCC END, 
	@OpEditionLabourEE = CASE WHEN Value_Name = 'OpEditionLabourEE' THEN Varchar_Value  ELSE  @OpEditionLabourEE END, 
	@OpEditionMiscCB = CASE WHEN Value_Name = 'OpEditionMiscCB' THEN Varchar_Value  ELSE  @OpEditionMiscCB END, 
	@OpEditionMiscCC = CASE WHEN Value_Name = 'OpEditionMiscCC' THEN Varchar_Value  ELSE  @OpEditionMiscCC END, 
	@OpEditionMiscEE = CASE WHEN Value_Name = 'OpEditionMiscEE' THEN Varchar_Value  ELSE  @OpEditionMiscEE END, 
	@OpEditionMiscWG = CASE WHEN Value_Name = 'OpEditionMiscWG' THEN Varchar_Value  ELSE  @OpEditionMiscWG END, 
	@OpEditionPartsCB = CASE WHEN Value_Name = 'OpEditionPartsCB' THEN Varchar_Value  ELSE  @OpEditionPartsCB END, 
	@OpEditionPartsCC = CASE WHEN Value_Name = 'OpEditionPartsCC' THEN Varchar_Value  ELSE  @OpEditionPartsCC END, 
	@OpEditionPartsEE = CASE WHEN Value_Name = 'OpEditionPartsEE' THEN Varchar_Value  ELSE  @OpEditionPartsEE END, 
	@OpEditionPartsStockCode = CASE WHEN Value_Name = 'OpEditionPartsStockCode' THEN Varchar_Value  ELSE  @OpEditionPartsStockCode END, 
	@OpEditionPartsWG = CASE WHEN Value_Name = 'OpEditionPartsWG' THEN Varchar_Value  ELSE  @OpEditionPartsWG END  ,
	@UseExpenseElementAsKey = CASE WHEN Value_Name = 'UseEEAsKeyInWorkorderImport' THEN Varchar_Value  ELSE  @UseExpenseElementAsKey END,
	@WODetailsExtSourceMode = CASE WHEN Value_Name = 'WODetailsExtSourceMode' THEN Varchar_Value  ELSE  @WODetailsExtSourceMode END
	

FROM 
	AMT_TYPED_VARIABLE
WHERE Value_Name IN (
'ManualEntryActualsParts' ,
'ManualEntryActualsLabour',
'ManualEntryActualsMisc',
'OpEditionLabourCB',
'OpEditionLabourCC',
'OpEditionLabourEE',
'OpEditionMiscCB',
'OpEditionMiscCC',
'OpEditionMiscEE',
'OpEditionMiscWG',
'OpEditionPartsCB',
'OpEditionPartsCC',
'OpEditionPartsEE',
'OpEditionPartsStockCode',
'OpEditionPartsWG' ,
'UseEEAsKeyInWorkorderImport',
'WODetailsExtSourceMode'
)

--External_Source_Id is used to determine if the EQS Task exists
--AL: 12/11/09
IF ISNULL(@WODetailsExtSourceMode,0)=1
BEGIN
	--Provided: Settlement's Pure WO Number
	UPDATE WOH
	SET Task_Id = T.Task_Id
	FROM 
	#I_WO_HEADER WOH
	INNER JOIN tblWorkorders WO ON WOH.External_Source_Id=WO.PureWONumber AND WO.AMTParentWorkorderID=WO.WorkorderID
	INNER JOIN TASK T ON WO.WorkorderID=T.Work_Order_ID
END
ELSE	--Default 0
BEGIN
	UPDATE WOH
	SET Task_Id = T.Task_Id
	FROM 
	#I_WO_HEADER WOH
	INNER JOIN TASK T ON WOH.External_Source_Id = CAST(T.Task_Id AS varchar)+'-'+CAST(T.WO_Counter AS varchar)
END

 -- External_Source_Id is NULL
INSERT INTO #z_Message(Line_No,ErrorDescription,ImportRecord)
SELECT 
	DISTINCT WOH.Line_Num, 
	External_Source_Id + ' - External_Source_Id does not exists',
	CASE WHEN @InterfaceSource = 0 THEN '' ELSE (SELECT *  FROM  #I_WO_HEADER TEMPHEADER WHERE TEMPHEADER.Line_Num = WOH.Line_Num FOR XML PATH('I_WO_HEADER'),ROOT('I_WO')) END  
	AS ImportRecord  
FROM 
	#I_WO_HEADER WOH 
WHERE WOH.Task_Id IS NULL

-- Abandoned tasks cannot be updated  
INSERT INTO #z_Message(Line_No,ErrorDescription,ImportRecord)  
SELECT   
 DISTINCT WOH.Line_Num,   
 WOH.External_Source_Id + ' - Abandoned tasks cannot be updated'  ,
 CASE WHEN @InterfaceSource = 0 THEN '' ELSE (SELECT *  FROM  #I_WO_HEADER TEMPHEADER WHERE TEMPHEADER.Line_Num = WOH.Line_Num FOR XML PATH('I_WO_HEADER'),ROOT('I_WO')) END  
 AS ImportRecord 
FROM   
 #I_WO_HEADER WOH   
 INNER JOIN TASK T ON T.Task_Id = WOH.Task_Id  
WHERE T.Task_Status_Id = 5  
  
 -- Cost Bearer does not Exist  
INSERT INTO #z_Message(Line_No,ErrorDescription,ImportRecord)  
SELECT   
 DISTINCT  WOH.Line_Num,   
 'External_Source_Id: ' + WOH.External_Source_Id + '; ' + 'PART - External_Seg_Id: ' + CAST(WOP.External_Seg_Id AS VARCHAR)+ '; ' + WOP.Cost_Bearer + ' - Cost_Bearer does not exist in AMT' ,
 CASE WHEN @InterfaceSource = 0 THEN '' ELSE (SELECT *  FROM  #I_WO_HEADER TEMPHEADER WHERE TEMPHEADER.Line_Num = WOH.Line_Num FOR XML PATH('I_WO_HEADER'),ROOT('I_WO')) END  
 AS ImportRecord 
FROM   
 #I_WO_HEADER WOH   
 INNER JOIN #I_WO_PART WOP ON WOP.External_Source_Id = WOH.External_Source_Id  
 LEFT JOIN tblCostBearers CC ON CC.WO_Code = WOP.Cost_Bearer  
WHERE CC.CostBearerId IS NULL AND ISNULL(WOP.Cost_Bearer,'') <> ''  
  
INSERT INTO #z_Message(Line_No,ErrorDescription,ImportRecord)  
SELECT   
 DISTINCT  WOH.Line_Num,   
 'External_Source_Id: ' + WOH.External_Source_Id + '; ' + 'LABOUR - External_Seg_Id: ' + CAST(WOP.External_Seg_Id AS VARCHAR)+ '; ' + WOP.Cost_Bearer + ' - Cost_Bearer does not exist in AMT'  ,
 CASE WHEN @InterfaceSource = 0 THEN '' ELSE (SELECT *  FROM  #I_WO_HEADER TEMPHEADER WHERE TEMPHEADER.Line_Num = WOH.Line_Num FOR XML PATH('I_WO_HEADER'),ROOT('I_WO')) END  
  AS ImportRecord 
 
FROM   
 #I_WO_HEADER WOH   
 INNER JOIN #I_WO_LABOUR WOP ON WOP.External_Source_Id = WOH.External_Source_Id  
 LEFT JOIN tblCostBearers CC ON CC.WO_Code = WOP.Cost_Bearer  
WHERE CC.CostBearerId IS NULL AND ISNULL(WOP.Cost_Bearer,'') <> ''  
  
INSERT INTO #z_Message(Line_No,ErrorDescription,ImportRecord)  
SELECT   
 DISTINCT  WOH.Line_Num,   
 'External_Source_Id: ' + WOH.External_Source_Id + '; ' + 'MISC - External_Seg_Id: ' + CAST(WOP.External_Seg_Id AS VARCHAR)+ '; ' + WOP.Cost_Bearer + ' - Cost_Bearer does not exist in AMT'  ,
 CASE WHEN @InterfaceSource = 0 THEN '' ELSE (SELECT *  FROM  #I_WO_HEADER TEMPHEADER WHERE TEMPHEADER.Line_Num = WOH.Line_Num FOR XML PATH('I_WO_HEADER'),ROOT('I_WO')) END  
  AS ImportRecord 
FROM   
 #I_WO_HEADER WOH   
 INNER JOIN #I_WO_MISC WOP ON WOP.External_Source_Id = WOH.External_Source_Id  
 LEFT JOIN tblCostBearers CC ON CC.WO_Code = WOP.Cost_Bearer  
WHERE CC.CostBearerId IS NULL AND ISNULL(WOP.Cost_Bearer,'') <> ''  
  
-- Currency does not Exist   
INSERT INTO #z_Message(Line_No,ErrorDescription,ImportRecord)  
SELECT   
 DISTINCT WOH.Line_Num,   
 'External_Source_Id: ' + WOH.External_Source_Id + '; ' + 'PART - External_Seg_Id: ' + CAST(WOP.External_Seg_Id AS VARCHAR)+ '; ' + WOP.Currency + ' - Currency does not exist in AMT'  ,
 CASE WHEN @InterfaceSource = 0 THEN '' ELSE (SELECT *  FROM  #I_WO_HEADER TEMPHEADER WHERE TEMPHEADER.Line_Num = WOH.Line_Num FOR XML PATH('I_WO_HEADER'),ROOT('I_WO')) END  
  AS ImportRecord 
FROM   
 #I_WO_HEADER WOH   
 INNER JOIN #I_WO_PART WOP ON WOP.External_Source_Id = WOH.External_Source_Id  
 LEFT JOIN tblCurrencies C ON C.Currency = WOP.Currency   
WHERE C.CurrencyID IS NULL  
  
INSERT INTO #z_Message(Line_No,ErrorDescription,ImportRecord)  
SELECT   
 DISTINCT WOH.Line_Num,   
 'External_Source_Id: ' + WOH.External_Source_Id + '; ' + 'LABOUR - External_Seg_Id: ' + CAST(WOP.External_Seg_Id AS VARCHAR)+ '; ' + WOP.Currency + ' - Currency does not exist in AMT'  ,
 CASE WHEN @InterfaceSource = 0 THEN '' ELSE (SELECT *  FROM  #I_WO_HEADER TEMPHEADER WHERE TEMPHEADER.Line_Num = WOH.Line_Num FOR XML PATH('I_WO_HEADER'),ROOT('I_WO')) END  
  AS ImportRecord 
FROM   
 #I_WO_HEADER WOH   
 INNER JOIN #I_WO_LABOUR WOP ON WOP.External_Source_Id = WOH.External_Source_Id  
 LEFT JOIN tblCurrencies C ON C.Currency = WOP.Currency   
WHERE C.CurrencyID IS NULL  
  
INSERT INTO #z_Message(Line_No,ErrorDescription,ImportRecord)  
SELECT   
 DISTINCT WOH.Line_Num,   
 'External_Source_Id: ' + WOH.External_Source_Id + '; ' + 'MISC - External_Seg_Id: ' + CAST(WOP.External_Seg_Id AS VARCHAR)+ '; ' + WOP.Currency + ' - Currency does not exist in AMT'  ,
  CASE WHEN @InterfaceSource = 0 THEN '' ELSE (SELECT *  FROM  #I_WO_HEADER TEMPHEADER WHERE TEMPHEADER.Line_Num = WOH.Line_Num FOR XML PATH('I_WO_HEADER'),ROOT('I_WO')) END  
  AS ImportRecord 
FROM   
 #I_WO_HEADER WOH   
 INNER JOIN #I_WO_MISC WOP ON WOP.External_Source_Id = WOH.External_Source_Id  
 LEFT JOIN tblCurrencies C ON C.Currency = WOP.Currency   
WHERE C.CurrencyID IS NULL  
 
DELETE FROM #I_WO_HEADER WHERE Line_Num IN (SELECT DISTINCT Line_No FROM #z_Message )

--IF @ManualEntryActualsParts <> 3
BEGIN
	-- DO NOT UPDATE Planned if Plan details is not supplied in the XML.
	UPDATE WOH
		SET UpdatePlannedParts = 0
	FROM 
		#I_WO_HEADER WOH 
	WHERE EXISTS (
			SELECT Planned_Part_Qty FROM #I_WO_PART WOP 
			WHERE 
				WOP.External_Source_Id = WOH.External_Source_Id 
				AND (WOP.Planned_Part_Qty IS NULL OR WOP.Planned_Total_Sell IS NULL)
				) 
		
	--SET ALL EXISTING ACTUAL COST TO ZERO
	UPDATE TOPART
	SET 	
		TOPART.Actual_Qty = CASE WHEN @ManualEntryActualsParts <> 3 THEN 0 ELSE TOPART.Actual_Qty END ,
		TOPART.Actual_Unit_Price =  CASE WHEN @ManualEntryActualsParts <> 3 THEN 0 ELSE TOPART.Actual_Unit_Price END ,
		TOPART.ActualUnitPriceAtCost =  CASE WHEN @ManualEntryActualsParts <> 3 THEN 0 ELSE TOPART.ActualUnitPriceAtCost END ,
		TOPART.ActualTotalCost =  CASE WHEN @ManualEntryActualsParts <> 3 THEN 0 ELSE TOPART.ActualTotalCost END ,
		TOPART.ActualTotalSell =  CASE WHEN @ManualEntryActualsParts <> 3 THEN 0 ELSE TOPART.ActualTotalSell END ,
		TOPART.Planned_Qty = CASE WHEN WOH.UpdatePlannedParts = 0 THEN TOPART.Planned_Qty ELSE 0 END,
		TOPART.Planned_Unit_Price = CASE WHEN WOH.UpdatePlannedParts = 0 THEN TOPART.Planned_Unit_Price ELSE 0 END 
	FROM 
		TASK_OPERATION_PART TOPART
		INNER JOIN TASK_OPERATION TOPER ON TOPER.Task_Operation_Id = TOPART.Task_Operation_Id
		INNER JOIN #I_WO_HEADER WOH ON  WOH.Task_Id = TOPER.Task_Id

	-- WorkgroupSite
	UPDATE WOP
		SET WOP.Work_Group_Site  =  CASE WHEN ISNULL(T.Site_Id ,0) <> 0 THEN WO_SITE.Site
									ELSE S.Site
									END 												
	FROM 
		#I_WO_HEADER WOH 
		INNER JOIN #I_WO_PART WOP ON WOP.External_Source_Id = WOH.External_Source_Id
		--LEFT JOIN WORK_GROUP WG ON WG.Work_Group_Code = WOP.Work_Group 			
		INNER JOIN TASK T ON T.Task_ID = WOH.Task_Id
		LEFT JOIN tblSites WO_SITE ON WO_SITE.SiteId = T.Site_Id
		INNER JOIN tblEqpPlans E ON E.EqpPlanId = T.Eqp_Plan_ID
		LEFT JOIN tblFleets F ON F.FleetId = E.FleetId
		LEFT JOIN tblSites S ON S.SiteId = F.SiteId
	WHERE ISNULL(WOP.Work_Group_Site,'') = '' AND @OpEditionPartsWG <> 3 AND ISNULL(WOP.Work_Group,'')  <> ''   
	 			
	--ADD Supplier
	INSERT INTO SUPPLIER(Supplier_Name,Last_Mod_By_User_Id,Last_Mod_Date,Create_By_User_Id,Create_Date)
	SELECT 
		DISTINCT WOP.Supplier_Code,@UserId,@CurrDate,@UserId,@CurrDate
	FROM 
		#I_WO_HEADER WOH 
		INNER JOIN #I_WO_PART WOP ON WOP.External_Source_Id = WOH.External_Source_Id
		LEFT JOIN SUPPLIER S ON WOP.Supplier_Code = S.Supplier_Name
	 WHERE S.Supplier_Id IS NULL AND ISNULL(WOP.Supplier_Code,'') <> ''
	 
 	--ADD Source OF SUPPLY
	INSERT INTO SOURCE_OF_SUPPLY
		(Sos_Code, Sos_Description, Last_Mod_By_User_ID, Last_Mod_Date,	Create_By_User_ID, Create_Date)
	SELECT 
		DISTINCT WOP.Source_Of_Supply,WOP.Source_Of_Supply ,@UserId,@CurrDate,@UserId,@CurrDate
	FROM 
		#I_WO_HEADER WOH 
		INNER JOIN #I_WO_PART WOP ON WOP.External_Source_Id = WOH.External_Source_Id
		LEFT JOIN SOURCE_OF_SUPPLY SOS ON WOP.Source_Of_Supply = SOS.SOS_Code
	 WHERE SOS.Source_Of_Supply_ID IS NULL AND ISNULL(WOP.Source_Of_Supply,'')  <> ''
	
	--ADD Cost_Centre
	INSERT INTO COST_CENTRE(Cost_Centre_Code, Cost_Centre_Desc,Create_By_User_ID,Last_Mod_By_User_ID)			 
		SELECT 
			DISTINCT  WOP.Cost_Centre,WOP.Cost_Centre ,@UserId,@UserId
		FROM 
			#I_WO_HEADER WOH 
			INNER JOIN #I_WO_PART WOP ON WOP.External_Source_Id = WOH.External_Source_Id
			LEFT JOIN COST_CENTRE CC ON WOP.Cost_Centre = CC.Cost_Centre_Code
		WHERE CC.Cost_Centre_ID IS NULL AND @OpEditionPartsCC <> 3  AND ISNULL(WOP.Cost_Centre,'') <> '' 
 
	--ADD Cost_EXPENSE
	INSERT INTO COST_EXPENSE(Cost_Expense_Code, Cost_Expense_Desc ,Create_By_User_ID,Last_Mod_By_User_ID)			 
		SELECT 
			DISTINCT  WOP.Expense_Element,WOP.Expense_Element ,@UserId,@UserId
		FROM 
			#I_WO_HEADER WOH 
			INNER JOIN #I_WO_PART WOP ON WOP.External_Source_Id = WOH.External_Source_Id
			LEFT JOIN COST_EXPENSE CC ON WOP.Expense_Element = CC.Cost_Expense_Code
		WHERE CC.Cost_Expense_ID IS NULL AND @OpEditionPartsEE <> 3 AND ISNULL(WOP.Expense_Element,'')  <> ''
	
	--ADD WorkGroup 
	INSERT INTO WORK_GROUP(Description, Site_ID, Work_Group_Code,Create_By_User_ID,Last_Mod_By_User_ID)			 
		SELECT 
			DISTINCT  WOP.Work_Group, S.SiteId, WOP.Work_Group,@UserId,@UserId
		FROM 
			#I_WO_HEADER WOH 
			INNER JOIN #I_WO_PART WOP ON WOP.External_Source_Id = WOH.External_Source_Id
			LEFT JOIN (SELECT WG.Work_Group_ID,S.Site,WG.Work_Group_Code FROM WORK_GROUP WG INNER JOIN tblSites S ON S.SiteId = WG.Site_ID) WGS
				ON WGS.Work_Group_Code = WOP.Work_Group AND WGS.Site = WOP.Work_Group_Site	
			INNER JOIN tblSites S ON S.Site = WOP.Work_Group_Site 	
		WHERE WGS.Work_Group_ID IS NULL AND @OpEditionPartsWG <> 3 AND ISNULL(WOP.Work_Group,'')  <> ''  
 
	--STEP 0 IF Extenal_Seg_Id doesn't match or doesn't exist, Get the First Operation in that Task
	--STEP 1: Does External_Seg_Id + Source_Of_Supply + Part_Number + Supplier_Code match an existing OPERATION_PART? If so, this is the record to be updated.
	UPDATE WOP
		SET WOP.Task_Operation_Id = ISNULL(T.Task_Operation_Id, STEP0.Task_Operation_Id),
			WOP.CostBearerId = CB.CostBearerId,
			WOP.CostCentreId = CC.Cost_Centre_ID,
			WOP.WorkGroupId = WGS.Work_Group_ID,
			WOP.ExpenseElementID = CE.Cost_Expense_ID,
			WOP.CurrencyId = C.CurrencyID,
			WOP.SourceOfSupplyId = SOS.Source_Of_Supply_ID,
			WOP.SupplierId = S.Supplier_Id	
	FROM #I_WO_PART WOP
		INNER JOIN #I_WO_HEADER WOH ON  WOP.External_Source_Id = WOH.External_Source_Id			
		LEFT JOIN (
		SELECT  
			 TOPER.Task_Id, (TOPER.Task_Operation_Id)  
		FROM
			TASK_OPERATION TOPER	
			INNER JOIN (
				SELECT 	T.Task_Id, MIN(T.SortOrder) AS SortOrder FROM TASK_OPERATION T GROUP BY T.Task_Id )
				 MINOP ON MINOP.Task_Id = TOPER.Task_Id AND MINOP.SortOrder = TOPER.SortOrder	 
		)  STEP0 ON STEP0.Task_Id = WOH.Task_Id  
		LEFT JOIN TASK_OPERATION T ON T.Task_Operation_Id = ISNULL(WOP.External_Seg_Id ,0) AND T.Task_Id = WOH.Task_Id
		LEFT JOIN tblCostBearers CB ON CB.WO_Code = WOP.Cost_Bearer	AND @OpEditionPartsCB <> 3	
		LEFT JOIN COST_CENTRE CC ON CC.Cost_Centre_Code = WOP.Cost_Centre AND  @OpEditionPartsCC <> 3	
		LEFT JOIN COST_EXPENSE CE ON CE.Cost_Expense_Code = WOP.Expense_Element AND @OpEditionPartsEE <> 3
		LEFT JOIN SOURCE_OF_SUPPLY SOS ON SOS.Sos_Code = WOP.Source_Of_Supply 
		LEFT JOIN SUPPLIER S ON S.Supplier_Name = WOP.Supplier_Code
		LEFT JOIN tblCurrencies C ON C.Currency = WOP.Currency
 		LEFT JOIN 
 			(SELECT WG.Work_Group_ID,S.Site,WG.Work_Group_Code FROM WORK_GROUP WG INNER JOIN tblSites S ON S.SiteId = WG.Site_ID) WGS 
 			ON WGS.Site = WOP.Work_Group_Site AND WGS.Work_Group_Code = WOP.Work_Group	AND @OpEditionPartsWG <> 3 
 
	IF @UseExpenseElementAsKey = 1 
		BEGIN			
	 
		--STEP 1 ASSIGN EXISTING Task_Operation_Part_Id
		UPDATE WOP
			SET 
  				WOP.Task_Operation_Part_Id = STEP1.Task_Operation_Part_Id
		FROM #I_WO_PART WOP
			INNER JOIN #I_WO_HEADER WOH ON  WOP.External_Source_Id = WOH.External_Source_Id
			LEFT JOIN (
				SELECT 
					TOPART.Task_Operation_Id , 
					TOPART.Part_Number, 
					TOPART.Supplier_Id,
					TOPART.SourceOfSupplyID,
					TOPART.CostBearerID,
					TOPART.CostCentreID,
					TOPART.ExpenseElementID,
					TOPART.WorkGroupID,
					TOPART.FinPeriod,
					TOPART.CurrencyId,
 					MIN(TOPART.Task_Operation_Part_Id) AS Task_Operation_Part_Id			
				FROM
					TASK_OPERATION_PART TOPART				 
					INNER JOIN TASK_OPERATION TOPER ON TOPER.Task_Operation_Id = TOPART.Task_Operation_Id
					INNER JOIN #I_WO_HEADER WOH ON  WOH.Task_Id = TOPER.Task_Id
				GROUP BY 
					TOPART.Task_Operation_Id , 
					TOPART.Part_Number, 
					TOPART.Supplier_Id,
					TOPART.SourceOfSupplyID,
					TOPART.CostBearerID,
					TOPART.CostCentreID,
					TOPART.ExpenseElementID,
					TOPART.WorkGroupID,
					TOPART.FinPeriod,
					TOPART.CurrencyId
			)  STEP1 ON STEP1.Task_Operation_Id = WOP.Task_Operation_Id
					AND ISNULL(STEP1.Part_Number,'') = ISNULL(WOP.Part_Number,'')
					AND ISNULL(STEP1.Supplier_Id,0) = ISNULL(WOP.SupplierId,0) 
					AND ISNULL(STEP1.SourceOfSupplyID,0) = ISNULL(WOP.SourceOfSupplyID,0)
					AND ISNULL(STEP1.CostBearerID,0) = ISNULL(WOP.CostBearerID,0)
					AND ISNULL(STEP1.CostCentreID,0) = ISNULL(WOP.CostCentreID,0)
					AND ISNULL(STEP1.ExpenseElementID,0) = ISNULL(WOP.ExpenseElementID,0)
					AND ISNULL(STEP1.WorkGroupID,0) = ISNULL(WOP.WorkGroupID,0)
					AND ISNULL(STEP1.FinPeriod,0) = ISNULL(WOP.Fin_Period,0)
					AND ISNULL(STEP1.CurrencyId,0) = ISNULL(WOP.CurrencyId,0)
		
			--STEP 2 UPDATE FIN PERIOD 
			UPDATE TOPART1
				 SET TOPART1.FinPeriod = FQ2.Fin_Period
			 FROM TASK_OPERATION_PART TOPART1 
				INNER JOIN (							 
				SELECT 
					DISTINCT  Task_Operation_Part_Id	,
					TOPART.Task_Operation_Id , 
					TOPART.Part_Number, 
					TOPART.Supplier_Id,
					TOPART.SourceOfSupplyID,
					TOPART.CostBearerID,
					TOPART.CostCentreID,
				 	TOPART.ExpenseElementID,
					TOPART.WorkGroupID,
				 	TOPART.FinPeriod,
					TOPART.CurrencyId,
					ROW_NUMBER() OVER (PARTITION BY 
												TOPART.Task_Operation_Id , 
												TOPART.Part_Number, 
												TOPART.Supplier_Id,
												TOPART.SourceOfSupplyID,
												TOPART.CostBearerID,
												TOPART.CostCentreID,
											 	TOPART.ExpenseElementID,
												TOPART.WorkGroupID,
											--	TOPART.FinPeriod,
												TOPART.CurrencyId  
										ORDER BY
												TOPART.FinPeriod, TOPART.Task_Operation_Part_Id ) AS RId 	
				FROM
					TASK_OPERATION_PART TOPART				 
					INNER JOIN TASK_OPERATION TOPER ON TOPER.Task_Operation_Id = TOPART.Task_Operation_Id
					INNER JOIN #I_WO_HEADER WOH ON  WOH.Task_Id = TOPER.Task_Id
				WHERE NOT EXISTS (SELECT P.Task_Operation_Part_Id FROM  #I_WO_PART	P WHERE ISNULL(P.Task_Operation_Part_Id,0) = TOPART.Task_Operation_Part_Id )

				) FQ1 ON FQ1.Task_Operation_Part_Id = TOPART1.Task_Operation_Part_Id 
				INNER JOIN 
				(SELECT 
							P.Task_Operation_Id,
							P.Part_Number,
							P.SupplierId,
							P.SourceOfSupplyId,
							P.CostBearerId,
							P.CostCentreId,
				 			P.ExpenseElementID,
							P.WorkGroupId,							
							P.Fin_Period,
							P.CurrencyId,							
							ROW_NUMBER() OVER (PARTITION BY 
												P.Task_Operation_Id,
												P.Part_Number,
												P.SupplierId,
												P.SourceOfSupplyId,
												P.CostBearerId,
												P.CostCentreId,
									 			P.ExpenseElementID,
												P.WorkGroupId,							
										--		P.Fin_Period,
												P.CurrencyId  ORDER BY P.Fin_Period 
												) AS RId
						 FROM 
						 #I_WO_PART	P	
							INNER JOIN #I_WO_HEADER WOH ON  P.External_Source_Id = WOH.External_Source_Id
						WHERE ISNULL(P.Task_Operation_Part_Id,0)  = 0
						GROUP BY
							P.Task_Operation_Id,
 							P.Part_Number,
							P.SupplierId,
							P.SourceOfSupplyId,
							P.CostBearerId,
							P.CostCentreId,
					 		P.ExpenseElementID,
							P.WorkGroupId,						
							P.Fin_Period,
							P.CurrencyId 
							) FQ2 ON 
							  FQ1.Task_Operation_Id = FQ2.Task_Operation_Id
					AND ISNULL(FQ1.Part_Number,'') = ISNULL(FQ2.Part_Number,'')
					AND ISNULL(FQ1.Supplier_Id,0) = ISNULL(FQ2.SupplierId,0) 
					AND ISNULL(FQ1.SourceOfSupplyID,0) = ISNULL(FQ2.SourceOfSupplyID,0)
					AND ISNULL(FQ1.CostBearerID,0) = ISNULL(FQ2.CostBearerID,0)
					AND ISNULL(FQ1.CostCentreID,0) = ISNULL(FQ2.CostCentreID,0)
				 	AND ISNULL(FQ1.ExpenseElementID,0) = ISNULL(FQ2.ExpenseElementID,0)
					AND ISNULL(FQ1.WorkGroupID,0) = ISNULL(FQ2.WorkGroupID,0)
					AND ISNULL(FQ1.RId,0) = ISNULL(FQ2.RId,0)
					AND ISNULL(FQ1.CurrencyId,0) = ISNULL(FQ2.CurrencyId,0)
					
		UPDATE WOP
			SET 
  				WOP.Task_Operation_Part_Id = STEP1.Task_Operation_Part_Id
		FROM #I_WO_PART WOP
			INNER JOIN #I_WO_HEADER WOH ON  WOP.External_Source_Id = WOH.External_Source_Id
			LEFT JOIN (
				SELECT 
					TOPART.Task_Operation_Id , 
					TOPART.Part_Number, 
					TOPART.Supplier_Id,
					TOPART.SourceOfSupplyID,
					TOPART.CostBearerID,
					TOPART.CostCentreID,
					TOPART.ExpenseElementID,
					TOPART.WorkGroupID,
					TOPART.FinPeriod,
					TOPART.CurrencyId,
 					MIN(TOPART.Task_Operation_Part_Id) AS Task_Operation_Part_Id			
				FROM
					TASK_OPERATION_PART TOPART				 
					INNER JOIN TASK_OPERATION TOPER ON TOPER.Task_Operation_Id = TOPART.Task_Operation_Id
					INNER JOIN #I_WO_HEADER WOH ON  WOH.Task_Id = TOPER.Task_Id
				GROUP BY 
					TOPART.Task_Operation_Id , 
					TOPART.Part_Number, 
					TOPART.Supplier_Id,
					TOPART.SourceOfSupplyID,
					TOPART.CostBearerID,
					TOPART.CostCentreID,
					TOPART.ExpenseElementID,
					TOPART.WorkGroupID,
					TOPART.FinPeriod,
					TOPART.CurrencyId
			)  STEP1 ON STEP1.Task_Operation_Id = WOP.Task_Operation_Id
					AND ISNULL(STEP1.Part_Number,'') = ISNULL(WOP.Part_Number,'')
					AND ISNULL(STEP1.Supplier_Id,0) = ISNULL(WOP.SupplierId,0) 
					AND ISNULL(STEP1.SourceOfSupplyID,0) = ISNULL(WOP.SourceOfSupplyID,0)
					AND ISNULL(STEP1.CostBearerID,0) = ISNULL(WOP.CostBearerID,0)
					AND ISNULL(STEP1.CostCentreID,0) = ISNULL(WOP.CostCentreID,0)
					AND ISNULL(STEP1.ExpenseElementID,0) = ISNULL(WOP.ExpenseElementID,0)
					AND ISNULL(STEP1.WorkGroupID,0) = ISNULL(WOP.WorkGroupID,0)
					AND ISNULL(STEP1.FinPeriod,0) = ISNULL(WOP.Fin_Period,0)
					AND ISNULL(STEP1.CurrencyId,0) = ISNULL(WOP.CurrencyId,0)
					
		-- STEP 2 UPDATE Existing Parts	
 		UPDATE TOPART
			SET 
				TOPART.Supplier_Id = WOP.SupplierId, 				
				TOPART.SourceOfSupplyID = WOP.SourceOfSupplyID,
				TOPART.CostBearerID = CASE WHEN @OpEditionPartsCB <> 3 THEN WOP.CostBearerId ELSE TOPART.CostBearerID END,
				TOPART.CostCentreID = CASE WHEN @OpEditionPartsCC <> 3 THEN WOP.CostCentreID ELSE TOPART.CostCentreID END,
				TOPART.ExpenseElementID = CASE WHEN @OpEditionPartsEE <> 3 THEN WOP.ExpenseElementID ELSE TOPART.ExpenseElementID END,
				TOPART.WorkgroupID = CASE WHEN @OpEditionPartsWG <> 3 THEN WOP.WorkGroupID ELSE TOPART.WorkgroupID END ,
				TOPART.PartsOrderDetails = WOP.[Description],		
				TOPART.FinPeriod = WOP.Fin_Period,
				TOPART.ExchangeRate = WOP.Exchange_Rate,
				TOPART.Reserved = WOP.Reserved,
				TOPART.PartAvailabilityStatusId = PAS.PartAvailabilityStatusId,
				TOPART.CurrencyId = WOP.CurrencyID,
				TOPART.Last_Mod_By_User_ID = @UserId,
				TOPART.Last_Mod_Date = @CurrDate,
				TOPART.Actual_Qty  = CASE WHEN @ManualEntryActualsParts <> 3 THEN WOP.Part_Qty ELSE TOPART.Actual_Qty END,
				TOPART.Actual_Unit_Price =CASE WHEN @ManualEntryActualsParts <> 3 THEN 
												 CASE WHEN WOP.Part_Qty = 0 THEN 0 ELSE  WOP.Total_Sell/WOP.Part_Qty END
											ELSE TOPART.Actual_Unit_Price END,
				TOPART.ActualUnitPriceAtCost = CASE WHEN WOP.Part_Qty = 0 THEN 0 ELSE  WOP.Total_Cost/WOP.Part_Qty END,
				TOPART.ActualTotalCost = CASE WHEN @ManualEntryActualsParts <> 3 THEN WOP.Total_Cost ELSE TOPART.ActualTotalCost END,
				TOPART.ActualTotalSell = CASE WHEN @ManualEntryActualsParts <> 3 THEN WOP.Total_Sell ELSE TOPART.ActualTotalSell END,
				TOPART.ExpectedAvailabilityDate = WOP.Expected_Availability_Date,
				TOPART.Planned_Qty = CASE WHEN WOP.UpdatePlannedParts = 0 THEN TOPART.Planned_Qty ELSE WOP.Planned_Part_Qty END,
				TOPART.Planned_Unit_Price =  CASE WHEN WOP.UpdatePlannedParts = 0 THEN
												TOPART.Planned_Unit_Price
											 ELSE
												CASE WHEN WOP.Planned_Part_Qty = 0 THEN 0 ELSE WOP.Planned_Total_Sell/WOP.Planned_Part_Qty END
											END
		FROM 
			TASK_OPERATION_PART TOPART
 				INNER JOIN (
 								 SELECT 
 							P.Part_Number,
							P.Task_Operation_Id,
							P.Task_Operation_Part_Id,
							P.SupplierId,
							P.SourceOfSupplyId,
							P.CostBearerId,
							P.CostCentreId,
							P.ExpenseElementID,
							P.WorkGroupId,
							
							P.Fin_Period,
							P.CurrencyId,
							WOH.UpdatePlannedParts,
							MAX(P.[Description]) AS [Description],
							MAX(P.Exchange_Rate) AS Exchange_Rate,
							CASE WHEN COUNT(DISTINCT P.Reserved) = 1 THEN MAX(CAST(P.Reserved AS INT)) ELSE 0 END AS Reserved,
							MAX(P.[Status]) AS [Status],
							MAX(P.Expected_Availability_Date) AS Expected_Availability_Date,
							SUM(P.Part_Qty) AS Part_Qty,
							SUM(P.Total_Sell)AS Total_Sell,
							SUM(P.Total_Cost) AS Total_Cost,
							SUM(P.Planned_Part_Qty) AS Planned_Part_Qty,
							SUM(P.Planned_Total_Sell) AS Planned_Total_Sell
						 FROM 
						 #I_WO_PART	P	
							INNER JOIN #I_WO_HEADER WOH ON  P.External_Source_Id = WOH.External_Source_Id
						GROUP BY
							P.Task_Operation_Id,
							P.Task_Operation_Part_Id,
							P.Part_Number,
							P.SupplierId,
							P.SourceOfSupplyId,
							P.CostBearerId,
							P.CostCentreId,
							P.ExpenseElementID,
							P.WorkGroupId,						
							P.Fin_Period,
							P.CurrencyId,
							WOH.UpdatePlannedParts
							--P.[Description],
							--P.Exchange_Rate,
							--P.Reserved,
							--P.[Status],
							--P.Expected_Availability_Date
			
 							) WOP ON 	WOP.Task_Operation_Part_Id = TOPART.Task_Operation_Part_Id    			
				LEFT JOIN PART_AVAILABILITY_STATUS PAS ON PAS.PartAvailabilityStatusId = WOP.[Status]	 		
			
		--STEP 3: Otherwise, a new OPERATION_PART record must be ADDED
		INSERT INTO TASK_OPERATION_PART(
				Task_Operation_Id,
				Part_Number,
				Part_Description,
				Strategy_Qty,
				Pct_Strategy_Probability,
				Strategy_Unit_Price,
				Supplier_Id,
				Include_In_Total,
				Planned_Qty,
				Planned_Unit_Price,
				Actual_Qty,
				Actual_Unit_Price,
				ActualUnitPriceAtCost,
				ActualTotalCost,
				ActualTotalSell,
				Notes,
				PartsOrderDetails,
				Last_Mod_By_User_ID,
				Last_Mod_Date,
				Create_By_User_ID,
				Create_Date,
				IsEditable,
				SourceOfSupplyID,
				StockCode,
				CostBearerID,
				CostCentreID,
				ExpenseElementID,
				WorkgroupID,
				FinPeriod,
				ExchangeRate,
				Reserved,
				PartAvailabilityStatusId,
				CurrencyId,
				ExpectedAvailabilityDate
				)
			SELECT
				WOP.Task_Operation_Id,
				WOP.Part_Number,
				ISNULL(MAX(PA.PartDescription),'') AS Part_Description,
				0 AS Strategy_Qty,
				100 AS Pct_Strategy_Probability,
				0 AS Strategy_Unit_Price,
				WOP.SupplierId,
				0 AS Include_In_Total,
				SUM(ISNULL(WOP.Planned_Part_Qty,0)) AS Planned_Qty,
				CASE WHEN SUM(ISNULL(WOP.Planned_Part_Qty,0)) = 0 THEN 0 ELSE SUM(ISNULL(WOP.Planned_Total_Sell,0))/ SUM(ISNULL(WOP.Planned_Part_Qty,0)) END AS Planned_Unit_Price,
				CASE WHEN @ManualEntryActualsParts <> 3 THEN SUM(WOP.Part_Qty) ELSE 0 END AS Actual_Qty,
				CASE WHEN @ManualEntryActualsParts <> 3 THEN 
					CASE WHEN SUM(WOP.Part_Qty) = 0 THEN 0 ELSE SUM(WOP.Total_Sell)/ SUM(WOP.Part_Qty) END 
				ELSE 0 END AS Actual_Unit_Price,
				CASE WHEN @ManualEntryActualsParts <> 3 THEN 
					CASE WHEN SUM(WOP.Part_Qty) = 0 THEN 0 ELSE SUM(WOP.Total_Cost)/ SUM(WOP.Part_Qty) END 
				ELSE 0 END AS ActualUnitPriceAtCost,
				CASE WHEN @ManualEntryActualsParts <> 3 THEN SUM(WOP.Total_Cost) ELSE 0 END AS ActualTotalCost,
				CASE WHEN @ManualEntryActualsParts <> 3 THEN SUM(WOP.Total_Sell) ELSE 0 END AS ActualTotalSell,
				'' AS Notes,
				MAX(WOP.[Description]) As PartsOrderDetails,
				@UserId AS Last_Mod_By_User_ID,
				@CurrDate AS Last_Mod_Date,
				@UserId AS Create_By_User_ID,
				@CurrDate AS Create_Date,
				1 AS IsEditable,
				WOP.SourceOfSupplyID,
				NULL AS StockCode,
				CASE WHEN @OpEditionPartsCB <> 3 THEN WOP.CostBearerId ELSE NULL END AS CostBearerID,
				CASE WHEN @OpEditionPartsCC <> 3 THEN WOP.CostCentreID ELSE NULL END AS CostCentreID,
				CASE WHEN @OpEditionPartsEE <> 3 THEN WOP.ExpenseElementID ELSE NULL END AS ExpenseElementID,
				CASE WHEN @OpEditionPartsWG <> 3 THEN WOP.WorkGroupID ELSE NULL END AS WorkgroupID ,
				WOP.Fin_Period,
				MAX(WOP.Exchange_Rate),
				CASE WHEN COUNT(DISTINCT WOP.Reserved) = 1 THEN MAX(CAST(WOP.Reserved AS INT)) ELSE 0 END,
				MAX(PAS.PartAvailabilityStatusId),
				WOP.CurrencyID,
				MAX(WOP.Expected_Availability_Date)
			FROM
				#I_WO_PART WOP 
				INNER JOIN #I_WO_HEADER WOH ON  WOP.External_Source_Id = WOH.External_Source_Id		 
	 			LEFT JOIN PART_AVAILABILITY_STATUS PAS ON PAS.PartAvailabilityStatusId = WOP.Status
	 			LEFT JOIN tblParts PA ON PA.Part = ISNULL(WOP.Part_Number,'') AND PA.Source_Of_Supply_ID = WOP.SourceOfSupplyId 
	 		WHERE WOP.Task_Operation_Part_Id IS NULL
	 		GROUP BY
	 				WOP.Task_Operation_Id,
					WOP.Task_Operation_Part_Id,
					WOP.Part_Number,
					WOP.SupplierId,
					WOP.SourceOfSupplyId,
					WOP.CostBearerId,
					WOP.CostCentreId,
					WOP.ExpenseElementID,
					WOP.WorkGroupId,
					WOP.Fin_Period,
					WOP.CurrencyId 
	END			
	ELSE
		BEGIN
	
			UPDATE WOP
			SET 
  				WOP.Task_Operation_Part_Id = STEP1.Task_Operation_Part_Id
			FROM #I_WO_PART WOP
			INNER JOIN #I_WO_HEADER WOH ON  WOP.External_Source_Id = WOH.External_Source_Id
			LEFT JOIN (
				SELECT 
					TOPART.Task_Operation_Id , 
					TOPART.Part_Number, 
					TOPART.Supplier_Id,
					TOPART.SourceOfSupplyID,
					TOPART.CostBearerID,
					TOPART.CostCentreID,
					--TOPART.ExpenseElementID,
					TOPART.WorkGroupID,
					TOPART.FinPeriod,
					TOPART.CurrencyId,
 					MIN(TOPART.Task_Operation_Part_Id) AS Task_Operation_Part_Id			
				FROM
					TASK_OPERATION_PART TOPART				 
					INNER JOIN TASK_OPERATION TOPER ON TOPER.Task_Operation_Id = TOPART.Task_Operation_Id
					INNER JOIN #I_WO_HEADER WOH ON  WOH.Task_Id = TOPER.Task_Id
				GROUP BY 
					TOPART.Task_Operation_Id , 
					TOPART.Part_Number, 
					TOPART.Supplier_Id,
					TOPART.SourceOfSupplyID,
					TOPART.CostBearerID,
					TOPART.CostCentreID,
					--TOPART.ExpenseElementID,
					TOPART.WorkGroupID,
					TOPART.FinPeriod,
					TOPART.CurrencyId
			)  STEP1 ON STEP1.Task_Operation_Id = WOP.Task_Operation_Id
					AND ISNULL(STEP1.Part_Number,'') = ISNULL(WOP.Part_Number,'')
					AND ISNULL(STEP1.Supplier_Id,0) = ISNULL(WOP.SupplierId,0) 
					AND ISNULL(STEP1.SourceOfSupplyID,0) = ISNULL(WOP.SourceOfSupplyID,0)
					AND ISNULL(STEP1.CostBearerID,0) = ISNULL(WOP.CostBearerID,0)
					AND ISNULL(STEP1.CostCentreID,0) = ISNULL(WOP.CostCentreID,0)
				--	AND ISNULL(STEP1.ExpenseElementID,0) = ISNULL(WOP.ExpenseElementID,0)
					AND ISNULL(STEP1.WorkGroupID,0) = ISNULL(WOP.WorkGroupID,0)
					AND ISNULL(STEP1.FinPeriod,0) = ISNULL(WOP.Fin_Period,0)
					AND ISNULL(STEP1.CurrencyId,0) = ISNULL(WOP.CurrencyId,0)
		
		 
							
 
			-- UPDATE FIN PERIOD
			UPDATE TOPART1
				 SET TOPART1.FinPeriod = FQ2.Fin_Period
			 FROM TASK_OPERATION_PART TOPART1 
				INNER JOIN (							 
				SELECT 
 					DISTINCT  Task_Operation_Part_Id	,
					TOPART.Task_Operation_Id , 
					TOPART.Part_Number, 
					TOPART.Supplier_Id,
					TOPART.SourceOfSupplyID,
					TOPART.CostBearerID,
					TOPART.CostCentreID,
				--	TOPART.ExpenseElementID,
					TOPART.WorkGroupID,
				 	TOPART.FinPeriod,
					TOPART.CurrencyId,
					ROW_NUMBER() OVER (PARTITION BY 
												TOPART.Task_Operation_Id , 
												TOPART.Part_Number, 
												TOPART.Supplier_Id,
												TOPART.SourceOfSupplyID,
												TOPART.CostBearerID,
												TOPART.CostCentreID,
											--	TOPART.ExpenseElementID,
												TOPART.WorkGroupID,
											--	TOPART.FinPeriod,
												TOPART.CurrencyId  
												
										ORDER BY
												TOPART.FinPeriod, Task_Operation_Part_Id ) AS RId 	
				FROM
					TASK_OPERATION_PART TOPART				 
					INNER JOIN TASK_OPERATION TOPER ON TOPER.Task_Operation_Id = TOPART.Task_Operation_Id
					INNER JOIN #I_WO_HEADER WOH ON  WOH.Task_Id = TOPER.Task_Id
				WHERE NOT EXISTS (SELECT P.Task_Operation_Part_Id FROM  #I_WO_PART	P WHERE ISNULL(P.Task_Operation_Part_Id,0) = TOPART.Task_Operation_Part_Id )
				) FQ1 ON FQ1.Task_Operation_Part_Id = TOPART1.Task_Operation_Part_Id 
				INNER JOIN 
				(SELECT 
							P.Task_Operation_Id,
							P.Part_Number,
							P.SupplierId,
							P.SourceOfSupplyId,
							P.CostBearerId,
							P.CostCentreId,
				--			P.ExpenseElementID,
							P.WorkGroupId,							
							P.Fin_Period,
							P.CurrencyId,							
							ROW_NUMBER() OVER (PARTITION BY 
												P.Task_Operation_Id,
												P.Part_Number,												
												P.SupplierId,
												P.SourceOfSupplyId,
												P.CostBearerId,
												P.CostCentreId,
									--			P.ExpenseElementID,
												P.WorkGroupId,							
										--		P.Fin_Period,
												P.CurrencyId  ORDER BY P.Fin_Period 
												) AS RId
						 FROM 
						 #I_WO_PART	P	
							INNER JOIN #I_WO_HEADER WOH ON  P.External_Source_Id = WOH.External_Source_Id
						WHERE ISNULL(P.Task_Operation_Part_Id,0) = 0
						GROUP BY
							P.Task_Operation_Id,
 							P.Part_Number,
							P.SupplierId,
							P.SourceOfSupplyId,
							P.CostBearerId,
							P.CostCentreId,
					--		P.ExpenseElementID,
							P.WorkGroupId,						
							P.Fin_Period,
							P.CurrencyId 
							) FQ2 ON 
							  FQ1.Task_Operation_Id = FQ2.Task_Operation_Id
					AND ISNULL(FQ1.Part_Number,'') = ISNULL(FQ2.Part_Number,'')
					AND ISNULL(FQ1.Supplier_Id,0) = ISNULL(FQ2.SupplierId,0) 
					AND ISNULL(FQ1.SourceOfSupplyID,0) = ISNULL(FQ2.SourceOfSupplyID,0)
					AND ISNULL(FQ1.CostBearerID,0) = ISNULL(FQ2.CostBearerID,0)
					AND ISNULL(FQ1.CostCentreID,0) = ISNULL(FQ2.CostCentreID,0)
				--	AND ISNULL(FQ1.ExpenseElementID,0) = ISNULL(FQ2.ExpenseElementID,0)
					AND ISNULL(FQ1.WorkGroupID,0) = ISNULL(FQ2.WorkGroupID,0)
					AND ISNULL(FQ1.RId,0) = ISNULL(FQ2.RId,0)
					AND ISNULL(FQ1.CurrencyId,0) = ISNULL(FQ2.CurrencyId,0)
		
				
				
		UPDATE WOP
			SET 
  				WOP.Task_Operation_Part_Id = STEP1.Task_Operation_Part_Id
		FROM #I_WO_PART WOP
			INNER JOIN #I_WO_HEADER WOH ON  WOP.External_Source_Id = WOH.External_Source_Id
			LEFT JOIN (
				SELECT 
					TOPART.Task_Operation_Id , 
					TOPART.Part_Number, 
					TOPART.Supplier_Id,
					TOPART.SourceOfSupplyID,
					TOPART.CostBearerID,
					TOPART.CostCentreID,
					--TOPART.ExpenseElementID,
					TOPART.WorkGroupID,
					TOPART.FinPeriod,
					TOPART.CurrencyId,
 					MIN(TOPART.Task_Operation_Part_Id) AS Task_Operation_Part_Id			
				FROM
					TASK_OPERATION_PART TOPART				 
					INNER JOIN TASK_OPERATION TOPER ON TOPER.Task_Operation_Id = TOPART.Task_Operation_Id
					INNER JOIN #I_WO_HEADER WOH ON  WOH.Task_Id = TOPER.Task_Id
				GROUP BY 
					TOPART.Task_Operation_Id , 
					TOPART.Part_Number, 
					TOPART.Supplier_Id,
					TOPART.SourceOfSupplyID,
					TOPART.CostBearerID,
					TOPART.CostCentreID,
					--TOPART.ExpenseElementID,
					TOPART.WorkGroupID,
					TOPART.FinPeriod,
					TOPART.CurrencyId
			)  STEP1 ON STEP1.Task_Operation_Id = WOP.Task_Operation_Id
					AND ISNULL(STEP1.Part_Number,'') = ISNULL(WOP.Part_Number,'')
					AND ISNULL(STEP1.Supplier_Id,0) = ISNULL(WOP.SupplierId,0) 
					AND ISNULL(STEP1.SourceOfSupplyID,0) = ISNULL(WOP.SourceOfSupplyID,0)
					AND ISNULL(STEP1.CostBearerID,0) = ISNULL(WOP.CostBearerID,0)
					AND ISNULL(STEP1.CostCentreID,0) = ISNULL(WOP.CostCentreID,0)
				--	AND ISNULL(STEP1.ExpenseElementID,0) = ISNULL(WOP.ExpenseElementID,0)
					AND ISNULL(STEP1.WorkGroupID,0) = ISNULL(WOP.WorkGroupID,0)
					AND ISNULL(STEP1.FinPeriod,0) = ISNULL(WOP.Fin_Period,0)
					AND ISNULL(STEP1.CurrencyId,0) = ISNULL(WOP.CurrencyId,0)
					
		-- STEP 2 UPDATE Existing Parts	
 		UPDATE TOPART
			SET 
				TOPART.Supplier_Id = WOP.SupplierId, 				
				TOPART.SourceOfSupplyID = WOP.SourceOfSupplyID,
				TOPART.CostBearerID = CASE WHEN @OpEditionPartsCB <> 3 THEN WOP.CostBearerId ELSE TOPART.CostBearerID END,
				TOPART.CostCentreID = CASE WHEN @OpEditionPartsCC <> 3 THEN WOP.CostCentreID ELSE TOPART.CostCentreID END,
				TOPART.ExpenseElementID = CASE WHEN @OpEditionPartsEE <> 3 THEN CASE WHEN ISNULL(WOP.ExpenseElementID,0)= 0 THEN NULL ELSE  WOP.ExpenseElementID END ELSE TOPART.ExpenseElementID END,
				TOPART.WorkgroupID = CASE WHEN @OpEditionPartsWG <> 3 THEN WOP.WorkGroupID ELSE TOPART.WorkgroupID END ,
				TOPART.PartsOrderDetails = WOP.[Description],		
				TOPART.FinPeriod = WOP.Fin_Period,
				TOPART.ExchangeRate = WOP.Exchange_Rate,
				TOPART.Reserved = WOP.Reserved,
				TOPART.PartAvailabilityStatusId = PAS.PartAvailabilityStatusId,
				TOPART.CurrencyId = WOP.CurrencyID,
				TOPART.Last_Mod_By_User_ID = @UserId,
				TOPART.Last_Mod_Date = @CurrDate,
				TOPART.Actual_Qty  = CASE WHEN @ManualEntryActualsParts <> 3 THEN  WOP.Part_Qty ELSE TOPART.Actual_Qty END,
				TOPART.Actual_Unit_Price =  CASE WHEN @ManualEntryActualsParts <> 3 THEN 
												CASE WHEN WOP.Part_Qty = 0 THEN 0 ELSE  WOP.Total_Sell/WOP.Part_Qty END
											ELSE 
												TOPART.Actual_Unit_Price
											END,
				TOPART.ActualUnitPriceAtCost = CASE WHEN @ManualEntryActualsParts <> 3 THEN 
													CASE WHEN WOP.Part_Qty = 0 THEN 0 ELSE  WOP.Total_Cost/WOP.Part_Qty END
												ELSE TOPART.ActualUnitPriceAtCost END ,
				TOPART.ActualTotalCost = CASE WHEN @ManualEntryActualsParts <> 3 THEN  WOP.Total_Cost ELSE TOPART.ActualTotalCost END,
				TOPART.ActualTotalSell = CASE WHEN @ManualEntryActualsParts <> 3 THEN WOP.Total_Sell ELSE TOPART.ActualTotalSell END ,
				TOPART.ExpectedAvailabilityDate = WOP.Expected_Availability_Date,
				TOPART.Planned_Qty = CASE WHEN WOP.UpdatePlannedParts = 0 THEN TOPART.Planned_Qty ELSE WOP.Planned_Part_Qty END,
				TOPART.Planned_Unit_Price =  CASE WHEN WOP.UpdatePlannedParts = 0 THEN
												TOPART.Planned_Unit_Price
											 ELSE
												CASE WHEN WOP.Planned_Part_Qty = 0 THEN 0 ELSE WOP.Planned_Total_Sell/WOP.Planned_Part_Qty END
											END
		FROM 
			TASK_OPERATION_PART TOPART
 				INNER JOIN (
 								 SELECT 
 							P.Part_Number,
							P.Task_Operation_Id,
							P.Task_Operation_Part_Id,
							P.SupplierId,
							P.SourceOfSupplyId,
							P.CostBearerId,
							P.CostCentreId,
							MAX(ISNULL(P.ExpenseElementID,0)) AS ExpenseElementID,
							P.WorkGroupId,							
							P.Fin_Period,
							P.CurrencyId,
							WOH.UpdatePlannedParts,
							MAX(P.[Description]) AS [Description],
							MAX(P.Exchange_Rate) AS Exchange_Rate,
							CASE WHEN COUNT(DISTINCT P.Reserved) = 1 THEN MAX(CAST(P.Reserved AS INT)) ELSE 0 END AS Reserved,
							MAX(P.[Status]) AS [Status],
							MAX(P.Expected_Availability_Date) AS Expected_Availability_Date,
							SUM(P.Part_Qty) AS Part_Qty,
							SUM(P.Total_Sell)AS Total_Sell,
							SUM(P.Total_Cost) AS Total_Cost,
							SUM(P.Planned_Part_Qty) As Planned_Part_Qty,
							SUM(P.Planned_Total_Sell) AS Planned_Total_Sell
						 FROM 
						 #I_WO_PART	P	
							INNER JOIN #I_WO_HEADER WOH ON  P.External_Source_Id = WOH.External_Source_Id
						GROUP BY
							P.Task_Operation_Id,
							P.Task_Operation_Part_Id,
							P.Part_Number,
							P.SupplierId,
							P.SourceOfSupplyId,
							P.CostBearerId,
							P.CostCentreId,
							--P.ExpenseElementID,
							P.WorkGroupId,						
							P.Fin_Period,
							P.CurrencyId,
							WOH.UpdatePlannedParts
							--P.[Description],
							--P.Exchange_Rate,
							--P.Reserved,
							--P.[Status],
							--P.Expected_Availability_Date
			
 							) WOP ON 	WOP.Task_Operation_Part_Id = TOPART.Task_Operation_Part_Id    			
				LEFT JOIN PART_AVAILABILITY_STATUS PAS ON PAS.PartAvailabilityStatusId = WOP.[Status]	 		
			
		--STEP 3: Otherwise, a new OPERATION_PART record must be ADDED
		INSERT INTO TASK_OPERATION_PART(
				Task_Operation_Id,
				Part_Number,
				Part_Description,
				Strategy_Qty,
				Pct_Strategy_Probability,
				Strategy_Unit_Price,
				Supplier_Id,
				Include_In_Total,
				Planned_Qty,
				Planned_Unit_Price,
				Actual_Qty,
				Actual_Unit_Price,
				ActualUnitPriceAtCost,
				ActualTotalCost,
				ActualTotalSell,
				Notes,
				PartsOrderDetails,
				Last_Mod_By_User_ID,
				Last_Mod_Date,
				Create_By_User_ID,
				Create_Date,
				IsEditable,
				SourceOfSupplyID,
				StockCode,
				CostBearerID,
				CostCentreID,
				ExpenseElementID,
				WorkgroupID,
				FinPeriod,
				ExchangeRate,
				Reserved,
				PartAvailabilityStatusId,
				CurrencyId,
				ExpectedAvailabilityDate
				)
			SELECT
				WOP.Task_Operation_Id,
				WOP.Part_Number,
				ISNULL(MAX(PA.PartDescription),'') AS Part_Description,
				0 AS Strategy_Qty,
				100 AS Pct_Strategy_Probability,
				0 AS Strategy_Unit_Price,
				WOP.SupplierId,
				0 AS Include_In_Total,
				SUM(ISNULL(WOP.Planned_Part_Qty,0)) AS Planned_Qty,
				CASE WHEN SUM(ISNULL(WOP.Planned_Part_Qty,0)) = 0 THEN 0 ELSE SUM(ISNULL(WOP.Planned_Total_Sell,0))/ SUM(ISNULL(WOP.Planned_Part_Qty,0)) END AS Planned_Unit_Price,
				CASE WHEN @ManualEntryActualsParts <> 3 THEN SUM(WOP.Part_Qty) ELSE 0 END AS Actual_Qty,
				CASE WHEN @ManualEntryActualsParts <> 3 THEN  
					CASE WHEN SUM(WOP.Part_Qty) = 0 THEN 0 ELSE SUM(WOP.Total_Sell)/ SUM(WOP.Part_Qty) END 
				ELSE 0 END AS Actual_Unit_Price,
				CASE WHEN @ManualEntryActualsParts <> 3 THEN 
					CASE WHEN SUM(WOP.Part_Qty) = 0 THEN 0 ELSE SUM(WOP.Total_Cost)/ SUM(WOP.Part_Qty) END 
				ELSE 0 END AS ActualUnitPriceAtCost,
				CASE WHEN @ManualEntryActualsParts <> 3 THEN SUM(WOP.Total_Cost) 
				ELSE 0 END AS ActualTotalCost,
				CASE WHEN @ManualEntryActualsParts <> 3 THEN SUM(WOP.Total_Sell) 
				ELSE 0 END AS ActualTotalSell,
				'' AS Notes,
				MAX(WOP.[Description]) As PartsOrderDetails,
				@UserId AS Last_Mod_By_User_ID,
				@CurrDate AS Last_Mod_Date,
				@UserId AS Create_By_User_ID,
				@CurrDate AS Create_Date,
				1 AS IsEditable,
				WOP.SourceOfSupplyID,
				NULL AS StockCode,
				CASE WHEN @OpEditionPartsCB <> 3 THEN WOP.CostBearerId ELSE NULL END AS CostBearerID,
				CASE WHEN @OpEditionPartsCC <> 3 THEN WOP.CostCentreID ELSE NULL END AS CostCentreID,
				CASE WHEN @OpEditionPartsEE <> 3 THEN CASE WHEN MAX(ISNULL(WOP.ExpenseElementID,0)) = 0 THEN NULL ELSE  MAX(ISNULL(WOP.ExpenseElementID,0)) END ELSE NULL END AS ExpenseElementID,
				CASE WHEN @OpEditionPartsWG <> 3 THEN WOP.WorkGroupID ELSE NULL END AS WorkgroupID ,
				WOP.Fin_Period,
				MAX(WOP.Exchange_Rate),
				CASE WHEN COUNT(DISTINCT WOP.Reserved) = 1 THEN MAX(CAST(WOP.Reserved AS INT)) ELSE 0 END,
				MAX(PAS.PartAvailabilityStatusId),
				WOP.CurrencyID,
				MAX(WOP.Expected_Availability_Date)
			FROM
				#I_WO_PART WOP 
				INNER JOIN #I_WO_HEADER WOH ON  WOP.External_Source_Id = WOH.External_Source_Id		 
	 			LEFT JOIN PART_AVAILABILITY_STATUS PAS ON PAS.PartAvailabilityStatusId = WOP.Status
	 			LEFT JOIN tblParts PA ON PA.Part = ISNULL(WOP.Part_Number,'') AND PA.Source_Of_Supply_ID = WOP.SourceOfSupplyId 
	 		WHERE WOP.Task_Operation_Part_Id IS NULL
	 		GROUP BY
	 				WOP.Task_Operation_Id,
					WOP.Task_Operation_Part_Id,
					WOP.Part_Number,
					WOP.SupplierId,
					WOP.SourceOfSupplyId,
					WOP.CostBearerId,
					WOP.CostCentreId,
					--WOP.ExpenseElementID,
					WOP.WorkGroupId,
					WOP.Fin_Period,
					WOP.CurrencyId 
	
	END 
				 

END

--IF @ManualEntryActualsLabour <> 3
BEGIN
	-- DO NOT UPDATE Planned if Plan details is not supplied in the XML.
	UPDATE WOH
		SET UpdatePlannedLabour = 0
	FROM 
		#I_WO_HEADER WOH 
	WHERE EXISTS (
			SELECT Planned_Hours FROM #I_WO_LABOUR WOL
			WHERE 
				WOL.External_Source_Id = WOH.External_Source_Id 
				AND (WOL.Planned_Hours IS NULL OR WOL.Planned_Total_Sell IS NULL)
	)	
	OR EXISTS
	(
		SELECT TOLABOUR.Employee_Id FROM TASK_OPERATION_LABOUR TOLABOUR
		INNER JOIN TASK_OPERATION TOPER ON TOPER.Task_Operation_Id = TOLABOUR.Task_Operation_Id
		WHERE TOPER.Task_Id = WOH.Task_Id AND  TOLABOUR.Employee_Id IS NOT NULL
	)

	--SET ALL EXISTING ACTUAL COST TO ZERO
	UPDATE TOL
	SET 	
		TOL.Actual_Labour_Rate = CASE WHEN @ManualEntryActualsLabour <> 3 THEN 0 ELSE TOL.Actual_Labour_Rate END,
		TOL.Actual_Labour_Hrs = CASE WHEN @ManualEntryActualsLabour <> 3 THEN 0 ELSE TOL.Actual_Labour_Hrs END,
		TOL.ActualLabourRateAtCost = CASE WHEN @ManualEntryActualsLabour <> 3 THEN 0 ELSE TOL.ActualLabourRateAtCost END,
		TOL.ActualTotalCost = CASE WHEN @ManualEntryActualsLabour <> 3 THEN 0 ELSE TOL.ActualTotalCost END,
		TOL.ActualTotalSell = CASE WHEN @ManualEntryActualsLabour <> 3 THEN 0 ELSE TOL.ActualTotalSell END,
		TOL.Planned_Labour_Hrs = CASE WHEN WOH.UpdatePlannedLabour = 0 THEN TOL.Planned_Labour_Hrs ELSE 0 END,
		TOL.Planned_Labour_Rate  = CASE WHEN WOH.UpdatePlannedLabour = 0 THEN TOL.Planned_Labour_Rate ELSE 0 END 
	FROM 
		TASK_OPERATION_LABOUR TOL
		INNER JOIN TASK_OPERATION TOPER ON TOPER.Task_Operation_Id = TOL.Task_Operation_Id
		INNER JOIN #I_WO_HEADER WOH ON  WOH.Task_Id = TOPER.Task_Id
		
	-- WorkgroupSite
	UPDATE WOP
		SET WOP.Work_Group_Site  =  CASE WHEN ISNULL(T.Site_Id ,0) <> 0 THEN WO_SITE.Site
									ELSE S.Site
									END 												
	FROM 
		#I_WO_HEADER WOH 
		INNER JOIN #I_WO_LABOUR WOP ON WOP.External_Source_Id = WOH.External_Source_Id
		--LEFT JOIN WORK_GROUP WG ON WG.Work_Group_Code = WOP.Work_Group 			
		INNER JOIN TASK T ON T.Task_ID = WOH.Task_Id
		LEFT JOIN tblSites WO_SITE ON WO_SITE.SiteId = T.Site_Id
		INNER JOIN tblEqpPlans E ON E.EqpPlanId = T.Eqp_Plan_ID
		LEFT JOIN tblFleets F ON F.FleetId = E.FleetId
		LEFT JOIN tblSites S ON S.SiteId = F.SiteId
	WHERE ISNULL(WOP.Work_Group_Site,'') = '' AND ISNULL(WOP.Work_Group,'')  <> ''   

	--ADD WorkGroup (Dont add if Employee Id is Specified)
	INSERT INTO WORK_GROUP(Description, Site_ID, Work_Group_Code,Create_By_User_ID,Last_Mod_By_User_ID)			 
	SELECT 
		DISTINCT  WOL.Work_Group, S.SiteId, WOL.Work_Group,@UserId,@UserId
	FROM 
		#I_WO_HEADER WOH 
		INNER JOIN #I_WO_LABOUR WOL ON WOL.External_Source_Id = WOH.External_Source_Id
		LEFT JOIN (SELECT WG.Work_Group_ID,S.Site,WG.Work_Group_Code FROM WORK_GROUP WG INNER JOIN tblSites S ON S.SiteId = WG.Site_ID) WGS
				ON WGS.Work_Group_Code = WOL.Work_Group AND WGS.Site = WOL.Work_Group_Site	
		INNER JOIN tblSites S ON S.Site = WOL.Work_Group_Site
	WHERE WGS.Work_Group_ID IS NULL AND ISNULL(WOL.Work_Group,'') <> '' --AND @OpEditionPartsWG = 0
 
 	--ADD Cost_Centre
	INSERT INTO COST_CENTRE(Cost_Centre_Code, Cost_Centre_Desc,Create_By_User_ID,Last_Mod_By_User_ID)			 
		SELECT 
			DISTINCT  WOL.Cost_Centre,WOL.Cost_Centre ,@UserId,@UserId
		FROM 
			#I_WO_HEADER WOH 
			INNER JOIN  #I_WO_LABOUR WOL ON WOL.External_Source_Id = WOH.External_Source_Id
			LEFT JOIN COST_CENTRE CC ON WOL.Cost_Centre = CC.Cost_Centre_Code
		WHERE CC.Cost_Centre_ID IS NULL AND @OpEditionLabourCC <> 3 AND ISNULL(WOL.Cost_Centre,'') <> ''
 
	--ADD Cost_EXPENSE
	INSERT INTO COST_EXPENSE(Cost_Expense_Code, Cost_Expense_Desc ,Create_By_User_ID,Last_Mod_By_User_ID)			 
		SELECT 
			DISTINCT  WOL.Expense_Element,WOL.Expense_Element ,@UserId,@UserId
		FROM 
			#I_WO_HEADER WOH 
			INNER JOIN  #I_WO_LABOUR WOL ON WOL.External_Source_Id = WOH.External_Source_Id
			LEFT JOIN COST_EXPENSE CC ON WOL.Expense_Element = CC.Cost_Expense_Code
		WHERE CC.Cost_Expense_ID IS NULL AND @OpEditionLabourEE <> 3 AND ISNULL(WOL.Expense_Element,'') <> ''
		
	DECLARE @NumOfRecCreated INT
	-- Labour Activity
	INSERT INTO tblLabourActivities
						  (ActivityCode, LabourActivity, LastModByUserId, LastModDate, CreateByUserId, CreateDate)
	SELECT 
		DISTINCT  WOL.Planned_Labour_Activity,WOL.Planned_Labour_Activity ,@UserId,GETDATE(),@UserId, GETDATE()
	FROM 
		#I_WO_HEADER WOH 
		INNER JOIN  #I_WO_LABOUR WOL ON WOL.External_Source_Id = WOH.External_Source_Id
		LEFT JOIN tblLabourActivities LA ON LA.ActivityCode = WOL.Planned_Labour_Activity
	WHERE LA.LabourActivityId IS NULL AND @OpEditionLabourEE <> 3 AND ISNULL(WOL.Planned_Labour_Activity,'') <> ''
	
	SET @NumOfRecCreated = @@ROWCOUNT
	IF @NumOfRecCreated > 0
		EXEC LABOUR_RATES_MISSING_ADD_P

	UPDATE WOL
		SET WOL.Task_Operation_Id = ISNULL(T.Task_Operation_Id, STEP0.Task_Operation_Id),
			WOL.CostBearerId = CB.CostBearerId,
			WOL.CostCentreId = CC.Cost_Centre_ID,
			WOL.WorkGroupId = CASE 
								WHEN ISNULL(WOL.Employee_Number,'') <> '' AND E.Employee_ID IS NULL AND ISNULL(WOL.Work_Group,'') = '' THEN NULL 
								WHEN E.Employee_ID IS NOT NULL AND WGS.Work_Group_ID IS NULL THEN E.Default_WorkGroup_ID
								ELSE WGS.Work_Group_ID END,
			WOL.ExpenseElementID = CE.Cost_Expense_ID,
			WOL.CurrencyId = C.CurrencyID,
			WOL.EmployeeId  = E.Employee_ID,
			WOL.LabourActivityId = LA.LabourActivityId
	FROM #I_WO_LABOUR WOL
		INNER JOIN #I_WO_HEADER WOH ON  WOL.External_Source_Id = WOH.External_Source_Id			
		LEFT JOIN (
		SELECT  
			 TOPER.Task_Id, (TOPER.Task_Operation_Id)  
		FROM
			TASK_OPERATION TOPER	
			INNER JOIN (
				SELECT 	T.Task_Id, MIN(T.SortOrder) AS SortOrder FROM TASK_OPERATION T GROUP BY T.Task_Id )
				 MINOP ON MINOP.Task_Id = TOPER.Task_Id AND MINOP.SortOrder = TOPER.SortOrder	 
		)  STEP0 ON STEP0.Task_Id = WOH.Task_Id  
		LEFT JOIN TASK_OPERATION T ON T.Task_Operation_Id =  ISNULL(WOL.External_Seg_Id ,0) AND T.Task_Id = WOH.Task_Id
 		LEFT JOIN tblCostBearers CB ON CB.WO_Code = WOL.Cost_Bearer	AND @OpEditionLabourCB <> 3	
		LEFT JOIN COST_CENTRE CC ON CC.Cost_Centre_Code = WOL.Cost_Centre AND  @OpEditionLabourCC <> 3		
		LEFT JOIN COST_EXPENSE CE ON CE.Cost_Expense_Code = WOL.Expense_Element AND @OpEditionLabourEE <> 3
		LEFT JOIN EMPLOYEE E ON E.EmployeeNumber  = WOL.Employee_Number		
		LEFT JOIN tblCurrencies C ON C.Currency = WOL.Currency
		LEFT JOIN tblLabourActivities LA ON LA.ActivityCode = WOL.Planned_Labour_Activity
 		LEFT JOIN 
 			(SELECT WG.Work_Group_ID,S.Site,WG.Work_Group_Code FROM WORK_GROUP WG INNER JOIN tblSites S ON S.SiteId = WG.Site_ID) WGS 
 			ON WGS.Site = WOL.Work_Group_Site AND WGS.Work_Group_Code = WOL.Work_Group
 			
	IF @UseExpenseElementAsKey = 1 
	BEGIN	
		
		UPDATE WOL
				SET 
  					WOL.Task_Operation_Labour_Id = STEP1.Task_Operation_Labour_Id
		FROM #I_WO_LABOUR WOL
			INNER JOIN #I_WO_HEADER WOH ON  WOL.External_Source_Id = WOH.External_Source_Id
 			LEFT JOIN (
			SELECT 
				TOLABOUR.Task_Operation_Id ,
				TOLABOUR.Employee_Id,
				TOLABOUR.Work_Group_Id,
				TOLABOUR.CostCentreID,
				TOLABOUR.CostBearerID,
				TOLABOUR.ExpenseElementID,
				TOLABOUR.FinPeriod,
				TOLABOUR.CurrencyId,
				TOLABOUR.Labour_Activity_Id,
				MIN(TOLABOUR.Task_Operation_Labour_Id)	AS Task_Operation_Labour_Id
			FROM
				TASK_OPERATION_LABOUR TOLABOUR
					INNER JOIN TASK_OPERATION TOPER ON TOPER.Task_Operation_Id = TOLABOUR.Task_Operation_Id
					INNER JOIN #I_WO_HEADER WOH ON  WOH.Task_Id = TOPER.Task_Id			
			GROUP BY 
				TOLABOUR.Task_Operation_Id ,
				TOLABOUR.Employee_Id,
				TOLABOUR.Work_Group_Id,
				TOLABOUR.CostCentreID,
				TOLABOUR.CostBearerID,
				TOLABOUR.ExpenseElementID,
				TOLABOUR.FinPeriod,
				TOLABOUR.CurrencyId,
				TOLABOUR.Labour_Activity_Id
			)  STEP1 ON WOL.Task_Operation_Id = STEP1.Task_Operation_Id  
						AND ISNULL(STEP1.Employee_Id,0) = ISNULL(WOL.EmployeeId,0)
						AND ISNULL(STEP1.Work_Group_Id,0) = ISNULL(WOL.WorkGroupId,0)
						AND ISNULL(STEP1.CostCentreID,0) = ISNULL(WOL.CostCentreID,0)
						AND ISNULL(STEP1.CostBearerID,0) = ISNULL(WOL.CostBearerID,0)
 						AND ISNULL(STEP1.ExpenseElementID,0) = ISNULL(WOL.ExpenseElementID,0)
						AND ISNULL(STEP1.FinPeriod,0) = ISNULL(WOL.Fin_Period,0)
						AND ISNULL(STEP1.CurrencyId,0) = ISNULL(WOL.CurrencyId,0)
						AND ISNULL(STEP1.Labour_Activity_Id,0) = ISNULL(WOL.LabourActivityId,0)
		
		UPDATE TOLABOUR1
				 SET TOLABOUR1.FinPeriod = FQ2.Fin_Period
			 FROM TASK_OPERATION_LABOUR TOLABOUR1 
				INNER JOIN (	
						SELECT 
							DISTINCT TOLABOUR.Task_Operation_Labour_Id,
							TOLABOUR.Task_Operation_Id ,
							TOLABOUR.Employee_Id,
							TOLABOUR.Work_Group_Id,
							TOLABOUR.CostCentreID,
							TOLABOUR.CostBearerID,
							TOLABOUR.ExpenseElementID,
							TOLABOUR.FinPeriod,
							TOLABOUR.CurrencyId,
							TOLABOUR.Labour_Activity_Id,
							ROW_NUMBER() OVER (PARTITION BY 
														TOLABOUR.Task_Operation_Id ,
														TOLABOUR.Employee_Id,
														TOLABOUR.Work_Group_Id,
														TOLABOUR.CostCentreID,
														TOLABOUR.CostBearerID,
														TOLABOUR.ExpenseElementID,
													--	TOLABOUR.FinPeriod,
														TOLABOUR.CurrencyId ,
														TOLABOUR.Labour_Activity_Id
													ORDER BY
															TOLABOUR.FinPeriod , TOLABOUR.Task_Operation_Labour_Id ) AS RId 
					FROM
						TASK_OPERATION_LABOUR TOLABOUR
							INNER JOIN TASK_OPERATION TOPER ON TOPER.Task_Operation_Id = TOLABOUR.Task_Operation_Id
							INNER JOIN #I_WO_HEADER WOH ON  WOH.Task_Id = TOPER.Task_Id			
				WHERE NOT EXISTS (SELECT L.Task_Operation_Labour_Id FROM  #I_WO_LABOUR	L WHERE ISNULL(L.Task_Operation_Labour_Id,0) = TOLABOUR.Task_Operation_Labour_Id )
				) FQ1 ON FQ1.Task_Operation_Labour_Id = TOLABOUR1.Task_Operation_Labour_Id 
				INNER JOIN 
				(	SELECT 
 							L.Task_Operation_Id ,
							L.EmployeeId,
							L.WorkGroupId,
							L.CostCentreID,
							L.CostBearerID,
							L.ExpenseElementID,
							L.Fin_Period,
							L.CurrencyId,
							L.LabourActivityId,
 							ROW_NUMBER() OVER (PARTITION BY 
 												L.Task_Operation_Id ,
 												L.EmployeeId,
												L.WorkGroupId,
												L.CostCentreID,
												L.CostBearerID,
												L.ExpenseElementID,
												--L.Fin_Period,
												L.CurrencyId,
												L.LabourActivityId
												ORDER BY L.Fin_Period 
											) AS RId
						 FROM 
						 #I_WO_LABOUR L
							INNER JOIN #I_WO_HEADER WOH ON  L.External_Source_Id = WOH.External_Source_Id
						WHERE ISNULL(L.Task_Operation_Labour_Id,0) = 0
						GROUP BY
							L.Task_Operation_Id ,							
							L.EmployeeId,
							L.WorkGroupId,
							L.CostCentreID,
							L.CostBearerID,
							L.ExpenseElementID,
							L.Fin_Period,
							L.CurrencyId,
							L.LabourActivityId
							) FQ2 ON 
							 FQ1.Task_Operation_Id = FQ2.Task_Operation_Id  
						AND ISNULL(FQ1.Employee_Id,0) = ISNULL(FQ2.EmployeeId,0)
						AND ISNULL(FQ1.Work_Group_Id,0) = ISNULL(FQ2.WorkGroupId,0)
						AND ISNULL(FQ1.CostCentreID,0) = ISNULL(FQ2.CostCentreID,0)
						AND ISNULL(FQ1.CostBearerID,0) = ISNULL(FQ2.CostBearerID,0)
 						AND ISNULL(FQ1.ExpenseElementID,0) = ISNULL(FQ2.ExpenseElementID,0)
						AND ISNULL(FQ1.Rid,0) = ISNULL(FQ2.RId,0)
						AND ISNULL(FQ1.CurrencyId,0) = ISNULL(FQ2.CurrencyId,0)
						AND ISNULL(FQ1.Labour_Activity_Id,0) = ISNULL(FQ2.LabourActivityId,0)
						
		UPDATE WOL
			SET 
  				WOL.Task_Operation_Labour_Id = STEP1.Task_Operation_Labour_Id
		FROM #I_WO_LABOUR WOL
			INNER JOIN #I_WO_HEADER WOH ON  WOL.External_Source_Id = WOH.External_Source_Id
 			LEFT JOIN (
			SELECT 
				TOLABOUR.Task_Operation_Id ,
				TOLABOUR.Employee_Id,
				TOLABOUR.Work_Group_Id,
				TOLABOUR.CostCentreID,
				TOLABOUR.CostBearerID,
				TOLABOUR.ExpenseElementID,
				TOLABOUR.FinPeriod,
				TOLABOUR.CurrencyId,
				TOLABOUR.Labour_Activity_Id,
				MIN(TOLABOUR.Task_Operation_Labour_Id)	AS Task_Operation_Labour_Id
			FROM
				TASK_OPERATION_LABOUR TOLABOUR
					INNER JOIN TASK_OPERATION TOPER ON TOPER.Task_Operation_Id = TOLABOUR.Task_Operation_Id
					INNER JOIN #I_WO_HEADER WOH ON  WOH.Task_Id = TOPER.Task_Id			
			GROUP BY 
				TOLABOUR.Task_Operation_Id ,
				TOLABOUR.Employee_Id,
				TOLABOUR.Work_Group_Id,
				TOLABOUR.CostCentreID,
				TOLABOUR.CostBearerID,
				TOLABOUR.ExpenseElementID,
				TOLABOUR.FinPeriod,
				TOLABOUR.CurrencyId,
				TOLABOUR.Labour_Activity_Id
			)  STEP1 ON WOL.Task_Operation_Id = STEP1.Task_Operation_Id  
						AND ISNULL(STEP1.Employee_Id,0) = ISNULL(WOL.EmployeeId,0)
						AND ISNULL(STEP1.Work_Group_Id,0) = ISNULL(WOL.WorkGroupId,0)
						AND ISNULL(STEP1.CostCentreID,0) = ISNULL(WOL.CostCentreID,0)
						AND ISNULL(STEP1.CostBearerID,0) = ISNULL(WOL.CostBearerID,0)
 						AND ISNULL(STEP1.ExpenseElementID,0) = ISNULL(WOL.ExpenseElementID,0)
						AND ISNULL(STEP1.FinPeriod,0) = ISNULL(WOL.Fin_Period,0)
						AND ISNULL(STEP1.CurrencyId,0) = ISNULL(WOL.CurrencyId,0)
						AND ISNULL(STEP1.Labour_Activity_Id,0) = ISNULL(WOL.LabourActivityId,0)
	 
		UPDATE TOLABOUR
		SET 	  
			TOLABOUR.Employee_Id = WOL.EmployeeID,		
			TOLABOUR.Work_Group_Id =  WOL.WorkGroupID ,		
			TOLABOUR.CostBearerID = CASE WHEN @OpEditionLabourCB <> 3 THEN WOL.CostBearerId ELSE TOLABOUR.CostBearerID END,
			TOLABOUR.CostCentreID = CASE WHEN @OpEditionLabourCC <> 3 THEN WOL.CostCentreID ELSE TOLABOUR.CostCentreID END,
			TOLABOUR.ExpenseElementID = CASE WHEN @OpEditionLabourEE <> 3 THEN WOL.ExpenseElementID ELSE TOLABOUR.ExpenseElementID END,	
			TOLABOUR.FinPeriod = WOL.Fin_Period,
			TOLABOUR.CurrencyId = WOL.CurrencyId,
			TOLABOUR.Labour_Activity_Id = WOL.LabourActivityId,
			TOLABOUR.FinancialWorkGroupId =   WOL.WorkGroupID,
			TOLABOUR.Actual_Labour_Hrs =  CASE WHEN @ManualEntryActualsLabour <> 3 THEN WOL.[Hours]  ELSE  TOLABOUR.Actual_Labour_Hrs  END,
			TOLABOUR.Actual_Labour_Rate = CASE WHEN @ManualEntryActualsLabour <> 3 THEN 
												CASE WHEN WOL.[Hours] = 0 THEN 0 ELSE WOL.Total_Sell/WOL.[Hours] END
										  ELSE 
												TOLABOUR.Actual_Labour_Rate  
										  END ,
			TOLABOUR.ActualLabourRateAtCost =	CASE WHEN @ManualEntryActualsLabour <> 3 THEN
													CASE WHEN WOL.[Hours] = 0 THEN 0 ELSE  WOL.Total_Cost/WOL.[Hours] END
												ELSE  
													TOLABOUR.ActualLabourRateAtCost 
												END,
			 
			TOLABOUR.ActualTotalCost =  CASE WHEN @ManualEntryActualsLabour <> 3 THEN WOL.Total_Cost ELSE TOLABOUR.ActualTotalCost  END ,
			TOLABOUR.ActualTotalSell =  CASE WHEN @ManualEntryActualsLabour <> 3 THEN WOL.Total_Sell ELSE TOLABOUR.ActualTotalSell END ,		
			TOLABOUR.Last_Mod_By_User_ID = @UserId,
			TOLABOUR.Last_Mod_Date = @CurrDate,		
			TOLABOUR.ExchangeRate = WOL.Exchange_Rate,
			TOLABOUR.Planned_Labour_Hrs = CASE WHEN WOL.UpdatePlannedLabour = 0 THEN TOLABOUR.Planned_Labour_Hrs ELSE WOL.Planned_Hours END,
			TOLABOUR.Planned_Labour_Rate =  CASE WHEN WOL.UpdatePlannedLabour = 0 THEN TOLABOUR.Planned_Labour_Rate ELSE 
												CASE WHEN WOL.Planned_Hours = 0 THEN 0 ELSE WOL.Planned_Total_Sell/WOL.Planned_Hours END
											 END  
			
		FROM 
			TASK_OPERATION_LABOUR TOLABOUR
 				INNER JOIN (
 				 SELECT 
 							L.Task_Operation_Id ,
 							L.Task_Operation_Labour_Id,
							L.EmployeeId,
							L.WorkGroupId,
							L.CostCentreID,
							L.CostBearerID,
							L.ExpenseElementID,
							L.Fin_Period,
							L.CurrencyId,
							L.LabourActivityId,
							WOH.UpdatePlannedLabour,
 							MAX(L.Exchange_Rate) AS Exchange_Rate, 
							SUM(L.[Hours]) AS [Hours],
							SUM(L.Total_Sell)AS Total_Sell,
							SUM(L.Total_Cost) AS Total_Cost,
							SUM(L.Planned_Hours) AS Planned_Hours,
							SUM(L.Planned_Total_Sell) AS Planned_Total_Sell
						 FROM 
						 #I_WO_LABOUR L
							INNER JOIN #I_WO_HEADER WOH ON  L.External_Source_Id = WOH.External_Source_Id
						GROUP BY
							L.Task_Operation_Id ,
							L.Task_Operation_Labour_Id,
							L.EmployeeId,
							L.WorkGroupId,
							L.CostCentreID,
							L.CostBearerID,
							L.ExpenseElementID,
							L.Fin_Period,
							L.CurrencyId,
							L.LabourActivityId,
							WOH.UpdatePlannedLabour
							) WOL ON 	WOL.Task_Operation_Labour_Id = TOLABOUR.Task_Operation_Labour_Id   	 			 
				
		INSERT INTO TASK_OPERATION_LABOUR
		(
			Task_Operation_Id,
			Work_Group_Id,
			Labour_Activity_Id,
			Labour_Activity,
			Include_In_Total,
			Strategy_Labour_Hrs,
			Strategy_Labour_Rate,
			Labour_Qty,
			Employee_Id,
			Planned_Labour_Hrs,
			Planned_Labour_Rate,
			Instructions,
			Actual_Labour_Hrs,
			Actual_Labour_Rate,	
			ActualLabourRateAtCost,	
			ActualTotalCost ,
			ActualTotalSell,
			Labour_Offset,
			Last_Mod_By_User_ID,
			Last_Mod_Date,
			Create_By_User_ID,
			Create_Date,
			IsEditable,
			CostBearerID,
			CostCentreID,
			ExpenseElementID ,
			FinancialWorkGroupId,
			FinPeriod,
			ExchangeRate,
			CurrencyId
		)
		SELECT
			WOL.Task_Operation_Id,
			WOL.WorkGroupID AS Work_Group_Id,
			WOL.LabourActivityId AS Labour_Activity_ID, -- MAX(E.Default_Labour_Activity_ID) AS Labour_Activity_Id,			
			'' AS Labour_Activity,
			0 AS Include_In_Total,
			0 AS Strategy_Labour_Hrs,
			0 AS Strategy_Labour_Rate,
			0 AS Labour_Qty,
			WOL.EmployeeID,
			SUM(ISNULL(WOL.Planned_Hours,0)) AS Planned_Labour_Hrs,
			CASE WHEN SUM(ISNULL(WOL.Planned_Hours,0)) = 0 THEN 0 ELSE 
				SUM(ISNULL(WOL.Planned_Total_Sell,0))/SUM(ISNULL(WOL.Planned_Hours,0))
			END AS Planned_Labour_Rate,
			'' AS Instructions,			 
			CASE WHEN @ManualEntryActualsLabour <> 3 THEN SUM(WOL.[Hours])  ELSE 0 END AS Actual_Labour_Hrs,
			CASE WHEN @ManualEntryActualsLabour <> 3 THEN 
				CASE WHEN SUM(WOL.[Hours]) = 0 THEN 0 ELSE SUM(WOL.Total_Sell)/SUM(WOL.[Hours]) END
			ELSE 
				0 
			END AS Actual_Labour_Rate,	
			CASE WHEN @ManualEntryActualsLabour <> 3 THEN 
				CASE WHEN SUM(WOL.[Hours]) = 0 THEN 0 ELSE SUM(WOL.Total_Cost)/SUM(WOL.[Hours]) END 
			ELSE 0 END AS	ActualLabourRateAtCost,				
			CASE WHEN @ManualEntryActualsLabour <> 3 THEN SUM(WOL.Total_Cost) ELSE 0 END AS ActualTotalCost ,
			CASE WHEN @ManualEntryActualsLabour <> 3 THEN SUM(WOL.Total_Sell) ELSE 0 END AS ActualTotalSell,	 
			0 AS Labour_Offset,
			@UserId AS Last_Mod_By_User_ID,
			@CurrDate AS Last_Mod_Date,
			@UserId AS Create_By_User_ID,
			@CurrDate AS Create_Date,
			1,
			CASE WHEN @OpEditionLabourCB <> 3 THEN WOL.CostBearerId ELSE NULL END AS CostBearerID,
			CASE WHEN @OpEditionLabourCC <> 3 THEN WOL.CostCentreID ELSE NULL END AS CostCentreID,
			CASE WHEN @OpEditionLabourEE <> 3 THEN WOL.ExpenseElementID ELSE NULL END ExpenseElementID,
			WOL.WorkGroupID,
			WOL.Fin_Period,
			MAX(WOL.Exchange_Rate),
			WOL.CurrencyId
		FROM 
			#I_WO_LABOUR WOL 
 				INNER JOIN #I_WO_HEADER WOH ON  WOL.External_Source_Id = WOH.External_Source_Id
 				LEFT JOIN EMPLOYEE E ON E.Employee_ID = WOL.EmployeeId
		 WHERE WOL.Task_Operation_Labour_Id IS NULL
		 GROUP BY
			WOL.Task_Operation_Id ,
			WOL.Task_Operation_Labour_Id,
			WOL.EmployeeId,
			WOL.WorkGroupId,
			WOL.CostCentreID,
			WOL.CostBearerID,
			WOL.ExpenseElementID,
			WOL.Fin_Period,
			WOL.CurrencyId,
			WOL.LabourActivityId
	
	END
	ELSE
	BEGIN
	
		UPDATE WOL
			SET 
  				WOL.Task_Operation_Labour_Id = STEP1.Task_Operation_Labour_Id
		FROM #I_WO_LABOUR WOL
			INNER JOIN #I_WO_HEADER WOH ON  WOL.External_Source_Id = WOH.External_Source_Id
 			LEFT JOIN (
			SELECT 
				TOLABOUR.Task_Operation_Id ,
				TOLABOUR.Employee_Id,
				TOLABOUR.Work_Group_Id,
				TOLABOUR.CostCentreID,
				TOLABOUR.CostBearerID,
				--TOLABOUR.ExpenseElementID,
				TOLABOUR.FinPeriod,
				TOLABOUR.CurrencyId,
				TOLABOUR.Labour_Activity_Id,
				MIN(TOLABOUR.Task_Operation_Labour_Id)	AS Task_Operation_Labour_Id
			FROM
				TASK_OPERATION_LABOUR TOLABOUR
					INNER JOIN TASK_OPERATION TOPER ON TOPER.Task_Operation_Id = TOLABOUR.Task_Operation_Id
					INNER JOIN #I_WO_HEADER WOH ON  WOH.Task_Id = TOPER.Task_Id			
			GROUP BY 
				TOLABOUR.Task_Operation_Id ,
				TOLABOUR.Employee_Id,
				TOLABOUR.Work_Group_Id,
				TOLABOUR.CostCentreID,
				TOLABOUR.CostBearerID,
				--TOLABOUR.ExpenseElementID,
				TOLABOUR.FinPeriod,
				TOLABOUR.CurrencyId,
				TOLABOUR.Labour_Activity_Id 
			)  STEP1 ON WOL.Task_Operation_Id = STEP1.Task_Operation_Id  
						AND ISNULL(STEP1.Employee_Id,0) = ISNULL(WOL.EmployeeId,0)
						AND ISNULL(STEP1.Work_Group_Id,0) = ISNULL(WOL.WorkGroupId,0)
						AND ISNULL(STEP1.CostCentreID,0) = ISNULL(WOL.CostCentreID,0)
						AND ISNULL(STEP1.CostBearerID,0) = ISNULL(WOL.CostBearerID,0)
 						--AND ISNULL(STEP1.ExpenseElementID,0) = ISNULL(WOL.ExpenseElementID,0)
						AND ISNULL(STEP1.FinPeriod,0) = ISNULL(WOL.Fin_Period,0)
						AND ISNULL(STEP1.CurrencyId,0) = ISNULL(WOL.CurrencyId,0)
						AND ISNULL(STEP1.Labour_Activity_Id,0) = ISNULL(WOL.LabourActivityId,0)
 				
		UPDATE TOLABOUR1
				 SET TOLABOUR1.FinPeriod = FQ2.Fin_Period
			 FROM TASK_OPERATION_LABOUR TOLABOUR1 
				INNER JOIN (	
						SELECT 
							DISTINCT TOLABOUR.Task_Operation_Labour_Id,
							TOLABOUR.Task_Operation_Id ,
							TOLABOUR.Employee_Id,
							TOLABOUR.Work_Group_Id,
							TOLABOUR.CostCentreID,
							TOLABOUR.CostBearerID,
							--TOLABOUR.ExpenseElementID,
							TOLABOUR.FinPeriod,
							TOLABOUR.CurrencyId,
							TOLABOUR.Labour_Activity_Id,
							ROW_NUMBER() OVER (PARTITION BY 
														TOLABOUR.Task_Operation_Id ,
														TOLABOUR.Employee_Id,
														TOLABOUR.Work_Group_Id,
														TOLABOUR.CostCentreID,
														TOLABOUR.CostBearerID,
													--	TOLABOUR.ExpenseElementID,
 														TOLABOUR.CurrencyId ,
 														TOLABOUR.Labour_Activity_Id 
													ORDER BY
															TOLABOUR.FinPeriod, TOLABOUR.Task_Operation_Labour_Id ) AS RId 
 					FROM
						TASK_OPERATION_LABOUR TOLABOUR
							INNER JOIN TASK_OPERATION TOPER ON TOPER.Task_Operation_Id = TOLABOUR.Task_Operation_Id
							INNER JOIN #I_WO_HEADER WOH ON  WOH.Task_Id = TOPER.Task_Id			
				 WHERE NOT EXISTS (SELECT L.Task_Operation_Labour_Id FROM  #I_WO_LABOUR	L WHERE ISNULL(L.Task_Operation_Labour_Id,0) = TOLABOUR.Task_Operation_Labour_Id )			 
				) FQ1 ON FQ1.Task_Operation_Labour_Id = TOLABOUR1.Task_Operation_Labour_Id 
				INNER JOIN 
				(	SELECT 
 							L.Task_Operation_Id ,
							L.EmployeeId,
							L.WorkGroupId,
							L.CostCentreID,
							L.CostBearerID,
						--	L.ExpenseElementID,
							L.Fin_Period,
							L.CurrencyId,
							L.LabourActivityId,
 							ROW_NUMBER() OVER (PARTITION BY 
 												L.Task_Operation_Id ,

												L.EmployeeId,
												L.WorkGroupId,
												L.CostCentreID,
												L.CostBearerID,
									--			L.ExpenseElementID,
												--L.Fin_Period,
												L.CurrencyId,
												L.LabourActivityId 
												ORDER BY L.Fin_Period 
											) AS RId
						 FROM 
						 #I_WO_LABOUR L
							INNER JOIN #I_WO_HEADER WOH ON  L.External_Source_Id = WOH.External_Source_Id
						WHERE ISNULL( L.Task_Operation_Labour_Id,0) = 0
						GROUP BY
							L.Task_Operation_Id ,

							L.EmployeeId,
							L.WorkGroupId,
							L.CostCentreID,
							L.CostBearerID,
						--	L.ExpenseElementID,
							L.Fin_Period,
							L.CurrencyId,
							L.LabourActivityId
							) FQ2 ON 
							 FQ1.Task_Operation_Id = FQ2.Task_Operation_Id  
						AND ISNULL(FQ1.Employee_Id,0) = ISNULL(FQ2.EmployeeId,0)
						AND ISNULL(FQ1.Work_Group_Id,0) = ISNULL(FQ2.WorkGroupId,0)
						AND ISNULL(FQ1.CostCentreID,0) = ISNULL(FQ2.CostCentreID,0)
						AND ISNULL(FQ1.CostBearerID,0) = ISNULL(FQ2.CostBearerID,0)
 						--AND ISNULL(FQ1.ExpenseElementID,0) = ISNULL(FQ2.ExpenseElementID,0)
						AND ISNULL(FQ1.Rid,0) = ISNULL(FQ2.RId,0)
						AND ISNULL(FQ1.CurrencyId,0) = ISNULL(FQ2.CurrencyId,0)
						AND ISNULL(FQ1.Labour_Activity_Id,0) = ISNULL(FQ2.LabourActivityId,0)
	 
		UPDATE WOL
			SET 
  				WOL.Task_Operation_Labour_Id = STEP1.Task_Operation_Labour_Id
		FROM #I_WO_LABOUR WOL
			INNER JOIN #I_WO_HEADER WOH ON  WOL.External_Source_Id = WOH.External_Source_Id
 			LEFT JOIN (
			SELECT 
				TOLABOUR.Task_Operation_Id ,
				TOLABOUR.Employee_Id,
				TOLABOUR.Work_Group_Id,
				TOLABOUR.CostCentreID,
				TOLABOUR.CostBearerID,
				--TOLABOUR.ExpenseElementID,
				TOLABOUR.FinPeriod,
				TOLABOUR.CurrencyId,
				TOLABOUR.Labour_Activity_Id,
				MIN(TOLABOUR.Task_Operation_Labour_Id)	AS Task_Operation_Labour_Id
			FROM
				TASK_OPERATION_LABOUR TOLABOUR
					INNER JOIN TASK_OPERATION TOPER ON TOPER.Task_Operation_Id = TOLABOUR.Task_Operation_Id
					INNER JOIN #I_WO_HEADER WOH ON  WOH.Task_Id = TOPER.Task_Id			
			GROUP BY 
				TOLABOUR.Task_Operation_Id ,
				TOLABOUR.Employee_Id,
				TOLABOUR.Work_Group_Id,
				TOLABOUR.CostCentreID,
				TOLABOUR.CostBearerID,
				--TOLABOUR.ExpenseElementID,
				TOLABOUR.FinPeriod,
				TOLABOUR.CurrencyId,
				TOLABOUR.Labour_Activity_Id
			)  STEP1 ON WOL.Task_Operation_Id = STEP1.Task_Operation_Id  
						AND ISNULL(STEP1.Employee_Id,0) = ISNULL(WOL.EmployeeId,0)
						AND ISNULL(STEP1.Work_Group_Id,0) = ISNULL(WOL.WorkGroupId,0)
						AND ISNULL(STEP1.CostCentreID,0) = ISNULL(WOL.CostCentreID,0)
						AND ISNULL(STEP1.CostBearerID,0) = ISNULL(WOL.CostBearerID,0)
 						--AND ISNULL(STEP1.ExpenseElementID,0) = ISNULL(WOL.ExpenseElementID,0)
						AND ISNULL(STEP1.FinPeriod,0) = ISNULL(WOL.Fin_Period,0)
						AND ISNULL(STEP1.CurrencyId,0) = ISNULL(WOL.CurrencyId,0)
						AND ISNULL(STEP1.Labour_Activity_Id,0) = ISNULL(WOL.LabourActivityId,0)
	 
		UPDATE TOLABOUR
		SET 	  
			TOLABOUR.Employee_Id = WOL.EmployeeID,		
			TOLABOUR.Work_Group_Id =  WOL.WorkGroupID ,		
			TOLABOUR.CostBearerID = CASE WHEN @OpEditionLabourCB <> 3 THEN WOL.CostBearerId ELSE TOLABOUR.CostBearerID END,
			TOLABOUR.CostCentreID = CASE WHEN @OpEditionLabourCC <> 3 THEN WOL.CostCentreID ELSE TOLABOUR.CostCentreID END,
			TOLABOUR.ExpenseElementID = CASE WHEN @OpEditionLabourEE <> 3 THEN CASE WHEN ISNULL(WOL.ExpenseElementID,0) = 0 THEN NULL ELSE WOL.ExpenseElementID END ELSE TOLABOUR.ExpenseElementID END,	
			TOLABOUR.FinPeriod = WOL.Fin_Period,
			TOLABOUR.CurrencyId = WOL.CurrencyId,
			TOLABOUR.Labour_Activity_Id = WOL.LabourActivityId,
			TOLABOUR.FinancialWorkGroupId =   WOL.WorkGroupID,
			TOLABOUR.Actual_Labour_Hrs =  CASE WHEN @ManualEntryActualsLabour <> 3 THEN WOL.[Hours]  ELSE  TOLABOUR.Actual_Labour_Hrs  END,
			TOLABOUR.Actual_Labour_Rate = CASE WHEN @ManualEntryActualsLabour <> 3 THEN 
												CASE WHEN WOL.[Hours] = 0 THEN 0 ELSE WOL.Total_Sell/WOL.[Hours] END
										  ELSE 
												TOLABOUR.Actual_Labour_Rate  
										  END ,
			TOLABOUR.ActualLabourRateAtCost =	CASE WHEN @ManualEntryActualsLabour <> 3 THEN
													CASE WHEN WOL.[Hours] = 0 THEN 0 ELSE  WOL.Total_Cost/WOL.[Hours] END
												ELSE  
													TOLABOUR.ActualLabourRateAtCost 
												END,
			 
			TOLABOUR.ActualTotalCost =  CASE WHEN @ManualEntryActualsLabour <> 3 THEN WOL.Total_Cost ELSE TOLABOUR.ActualTotalCost  END ,
			TOLABOUR.ActualTotalSell =  CASE WHEN @ManualEntryActualsLabour <> 3 THEN WOL.Total_Sell ELSE TOLABOUR.ActualTotalSell END ,		
			TOLABOUR.Last_Mod_By_User_ID = @UserId,
			TOLABOUR.Last_Mod_Date = @CurrDate,		
			TOLABOUR.ExchangeRate = WOL.Exchange_Rate,
			TOLABOUR.Planned_Labour_Hrs = CASE WHEN WOL.UpdatePlannedLabour = 0 THEN TOLABOUR.Planned_Labour_Hrs ELSE WOL.Planned_Hours END,
			TOLABOUR.Planned_Labour_Rate =  CASE WHEN WOL.UpdatePlannedLabour = 0 THEN TOLABOUR.Planned_Labour_Rate ELSE 
											CASE WHEN WOL.Planned_Hours = 0 THEN 0 ELSE WOL.Planned_Total_Sell/WOL.Planned_Hours END
										 END  
			
		FROM 
			TASK_OPERATION_LABOUR TOLABOUR
 				INNER JOIN (
 				 SELECT 
 							L.Task_Operation_Id ,
 							L.Task_Operation_Labour_Id,
							L.EmployeeId,
							L.WorkGroupId,
							L.CostCentreID,
							L.CostBearerID,
							MAX(ISNULL(L.ExpenseElementID,0)) AS ExpenseElementID,
							L.Fin_Period,
							L.CurrencyId,
							L.LabourActivityId,
							WOH.UpdatePlannedLabour,
 							MAX(L.Exchange_Rate) AS Exchange_Rate, 
							SUM(L.[Hours]) AS [Hours],
							SUM(L.Total_Sell)AS Total_Sell,
							SUM(L.Total_Cost) AS Total_Cost,
							SUM(L.Planned_Hours) AS Planned_Hours,
							SUM(L.Planned_Total_Sell) AS Planned_Total_Sell
						 FROM 
						 #I_WO_LABOUR L
							INNER JOIN #I_WO_HEADER WOH ON  L.External_Source_Id = WOH.External_Source_Id
						GROUP BY
							L.Task_Operation_Id ,
							L.Task_Operation_Labour_Id,
							L.EmployeeId,
							L.WorkGroupId,
							L.CostCentreID,
							L.CostBearerID,
							--L.ExpenseElementID,
							L.Fin_Period,
							L.CurrencyId,
							L.LabourActivityId,
							WOH.UpdatePlannedLabour
							) WOL ON 	WOL.Task_Operation_Labour_Id = TOLABOUR.Task_Operation_Labour_Id   	 			 
				
		INSERT INTO TASK_OPERATION_LABOUR
		(
			Task_Operation_Id,
			Work_Group_Id,
			Labour_Activity_Id,
			Labour_Activity,
			Include_In_Total,
			Strategy_Labour_Hrs,
			Strategy_Labour_Rate,
			Labour_Qty,
			Employee_Id,
			Planned_Labour_Hrs,
			Planned_Labour_Rate,
			Instructions,
			Actual_Labour_Hrs,
			Actual_Labour_Rate,	
			ActualLabourRateAtCost,	
			ActualTotalCost ,
			ActualTotalSell,
			Labour_Offset,
			Last_Mod_By_User_ID,
			Last_Mod_Date,
			Create_By_User_ID,
			Create_Date,
			IsEditable,
			CostBearerID,
			CostCentreID,
			ExpenseElementID ,
			FinancialWorkGroupId,
			FinPeriod,
			ExchangeRate,
			CurrencyId
		)
		SELECT
			WOL.Task_Operation_Id,
			WOL.WorkGroupID AS Work_Group_Id,
			WOL.LabourActivityId AS Labour_Activity_Id, --MAX(E.Default_Labour_Activity_ID) AS Labour_Activity_Id,
			'' AS Labour_Activity,
			0 AS Include_In_Total,
			0 AS Strategy_Labour_Hrs,
			0 AS Strategy_Labour_Rate,
			0 AS Labour_Qty,
			WOL.EmployeeID,
			SUM(ISNULL(WOL.Planned_Hours,0)) AS Planned_Labour_Hrs,
			CASE WHEN SUM(ISNULL(WOL.Planned_Hours,0)) = 0 THEN 0 ELSE 
				SUM(ISNULL(WOL.Planned_Total_Sell,0))/SUM(ISNULL(WOL.Planned_Hours,0))
			END AS Planned_Labour_Rate,
			'' AS Instructions,
			CASE WHEN @ManualEntryActualsLabour <> 3 THEN SUM(WOL.[Hours])  ELSE 0 END AS Actual_Labour_Hrs,
			CASE WHEN @ManualEntryActualsLabour <> 3 THEN 
				CASE WHEN SUM(WOL.[Hours]) = 0 THEN 0 ELSE SUM(WOL.Total_Sell)/SUM(WOL.[Hours]) END
			ELSE 
				0 
			END AS Actual_Labour_Rate,	
			CASE WHEN @ManualEntryActualsLabour <> 3 THEN 
				CASE WHEN SUM(WOL.[Hours]) = 0 THEN 0 ELSE SUM(WOL.Total_Cost)/SUM(WOL.[Hours]) END 
			ELSE 0 END AS	ActualLabourRateAtCost,				
			CASE WHEN @ManualEntryActualsLabour <> 3 THEN SUM(WOL.Total_Cost) ELSE 0 END AS ActualTotalCost ,
			CASE WHEN @ManualEntryActualsLabour <> 3 THEN SUM(WOL.Total_Sell) ELSE 0 END AS ActualTotalSell,	
			0 AS Labour_Offset,
			@UserId AS Last_Mod_By_User_ID,
			@CurrDate AS Last_Mod_Date,
			@UserId AS Create_By_User_ID,
			@CurrDate AS Create_Date,
			1,
			CASE WHEN @OpEditionLabourCB <> 3 THEN WOL.CostBearerId ELSE NULL END AS CostBearerID,
			CASE WHEN @OpEditionLabourCC <> 3 THEN WOL.CostCentreID ELSE NULL END AS CostCentreID,
			CASE WHEN @OpEditionLabourEE <> 3 THEN CASE WHEN MAX(ISNULL(WOL.ExpenseElementID,0)) = 0 THEN NULL ELSE MAX(ISNULL(WOL.ExpenseElementID,0)) END ELSE NULL END ExpenseElementID,
			WOL.WorkGroupID,
			WOL.Fin_Period,
			MAX(WOL.Exchange_Rate),
			WOL.CurrencyId
		FROM 
			#I_WO_LABOUR WOL 
 				INNER JOIN #I_WO_HEADER WOH ON  WOL.External_Source_Id = WOH.External_Source_Id
 				LEFT JOIN EMPLOYEE E ON E.Employee_ID = WOL.EmployeeId
		 WHERE WOL.Task_Operation_Labour_Id IS NULL
		 GROUP BY
			WOL.Task_Operation_Id ,
			WOL.Task_Operation_Labour_Id,
			WOL.EmployeeId,
			WOL.WorkGroupId,
			WOL.CostCentreID,
			WOL.CostBearerID,
			--WOL.ExpenseElementID,
			WOL.Fin_Period,
			WOL.CurrencyId,
			WOL.LabourActivityId	
	END  	
	
END
 
--IF @ManualEntryActualsMisc <> 3
BEGIN

	-- DO NOT UPDATE Planned if Plan details is not supplied in the XML.
	UPDATE WOH
		SET UpdatePlannedMisc = 0
	FROM 
		#I_WO_HEADER WOH 
	WHERE EXISTS (
			SELECT Planned_Total_Sell FROM #I_WO_MISC WOM
			WHERE 
				WOM.External_Source_Id = WOH.External_Source_Id 
				AND (Planned_Total_Sell IS NULL)
	)
	
	--SET ALL EXISTING ACTUAL COST TO ZERO
	UPDATE TOM
	SET 			 
		TOM.Actual_Sell = CASE WHEN @ManualEntryActualsMisc <> 3 THEN 0	ELSE TOM.Actual_Sell END,
		TOM.ActualCost =  CASE WHEN @ManualEntryActualsMisc <> 3 THEN 0	ELSE TOM.ActualCost END,
		TOM.Planned_Sell = CASE WHEN WOH.UpdatePlannedMisc = 0 THEN TOM.Planned_Sell ELSE 0 END
	FROM 
		TASK_OPERATION_MISC TOM
		INNER JOIN TASK_OPERATION TOPER ON TOPER.Task_Operation_Id = TOM.Task_Operation_Id
		INNER JOIN #I_WO_HEADER WOH ON  WOH.Task_Id = TOPER.Task_Id
	
	-- WorkgroupSite
	UPDATE WOP
		SET WOP.Work_Group_Site  =  CASE WHEN ISNULL(T.Site_Id ,0) <> 0 THEN WO_SITE.Site
									ELSE S.Site
									END 												
	FROM 
		#I_WO_HEADER WOH 
		INNER JOIN #I_WO_MISC WOP ON WOP.External_Source_Id = WOH.External_Source_Id
		--LEFT JOIN WORK_GROUP WG ON WG.Work_Group_Code = WOP.Work_Group 			
		INNER JOIN TASK T ON T.Task_ID = WOH.Task_Id
		LEFT JOIN tblSites WO_SITE ON WO_SITE.SiteId = T.Site_Id
		INNER JOIN tblEqpPlans E ON E.EqpPlanId = T.Eqp_Plan_ID
		LEFT JOIN tblFleets F ON F.FleetId = E.FleetId
		LEFT JOIN tblSites S ON S.SiteId = F.SiteId
	WHERE ISNULL(WOP.Work_Group_Site,'') = '' AND @OpEditionMiscWG <> 3 AND ISNULL(WOP.Work_Group,'')  <> ''   		 			
	
	--Add MiscCategory
	INSERT INTO MISC_CATEGORY(Misc_Category)
	SELECT 
		DISTINCT  WOM.Misc_Category
	FROM 
		#I_WO_HEADER WOH 
		INNER JOIN #I_WO_MISC WOM ON WOM.External_Source_Id = WOH.External_Source_Id
		LEFT JOIN MISC_CATEGORY MC ON MC.Misc_Category = WOM.Misc_Category
 	WHERE MC.Misc_Category_Id IS NULL   AND ISNULL(WOM.Misc_Category,'') <> '' 
 	
 	--ADD Supplier
	INSERT INTO SUPPLIER(Supplier_Name,Last_Mod_By_User_Id,Last_Mod_Date,Create_By_User_Id,Create_Date)
	SELECT 
		DISTINCT WOM.Supplier_Code,@UserId,@CurrDate,@UserId,@CurrDate
	FROM 
		#I_WO_HEADER WOH 
		INNER JOIN #I_WO_MISC WOM ON WOM.External_Source_Id = WOH.External_Source_Id
		LEFT JOIN SUPPLIER S ON WOM.Supplier_Code = S.Supplier_Name
	 WHERE S.Supplier_Id IS NULL  AND ISNULL(WOM.Supplier_Code,'') <> '' 
	 
	--ADD WorkGroup (Dont add if Employee Id is Specified)
	INSERT INTO WORK_GROUP(Description, Site_ID, Work_Group_Code,Create_By_User_ID,Last_Mod_By_User_ID)			 
	SELECT 
		DISTINCT  WOM.Work_Group, S.SiteId, WOM.Work_Group,@UserId,@UserId
	FROM 
		#I_WO_HEADER WOH 
		INNER JOIN #I_WO_MISC WOM ON WOM.External_Source_Id = WOH.External_Source_Id
		LEFT JOIN (SELECT WG.Work_Group_ID,S.Site,WG.Work_Group_Code FROM WORK_GROUP WG INNER JOIN tblSites S ON S.SiteId = WG.Site_ID) WGS
				ON WGS.Work_Group_Code = WOM.Work_Group AND WGS.Site = WOM.Work_Group_Site
		INNER JOIN tblSites S ON S.Site = WOM.Work_Group_Site
	WHERE WGS.Work_Group_ID IS NULL  AND ISNULL(WOM.Work_Group,'') <> ''  AND @OpEditionMiscWG <> 3
 
 	--ADD Cost_Centre
	INSERT INTO COST_CENTRE(Cost_Centre_Code, Cost_Centre_Desc,Create_By_User_ID,Last_Mod_By_User_ID)			 
		SELECT 
			DISTINCT  WOM.Cost_Centre,WOM.Cost_Centre ,@UserId,@UserId
		FROM 
			#I_WO_HEADER WOH 
			INNER JOIN  #I_WO_MISC  WOM ON WOM.External_Source_Id = WOH.External_Source_Id
			LEFT JOIN COST_CENTRE CC ON WOM.Cost_Centre = CC.Cost_Centre_Code
		WHERE CC.Cost_Centre_ID IS NULL AND ISNULL(WOM.Cost_Centre,'') <> '' AND @OpEditionMiscCC <> 3
 
	--ADD Cost_EXPENSE
	INSERT INTO COST_EXPENSE(Cost_Expense_Code, Cost_Expense_Desc ,Create_By_User_ID,Last_Mod_By_User_ID)			 
		SELECT 
			DISTINCT  WOM.Expense_Element,WOM.Expense_Element ,@UserId,@UserId
		FROM 
			#I_WO_HEADER WOH 
			INNER JOIN  #I_WO_MISC  WOM ON WOM.External_Source_Id = WOH.External_Source_Id
			LEFT JOIN COST_EXPENSE CC ON WOM.Expense_Element = CC.Cost_Expense_Code
		WHERE CC.Cost_Expense_ID IS NULL AND ISNULL(WOM.Expense_Element,'') <> '' AND @OpEditionMiscEE <> 3
		
	--STEP 1: Does External_Seg_Id + Misc_Category + Supplier_Code match an existing OPERATION_MISC record? If so, this is the record to be updated.
	--STEP 2: Does Misc_Category + Supplier_Code match an existing OPERATION_MISC record? If so, this is the record to be updated (if more than 1, choose the one in the LOWEST Operation).
	--STEP 3: Otherwise, a new OPERATION_MISC record must be ADDED
	UPDATE WOM
		SET WOM.Task_Operation_Id = ISNULL(T.Task_Operation_Id, STEP0.Task_Operation_Id),
			WOM.CostBearerId = CB.CostBearerId,
			WOM.CostCentreId = CC.Cost_Centre_ID,
			WOM.WorkGroupId = WGS.Work_Group_ID,
			WOM.ExpenseElementID = CE.Cost_Expense_ID,
			WOM.CurrencyId = C.CurrencyID,
			WOM.MiscCategoryId = MC.Misc_Category_Id,
			WOM.SupplierId = S.Supplier_Id			
	FROM #I_WO_MISC WOM
		INNER JOIN #I_WO_HEADER WOH ON  WOM.External_Source_Id = WOH.External_Source_Id			
		LEFT JOIN (
		SELECT  
			 TOPER.Task_Id, (TOPER.Task_Operation_Id)  
		FROM
			TASK_OPERATION TOPER	
			INNER JOIN (
				SELECT 	T.Task_Id, MIN(T.SortOrder) AS SortOrder FROM TASK_OPERATION T GROUP BY T.Task_Id )
				 MINOP ON MINOP.Task_Id = TOPER.Task_Id AND MINOP.SortOrder = TOPER.SortOrder	 
		)  STEP0 ON STEP0.Task_Id = WOH.Task_Id  
		LEFT JOIN TASK_OPERATION T ON T.Task_Operation_Id = ISNULL(WOM.External_Seg_Id ,0) AND T.Task_Id = WOH.Task_Id
 		LEFT JOIN tblCostBearers CB ON CB.WO_Code = WOM.Cost_Bearer	AND  @OpEditionMiscCB <> 3	
		LEFT JOIN COST_CENTRE CC ON CC.Cost_Centre_Code = WOM.Cost_Centre AND  @OpEditionMiscCC <> 3 		
		LEFT JOIN COST_EXPENSE CE ON CE.Cost_Expense_Code = WOM.Expense_Element AND  @OpEditionMiscEE <> 3
		LEFT JOIN SUPPLIER S ON S.Supplier_Name  = WOM.Supplier_Code
		LEFT JOIN tblCurrencies C ON C.Currency = WOM.Currency
		LEFT JOIN MISC_CATEGORY MC ON MC.Misc_Category = WOM.Misc_Category
 		LEFT JOIN 
 			(SELECT WG.Work_Group_ID,S.Site,WG.Work_Group_Code FROM WORK_GROUP WG INNER JOIN tblSites S ON S.SiteId = WG.Site_ID) WGS 
 			ON WGS.Site = WOM.Work_Group_Site AND WGS.Work_Group_Code = WOM.Work_Group AND  @OpEditionMiscWG <> 3
 			
	IF @UseExpenseElementAsKey = 1 
	BEGIN
		
						
		UPDATE WOM
			SET 
  				WOM.Task_Operation_Misc_Id = STEP1.Task_Operation_Misc_Id
		FROM #I_WO_MISC WOM
			INNER JOIN #I_WO_HEADER WOH ON  WOM.External_Source_Id = WOH.External_Source_Id
			LEFT JOIN (
			SELECT 
				TOMISC.Task_Operation_Id , 
				TOMISC.Supplier_Id,
				TOMISC.Misc_Category_Id,
				TOMISC.WorkGroupID,
				TOMISC.CostBearerID,
				TOMISC.CostCentreID,
				TOMISC.ExpenseElementID,
				TOMISC.CurrencyId,
				TOMISc.FinPeriod,
				MIN(TOMISC.Task_Operation_Misc_Id)	AS Task_Operation_Misc_Id
			FROM
				TASK_OPERATION_MISC TOMISC
					INNER JOIN TASK_OPERATION TOPER ON TOPER.Task_Operation_Id = TOMISC.Task_Operation_Id
					INNER JOIN #I_WO_HEADER WOH ON  WOH.Task_Id = TOPER.Task_Id
			GROUP BY 		
				TOMISC.Task_Operation_Id , 
				TOMISC.Supplier_Id,
				TOMISC.Misc_Category_Id,
				TOMISC.WorkGroupID,
				TOMISC.CostBearerID,
				TOMISC.CostCentreID,
				TOMISC.ExpenseElementID,
				TOMISC.CurrencyId,
				TOMISC.FinPeriod
			)  STEP1 ON STEP1.Task_Operation_Id = WOM.Task_Operation_Id 
						AND ISNULL(STEP1.Supplier_Id,0) = ISNULL(WOM.SupplierId,0)
						AND ISNULL(STEP1.Misc_Category_Id,0) = ISNULL(WOM.MiscCategoryId,0)
						AND ISNULL(STEP1.WorkGroupID,0) = ISNULL(WOM.WorkGroupID,0)
						AND ISNULL(STEP1.CostBearerID,0) = ISNULL(WOM.CostBearerID,0)
						AND ISNULL(STEP1.CostCentreID,0) = ISNULL(WOM.CostCentreID,0)
						AND ISNULL(STEP1.ExpenseElementID,0) = ISNULL(WOM.ExpenseElementID,0)	
						AND ISNULL(STEP1.CurrencyId,0) = ISNULL(WOM.CurrencyId,0)	
						AND ISNULL(STEP1.FinPeriod,0) = ISNULL(WOM.Fin_Period,0)					
		
		UPDATE TOMISC1
				 SET TOMISC1.FinPeriod = FQ2.Fin_Period
			 FROM TASK_OPERATION_MISC TOMISC1 
				INNER JOIN (	
				SELECT 
					DISTINCT TOMISC.Task_Operation_Misc_Id,
							TOMISC.Task_Operation_Id , 
							TOMISC.Supplier_Id,
							TOMISC.Misc_Category_Id,
							TOMISC.WorkGroupID,
							TOMISC.CostBearerID,
							TOMISC.CostCentreID,
							TOMISC.ExpenseElementID,
							TOMISC.CurrencyId,
							TOMISc.FinPeriod,
							ROW_NUMBER() OVER (PARTITION BY 
														TOMISC.Task_Operation_Id , 
														TOMISC.Supplier_Id,
														TOMISC.Misc_Category_Id,
														TOMISC.WorkGroupID,
														TOMISC.CostBearerID,
														TOMISC.CostCentreID,
														TOMISC.ExpenseElementID,
														TOMISC.CurrencyId 
															 
														ORDER BY
																TOMISC.FinPeriod, TOMISC.Task_Operation_Misc_Id ) AS RId 
			FROM
				TASK_OPERATION_MISC TOMISC
					INNER JOIN TASK_OPERATION TOPER ON TOPER.Task_Operation_Id = TOMISC.Task_Operation_Id
					INNER JOIN #I_WO_HEADER WOH ON  WOH.Task_Id = TOPER.Task_Id			 	
				WHERE NOT EXISTS (SELECT M.Task_Operation_Misc_Id FROM #I_WO_MISC M WHERE ISNULL(M.Task_Operation_Misc_Id,0) = TOMISC.Task_Operation_Misc_Id )					 					 
				) FQ1 ON FQ1.Task_Operation_Misc_Id = TOMISC1.Task_Operation_Misc_Id 
				INNER JOIN 
				(
				SELECT 
 						M.Task_Operation_Id ,  						 
						M.SupplierId,
						M.MiscCategoryId,
						M.WorkGroupID,
						M.CostBearerID,
						M.CostCentreID,
						M.ExpenseElementID,
						M.CurrencyId,
						M.Fin_Period,
										 ROW_NUMBER() OVER (PARTITION BY 
 												M.Task_Operation_Id ,  						 
												M.SupplierId,
												M.MiscCategoryId,
												M.WorkGroupID,
												M.CostBearerID,
												M.CostCentreID,
												M.ExpenseElementID,
												M.CurrencyId												 
												ORDER BY M.Fin_Period 
											) AS RId
						FROM #I_WO_MISC M 
							INNER JOIN #I_WO_HEADER WOH ON  M.External_Source_Id = WOH.External_Source_Id
						WHERE ISNULL(M.Task_Operation_Misc_Id,0) = 0
						GROUP BY
							M.Task_Operation_Id , 
							M.SupplierId,
							M.MiscCategoryId,
							M.WorkGroupID,
							M.CostBearerID,
							M.CostCentreID,
							M.ExpenseElementID,
							M.CurrencyId,
							M.Fin_Period
				)
				FQ2 ON 
							FQ1.Task_Operation_Id = FQ2.Task_Operation_Id 
						AND ISNULL(FQ1.Supplier_Id,0) = ISNULL(FQ2.SupplierId,0)
						AND ISNULL(FQ1.Misc_Category_Id,0) = ISNULL(FQ2.MiscCategoryId,0)
						AND ISNULL(FQ1.WorkGroupID,0) = ISNULL(FQ2.WorkGroupID,0)
						AND ISNULL(FQ1.CostBearerID,0) = ISNULL(FQ2.CostBearerID,0)
						AND ISNULL(FQ1.CostCentreID,0) = ISNULL(FQ2.CostCentreID,0)
						AND ISNULL(FQ1.ExpenseElementID,0) = ISNULL(FQ2.ExpenseElementID,0)	
						AND ISNULL(FQ1.CurrencyId,0) = ISNULL(FQ2.CurrencyId,0)	
						AND ISNULL(FQ1.RId,0) = ISNULL(FQ2.RId,0)
		
		UPDATE WOM
			SET 
  				WOM.Task_Operation_Misc_Id = STEP1.Task_Operation_Misc_Id
		FROM #I_WO_MISC WOM
			INNER JOIN #I_WO_HEADER WOH ON  WOM.External_Source_Id = WOH.External_Source_Id
			LEFT JOIN (
			SELECT 
				TOMISC.Task_Operation_Id , 
				TOMISC.Supplier_Id,
				TOMISC.Misc_Category_Id,
				TOMISC.WorkGroupID,
				TOMISC.CostBearerID,
				TOMISC.CostCentreID,
				TOMISC.ExpenseElementID,
				TOMISC.CurrencyId,
				TOMISc.FinPeriod,
				MIN(TOMISC.Task_Operation_Misc_Id)	AS Task_Operation_Misc_Id
			FROM
				TASK_OPERATION_MISC TOMISC
					INNER JOIN TASK_OPERATION TOPER ON TOPER.Task_Operation_Id = TOMISC.Task_Operation_Id
					INNER JOIN #I_WO_HEADER WOH ON  WOH.Task_Id = TOPER.Task_Id
			GROUP BY 		
				TOMISC.Task_Operation_Id , 
				TOMISC.Supplier_Id,
				TOMISC.Misc_Category_Id,
				TOMISC.WorkGroupID,
				TOMISC.CostBearerID,
				TOMISC.CostCentreID,
				TOMISC.ExpenseElementID,
				TOMISC.CurrencyId,
				TOMISC.FinPeriod
			)  STEP1 ON STEP1.Task_Operation_Id = WOM.Task_Operation_Id 
						AND ISNULL(STEP1.Supplier_Id,0) = ISNULL(WOM.SupplierId,0)
						AND ISNULL(STEP1.Misc_Category_Id,0) = ISNULL(WOM.MiscCategoryId,0)
						AND ISNULL(STEP1.WorkGroupID,0) = ISNULL(WOM.WorkGroupID,0)
						AND ISNULL(STEP1.CostBearerID,0) = ISNULL(WOM.CostBearerID,0)
						AND ISNULL(STEP1.CostCentreID,0) = ISNULL(WOM.CostCentreID,0)
						AND ISNULL(STEP1.ExpenseElementID,0) = ISNULL(WOM.ExpenseElementID,0)	
						AND ISNULL(STEP1.CurrencyId,0) = ISNULL(WOM.CurrencyId,0)	
						AND ISNULL(STEP1.FinPeriod,0) = ISNULL(WOM.Fin_Period,0)					
		
 		UPDATE TOMISC
			SET  
			TOMISC.Misc_Category_Id = WOM.MiscCategoryId,	
			TOMISC.Supplier_Id = WOM.SupplierId,	
			TOMISC.CostBearerID = CASE WHEN @OpEditionMiscCB <> 3 THEN WOM.CostBearerId ELSE TOMISC.CostBearerID END,
			TOMISC.CostCentreID = CASE WHEN @OpEditionMiscCC <> 3 THEN WOM.CostCentreID ELSE TOMISC.CostCentreID END,
			TOMISC.ExpenseElementID = CASE WHEN @OpEditionMiscEE <> 3 THEN WOM.ExpenseElementID ELSE TOMISC.ExpenseElementID END,
			TOMISC.WorkgroupID = CASE WHEN @OpEditionMiscWG <> 3 THEN WOM.WorkgroupID ELSE TOMISC.WorkgroupID END ,
			TOMISC.FinPeriod = WOM.Fin_Period,
			--TOMISC.Task_Operation_Misc_Desc = WOM.[Description],
			TOMISC.ExchangeRate = WOM.Exchange_Rate,
			TOMISC.CurrencyId = WOM.CurrencyId,
			TOMISC.Last_Mod_By_User_ID = @UserId,
			TOMISC.Last_Mod_Date = @CurrDate, 
			TOMISC.Actual_Sell = CASE WHEN @ManualEntryActualsMisc <> 3 THEN WOM.Total_Sell ELSE TOMISC.Actual_Sell END,
			TOMISC.ActualCost =  CASE WHEN @ManualEntryActualsMisc <> 3 THEN WOM.Total_Cost ELSE TOMISC.ActualCost END,
			TOMISC.Planned_Sell = CASE WHEN WOM.UpdatePlannedMisc = 0 THEN TOMISC.Planned_Sell ELSE WOM.Total_Planned_Sell END
		FROM 
			TASK_OPERATION_MISC TOMISC
 				INNER JOIN (
 						SELECT 
 						M.Task_Operation_Id , 
 						M.Task_Operation_Misc_Id,
						M.SupplierId,
						M.MiscCategoryId,
						M.WorkGroupID,
						M.CostBearerID,
						M.CostCentreID,
						M.ExpenseElementID,
						M.CurrencyId,
						M.Fin_Period,
						WOH.UpdatePlannedMisc,
						MAX(M.[Description]) AS [Description],
						SUM(M.Total_Cost) AS Total_Cost,
						SUM(M.Total_Sell) AS Total_Sell,
						MAX(M.Exchange_Rate) AS Exchange_Rate,
						SUM(M.Planned_Total_Sell) AS Total_Planned_Sell
						FROM #I_WO_MISC M 
							INNER JOIN #I_WO_HEADER WOH ON  M.External_Source_Id = WOH.External_Source_Id
						GROUP BY
							M.Task_Operation_Id , 
							M.Task_Operation_Misc_Id,
							M.SupplierId,
							M.MiscCategoryId,
							M.WorkGroupID,
							M.CostBearerID,
							M.CostCentreID,
							M.ExpenseElementID,
							M.CurrencyId,
							M.Fin_Period,
							WOH.UpdatePlannedMisc
 						) WOM ON WOM.Task_Operation_Misc_Id = TOMISC.Task_Operation_Misc_Id   	
	 
 		--STEP 3: Otherwise, a new OPERATION_PART record must be ADDED
		INSERT INTO TASK_OPERATION_MISC(			
				Task_Operation_Id,
				Task_Operation_Misc_Desc,
				Misc_Category_Id,
				Strategy_Sell,
				Planned_Sell,			
				Actual_Sell,
				ActualCost,
				Include_In_Total,
				Notes,
				Supplier_Id,
				Last_Mod_By_User_ID,
				Last_Mod_Date,
				Create_By_User_ID,
				Create_Date,
				IsEditable,
				CostBearerID,
				CostCentreID,
				ExpenseElementID,
				WorkgroupID,
				FinPeriod,
				ExchangeRate,
				CurrencyId
				)
			SELECT
				WOM.Task_Operation_Id,
				CASE WHEN LTRIM(RTRIM(ISNULL(MAX(WOM.[Description]),''))) = '' THEN MAX(TOPER.Task_Operation) ELSE MAX(WOM.[Description]) END   AS Task_Operation_Misc_Desc,
				WOM.MiscCategoryId,
				0,
				SUM(ISNULL(WOM.Planned_Total_Sell,0)) AS Planned_Total_Sell,			
				CASE WHEN @ManualEntryActualsMisc <> 3 THEN SUM(WOM.Total_Sell) ELSE 0 END,
				CASE WHEN @ManualEntryActualsMisc <> 3 THEN SUM(WOM.Total_Cost) ELSE 0 END AS ActualCost,
				0,
				'',
				WOM.SupplierId,
				@UserId AS Last_Mod_By_User_ID,
				@CurrDate AS Last_Mod_Date,
				@UserId AS Create_By_User_ID,
				@CurrDate AS Create_Date,
				1,
				CASE WHEN @OpEditionMiscCB <> 3 THEN WOM.CostBearerID ELSE NULL END AS CostBearerID,
				CASE WHEN @OpEditionMiscCC <> 3 THEN WOM.CostCentreID ELSE NULL END AS CostCentreID,
				CASE WHEN @OpEditionMiscEE <> 3 THEN WOM.ExpenseElementID ELSE NULL END AS ExpenseElementID,
				CASE WHEN @OpEditionMiscWG <> 3 THEN WOM.WorkgroupID ELSE NULL END AS WorkgroupID ,
				WOM.Fin_Period,
				MAX(WOM.Exchange_Rate),
				WOM.CurrencyID

			FROM 
				#I_WO_MISC WOM
 					INNER JOIN #I_WO_HEADER WOH ON  WOM.External_Source_Id = WOH.External_Source_Id		
 					INNER JOIN TASK_OPERATION TOPER ON TOPER.Task_Operation_Id = WOM.Task_Operation_Id		 
	 		WHERE WOM.Task_Operation_Misc_Id IS NULL			
			GROUP BY
				WOM.Task_Operation_Id , 
				WOM.Task_Operation_Misc_Id,
				WOM.SupplierId,
				WOM.MiscCategoryId,
				WOM.WorkGroupID,
				WOM.CostBearerID,
				WOM.CostCentreID,
				WOM.ExpenseElementID,
				WOM.CurrencyId,
				WOM.Fin_Period
					
	END
	ELSE
	BEGIN
		
		UPDATE WOM
			SET 
  				WOM.Task_Operation_Misc_Id = STEP1.Task_Operation_Misc_Id
		FROM #I_WO_MISC WOM
			INNER JOIN #I_WO_HEADER WOH ON  WOM.External_Source_Id = WOH.External_Source_Id
			LEFT JOIN (
			SELECT 
				TOMISC.Task_Operation_Id , 
				TOMISC.Supplier_Id,
				TOMISC.Misc_Category_Id,
				TOMISC.WorkGroupID,
				TOMISC.CostBearerID,
				TOMISC.CostCentreID,
				--TOMISC.ExpenseElementID,
				TOMISC.CurrencyId,
				TOMISc.FinPeriod,
				MIN(TOMISC.Task_Operation_Misc_Id)	AS Task_Operation_Misc_Id
			FROM
				TASK_OPERATION_MISC TOMISC
					INNER JOIN TASK_OPERATION TOPER ON TOPER.Task_Operation_Id = TOMISC.Task_Operation_Id
					INNER JOIN #I_WO_HEADER WOH ON  WOH.Task_Id = TOPER.Task_Id
			GROUP BY 		
				TOMISC.Task_Operation_Id , 
				TOMISC.Supplier_Id,
				TOMISC.Misc_Category_Id,
				TOMISC.WorkGroupID,
				TOMISC.CostBearerID,
				TOMISC.CostCentreID,
			--	TOMISC.ExpenseElementID,
				TOMISC.CurrencyId,
				TOMISC.FinPeriod
			)  STEP1 ON STEP1.Task_Operation_Id = WOM.Task_Operation_Id 
						AND ISNULL(STEP1.Supplier_Id,0) = ISNULL(WOM.SupplierId,0)
						AND ISNULL(STEP1.Misc_Category_Id,0) = ISNULL(WOM.MiscCategoryId,0)
						AND ISNULL(STEP1.WorkGroupID,0) = ISNULL(WOM.WorkGroupID,0)
						AND ISNULL(STEP1.CostBearerID,0) = ISNULL(WOM.CostBearerID,0)
						AND ISNULL(STEP1.CostCentreID,0) = ISNULL(WOM.CostCentreID,0)
						--AND ISNULL(STEP1.ExpenseElementID,0) = ISNULL(WOM.ExpenseElementID,0)	
						AND ISNULL(STEP1.CurrencyId,0) = ISNULL(WOM.CurrencyId,0)	
						AND ISNULL(STEP1.FinPeriod,0) = ISNULL(WOM.Fin_Period,0)	
		
		UPDATE TOMISC1
				 SET TOMISC1.FinPeriod = FQ2.Fin_Period
			 FROM TASK_OPERATION_MISC TOMISC1 
				INNER JOIN (	
				SELECT 
				DISTINCT TOMISC.Task_Operation_Misc_Id,
				TOMISC.Task_Operation_Id , 
				TOMISC.Supplier_Id,
				TOMISC.Misc_Category_Id,
				TOMISC.WorkGroupID,
				TOMISC.CostBearerID,
				TOMISC.CostCentreID,
				--TOMISC.ExpenseElementID,
				TOMISC.CurrencyId,
				TOMISc.FinPeriod,
				ROW_NUMBER() OVER (PARTITION BY 
															TOMISC.Task_Operation_Id , 
															TOMISC.Supplier_Id,
															TOMISC.Misc_Category_Id,
															TOMISC.WorkGroupID,
															TOMISC.CostBearerID,
															TOMISC.CostCentreID,
											--				TOMISC.ExpenseElementID,
															TOMISC.CurrencyId 
														 
													ORDER BY
															TOMISC.FinPeriod ,TOMISC.Task_Operation_Misc_Id) AS RId 
															
				 
			FROM
				TASK_OPERATION_MISC TOMISC
					INNER JOIN TASK_OPERATION TOPER ON TOPER.Task_Operation_Id = TOMISC.Task_Operation_Id
					INNER JOIN #I_WO_HEADER WOH ON  WOH.Task_Id = TOPER.Task_Id
		 		WHERE NOT EXISTS (SELECT M.Task_Operation_Misc_Id FROM #I_WO_MISC M WHERE ISNULL(M.Task_Operation_Misc_Id,0) = TOMISC.Task_Operation_Misc_Id )
					 					 
				) FQ1 ON FQ1.Task_Operation_Misc_Id = TOMISC1.Task_Operation_Misc_Id 
				INNER JOIN 
				(
				SELECT 
 						M.Task_Operation_Id , 
 						 
						M.SupplierId,
						M.MiscCategoryId,
						M.WorkGroupID,
						M.CostBearerID,
						M.CostCentreID,
					--	M.ExpenseElementID,
						M.CurrencyId,
						M.Fin_Period,
										 ROW_NUMBER() OVER (PARTITION BY 
 												M.Task_Operation_Id , 
 						 
												M.SupplierId,
												M.MiscCategoryId,
												M.WorkGroupID,
												M.CostBearerID,
												M.CostCentreID,
							--					M.ExpenseElementID,
												M.CurrencyId												 
												ORDER BY M.Fin_Period 
											) AS RId
						FROM #I_WO_MISC M 
							INNER JOIN #I_WO_HEADER WOH ON  M.External_Source_Id = WOH.External_Source_Id
						WHERE ISNULL(M.Task_Operation_Misc_Id,0) = 0
						GROUP BY
							M.Task_Operation_Id , 							
							M.SupplierId,
							M.MiscCategoryId,
							M.WorkGroupID,
							M.CostBearerID,
							M.CostCentreID,
				--			M.ExpenseElementID,
							M.CurrencyId,
							M.Fin_Period
				)
				FQ2 ON 
							FQ1.Task_Operation_Id = FQ2.Task_Operation_Id 
						AND ISNULL(FQ1.Supplier_Id,0) = ISNULL(FQ2.SupplierId,0)
						AND ISNULL(FQ1.Misc_Category_Id,0) = ISNULL(FQ2.MiscCategoryId,0)
						AND ISNULL(FQ1.WorkGroupID,0) = ISNULL(FQ2.WorkGroupID,0)
						AND ISNULL(FQ1.CostBearerID,0) = ISNULL(FQ2.CostBearerID,0)
						AND ISNULL(FQ1.CostCentreID,0) = ISNULL(FQ2.CostCentreID,0)
				--		AND ISNULL(FQ1.ExpenseElementID,0) = ISNULL(FQ2.ExpenseElementID,0)	
						AND ISNULL(FQ1.CurrencyId,0) = ISNULL(FQ2.CurrencyId,0)	
						AND ISNULL(FQ1.RId,0) = ISNULL(FQ2.RId,0)						
		
		UPDATE WOM
			SET 
  				WOM.Task_Operation_Misc_Id = STEP1.Task_Operation_Misc_Id
		FROM #I_WO_MISC WOM
			INNER JOIN #I_WO_HEADER WOH ON  WOM.External_Source_Id = WOH.External_Source_Id
			LEFT JOIN (
			SELECT 
				TOMISC.Task_Operation_Id , 
				TOMISC.Supplier_Id,
				TOMISC.Misc_Category_Id,
				TOMISC.WorkGroupID,
				TOMISC.CostBearerID,
				TOMISC.CostCentreID,
				--TOMISC.ExpenseElementID,
				TOMISC.CurrencyId,
				TOMISc.FinPeriod,
				MIN(TOMISC.Task_Operation_Misc_Id)	AS Task_Operation_Misc_Id
			FROM
				TASK_OPERATION_MISC TOMISC
					INNER JOIN TASK_OPERATION TOPER ON TOPER.Task_Operation_Id = TOMISC.Task_Operation_Id
					INNER JOIN #I_WO_HEADER WOH ON  WOH.Task_Id = TOPER.Task_Id
			GROUP BY 		
				TOMISC.Task_Operation_Id , 
				TOMISC.Supplier_Id,
				TOMISC.Misc_Category_Id,
				TOMISC.WorkGroupID,
				TOMISC.CostBearerID,
				TOMISC.CostCentreID,
			--	TOMISC.ExpenseElementID,
				TOMISC.CurrencyId,
				TOMISC.FinPeriod
			)  STEP1 ON STEP1.Task_Operation_Id = WOM.Task_Operation_Id 
						AND ISNULL(STEP1.Supplier_Id,0) = ISNULL(WOM.SupplierId,0)
						AND ISNULL(STEP1.Misc_Category_Id,0) = ISNULL(WOM.MiscCategoryId,0)
						AND ISNULL(STEP1.WorkGroupID,0) = ISNULL(WOM.WorkGroupID,0)
						AND ISNULL(STEP1.CostBearerID,0) = ISNULL(WOM.CostBearerID,0)
						AND ISNULL(STEP1.CostCentreID,0) = ISNULL(WOM.CostCentreID,0)
						--AND ISNULL(STEP1.ExpenseElementID,0) = ISNULL(WOM.ExpenseElementID,0)	
						AND ISNULL(STEP1.CurrencyId,0) = ISNULL(WOM.CurrencyId,0)	
						AND ISNULL(STEP1.FinPeriod,0) = ISNULL(WOM.Fin_Period,0)					
		
 		UPDATE TOMISC
			SET  
			TOMISC.Misc_Category_Id = WOM.MiscCategoryId,	
			TOMISC.Supplier_Id = WOM.SupplierId,	
			TOMISC.CostBearerID = CASE WHEN @OpEditionMiscCB <> 3 THEN WOM.CostBearerId ELSE TOMISC.CostBearerID END,
			TOMISC.CostCentreID = CASE WHEN @OpEditionMiscCC <> 3 THEN WOM.CostCentreID ELSE TOMISC.CostCentreID END,
			TOMISC.ExpenseElementID = CASE WHEN @OpEditionMiscEE <> 3 THEN CASE WHEN ISNULL(WOM.ExpenseElementID,0) = 0 THEN NULL ELSE ISNULL(WOM.ExpenseElementID,0) END ELSE TOMISC.ExpenseElementID END,
			TOMISC.WorkgroupID = CASE WHEN @OpEditionMiscWG <> 3 THEN WOM.WorkgroupID ELSE TOMISC.WorkgroupID END ,
			TOMISC.FinPeriod = WOM.Fin_Period,
			--TOMISC.Task_Operation_Misc_Desc = WOM.[Description],
			TOMISC.ExchangeRate = WOM.Exchange_Rate,
			TOMISC.CurrencyId = WOM.CurrencyId,
			TOMISC.Last_Mod_By_User_ID = @UserId,
			TOMISC.Last_Mod_Date = @CurrDate, 
			TOMISC.Actual_Sell = CASE WHEN @ManualEntryActualsMisc <> 3 THEN WOM.Total_Sell ELSE TOMISC.Actual_Sell END,
			TOMISC.ActualCost =  CASE WHEN @ManualEntryActualsMisc <> 3 THEN WOM.Total_Cost ELSE TOMISC.ActualCost END,
			TOMISC.Planned_Sell = CASE WHEN WOM.UpdatePlannedMisc = 0 THEN TOMISC.Planned_Sell ELSE WOM.Planned_Total_Sell END
		FROM 
			TASK_OPERATION_MISC TOMISC
 				INNER JOIN (
 						SELECT 
 						M.Task_Operation_Id , 
 						M.Task_Operation_Misc_Id,
						M.SupplierId,
						M.MiscCategoryId,
						M.WorkGroupID,
						M.CostBearerID,
						M.CostCentreID,
						MAX(ISNULL(M.ExpenseElementID,0)) AS ExpenseElementID,
						M.CurrencyId,
						M.Fin_Period,
						WOH.UpdatePlannedMisc,
						MAX(M.[Description]) AS [Description],
						SUM(M.Total_Cost) AS Total_Cost,
						SUM(M.Total_Sell) AS Total_Sell,
						MAX(M.Exchange_Rate) AS Exchange_Rate,
						SUM(M.Planned_Total_Sell) AS Planned_Total_Sell
						FROM #I_WO_MISC M 
							INNER JOIN #I_WO_HEADER WOH ON  M.External_Source_Id = WOH.External_Source_Id
						GROUP BY
							M.Task_Operation_Id , 
							M.Task_Operation_Misc_Id,
							M.SupplierId,
							M.MiscCategoryId,
							M.WorkGroupID,
							M.CostBearerID,
							M.CostCentreID,
							--M.ExpenseElementID,
							M.CurrencyId,
							M.Fin_Period,
							WOH.UpdatePlannedMisc
 						) WOM ON WOM.Task_Operation_Misc_Id = TOMISC.Task_Operation_Misc_Id   		 
	 
 		--STEP 3: Otherwise, a new OPERATION_PART record must be ADDED
		INSERT INTO TASK_OPERATION_MISC(			
				Task_Operation_Id,
				Task_Operation_Misc_Desc,
				Misc_Category_Id,
				Strategy_Sell,
				Planned_Sell,			
				Actual_Sell,
				ActualCost,
				Include_In_Total,
				Notes,
				Supplier_Id,
				Last_Mod_By_User_ID,
				Last_Mod_Date,
				Create_By_User_ID,
				Create_Date,
				IsEditable,
				CostBearerID,
				CostCentreID,
				ExpenseElementID,
				WorkgroupID,
				FinPeriod,
				ExchangeRate,
				CurrencyId
				)
			SELECT
				WOM.Task_Operation_Id,
				CASE WHEN LTRIM(RTRIM(ISNULL(MAX(WOM.[Description]),''))) = '' THEN MAX(TOPER.Task_Operation) ELSE MAX(WOM.[Description]) END   AS Task_Operation_Misc_Desc,
				WOM.MiscCategoryId,
				0,
				SUM(ISNULL(WOM.Planned_Total_Sell,0)) AS Planned_Total_Sell,			
				CASE WHEN @ManualEntryActualsMisc <> 3 THEN SUM(WOM.Total_Sell) ELSE 0 END,
				CASE WHEN @ManualEntryActualsMisc <> 3 THEN SUM(WOM.Total_Cost) ELSE 0 END AS ActualCost,
				0,
				'',
				WOM.SupplierId,
				@UserId AS Last_Mod_By_User_ID,
				@CurrDate AS Last_Mod_Date,
				@UserId AS Create_By_User_ID,
				@CurrDate AS Create_Date,
				1,
				CASE WHEN @OpEditionMiscCB <> 3 THEN WOM.CostBearerID ELSE NULL END AS CostBearerID,
				CASE WHEN @OpEditionMiscCC <> 3 THEN WOM.CostCentreID ELSE NULL END AS CostCentreID,
				CASE WHEN @OpEditionMiscEE <> 3 THEN CASE WHEN MAX(ISNULL(WOM.ExpenseElementID,0)) = 0 THEN NULL ELSE MAX(ISNULL(WOM.ExpenseElementID,0)) END  ELSE NULL END AS ExpenseElementID,
				CASE WHEN @OpEditionMiscWG <> 3 THEN WOM.WorkgroupID ELSE NULL END AS WorkgroupID ,
				WOM.Fin_Period,
				MAX(WOM.Exchange_Rate),
				WOM.CurrencyID

			FROM 
				#I_WO_MISC WOM
 					INNER JOIN #I_WO_HEADER WOH ON  WOM.External_Source_Id = WOH.External_Source_Id		
 					INNER JOIN TASK_OPERATION TOPER ON TOPER.Task_Operation_Id = WOM.Task_Operation_Id		 
	 		WHERE WOM.Task_Operation_Misc_Id IS NULL			
			GROUP BY
				WOM.Task_Operation_Id , 
				WOM.Task_Operation_Misc_Id,
				WOM.SupplierId,
				WOM.MiscCategoryId,
				WOM.WorkGroupID,
				WOM.CostBearerID,
				WOM.CostCentreID,
				--WOM.ExpenseElementID,
				WOM.CurrencyId,
				WOM.Fin_Period	
	END 		
						
					
END



DECLARE @TaskId VARCHAR(MAX)
SET @TaskId=''

SELECT @TaskId = (SELECT CAST(Task_Id AS varchar)+',' FROM
#I_WO_HEADER 
WHERE TASK_Id IS NOT NULL
FOR XML PATH('') )

SET @TaskId=ISNULL(@TaskId,'')
IF RIGHT(@TaskId,1)=',' SET @TaskId=LEFT(@TaskId,LEN(@TaskId)-1)

IF @TaskId <> ''
BEGIN
	EXEC WORKORDER_LABOUR_HRS_UPDATE_P @TaskId=@TaskId
	EXEC TASK_PARTS_READY_STATUS_UPDATE_P @TaskId=@TaskId	--AL: 06/04/10
	EXEC TASK_AUTO_CREATE_WO_P @TaskId=@TaskId
END

INSERT INTO IMPORT_ERROR(ImportFileName,Line_No,ErrorDescription,ImportErrorTypeId,LastModDate,ImportSourceId,ImportRecord)  
SELECT @ImportBatchName AS ImportFileName,CASE WHEN @InterfaceSource = 0 THEN Line_No END,ErrorDescription, 3 AS ImportErrorTypeId, GETDate() AS LastModDate,@InterfaceSource AS ImportSourceId,CONVERT(VARCHAR(MAX),ImportRecord) 
FROM #z_Message    
    
SELECT @nRecRejected =COUNT(DISTINCT Line_No) FROM #z_Message
SET @nRecUpdated = @TotalNumberofRecords - @nRecRejected

--SELECT * FROM #z_Message
 
--SELECT * FROM   #I_WO_HEADER
--SELECT * FROM  #I_WO_PART
--SELECT * FROM  #I_WO_LABOUR
--SELECT * FROM  #I_WO_MISC

DROP TABLE  #z_Message
DROP TABLE  #I_WO_HEADER
DROP TABLE  #I_WO_PART
DROP TABLE  #I_WO_LABOUR
DROP TABLE  #I_WO_MISC





GO


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[RPT_GENERIC_INTERFACE_LOG_P]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[RPT_GENERIC_INTERFACE_LOG_P]
GO

create   Procedure [dbo].[RPT_GENERIC_INTERFACE_LOG_P]
/******************************************************************************
	File: 
	Name: RPT_GENERIC_INTERFACE_LOG_P

	Called By: 

	Desc: 1. Selects IMPORT ERROR records
	      

	Auth: Koushik.Nagarajan	
	Date: 22-Apr-2009
*******************************************************************************
		Change History
*******************************************************************************
	Date:		Author:		Description:
	--------	--------	----------------------------------------
    18 Aug 11	TP			Mod: E619	
*******************************************************************************/
	/* Param List */
@StartDate datetime,
@EndDate datetime,
@ImportFileName varchar(2000)='%',
@ImportErrorTypeId varchar(MAX)=''
    
AS

Declare @sql varchar(MAX), @sqlParam varchar(MAX)

SET @ImportFileName=ISNULL(@ImportFileName,'')
SET @ImportFileName='%'+@ImportFileName+'%'

SET @sql =		'SELECT IE.ImportFileName, IET.ImportErrorType, IE.ErrorDescription, IE.LastModDate, IE.Line_No, IE.ImportRecord '
SET @sql = @sql+'FROM IMPORT_ERROR_TYPE AS IET INNER JOIN '
SET @sql = @sql+'IMPORT_ERROR AS IE ON IET.ImportErrorTypeId = IE.ImportErrorTypeId '
SET @sql = @sql+'WHERE (Convert(varchar, IE.LastModDate, 121) >= '+''''+Convert(varchar, @StartDate, 121)+''''+') AND '
SET @sql = @sql+	  '(Convert(varchar, IE.LastModDate, 121) <= '++''''+Convert(varchar, @EndDate, 121)+''''+') AND '
SET @sql = @sql+	  '(IE.ImportFileName LIKE '+''''+@ImportFileName+''''+') '

IF @ImportErrorTypeId<>''
BEGIN
	IF RIGHT(@ImportErrorTypeId,1)=',' 
		SET @ImportErrorTypeId=LEFT(@ImportErrorTypeId,LEN(@ImportErrorTypeId)-1)

	SET @sql = @sql+'AND IE.ImportErrorTypeId IN ('+@ImportErrorTypeId+') '
END 

SET @sql = @sql+'ORDER BY IE.LastModDate,IE.ImportFileName, IET.ImportErrorType, IE.ErrorDescription,IE.Line_No'
EXEC ( @sql );
 
GO

/****** Object:  StoredProcedure [dbo].[RPT_BUDGET_COST_WORKSHEET_P]    Script Date: 08/19/2011 13:05:09 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[RPT_BUDGET_COST_WORKSHEET_P]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[RPT_BUDGET_COST_WORKSHEET_P]
GO

/****** Object:  StoredProcedure [dbo].[RPT_BUDGET_COST_WORKSHEET_P]    Script Date: 08/19/2011 13:05:09 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


create Procedure [dbo].[RPT_BUDGET_COST_WORKSHEET_P]
/******************************************************************************
      File: 
      Name: RPT_BUDGET_COST_WORKSHEET_P

      Called By: 

      Desc: Get data for Budget Cost Worksheet Report
             

      Auth: Veronika Vasylyeva
      Date: 09-Oct-2003
*******************************************************************************
            Change History
*******************************************************************************
Date:       Author:         Description:
--------    --------		----------------------------------------
11 Aug 11   G Dhillon		#2305 :Do not return rows having zero value
02 Aug 11	K Nagarajan		#2220: Fixed Collation Issue
16 Jun 11   G Dhillon		fixed issue #1657
19 May 11	V Vasylyeva		#1315 - added @ShowPeriods
15 Oct 10   VS              #521 - modified column equip costcentre in temp table to varchar(max) 
23 Sep 10   VS              #292 & #294 enhancements - added strategy task description 
 2 Jul 10	V Vasylyeva		CR9009: Error Could not continue scan with NOLOCK due to data movement
							OR Error Attempt to fetch logical page (1:976) in database 2 failed.
26 Oct 09	AL				CR8421: Added new fields and analyse by
							CR8424: Fixed Manufacturer filter and Parent Eqp Analyse by
19 Sep 08   AL              Fixed @YearStartMonth
27 Jun 08   AL              Added @YearStartMonth
13 May 08   YS              Fixed Analyse By PEQP
05 May 08   YS              Added Analyse By PEQP
08 Apr 08   YS              Added Cost Category to Group By
03 Apr 08   AL              Now uses EQP_SIBLINGS_F 
26 Mar 08   YS              Added @CostCategoryId,@modifierID,@ActualProjected
07 Mar 08   YS				Added @EqpCostCentre,@ParentEquipmentID
06 Mar 08   YS				Transition of RadioButtonCollection to CheckBoxCollection
19 Jun 07   ID              Added Work Group
25 May 06   PJ				Increased size of component code field in temp table
23 May 06   PJ				Increased size of component code field in temp table
08 Feb 06   SI				New filters/group by/analyse Region, Division, Criticality, Equipment Classification, Equipment Group
20 Sep 05   V Vasylyeva		New group by: PLM, Component Code.
							New parameter: @TaskTypeID
17 May 04   V Vasylyeva		Task_Header_ID for ProjTask grouping
23 Oct 03   V Vasylyeva		Added Variance
21 Oct 03   V Vasylyeva		Added Order By
16 Oct 03   V Vasylyeva		Changed For 2 Scenarios
13 Oct 03   V Vasylyeva		Set NOCOUNT
13 Apr 04   H Singh         instead of "-" show "(NONE)"

*******************************************************************************/
      /* Param List */

    @DealerId int = 1,
    @BranchId varchar(MAX)='',
    @SiteID varchar(MAX)='',
    @FleetID varchar(MAX)='',     
    @EqpPlanID varchar(MAX)='',
    @Projection_Header_Id varchar(MAX)='1',
    @CostBearerID varchar(MAX)='1',
    @ModelId varchar(MAX) = '',
    @CostTypeID varchar(MAX) = '',
    @SystemID varchar(MAX) = '',     
    @SubSystemID varchar(MAX) = '',
    @ComponentCodeID varchar(MAX) = '',
    @ProjTaskId varchar(MAX) = '',
    @PartsLabourMisc int=0,
    @CostResponsibilityID varchar(MAX)='',
    @CostCentreID varchar(MAX)='',
    @CostActivityID varchar(MAX)='',
    @CostExpenseID varchar(MAX)='',
    @LabourActivityID varchar(MAX)='',
    @StartDate int = 200305,
    @EndDate int = 200309,
    @AnalyseBy varchar(10) = 'Monh',
    @GroupBy varchar(MAX)='BRAN,SITE,FLEE,EQPL,CTTY',
    @AnalyseVariance bit=0,
    @Name1 varchar(50)=NULL OUTPUT,
    @Name2 varchar(50)=NULL OUTPUT,
    @TaskTypeID varchar(MAX)='',
   
    @RegionId varchar(MAX)='',
    @DivisionId varchar(MAX)='',
    @CriticalityId varchar(MAX)='',
    @EqpClassId varchar(MAX)='',
    @EqpGroupId varchar(MAX)='',
    @EqpLocationId varchar(MAX)='',

    @EqpCategoryId varchar(MAX)='', --Added ID
	@WorkGroupId varchar(MAX)='',             --Added ID
	@EqpCostCentre varchar(MAX)='',     --Added ID
	@ParentEquipmentID varchar(MAX)='', --Added ID
	@CostCategoryId varchar(MAX)='',    --Added ID
	@modifierID varchar(MAX) = '',            --Added ID
	@ActualProjected int=3,
	@YearStartMonth int=0,   --AL: 27/06/08

	--AL: 22/10/09
	@ManufacturerID varchar(MAX)='', 
	@TaskCounterID varchar(MAX)='', 
	@TaskHeaderID varchar(MAX)='', 
	@CCActivity varchar(MAX)='',
	@CCLocation varchar(MAX)='',
	@CCResponsibility varchar(MAX)='',
	/*VV #1315*/
	@ShowPeriods bit=0,
	--GD  fixed issue #1657
	@IsCrossTab BIT =0
AS

----------------------------------------------------------------------------------------------------------------
SET NOCOUNT ON


-- Parts/Labour/Misc: ALL=0,PART=1,LABOUR=2,MISC=3
DECLARE @Where_Clause varchar(MAX)
DECLARE @Eqp_Where_Clause as varchar(MAX)
DECLARE @GroupBy1Clause1 varchar(MAX)
DECLARE @GroupBy1Clause2 varchar(MAX)
DECLARE @SQL varchar(MAX)
DECLARE @SQL1 varchar(MAX)
DECLARE @SQL2 varchar(MAX)
DECLARE @Column varchar(5)
DECLARE @Counter smallint
DECLARE @GroupBy1Col smallint
DECLARE @SelectColumns varchar(MAX)
DECLARE @GroupBy1ColMAX smallint
DECLARE @IncludeMissingCalenderPeriods varchar(10) 
DECLARE @AnalyseByFld varchar(50)
DECLARE @InsertIntoClause varchar(MAX)
DECLARE @GroupBy1  varchar(1000)
DECLARE @ShowInsteadOfNull varchar(10)
DECLARE @InclMissPerFields varchar(MAX)
DECLARE @Table varchar(4000)
DECLARE @GroupingByParentEqp bit

DECLARE @All int
DECLARE @Parts int
DECLARE @Labour int
DECLARE @Misc int
DECLARE @PLM bit

--GD  added to fix fixed issue #1657
DECLARE @SelectQueryForCrossTab VARCHAR(MAX)
DECLARE @OrderByCrossTab VARCHAR(MAX)

SET @SelectQueryForCrossTab=''
SET @OrderByCrossTab =''


SET @All=7
SET @Parts=1
SET @Labour=2
SET @Misc=4
SET @PLM=0

SET @GroupingByParentEqp=0

SET @ShowInsteadOfNull='(NONE)'

 --max number of columns in group by
SET @GroupBy1ColMAX=CASE @GroupBy
               WHEN 'YEAR' THEN 1
                 WHEN 'QRTR' THEN 1
                 WHEN 'MONH' THEN 1
               ELSE 5 
               END
SET @SQL1=''
SET @SQL2=''

--Set Parts/Labour/Misc to all if it is null
SET @PartsLabourMisc=ISNULL(@PartsLabourMisc,@All)

--Set the upper case
SET @AnalyseBy=UPPER(@AnalyseBy)
SET @GroupBy=UPPER(@GroupBy)

--Include missing calendar periods if AnalyseBy month, year or quater
SET @IncludeMissingCalenderPeriods=CASE @AnalyseBy
                     WHEN 'MONH' THEN 'MONH'
                     WHEN 'YEAR' THEN 'MONH'
                     WHEN 'QRTR' THEN 'MONH'
                     ELSE NULL END

--Where Close
      
SET @Where_Clause = ' WHERE (CalenderPeriod BETWEEN ' + Convert(varchar(6),@StartDate) + ' AND ' + Convert(varchar(6),@EndDate) + ')'

If @EqpPlanID <> '' SET @Where_Clause = @Where_Clause + ' AND EqpPlanID IN (' + @EqpPlanID + ' )'
If @FleetID <> '' SET @Where_Clause = @Where_Clause + ' AND FleetID IN (' + @FleetID + ' )'
If @SiteID <> '' SET @Where_Clause = @Where_Clause + ' AND SiteID IN (' + @SiteID + ' )'
If @BranchId <> '' SET @Where_Clause = @Where_Clause + ' AND BranchId IN (' + @BranchId + ' )'
If @DealerId > 0 SET @Where_Clause = @Where_Clause + ' AND DealerId = ' + Convert(varchar, @DealerId)
If @Projection_Header_Id <> '' SET @Where_Clause = @Where_Clause + ' AND Projection_Header_Id IN (' + @Projection_Header_Id + ')'
If @ProjTaskId <> ''
BEGIN

      SET @Where_Clause = @Where_Clause + ' AND ProjTaskID IN '
      SET @Where_Clause = @Where_Clause + ' ('
      SET @Where_Clause = @Where_Clause + ' SELECT projtaskid FROM tblprojtasks '
      SET @Where_Clause = @Where_Clause + ' WHERE componentcodeid in (SELECT componentcodeid FROM tblprojtasks WHERE projtaskid IN (' + @ProjTaskId + ')) '
      SET @Where_Clause = @Where_Clause + ' AND modifierid in (SELECT modifierid FROM tblprojtasks WHERE projtaskid IN  (' + @ProjTaskId + ')) '
      SET @Where_Clause = @Where_Clause + ' AND tasktypeid in (SELECT tasktypeid FROM tblprojtasks WHERE projtaskid IN (' + @ProjTaskId + ')) '
      SET @Where_Clause = @Where_Clause + ' AND applicationcodeid in (SELECT applicationcodeid FROM tblprojtasks WHERE projtaskid IN  (' + @ProjTaskId + ')) '
      SET @Where_Clause = @Where_Clause + ' ) '--     ProjTask= @ProjTaskId 
END
If @ModelId <> '' SET @Where_Clause = @Where_Clause + ' AND ModelId IN (' + @ModelId + ')'
If @CostTypeID <> '' SET @Where_Clause = @Where_Clause + ' AND CostTypeID IN (' + @CostTypeID + ')' 
If @SystemID <> '' SET @Where_Clause = @Where_Clause + ' AND SystemID IN (' + @SystemID + ')'
If @SubSystemID <> '' SET @Where_Clause = @Where_Clause + ' AND SubSystemID IN (' + @SubSystemID + ')'
If @ComponentCodeID <> '' SET @Where_Clause = @Where_Clause + ' AND ComponentCodeID IN (' + @ComponentCodeID + ')'
If @TaskTypeID <> '' SET @Where_Clause = @Where_Clause + ' AND TaskTypeID IN (' + @TaskTypeID + ')'
If @CostBearerID <> '' SET @Where_Clause = @Where_Clause + ' AND CostBearerID IN (' + @CostBearerID + ')'           
IF @CostResponsibilityID <>'' SET @Where_Clause = @Where_Clause + ' AND Cost_Responsibility_ID IN (' + @CostResponsibilityID + ')'        
IF @CostCentreID <>'' SET @Where_Clause = @Where_Clause + ' AND Cost_Centre_ID IN (' + @CostCentreID + ')'               
IF @CostActivityID <>'' SET @Where_Clause = @Where_Clause + ' AND Cost_Activity_ID IN (' + @CostActivityID + ')'             
IF @CostExpenseID <>'' SET @Where_Clause = @Where_Clause + ' AND Cost_Expense_ID IN (' + @CostExpenseID + ')'              
IF @LabourActivityID <>'' SET @Where_Clause = @Where_Clause + ' AND LabourActivityID IN (' + @LabourActivityID + ')'           

IF @RegionId <>'' SET @Where_Clause = @Where_Clause + ' AND Region_Id IN (' + @RegionId + ')'                
IF @DivisionId <>'' SET @Where_Clause = @Where_Clause + ' AND Division_Id IN (' + @DivisionId + ')'           
IF @EqpLocationId <>'' SET @Where_Clause = @Where_Clause + ' AND Eqp_Location_Id IN (' + @EqpLocationId + ')'
IF @CriticalityId <>'' SET @Where_Clause = @Where_Clause + ' AND Eqp_Criticality_Id IN (' + @CriticalityId + ')'              
IF @EqpCategoryId <>'' SET @Where_Clause = @Where_Clause + ' AND Eqp_Category_Id IN (' + @EqpCategoryId + ')'              
IF @EqpClassId <>'' SET @Where_Clause = @Where_Clause + ' AND Eqp_Class_Id IN (' + @EqpClassId + ')'           
IF @EqpGroupId <>'' SET @Where_Clause = @Where_Clause + ' AND Equipment_Group_Id IN (' + @EqpGroupId + ')'           

IF @WorkGroupId <>'' SET @Where_Clause = @Where_Clause +  ' AND Work_Group_ID IN (SELECT Work_Group_Id                             
                                                                                                                        FROM WORK_GROUP                                                   
                                                                                                                        WHERE Work_Group_Code                           
                                                                                                                        IN (SELECT Work_Group_Code                      
                                                                                                                              FROM WORK_GROUP                                 
                                                                                                                              WHERE Work_Group_Id IN (' + @WorkGroupId + '))) '     --Added ID
IF @EqpCostCentre <>'' SET @Where_Clause = @Where_Clause + ' AND EqpCostCentreId IN (' + @EqpCostCentre + ')'
IF @CostCategoryId <>'' SET @Where_Clause = @Where_Clause + ' AND Cost_Category_Desc IN (' + @CostCategoryId + ')'
If @modifierID <> '' SET @Where_Clause = @Where_Clause + ' AND ModifierID IN (' + @modifierID + ')'

IF ISNULL(@ParentEquipmentID,'')<>''
      SET @Where_Clause = @Where_Clause + ' AND EqpPlanID IN (SELECT EqpPlanID FROM dbo.EQP_SIBLINGS_F('+@ParentEquipmentID+')) '

--AL: 22/10/09
If @ManufacturerID <> '' SET @Where_Clause = @Where_Clause + ' AND ManufacturerId IN (' + @ManufacturerID + ')'
If @TaskCounterID <> '' SET @Where_Clause = @Where_Clause + ' AND ApplicationCodeID IN (' + @TaskCounterID + ')'
If @TaskHeaderID <> '' SET @Where_Clause = @Where_Clause + ' AND TaskHeaderId IN (' + @TaskHeaderID + ')'
If @CCActivity <> '' SET @Where_Clause = @Where_Clause + ' AND CC_Activity IN (' + @CCActivity + ')'
If @CCLocation <> '' SET @Where_Clause = @Where_Clause + ' AND CC_Location IN (' + @CCLocation + ')'
If @CCResponsibility <> '' SET @Where_Clause = @Where_Clause + ' AND CC_Responsibility IN (' + @CCResponsibility + ')'




--Create a temporary table
CREATE TABLE #z_Cost(                     
      [Cost] [float] NULL)

--Add Analyseby field
SET @AnalyseByFld=CASE @AnalyseBy
              WHEN 'PRTY' THEN 'Projection_Header_ID'       
              WHEN 'MONH' THEN 'CalenderPeriod'
              WHEN 'YEAR' THEN 'CalenderPeriod'
              WHEN 'QRTR' THEN 'CalenderPeriod'          
              ELSE 'CalenderPeriod' END

DECLARE @AnalyseByFld2 varchar(MAX)
SET @AnalyseByFld2=CASE @AnalyseBy
              WHEN 'PRTY' THEN 'Projection_Header_ID'       
              WHEN 'MONH' THEN 'CalPer'
              WHEN 'YEAR' THEN 'CalPer'
              WHEN 'QRTR' THEN 'CalPer'     
              ELSE 'CalPer' END


SET @SQL= 'ALTER TABLE #z_Cost ADD '+@AnalyseByFld+' int NULL'
EXEC(@SQL)

--GroupBy
--Branch, Site, Fleet, Equipment Plan, 
--Cost type, System, Sub-system, Task Type,
--Cost Responsibility, Cost Centre, Cost Activity, 
--Cost Expense, Labour Activity, 
--Projected task

--Create Group by
SET @GroupBy1Clause1 = ''
SET @GroupBy1Clause2 = ''
--Put Coma at the end
SET @GroupBy1=@GroupBy+','

--Find if any group by members were supplied
SET @Counter=CHARINDEX(',',@GroupBy1)

SET @SelectColumns=''
SET @InsertIntoClause=''
SET @InclMissPerFields=''
SET @GroupBy1Col=1

--Create Group By
WHILE @Counter>0
BEGIN
      
      SET @Column=LEFT(@GroupBy1,@Counter-1)
      SET @GroupBy1=RIGHT(@GroupBy1,LEN(@GroupBy1)-@Counter)
      

      IF @Column ='BRAN'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'BranchId, Branch,'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'BranchId, Branch,'
            SET @InsertIntoClause = @InsertIntoClause + 'BranchId, Branch,'
            SET @InclMissPerFields=@InclMissPerFields + 'BranchId, Branch,'         
            SET @SelectColumns = @SelectColumns + 'Branch AS Col' + CAST(@GroupBy1Col as varchar) + ','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab + 'Col' + CAST(@GroupBy1Col as varchar) + ' AS Branch ' + ','
			SET @OrderByCrossTab = @OrderByCrossTab + 'Branch' + ','
            
            --Add columns for the temporary table
            SET @SQL= 'ALTER TABLE #z_Cost ADD BranchId int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD Branch varchar(50) NULL'
            EXEC(@SQL)
      END 
      ELSE IF @Column ='SITE'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'SiteId, Site,'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'SiteId, Site,'
            SET @InsertIntoClause = @InsertIntoClause + 'SiteId, Site,'
            SET @InclMissPerFields=@InclMissPerFields + 'SiteId, Site,'
            SET @SelectColumns= @SelectColumns+'Site AS Col'+ CAST(@GroupBy1Col as varchar)+','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab + 'Col' + CAST(@GroupBy1Col as varchar) + ' AS Site ' + ','
            SET @OrderByCrossTab = @OrderByCrossTab + 'Site' + ','
            --Add columns for the temporary table
            SET @SQL= 'ALTER TABLE #z_Cost ADD SiteId int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD Site varchar(50) NULL'
            EXEC(@SQL)
      END
      ELSE IF @Column ='FLEE'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'FleetId, Fleet,'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'FleetId, Fleet,'
            SET @InsertIntoClause = @InsertIntoClause + 'FleetId, Fleet,'
            SET @InclMissPerFields=@InclMissPerFields + 'FleetId, Fleet,'
            SET @SelectColumns= @SelectColumns+'Fleet AS Col'+ CAST(@GroupBy1Col as varchar)+','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab + 'Col' + CAST(@GroupBy1Col as varchar) + ' AS Fleet ' + ','
            SET @OrderByCrossTab = @OrderByCrossTab + 'Fleet' + ','
            
            SET @SQL= 'ALTER TABLE #z_Cost ADD FleetId int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD Fleet varchar(50) NULL'
            EXEC(@SQL)
      END
      ELSE IF @Column ='EQPL'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'EqpPlanId, EqpPlan,'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'EqpPlanId, EqpPlan,'
            SET @InsertIntoClause = @InsertIntoClause + 'EqpPlanId, EqpPlan,'
            SET @InclMissPerFields=@InclMissPerFields + 'EqpPlanId, EqpPlan,'
            SET @SelectColumns = @SelectColumns+'EqpPlan AS Col'+ CAST(@GroupBy1Col as varchar)+','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab + 'Col' + CAST(@GroupBy1Col as varchar) + ' AS Equipment ' + ','
            SET @OrderByCrossTab = @OrderByCrossTab + 'Equipment' + ','
            SET @SQL= 'ALTER TABLE #z_Cost ADD EqpPlanId int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD EqpPlan varchar(50) NULL'
            EXEC(@SQL)
      END 
      ELSE IF @Column ='PEQP'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'EqpPlanId, EqpPlan,'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'ParentEqpPlanId, ParentEqpPlan,'
            SET @InsertIntoClause = @InsertIntoClause + 'ParentEqpPlanId, ParentEqpPlan,'
            SET @InclMissPerFields=@InclMissPerFields + 'ParentEqpPlanId, ParentEqpPlan,'
            SET @SelectColumns= @SelectColumns+'ParentEqpPlan AS Col'+ CAST(@GroupBy1Col as varchar)+',' 
                      
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab + 'Col' + CAST(@GroupBy1Col as varchar) + ' AS ''Parent Equipment'' ' + ','
            SET @OrderByCrossTab = @OrderByCrossTab + '''Parent Equipment''' + ','
            
            SET @SQL= 'ALTER TABLE #z_Cost ADD ParentEqpPlanId int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD ParentEqpPlan varchar(50) NULL'
            EXEC(@SQL)

            SET @GroupingByParentEqp=1
      END 
      ELSE IF @Column ='CTTY'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'CostTypeId, CostType,'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'CostTypeId, CostType,'
            SET @InsertIntoClause = @InsertIntoClause + 'CostTypeId, CostType,'
            SET @InclMissPerFields=@InclMissPerFields + 'CostTypeId, CostType,'
            SET @SelectColumns= @SelectColumns+'CostType AS Col'+ CAST(@GroupBy1Col as varchar)+','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab + 'Col' + CAST(@GroupBy1Col as varchar) + ' AS ''Cost Type'' ' + ','            
            SET @OrderByCrossTab = @OrderByCrossTab + '''Cost Type''' + ','
            
            SET @SQL= 'ALTER TABLE #z_Cost ADD CostTypeId int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD CostType varchar(50) NULL'
            EXEC(@SQL)
      END         
      ELSE IF @Column ='SYST'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'SystemId, System,'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'SystemId, System,'
            SET @InsertIntoClause = @InsertIntoClause + 'SystemId, System,'
            SET @InclMissPerFields=@InclMissPerFields + 'SystemId, System,'
            SET @SelectColumns= @SelectColumns+'System AS Col'+ CAST(@GroupBy1Col as varchar)+','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab + 'Col' + CAST(@GroupBy1Col as varchar) + ' AS System ' + ','
            SET @OrderByCrossTab = @OrderByCrossTab + 'System' + ','
            SET @SQL= 'ALTER TABLE #z_Cost ADD SystemId int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD System varchar(50) NULL'
            EXEC(@SQL)
      END               
      ELSE IF @Column ='SUBS'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'SubSystemId, SubSystem,'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'SubSystemId, SubSystem,'
            SET @InsertIntoClause = @InsertIntoClause + 'SubSystemId, SubSystem,'
            SET @InclMissPerFields=@InclMissPerFields + 'SubSystemId, SubSystem,'
            SET @SelectColumns= @SelectColumns+'SubSystem AS Col'+ CAST(@GroupBy1Col as varchar)+','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab + 'Col' + CAST(@GroupBy1Col as varchar) + ' AS ''Sub System'' ' + ','
            SET @OrderByCrossTab = @OrderByCrossTab + '''Sub System''' + ','
            
            SET @SQL= 'ALTER TABLE #z_Cost ADD SubSystemId int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD SubSystem varchar(50) NULL'
            EXEC(@SQL)
      END   
      ELSE IF @Column ='EVTT'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'TaskTypeID, TaskType,'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'TaskTypeID, TaskType,'
            SET @InsertIntoClause = @InsertIntoClause + 'TaskTypeID, TaskType,'
            SET @InclMissPerFields=@InclMissPerFields + 'TaskTypeID, TaskType,'
            SET @SelectColumns= @SelectColumns+'TaskType AS Col'+ CAST(@GroupBy1Col as varchar)+','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab + 'Col' + CAST(@GroupBy1Col as varchar) + ' AS ''Task Type'' ' + ','
            SET @OrderByCrossTab = @OrderByCrossTab + '''Task Type''' + ','
            
            SET @SQL= 'ALTER TABLE #z_Cost ADD TaskTypeID int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD TaskType varchar(50) NULL'
            EXEC(@SQL)
      END   
      ELSE IF @Column ='EVCC'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'ComponentCodeID, CompCode,'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'ComponentCodeID, CompCode,'
            SET @InsertIntoClause = @InsertIntoClause + 'ComponentCodeID, CompCode,'
            SET @InclMissPerFields=@InclMissPerFields + 'ComponentCodeID, CompCode,'
            SET @SelectColumns= @SelectColumns+'CompCode AS Col'+ CAST(@GroupBy1Col as varchar)+','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab + 'Col' + CAST(@GroupBy1Col as varchar) + ' AS ''Component Code'' ' + ','
            SET @OrderByCrossTab = @OrderByCrossTab + '''Component Code''' + ','
            
            SET @SQL= 'ALTER TABLE #z_Cost ADD ComponentCodeID int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD CompCode varchar(80) NULL'
            EXEC(@SQL)
      END               
      ELSE IF @Column ='CACT'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'ISNULL(Cost_Activity_ID,0),ISNULL(Cost_Activity_Code,'''+@ShowInsteadOfNull+'''),'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'Cost_Activity_ID,Cost_Activity_Code,'
            SET @InsertIntoClause = @InsertIntoClause + 'Cost_Activity_ID,Cost_Activity_Code,'
            SET @InclMissPerFields=@InclMissPerFields + 'Cost_Activity_ID,Cost_Activity_Code,'
            SET @SelectColumns= @SelectColumns+'Cost_Activity_Code AS Col'+ CAST(@GroupBy1Col as varchar)+','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab + 'Col' + CAST(@GroupBy1Col as varchar) + ' AS ''Maintenanace Type'' ' + ','
            SET @OrderByCrossTab = @OrderByCrossTab + '''Maintenanace Type''' + ','
            
            SET @SQL= 'ALTER TABLE #z_Cost ADD Cost_Activity_ID int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD Cost_Activity_Code varchar(70) NULL'
            EXEC(@SQL)
      END
      ELSE IF @Column ='WGRP'       --Added ID
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'ISNULL(Work_Group_ID,0),ISNULL(Work_Group_Code,'''+@ShowInsteadOfNull+'''),'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'Work_Group_ID,Work_Group_Code,'
            SET @InsertIntoClause = @InsertIntoClause + 'Work_Group_ID,Work_Group_Code,'
            SET @InclMissPerFields=@InclMissPerFields + 'Work_Group_ID,Work_Group_Code,'
            SET @SelectColumns = @SelectColumns + 'Work_Group_Code AS Col' + CAST(@GroupBy1Col as varchar) + ','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab + 'Col' + CAST(@GroupBy1Col as varchar) + ' AS ''Work Group'' ' + ','
            SET @OrderByCrossTab = @OrderByCrossTab + '''Work Group''' + ','
            
            SET @SQL= 'ALTER TABLE #z_Cost ADD Work_Group_ID int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD Work_Group_Code varchar(70) NULL'
            EXEC(@SQL)
      END   
      ELSE IF @Column ='CCTR'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'ISNULL(Cost_Centre_ID,0),ISNULL(Cost_Centre_Code,'''+@ShowInsteadOfNull+'''),'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'Cost_Centre_ID,Cost_Centre_Code,'
            SET @InsertIntoClause = @InsertIntoClause + 'Cost_Centre_ID,Cost_Centre_Code,'
            SET @InclMissPerFields=@InclMissPerFields + 'Cost_Centre_ID,Cost_Centre_Code,'
            SET @SelectColumns = @SelectColumns + 'Cost_Centre_Code AS Col' + CAST(@GroupBy1Col as varchar) +','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab + 'Col' + CAST(@GroupBy1Col as varchar) + ' AS ''Cost Centre'' ' + ','
            SET @OrderByCrossTab = @OrderByCrossTab + '''Cost Centre''' + ','
            
            SET @SQL= 'ALTER TABLE #z_Cost ADD Cost_Centre_ID int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD Cost_Centre_Code varchar(70) NULL'
            EXEC(@SQL)
      END 
      ELSE IF @Column ='CRSP'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'ISNULL(Cost_Responsibility_ID,0), ISNULL(Cost_Responsibility_Code,'''+@ShowInsteadOfNull+'''),'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'Cost_Responsibility_ID, Cost_Responsibility_Code,'
            SET @InsertIntoClause = @InsertIntoClause + 'Cost_Responsibility_ID, Cost_Responsibility_Code,'
            SET @InclMissPerFields=@InclMissPerFields + 'Cost_Responsibility_ID, Cost_Responsibility_Code,'
            SET @SelectColumns= @SelectColumns+'Cost_Responsibility_Code AS Col'+ CAST(@GroupBy1Col as varchar)+','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab + 'Col' + CAST(@GroupBy1Col as varchar) + ' AS Responsibility ' + ','
            SET @OrderByCrossTab = @OrderByCrossTab + 'Responsibility' + ','
            
            SET @SQL= 'ALTER TABLE #z_Cost ADD Cost_Responsibility_ID int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD Cost_Responsibility_Code varchar(70) NULL'
            EXEC(@SQL)
      END   
      ELSE IF @Column ='CEXP'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'ISNULL(Cost_Expense_ID,0), ISNULL(Cost_Expense_Code,'''+@ShowInsteadOfNull+'''),'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'Cost_Expense_ID, Cost_Expense_Code,'
            SET @InsertIntoClause = @InsertIntoClause + 'Cost_Expense_ID, Cost_Expense_Code,'
            SET @InclMissPerFields=@InclMissPerFields + 'Cost_Expense_ID, Cost_Expense_Code,'
            SET @SelectColumns= @SelectColumns+'Cost_Expense_Code AS Col'+ CAST(@GroupBy1Col as varchar)+','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab + 'Col' + CAST(@GroupBy1Col as varchar) + ' AS ''Expense Element''' + ','
            SET @OrderByCrossTab = @OrderByCrossTab + '''Expense Element''' + ','
            
            SET @SQL= 'ALTER TABLE #z_Cost ADD Cost_Expense_ID int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD Cost_Expense_Code varchar(70) NULL'
            EXEC(@SQL)
      END 
      ELSE IF @Column ='LABA'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'ISNULL(LabourActivityId,0),ISNULL(ActivityCode,'''+@ShowInsteadOfNull+'''),'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'LabourActivityId,ActivityCode,'
            SET @InsertIntoClause = @InsertIntoClause + 'LabourActivityId,ActivityCode,'
            SET @InclMissPerFields=@InclMissPerFields + 'LabourActivityId,ActivityCode,'
            SET @SelectColumns= @SelectColumns+'ActivityCode AS Col'+ CAST(@GroupBy1Col as varchar)+','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab + 'Col' + CAST(@GroupBy1Col as varchar) + ' AS ''Labour Activity'' ' + ','
            SET @OrderByCrossTab = @OrderByCrossTab + '''Labour Activity''' + ','
            
            SET @SQL= 'ALTER TABLE #z_Cost ADD LabourActivityId int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD ActivityCode varchar(50) NULL'
            EXEC(@SQL)
      END 
      ELSE IF @Column ='PRTA'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'TaskHeaderId, ProjTask,'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'TaskHeaderId, ProjTask,'
            SET @InsertIntoClause = @InsertIntoClause + 'TaskHeaderId, ProjTask,'
            SET @InclMissPerFields=@InclMissPerFields + 'TaskHeaderId, ProjTask,'
            SET @SelectColumns= @SelectColumns+'ProjTask AS Col'+ CAST(@GroupBy1Col as varchar)+','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab + 'Col' + CAST(@GroupBy1Col as varchar) + ' AS ''Strategy Task'' ' + ','
            SET @OrderByCrossTab = @OrderByCrossTab + '''Strategy Task''' + ','
               
            SET @SQL= 'ALTER TABLE #z_Cost ADD TaskHeaderId int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD ProjTask varchar(150) NULL'
            EXEC(@SQL)
      END 
      
      -- added for strategy task description
      ELSE IF @Column ='PRTD'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'Task_Description,'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'Task_Description,'
            SET @InsertIntoClause = @InsertIntoClause + 'Task_Description,'
            SET @InclMissPerFields=@InclMissPerFields + 'Task_Description,'
            SET @SelectColumns= @SelectColumns+'Task_Description AS Col'+ CAST(@GroupBy1Col as varchar)+','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab + 'Col' + CAST(@GroupBy1Col as varchar) + ' AS ''Strategy Task Description'' ' + ','
            SET @OrderByCrossTab = @OrderByCrossTab + '''Strategy Task Description''' + ','
              
            --SET @SQL= 'ALTER TABLE #z_Cost ADD TaskHeaderId int NULL'
            --EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD Task_Description varchar(100) NULL'
            EXEC(@SQL)
      END 
       
      ELSE IF @Column ='MONH'
      BEGIN
            --SET @SQL1='RIGHT(CONVERT(VARCHAR(12),CONVERT(DATETIME,CONVERT(VARCHAR,CalenderPeriod)+''01'',112),113),9),'
            SET @SQL1='RIGHT(CONVERT(VARCHAR(12),CONVERT(DATETIME,CONVERT(VARCHAR,CalPer)+''01'',112),113),9),'
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'CalenderPeriod, '+ @SQL1
            SET @GroupBy1Clause2 = @GroupBy1Clause2 +'CalenderPeriod,CalPeriodDescr,'
            SET @InsertIntoClause = @InsertIntoClause + 'CalenderPeriod, CalPeriodDescr,'
            --If Analysing the variance (Projection1-Projection2) calender period will
            --be at the end of Select close before TotalCost
            IF @AnalyseVariance=0 SET @SelectColumns= @SelectColumns+' CalPeriodDescr AS Col'+ CAST(@GroupBy1Col as varchar)+','             
            
            IF @AnalyseVariance=1 SET @GroupBy1Col=@GroupBy1Col-1
            SET @SQL= 'ALTER TABLE #z_Cost ADD CalenderPeriod int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD CalPeriodDescr varchar(20) NULL'
            EXEC(@SQL)
            --Include missing calendar period
            SET @IncludeMissingCalenderPeriods=@Column
            
      END   
      ELSE IF @Column ='YEAR'
      BEGIN       
            --SET @SQL1='CAST(CalenderPeriod/100 AS varchar),'
            SET @SQL1='CAST(CalPer/100 AS varchar),'
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'CalenderPeriod/100, '+@SQL1
            SET @GroupBy1Clause2 = @GroupBy1Clause2 +'CalenderPeriod,CalPeriodDescr,'
            SET @InsertIntoClause = @InsertIntoClause + 'CalenderPeriod, CalPeriodDescr,'
            --If Analysing the variance (Projection1-Projection2) calender period will
            --be at the end of Select close before TotalCost
            IF @AnalyseVariance=0 SET @SelectColumns= @SelectColumns+' CalPeriodDescr AS Col'+ CAST(@GroupBy1Col as varchar)+','             
           
            IF @AnalyseVariance=1 SET @GroupBy1Col=@GroupBy1Col-1
            SET @SQL= 'ALTER TABLE #z_Cost ADD CalenderPeriod int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD CalPeriodDescr varchar(20) NULL'
            EXEC(@SQL)
            --Include missing calendar period
            SET @IncludeMissingCalenderPeriods=@Column
      END   
      ELSE IF @Column ='QRTR'
      BEGIN 
            --SET @SQL1 = @SQL1 + ' CAST(Left(CalenderPeriod,4) + CONVERT(varchar(1),((Right(CalenderPeriod,2)+2)/3)) AS int), '
            --SET @SQL1 = @SQL1 + 'Left(CalenderPeriod,4) + ''-Q'' + CONVERT(varchar(1),((Right(CalenderPeriod,2)+2)/3))  ,'
            SET @SQL1 = @SQL1 + ' CAST(Left(CalPer,4) + CONVERT(varchar(1),((Right(CalPer,2)+2)/3)) AS int), '
            SET @SQL1 = @SQL1 + 'Left(CalPer,4) + ''-Q'' + CONVERT(varchar(1),((Right(CalPer,2)+2)/3))  ,'
            SET @GroupBy1Clause1 = @GroupBy1Clause1 +@SQL1
            SET @GroupBy1Clause2 = @GroupBy1Clause2 +'CalenderPeriod,CalPeriodDescr,'
            SET @InsertIntoClause = @InsertIntoClause + 'CalenderPeriod, CalPeriodDescr,'
            --If Analysing the variance (Projection1-Projection2) calender period will
            --be at the end of Select close before TotalCost
            IF @AnalyseVariance=0 SET @SelectColumns= @SelectColumns+' CalPeriodDescr AS Col'+ CAST(@GroupBy1Col as varchar)+','           
            
            IF @AnalyseVariance=1 SET @GroupBy1Col=@GroupBy1Col-1
            SET @SQL= 'ALTER TABLE #z_Cost ADD CalenderPeriod int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD CalPeriodDescr varchar(20) NULL'
            EXEC(@SQL)
            --Include missing calendar period
            SET @IncludeMissingCalenderPeriods=@Column
      END   
      ELSE IF @Column ='PLM'
      BEGIN 
            SET @PLM=1  

            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'PLM_ID, PLM,'          
            SET @SelectColumns= @SelectColumns+'PLM AS Col'+ CAST(@GroupBy1Col as varchar)+','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab +'Col'+ CAST(@GroupBy1Col as varchar)+' AS ''Part/Lab/Misc'' ' + ','
            SET @OrderByCrossTab = @OrderByCrossTab +'''Part/Lab/Misc''' + ','

            SET @SQL= 'ALTER TABLE #z_Cost ADD PartsCost float NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD LabourCost float NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD MiscCost float NULL'
            EXEC(@SQL)
      END   

      ELSE IF @Column ='REGN'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'Region_Id, Region_Desc,'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'Region_Id, Region_Desc,'
            SET @InsertIntoClause = @InsertIntoClause + 'Region_Id, Region_Desc,'
            SET @InclMissPerFields=@InclMissPerFields + 'Region_Id, Region_Desc,'
            SET @SelectColumns= @SelectColumns+'Region_Desc AS Col'+ CAST(@GroupBy1Col as varchar)+','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab +'Col'+ CAST(@GroupBy1Col as varchar)+' AS Region' + ','
            SET @OrderByCrossTab = @OrderByCrossTab +'Region' +','
             
            SET @SQL= 'ALTER TABLE #z_Cost ADD Region_Id int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD Region_Desc varchar(50) NULL'
            EXEC(@SQL)
      END 
      ELSE IF @Column ='DEVI'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'Division_Id, Division_Desc,'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'Division_Id, Division_Desc,'
            SET @InsertIntoClause = @InsertIntoClause + 'Division_Id, Division_Desc,'
            SET @InclMissPerFields=@InclMissPerFields + 'Division_Id, Division_Desc,'
            SET @SelectColumns= @SelectColumns+'Division_Desc AS Col'+ CAST(@GroupBy1Col as varchar)+','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab + 'Col' + CAST(@GroupBy1Col as varchar) + ' AS Division' + ','
            SET @OrderByCrossTab = @OrderByCrossTab + 'Division' + ','
            
            SET @SQL= 'ALTER TABLE #z_Cost ADD Division_Id int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD Division_Desc varchar(50) NULL'
            EXEC(@SQL)
      END 
      ELSE IF @Column ='LCTN'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'Eqp_Location_Id, Eqp_Location_Desc,'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'Eqp_Location_Id, Eqp_Location_Desc,'
            SET @InsertIntoClause = @InsertIntoClause + 'Eqp_Location_Id, Eqp_Location_Desc,'
            SET @InclMissPerFields=@InclMissPerFields + 'Eqp_Location_Id, Eqp_Location_Desc,'
            SET @SelectColumns= @SelectColumns+'Eqp_Location_Desc AS Col'+ CAST(@GroupBy1Col as varchar)+','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab + 'Col' + CAST(@GroupBy1Col as varchar) + ' AS ''Equipment Location''' + ','
            SET @OrderByCrossTab = @OrderByCrossTab + '''Equipment Location''' + ','
            
            
            SET @SQL= 'ALTER TABLE #z_Cost ADD Eqp_Location_Id int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD Eqp_Location_Desc varchar(50) NULL'
            EXEC(@SQL)
      END 
      ELSE IF @Column ='CRIT'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'Eqp_Criticality_Id, Eqp_Criticality_Desc,'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'Eqp_Criticality_Id, Eqp_Criticality_Desc,'
            SET @InsertIntoClause = @InsertIntoClause + 'Eqp_Criticality_Id, Eqp_Criticality_Desc,'
            SET @InclMissPerFields=@InclMissPerFields + 'Eqp_Criticality_Id, Eqp_Criticality_Desc,'
            SET @SelectColumns= @SelectColumns+'Eqp_Criticality_Desc AS Col'+ CAST(@GroupBy1Col as varchar)+','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab + 'Col' + CAST(@GroupBy1Col as varchar) + ' AS ''Equipment Criticality'' ' + ','
            SET @OrderByCrossTab = @OrderByCrossTab + '''Equipment Criticality''' + ','
             
            SET @SQL= 'ALTER TABLE #z_Cost ADD Eqp_Criticality_Id int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD Eqp_Criticality_Desc varchar(50) NULL'
            EXEC(@SQL)
      END 
      ELSE IF @Column ='CTGR'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'Eqp_Category_Id, Eqp_Category_Desc,'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'Eqp_Category_Id, Eqp_Category_Desc,'
            SET @InsertIntoClause = @InsertIntoClause + 'Eqp_Category_Id, Eqp_Category_Desc,'
            SET @InclMissPerFields=@InclMissPerFields + 'Eqp_Category_Id, Eqp_Category_Desc,'
            SET @SelectColumns= @SelectColumns+'Eqp_Category_Desc AS Col'+ CAST(@GroupBy1Col as varchar)+','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab + 'Col' + CAST(@GroupBy1Col as varchar) + ' AS ''Equipment Category'' ' + ','
            SET @OrderByCrossTab = @OrderByCrossTab +'''Equipment Category''' + ','
            
            SET @SQL= 'ALTER TABLE #z_Cost ADD Eqp_Category_Id int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD Eqp_Category_Desc varchar(50) NULL'
            EXEC(@SQL)
      END 
      ELSE IF @Column ='ECLS'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'Eqp_Class_Id, Eqp_Class_Desc,'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'Eqp_Class_Id, Eqp_Class_Desc,'
            SET @InsertIntoClause = @InsertIntoClause + 'Eqp_Class_Id, Eqp_Class_Desc,'
            SET @InclMissPerFields=@InclMissPerFields + 'Eqp_Class_Id, Eqp_Class_Desc,'
            SET @SelectColumns= @SelectColumns+'Eqp_Class_Desc AS Col'+ CAST(@GroupBy1Col as varchar)+','
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab +'Col'+ CAST(@GroupBy1Col as varchar)+' AS ''Equipment Class'' ' + ','
            SET @OrderByCrossTab = @OrderByCrossTab +'''Equipment Class''' + ','
             
            SET @SQL= 'ALTER TABLE #z_Cost ADD Eqp_Class_Id int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD Eqp_Class_Desc varchar(50) NULL'
            EXEC(@SQL)
      END 
      ELSE IF @Column ='EGRP'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'Equipment_Group_Id, Equipment_Group_Desc,'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'Equipment_Group_Id, Equipment_Group_Desc,'
            SET @InsertIntoClause = @InsertIntoClause + 'Equipment_Group_Id, Equipment_Group_Desc,'
            SET @InclMissPerFields=@InclMissPerFields + 'Equipment_Group_Id, Equipment_Group_Desc,'
            SET @SelectColumns= @SelectColumns+'Equipment_Group_Desc AS Col'+ CAST(@GroupBy1Col as varchar)+','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab +'Col'+ CAST(@GroupBy1Col as varchar)+' AS ''Equipment Group''' + ','
            SET @OrderByCrossTab = @OrderByCrossTab +'''Equipment Group''' + ','
            
            SET @SQL= 'ALTER TABLE #z_Cost ADD Equipment_Group_Id int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD Equipment_Group_Desc varchar(50) NULL'
            EXEC(@SQL)
      END 
      ELSE IF @Column ='ECCT'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'EqpCostCentreId, EqpCostCentre,'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'EqpCostCentreId, EqpCostCentre,'
            SET @InsertIntoClause = @InsertIntoClause + 'EqpCostCentreId, EqpCostCentre,'
            SET @InclMissPerFields=@InclMissPerFields + 'EqpCostCentreId, EqpCostCentre,'
            SET @SelectColumns= @SelectColumns+'EqpCostCentre AS Col'+ CAST(@GroupBy1Col as varchar)+','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab +'Col'+ CAST(@GroupBy1Col as varchar)+' AS ''Equipment Cost Centre'' ' + ','
            SET @OrderByCrossTab = @OrderByCrossTab +'''Equipment Cost Centre''' + ','
            
            SET @SQL= 'ALTER TABLE #z_Cost ADD EqpCostCentreId int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD EqpCostCentre varchar(max) NULL'
            EXEC(@SQL)
      END 
      ELSE IF @Column ='CCAT'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'Cost_Category_Id, Cost_Category_Desc,'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'Cost_Category_Id, Cost_Category_Desc,'
            SET @InsertIntoClause = @InsertIntoClause + 'Cost_Category_Id, Cost_Category_Desc,'
            SET @InclMissPerFields=@InclMissPerFields + 'Cost_Category_Id, Cost_Category_Desc,'
            SET @SelectColumns= @SelectColumns+'Cost_Category_Desc AS Col'+ CAST(@GroupBy1Col as varchar)+','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab +'Col'+ CAST(@GroupBy1Col as varchar)+' AS ''Cost Category''' + ','
            SET @OrderByCrossTab = @OrderByCrossTab +'''Cost Category''' + ','
             
            SET @SQL= 'ALTER TABLE #z_Cost ADD Cost_Category_Id int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD Cost_Category_Desc varchar(50) NULL'
            EXEC(@SQL)        
      END 

	--AL: 22/10/09
      ELSE IF @Column ='COBE'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'CostBearerID, CostBearer,'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'CostBearerID, CostBearer,'
            SET @InsertIntoClause = @InsertIntoClause + 'CostBearerID, CostBearer,'
            SET @InclMissPerFields=@InclMissPerFields + 'CostBearerID, CostBearer,'
            SET @SelectColumns= @SelectColumns+'CostBearer AS Col'+ CAST(@GroupBy1Col as varchar)+','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab +'Col'+ CAST(@GroupBy1Col as varchar)+' AS CostBearer ' + ','
            SET @OrderByCrossTab = @OrderByCrossTab +'CostBearer' + ','
             
            SET @SQL= 'ALTER TABLE #z_Cost ADD CostBearerID int NULL'
            EXEC(@SQL)
            SET @SQL= 'ALTER TABLE #z_Cost ADD CostBearer varchar(50) NULL'
            EXEC(@SQL)        
      END 
      ELSE IF @Column ='CCAC'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'CC_Activity,'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'CC_Activity,'
            SET @InsertIntoClause = @InsertIntoClause + 'CC_Activity,'
            SET @InclMissPerFields=@InclMissPerFields + 'CC_Activity,'
            SET @SelectColumns= @SelectColumns+'CC_Activity AS Col'+ CAST(@GroupBy1Col as varchar)+','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab +'Col'+ CAST(@GroupBy1Col as varchar)+' AS CC_Activity ' + ','
            SET @OrderByCrossTab = @OrderByCrossTab +'CC_Activity' + ','
             
            SET @SQL= 'ALTER TABLE #z_Cost ADD CC_Activity varchar(10) NULL'
            EXEC(@SQL)
      END 
      ELSE IF @Column ='CCLO'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'CC_Location,'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'CC_Location,'
            SET @InsertIntoClause = @InsertIntoClause + 'CC_Location,'
            SET @InclMissPerFields=@InclMissPerFields + 'CC_Location,'
            SET @SelectColumns= @SelectColumns+'CC_Location AS Col'+ CAST(@GroupBy1Col as varchar)+','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab +'Col'+ CAST(@GroupBy1Col as varchar)+' AS CC_Location ' + ','
            SET @OrderByCrossTab = @OrderByCrossTab +'''CC_Location''' + ','
            
            SET @SQL= 'ALTER TABLE #z_Cost ADD CC_Location varchar(10) NULL'
            EXEC(@SQL)
      END 
      ELSE IF @Column ='CCRP'
      BEGIN
            SET @GroupBy1Clause1 = @GroupBy1Clause1 + 'CC_Responsibility,'
            SET @GroupBy1Clause2 = @GroupBy1Clause2 + 'CC_Responsibility,'
            SET @InsertIntoClause = @InsertIntoClause + 'CC_Responsibility,'
            SET @InclMissPerFields=@InclMissPerFields + 'CC_Responsibility,'
            SET @SelectColumns= @SelectColumns+'CC_Responsibility AS Col'+ CAST(@GroupBy1Col as varchar)+','
            
            SET @SelectQueryForCrossTab = @SelectQueryForCrossTab +'Col'+ CAST(@GroupBy1Col as varchar)+' AS CC_Responsibility ' + ','
            SET @OrderByCrossTab = @OrderByCrossTab +'CC_Responsibility' + ','
            
            SET @SQL= 'ALTER TABLE #z_Cost ADD CC_Responsibility varchar(10) NULL'
            EXEC(@SQL)
      END 


      SET @Counter=CHARINDEX(',',@GroupBy1)
      SET @GroupBy1Col=@GroupBy1Col+1
END

--Add Null columns if Groupby contains less items then @GroupBy1ColMAX
WHILE @GroupBy1Col<=@GroupBy1ColMAX
BEGIN
      SET @SelectColumns= @SelectColumns+''''' AS Col'+ CAST(@GroupBy1Col as varchar)+','
      SET @GroupBy1Col=@GroupBy1Col+1
END

--Take out the coma at the end
IF LEN(@GroupBy1Clause1)>0 SET @GroupBy1Clause1=LEFT(@GroupBy1Clause1,LEN(@GroupBy1Clause1)-1)
IF LEN(@GroupBy1Clause2)>0 SET @GroupBy1Clause2=LEFT(@GroupBy1Clause2,LEN(@GroupBy1Clause2)-1)
IF LEN(@SelectColumns)>0 SET @SelectColumns=LEFT(@SelectColumns,LEN(@SelectColumns)-1)
IF LEN(@InsertIntoClause)>0 SET @InsertIntoClause=LEFT(@InsertIntoClause,LEN(@InsertIntoClause)-1)
IF LEN(@InclMissPerFields)>0 SET @InclMissPerFields=LEFT(@InclMissPerFields,LEN(@InclMissPerFields)-1)

--Insert into temporary table the actual costs 
SET @SQL1 =   ' INSERT INTO #z_Cost'  + '('+@AnalyseByFld+
CASE @PLM WHEN 1 THEN ', PartsCost, LabourCost,MiscCost'
        ELSE ', Cost' END +
        CASE WHEN @InsertIntoClause='' THEN ''
             ELSE ', '+@InsertIntoClause END+')'

SET @SQL1 =  @SQL1 + ' SELECT '
SET @SQL1 =  @SQL1 + @AnalyseByFld2+ ', '


IF @PLM=0
            SET @SQL1 =  @SQL1 + ' 0 '
       

IF @PartsLabourMisc & 1 = 1
BEGIN
      IF @PLM=0
            SET @SQL1 =  @SQL1 +  ' + SUM(PrimePartsSell)'
      ELSE
            SET @SQL1 =  @SQL1 +  ' SUM(PrimePartsSell),'
END
ELSE
      IF @PLM=1
            SET @SQL1 =  @SQL1 +  ' 0,'

IF @PartsLabourMisc & 2 = 2
BEGIN
      IF @PLM=0
            SET @SQL1 =  @SQL1 +  ' + SUM(PrimeLabourSell)'
      ELSE
            SET @SQL1 =  @SQL1 +  ' SUM(PrimeLabourSell), '
END   
ELSE
      IF @PLM=1
            SET @SQL1 =  @SQL1 +  ' 0,'

IF @PartsLabourMisc & 4 = 4
BEGIN 
      IF @PLM=0
            SET @SQL1 =  @SQL1 +  ' + SUM(PrimeMiscSell)'
      ELSE
            SET @SQL1 =  @SQL1 +  '  SUM(PrimeMiscSell)'
END
ELSE
      IF @PLM=1
            SET @SQL1 =  @SQL1 +  ' 0'



SET @SQL1 =  @SQL1 + CASE WHEN @GroupBy1Clause1='' THEN '' ELSE ', '+ @GroupBy1Clause1 END



SET @SQL2 =  @Where_Clause + ' GROUP BY ' + CASE WHEN @GroupBy1Clause1='' THEN '' 
                                     ELSE @GroupBy1Clause1 +  ', ' END + @AnalyseByFld2


-- print @SQL1 + ' FROM RPT_COST_COMPARISON_ACTUAL_V ' + @SQL2
-- print @SQL1 + ' FROM RPT_COST_COMPARISON_PROJ_V ' + @SQL2
--  return



--AL: 19/09/08
DECLARE @SQLT varchar(MAX)

IF @ActualProjected & 1 = 1
BEGIN
      SET @SQLT=' FROM
                              (SELECT *,left(convert(varchar,dateadd(month,-1*' + convert(varchar,@YearStartMonth) + ', convert(datetime,convert(varchar,calenderperiod) + ''01'',112)),112),6)  AS CalPer
                              FROM RPT_COST_COMPARISON_ACTUAL_V) A '
      EXEC(@SQL1 + @SQLT + @SQL2)
      
--    EXEC(@SQL1 + ' FROM RPT_COST_COMPARISON_ACTUAL_V ' + @SQL2)
END



IF @ActualProjected & 2 = 2
BEGIN
      SET @SQLT=' FROM
                              (SELECT *,left(convert(varchar,dateadd(month,-1*' + convert(varchar,@YearStartMonth) + ', convert(datetime,convert(varchar,calenderperiod) + ''01'',112)),112),6)    AS CalPer
                              FROM RPT_COST_COMPARISON_PROJ_V) A '
      EXEC(@SQL1 + @SQLT + @SQL2)

--    EXEC(@SQL1 + ' FROM RPT_COST_COMPARISON_PROJ_V ' + @SQL2)
END


--If Analyse By date insert the missing calender periods
IF @IncludeMissingCalenderPeriods IS NOT NULL
BEGIN
	/*VV CR9009*/
	SELECT * INTO #z_Cost2 FROM #z_Cost
	
      IF @AnalyseBy = 'PRTY'
      BEGIN
            SET @SQL1=' CalenderPeriod,CalPeriodDescr'
            SET @SQL2=CASE @IncludeMissingCalenderPeriods
              WHEN 'MONH' THEN 'rm.Calendar_Period,rm.MonthDescr'
              WHEN 'QRTR' THEN 'rm.QuarterPer,rm.Quarter'
              WHEN 'YEAR' THEN 'CAST(rm.Year as int),rm.Year'           
              END
      END
      ELSE
      BEGIN
            SET @SQL1=' CalenderPeriod'
            SET @SQL2='rm.Calendar_Period'
      END 

      

      SET @Where_Clause=CASE @IncludeMissingCalenderPeriods
              WHEN 'MONH' THEN 'rm.Calendar_Period'
              WHEN 'QRTR' THEN 'rm.QuarterPer'
              WHEN 'YEAR' THEN 'CAST(rm.Year as int)'
              ELSE ''
              END
      
      
      --Select the missing calender periods into a temporary table
      SET @SQL =  ' INSERT INTO #z_Cost(' + @SQL1 + ',Cost'
      SET @SQL= @SQL + CASE @InclMissPerFields 
                     WHEN '' THEN ')'
                   ELSE ', '+ @InclMissPerFields + ')'
                   END
      SET @SQL = @SQL + ' SELECT '+@SQL2+',0' 
      SET @SQL= @SQL + CASE @InclMissPerFields 
                     WHEN '' THEN ''
                   ELSE ', '+ @InclMissPerFields + ''
                   END
      SET @SQL = @SQL + ' FROM REPORT_MONTH_V rm '
      SET @SQL= @SQL + CASE @InclMissPerFields 
                     WHEN '' THEN ''
                   ELSE ' CROSS JOIN (SELECT DISTINCT '+ @InclMissPerFields + ' FROM #z_Cost2/*VV CR9009*/) A'
                   END
            
      SET @SQL = @SQL + ' WHERE ('+@Where_Clause+' NOT IN'
      SET @SQL = @SQL + ' (SELECT DISTINCT CalenderPeriod'
      SET @SQL = @SQL + ' FROM  #z_Cost2/*VV CR9009*/'  + '))'
      SET @SQL = @SQL + ' AND (rm.Calendar_Period BETWEEN ' + Convert(varchar(6),@StartDate) + ' AND ' + Convert(varchar(6),@EndDate) + ')'
            
      SET @SQL = @SQL + ' GROUP BY '+ @SQL2 
      SET @SQL= @SQL + CASE @InclMissPerFields 
                     WHEN '' THEN ''
                   ELSE ', '+ @InclMissPerFields 
                   END
      --Test
      --delete  from #z_Cost Where CalenderPeriod=@StartDate
--    drop table z_Cost
--    select * into z_Cost from #z_Cost
--    select *  from #z_Cost
--    print(@SQL)
--    return
      EXEC(@SQL)
      
      /*VV CR9009*/
      DROP TABLE #z_Cost2
END   
      

IF ISNULL(@GroupingByParentEqp,0) = 1
BEGIN

      CREATE TABLE #aa_EqpTemp(
                              [EqpPlanId] [int] PRIMARY KEY,
                              [ParentEqpPlanID] [int])

      SET @Eqp_Where_Clause = ' WHERE 1=1 '

      If @EqpPlanID <> '' SET @Eqp_Where_Clause = @Eqp_Where_Clause + ' AND EqpPlanID IN (' + @EqpPlanID + ' )'
      If @FleetID <> '' SET @Eqp_Where_Clause = @Eqp_Where_Clause + ' AND FleetID IN (' + @FleetID + ' )'
      If @SiteID <> '' SET @Eqp_Where_Clause = @Eqp_Where_Clause + ' AND SiteID IN (' + @SiteID + ' )'
      If @BranchId <> '' SET @Eqp_Where_Clause = @Eqp_Where_Clause + ' AND BranchId IN (' + @BranchId + ' )'
      If @DealerId > 0 SET @Eqp_Where_Clause = @Eqp_Where_Clause + ' AND DealerId = ' + Convert(varchar, @DealerId)
      If @Projection_Header_Id <> '' SET @Eqp_Where_Clause = @Eqp_Where_Clause + ' AND ProjHeaderId IN (' + @Projection_Header_Id + ')'
      If @ModelId <> '' SET @Eqp_Where_Clause = @Eqp_Where_Clause + ' AND ModelId IN (' + @ModelId + ')'
      IF @CostResponsibilityID <>'' SET @Where_Clause = @Where_Clause + ' AND Cost_Responsibility_ID IN (' + @CostResponsibilityID + ')'            
      IF @RegionId <>'' SET @Where_Clause = @Where_Clause + ' AND Region_Id IN (' + @RegionId + ')'           
      IF @DivisionId <>'' SET @Where_Clause = @Where_Clause + ' AND Division_Id IN (' + @DivisionId + ')'           
      IF @EqpLocationId <>'' SET @Eqp_Where_Clause = @Eqp_Where_Clause + ' AND Eqp_Location_Id IN (' + @EqpLocationId + ')'
      IF @CriticalityId <>'' SET @Eqp_Where_Clause = @Eqp_Where_Clause + ' AND Eqp_Criticality_Id IN (' + @CriticalityId + ')'           
      IF @EqpCategoryId <>'' SET @Eqp_Where_Clause = @Eqp_Where_Clause + ' AND Eqp_Category_Id IN (' + @EqpCategoryId + ')'              
      IF @EqpClassId <>'' SET @Eqp_Where_Clause = @Eqp_Where_Clause + ' AND Eqp_Class_Id IN (' + @EqpClassId + ')'            
      IF @EqpGroupId <>'' SET @Eqp_Where_Clause = @Eqp_Where_Clause + ' AND Equipment_Group_Id IN (' + @EqpGroupId + ')'              
	  IF @EqpCostCentre <>'' SET @Where_Clause = @Where_Clause + ' AND EqpCostCentreId IN (' + @EqpCostCentre + ')'
	  IF @CostCategoryId <>'' SET @Where_Clause = @Where_Clause + ' AND Cost_Category_Desc IN (' + @CostCategoryId + ')'

      IF ISNULL(@ParentEquipmentID,'')<>''
            SET @Eqp_Where_Clause = @Eqp_Where_Clause + ' AND EqpPlanID IN (SELECT EqpPlanID FROM dbo.EQP_SIBLINGS_F('+@ParentEquipmentID+')) '

	  If @ManufacturerID <> '' SET @Where_Clause = @Where_Clause + ' AND ManufacturerId IN (' + @ManufacturerID + ')'

      SET @SQL =   ' INSERT INTO #aa_EqpTemp'  + '  (EqpPlanId,ParentEqpPlanID)'
      SET @SQL =  @SQL + ' SELECT EqpPlanId,NULL'
                        
      EXEC(@SQL +  ' FROM EQUIPMENT_HIERARCHY_V ' +  @Eqp_Where_Clause)

      --1: get list of children saved within ParentEqpPlan(Id) columns
      DECLARE @selection varchar(max)
      SET @selection= REPLACE(REPLACE((select EqpPlanId from #aa_EqpTemp for xml raw),'<row EqpPlanId="',''),'"/>',',')

      --2: reset values in ParentEqpPlanId columns with actual top most parent ID
      UPDATE #aa_EqpTemp 
      SET ParentEqpPlanId  = dbo.GET_TOPMOST_PARENT_EQUIPMENT_F(EqpPlanId,@selection)                 

      --3: update ParentEqpPlan name

      UPDATE CCT 
      SET         parenteqpplanid = ET.ParentEqpPlanID,
                  parenteqpplan = EP.EqpPlan
      FROM 
                  #z_Cost CCT INNER JOIN
                  #aa_EqpTemp ET ON CCT.ParentEqpPlanId =ET.EqpPlanID INNER JOIN
                  tblEqpPlans EP ON ET.ParentEqpPlanID=EP.EqpPlanID

      DROP TABLE #aa_EqpTemp
END

-- select * into z_Cost From #z_Cost
-- Return

--VVV
IF @PLM=1
BEGIN
      SET @Table=CASE @PartsLabourMisc             
            
            WHEN @Parts THEN

                  '( SELECT '+@AnalyseByFld+ ', 1 AS PLM_ID,''Parts'' AS PLM, PartsCost AS Cost '+                 
                    CASE @InsertIntoClause WHEN '' THEN ''
                          ELSE ', '+@InsertIntoClause END +' FROM #z_Cost) A' 
                   
            WHEN @Labour THEN

                  '( SELECT '+@AnalyseByFld+ ', 2 AS PLM_ID,''Labour'' AS PLM, LabourCost AS Cost '+                 
                    CASE @InsertIntoClause WHEN '' THEN ''
                          ELSE ', '+@InsertIntoClause END +' FROM #z_Cost) A' 
            WHEN @Misc THEN

                  '( SELECT '+@AnalyseByFld+ ', 3 AS PLM_ID,''Misc'' AS PLM, MiscCost AS Cost '+                
                    CASE @InsertIntoClause WHEN '' THEN ''
                          ELSE ', '+@InsertIntoClause END +' FROM #z_Cost) A' 
            WHEN @Parts + @Labour THEN
                  '( SELECT '+@AnalyseByFld+ ', 1 AS PLM_ID,''Parts'' AS PLM, PartsCost AS Cost '+                 
                    CASE @InsertIntoClause WHEN '' THEN ''
                          ELSE ', '+@InsertIntoClause END +' FROM #z_Cost '+
                  ' UNION ALL '+
                  'SELECT '+@AnalyseByFld+ ', 2 AS PLM_ID,''Labour'' AS PLM, LabourCost AS Cost '+                 
                    CASE @InsertIntoClause WHEN '' THEN ''
                          ELSE ', '+@InsertIntoClause END +' FROM #z_Cost) B'
            WHEN @Parts + @Misc THEN      
                  '( SELECT '+@AnalyseByFld+ ', 1 AS PLM_ID,''Parts'' AS PLM, PartsCost AS Cost '+                 
                    CASE @InsertIntoClause WHEN '' THEN ''
                          ELSE ', '+@InsertIntoClause END +' FROM #z_Cost '+
                  ' UNION ALL '+
                  'SELECT '+@AnalyseByFld+ ', 3 AS PLM_ID,''Misc'' AS PLM, MiscCost AS Cost '+                
                    CASE @InsertIntoClause WHEN '' THEN ''
                          ELSE ', '+@InsertIntoClause END +' FROM #z_Cost) B' 
            WHEN @Labour + @Misc THEN
                  '( SELECT '+@AnalyseByFld+ ', 2 AS PLM_ID,''Labour'' AS PLM, LabourCost AS Cost '+                 
                    CASE @InsertIntoClause WHEN '' THEN ''
                          ELSE ', '+@InsertIntoClause END +' FROM #z_Cost '+ 
                  ' UNION ALL '+
                  'SELECT '+@AnalyseByFld+ ', 3 AS PLM_ID,''Misc'' AS PLM, MiscCost AS Cost '+                
                    CASE @InsertIntoClause WHEN '' THEN ''
                          ELSE ', '+@InsertIntoClause END +' FROM #z_Cost) B'       
      
            ELSE
                  '( SELECT '+@AnalyseByFld+ ', 1 AS PLM_ID,''Parts'' AS PLM, PartsCost AS Cost '+                 
                    CASE @InsertIntoClause WHEN '' THEN ''
                          ELSE ', '+@InsertIntoClause END +' FROM #z_Cost '+
                    ' UNION ALL '+
                    'SELECT '+@AnalyseByFld+ ', 2 AS PLM_ID,''Labour'' AS PLM, LabourCost AS Cost '+                 
                    CASE @InsertIntoClause WHEN '' THEN ''
                          ELSE ', '+@InsertIntoClause END +' FROM #z_Cost '+
                    ' UNION ALL '+
                    'SELECT '+@AnalyseByFld+ ', 3 AS PLM_ID,''Misc'' AS PLM, MiscCost AS Cost '+                
                    CASE @InsertIntoClause WHEN '' THEN ''
                          ELSE ', '+@InsertIntoClause END +' FROM #z_Cost) B' 
            END
      
END
ELSE
BEGIN
      SET @Table='#z_Cost B'
END

--exec('SELECT * FROM ' + @Table)

IF @AnalyseBy = 'MONH' 
BEGIN
      SET @SQL =  ' SELECT ' 
      SET @SQL = @SQL + @SelectColumns +', '
      SET @SQL = @SQL +' CalenderPeriod, '
      /*VV #1315*/
      SET @SQL =@SQL+CASE @ShowPeriods WHEN 1 THEN 
		'RIGHT(CAST(CalenderPeriod AS varchar(10)),2)+''-''+LEFT(CAST(CalenderPeriod AS varchar(10)),4) AS CalPeriodDescr,'
      ELSE 
		'RIGHT(CONVERT(VARCHAR(12),CONVERT(DATETIME,CONVERT(VARCHAR,CalenderPeriod)+''01'',112),113),9) AS CalPeriodDescr,'
      END
	
      SET @SQL = @SQL + ' CAST(SUM(Cost) as Decimal(38,3)) AS TotalCost   FROM ' + @Table 
      SET @SQL = @SQL + ' GROUP BY '+ @GroupBy1Clause2+',CalenderPeriod,' 
      SET @SQL = @SQL + 'RIGHT(CONVERT(VARCHAR(12),CONVERT(DATETIME,CalenderPeriod +''01'',112),113),9)'
      SET @SQL = @SQL + ' ORDER BY CalenderPeriod '
      
END
ELSE IF @AnalyseBy = 'QRTR' 
BEGIN
      SET @SQL =  ' SELECT '
      SET @SQL = @SQL + @SelectColumns +', '
      SET @SQL = @SQL + ' CAST(Left(CalenderPeriod,4) + CONVERT(varchar(1),((Right(CalenderPeriod,2)+2)/3)) AS int) as  CalenderPeriod, '
      SET @SQL = @SQL + 'Left(CalenderPeriod,4) + ''-Q'' + CONVERT(varchar(1),((Right(CalenderPeriod,2)+2)/3)) as CalPeriodDescr ,'
      SET @SQL = @SQL + ' CAST(SUM(Cost) as Decimal(38,3)) AS TotalCost FROM ' + @Table   
      SET @SQL = @SQL + ' GROUP BY '+ @GroupBy1Clause2 + ', '
      SET @SQL = @SQL + ' CAST(Left(CalenderPeriod,4) + CONVERT(varchar(1),((Right(CalenderPeriod,2)+2)/3)) AS int), '
      SET @SQL = @SQL + ' Left(CalenderPeriod,4) + ''-Q'' + CONVERT(varchar(1),((Right(CalenderPeriod,2)+2)/3)) '
      SET @SQL = @SQL + ' ORDER BY Left(CalenderPeriod,4) + ''-Q'' + CONVERT(varchar(1),((Right(CalenderPeriod,2)+2)/3)) '
      
END
ELSE IF @AnalyseBy = 'YEAR'  
BEGIN
      SET @SQL =  ' SELECT '
      SET @SQL = @SQL + @SelectColumns +', '
      SET @SQL = @SQL +' CalenderPeriod/100 as  CalenderPeriod, CAST(CalenderPeriod/100 AS varchar) AS CalPeriodDescr ,'
      SET @SQL = @SQL + ' CAST(SUM(Cost) as Decimal(38,3)) AS TotalCost FROM ' + @Table   
      SET @SQL = @SQL + ' GROUP BY '+ @GroupBy1Clause2+',CalenderPeriod/100, CAST(CalenderPeriod/100 AS varchar)'
      SET @SQL = @SQL + ' ORDER BY CalenderPeriod/100 '
      
END
ELSE IF @AnalyseBy = 'PRTY'
BEGIN
      
      --Find ID for the first Projection  
      DECLARE @HeaderID varchar(20)
      SET @HeaderID=LEFT(@Projection_Header_Id,CHARINDEX(',',@Projection_Header_Id)-1)
      
      --Return Costs
      SET @SQL = 'SELECT '
      SET @SQL = @SQL + @SelectColumns +', '
      
      SET @SQL = @SQL + CASE @AnalyseVariance               
                    WHEN 0 THEN ' CAST(SUM(Cost1) as Decimal(38,3)) AS Cost1, CAST(SUM(Cost2) as Decimal(38,3)) AS Cost2'
                    ELSE ' CalenderPeriod,CalPeriodDescr, CAST(SUM(Cost1)-SUM(Cost2) as Decimal(38,3)) AS TotalCost '
                      END
      
      SET @SQL = @SQL + ' FROM (SELECT '
      SET @SQL = @SQL + @GroupBy1Clause2 +', '
      SET @SQL = @SQL + ' SUM(CASE Projection_Header_ID WHEN '+ @HeaderID +' THEN Cost ELSE 0 END) AS Cost1, '
      SET @SQL = @SQL + ' SUM(CASE Projection_Header_ID WHEN '+ @HeaderID +' THEN 0 ELSE Cost END) AS Cost2 '
      SET @SQL = @SQL + 'FROM  ' + @Table
      SET @SQL = @SQL + ' GROUP BY ' + @GroupBy1Clause2
      SET @SQL = @SQL + ', Projection_Header_ID) A '
      SET @SQL = @SQL + ' GROUP BY ' + @GroupBy1Clause2
      SET @SQL = @SQL + CASE RIGHT(@GroupBy,4)
                    WHEN 'MONH' THEN ' ORDER BY CalenderPeriod'
                    WHEN 'QRTR' THEN ' ORDER BY CalenderPeriod'
                    WHEN 'YEAR' THEN ' ORDER BY CalenderPeriod'
                    ELSE ' HAVING SUM(Cost1)<>0 OR SUM(Cost2)<>0 ORDER BY '+@GroupBy1Clause2
                    END
      --Return the Projection names
      SET @Name1=(SELECT Projection_Name FROM PROJECTION_HEADER WHERE Projection_Header_ID=CAST(@HeaderID AS int))
      SET @Counter=LEN(@Projection_Header_Id)-LEN(@HeaderID)-1
      SET @HeaderID=RIGHT(@Projection_Header_Id,@Counter)
      SET @Name2=(SELECT Projection_Name FROM PROJECTION_HEADER WHERE Projection_Header_ID=CAST(@HeaderID AS int))
END

-- print @SQL
--return
--KN 2220 : Error in Actual vs Archive Analysis report
IF(@ISCrossTab='true')
	BEGIN
			CREATE TABLE [#temp](
				[Col1] [varchar](max) COLLATE DATABASE_DEFAULT NULL,
				[CalendarPeriod] [varchar](max) COLLATE DATABASE_DEFAULT NULL,
				[CalPeriodDescr] [varchar](max) COLLATE DATABASE_DEFAULT NULL,
				[TotalCost] [float],
				[Col2] [varchar](max) COLLATE DATABASE_DEFAULT NULL,
				[Col3] [varchar](max) COLLATE DATABASE_DEFAULT NULL,
				[Col4] [varchar](max) COLLATE DATABASE_DEFAULT NULL,
				[Col5] [varchar](max) COLLATE DATABASE_DEFAULT NULL
			) ON [PRIMARY]
			 
			INSERT INTO #temp( Col1 , Col2,Col3,Col4 ,Col5 ,CalendarPeriod , CalPeriodDescr , TotalCost) 
			EXEC(@SQL)
				
			DECLARE @ListCol VARCHAR(MAX)
			DECLARE @Query VARCHAR(MAX)

			SELECT  @ListCol = STUFF(( SELECT DISTINCT  '],[' + CalendarPeriod  FROM   #temp
									ORDER BY '],[' + CalendarPeriod ASC
									FOR XML PATH('') ), 1, 2, '') + ']'

			SET @Query ='SELECT * FROM ( SELECT '+@SelectQueryForCrossTab +' CalendarPeriod,TotalCost from #temp WHERE TotalCost!=0) tmp PIVOT (SUM(TotalCost) for CalendarPeriod in('+@ListCol+')) AS pvt
						 ORDER BY ' + SUBSTRING(@OrderByCrossTab,1,LEN(@OrderByCrossTab)-1)
			print @Query
			EXECUTE (@Query)
	END
ELSE
	EXEC(@SQL)


GO


/****** Object:  StoredProcedure [dbo].[RPT_PARTS_DEMAND_ANALYSIS_P]    Script Date: 08/19/2011 13:11:54 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[RPT_PARTS_DEMAND_ANALYSIS_P]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[RPT_PARTS_DEMAND_ANALYSIS_P]
GO


/****** Object:  StoredProcedure [dbo].[RPT_PARTS_DEMAND_ANALYSIS_P]    Script Date: 08/19/2011 13:11:54 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[RPT_PARTS_DEMAND_ANALYSIS_P]
/******************************************************************************
	File: RPT_PARTS_DEMAND_ANALYSIS_P.sql
	Name: RPT_PARTS_DEMAND_ANALYSIS_P

	Called By: 

	Desc: 

	Auth: Alex Lassauniere
	Date: 01 Apr 2009
*******************************************************************************
		Change History
*******************************************************************************
	Date:		Author:		Description:
	--------	--------	----------------------------------------
	02/06/09	AL			CR8218: fixed @ProjHeaderID
	14/04/11	GD			Fixed Issue 1459
	17/06/11	GD			Fixed issue 1657
	19/08/11    GD          Fixed issue #2305
*******************************************************************************/
	/* Param List */
	@StartDate int = 200904,
	@EndDate int = 201003,

	@GroupBy varchar(MAX)='',
	@AnalyseBy varchar(MAX)='',
	@CalculationOption int=0,	--0: Eqp, 1: Dealer, 2: Factory

	@BranchId varchar(MAX)='',
	@SiteID varchar(MAX)='',
	@FleetID varchar(MAX)='',
	@EqpClassId varchar(MAX)='',
	@EqpGroupId varchar(MAX)='',
	@ManufacturerId varchar(MAX)='',
	@ModelID varchar(MAX)='',
	@EqpPlanID varchar(MAX)='',
	@RegionId varchar(MAX)='',
	@DivisionId varchar(MAX)='',
	@EqpCriticalityId varchar(MAX)='',
	@EqpLocationId varchar(MAX)='',
	@EqpCategoryId varchar(MAX)='',
	@EqpCostCentreID varchar(MAX)='',
	@CostResponsibilityID varchar(MAX)='',
	@ContractID varchar(MAX)='',
	@ContractTypeID varchar(MAX)='',
	@ProjHeaderID varchar(MAX)='',
	@ParentEquipmentID varchar(MAX)='',

	@CostTypeID varchar(MAX)='',
	@SystemID varchar(MAX)='',
	@SubSystemID varchar(MAX)='',
	@TaskHeaderId varchar(MAX)='',
	@TaskTypeID varchar(MAX)='',
	@ComponentCodeID varchar(MAX)='',
	@modifierID varchar(MAX)='',
	@CostBearerID varchar(MAX)='',
	@PartTypeID varchar(MAX)='',
	@PartManufacturerID varchar(MAX)='',
	@PrimaryPartNoID varchar(MAX)='',
    @SalesResponsibilityID varchar(MAX)='',
    
    --GD #1657
    @IsCrossTab BIT=0
AS

--1: get tasks and group bys
DECLARE @GroupBy1 varchar(10),@GroupBy2 varchar(10),@GroupBy3 varchar(10),@GroupBy4 varchar(10),@Pos int,@Temp varchar(10)

--GD  added to fix fixed issue #1657
DECLARE @SelectQueryForCrossTab VARCHAR(Max)
DECLARE @OrderByCrossTab VARCHAR(Max)

SET @SelectQueryForCrossTab=''
SET @OrderByCrossTab =''


WHILE @GroupBy<>''
BEGIN
	SET @Pos=CHARINDEX(',',@GroupBy)
	IF ISNULL(@Pos,0)=0
	BEGIN
		SET @Temp=@GroupBy
		SET @GroupBy=''
	END
	ELSE
	BEGIN
		SET @Temp=LEFT(@GroupBy,@Pos-1)
		SET @GroupBy=RIGHT(@GroupBy,LEN(@GroupBy)-@Pos)
	END
	
	IF @GroupBy1 IS NULL
		SET @GroupBy1=@Temp
	ELSE IF @GroupBy2 IS NULL
		SET @GroupBy2=@Temp
	ELSE IF @GroupBy3 IS NULL
		SET @GroupBy3=@Temp
	ELSE 
		SET @GroupBy4=@Temp
	
END

--SELECT @GroupBy1,@GroupBy2,@GroupBy3,@GroupBy4

CREATE TABLE #TASK (ProjTaskID int Primary Key,EqpPlanID int,
	PctPurchasePart float,PctPurchaseNewPart float,
	GroupByID1 int, GroupBy1 varchar(100) COLLATE database_default,
	GroupByID2 int, GroupBy2 varchar(100) COLLATE database_default,
	GroupByID3 int, GroupBy3 varchar(100) COLLATE database_default,
	GroupByID4 int, GroupBy4 varchar(100) COLLATE database_default)

INSERT INTO #TASK(ProjTaskID,EqpPlanID,PctPurchasePart,PctPurchaseNewPart,
				GroupByID1, GroupBy1,GroupByID2, GroupBy2,
				GroupByID3, GroupBy3,GroupByID4, GroupBy4)
SELECT	PT.ProjTaskId,EH.EqpPlanID,PT.PctPurchasePart/100,PT.PctPurchaseNewPart/100,
		CASE @GroupBy1
			WHEN 'BRAN' THEN EH.BranchId --Branch
			WHEN 'SITE' THEN EH.SiteId --Site
			WHEN 'FLEE' THEN EH.FleetId --Fleet
			WHEN 'ECLS' THEN EH.Eqp_Class_Id --Equipment Class
			WHEN 'EGRP' THEN EH.Equipment_Group_Id --Equipment Group
			WHEN 'MANU' THEN EH.ManufacturerId --Manufacturer
			WHEN 'MODL' THEN EH.ModelId --Model
			WHEN 'EQPL' THEN EH.EqpPlanId --Equipment
			WHEN 'REGN' THEN EH.Region_Id --Region
			WHEN 'DEVI' THEN EH.Division_Id --Division								
			WHEN 'CRIT' THEN EH.Eqp_Criticality_Id --Equipment Criticality
			WHEN 'LCTN' THEN EH.Eqp_Location_Id --Equipment Location
			WHEN 'CTGR' THEN EH.Eqp_Category_Id --Equipment Category
			WHEN 'ECCT' THEN EH.Cost_Centre_ID --Equipment Cost Centre
			WHEN 'CRSP' THEN EH.Cost_Responsibility_ID --Responsibility
			WHEN 'CNTT' THEN EH.ContractTypeID --Contract Type
			WHEN 'CONT' THEN EH.ContractId --Contract
			WHEN 'PEQP' THEN NULL --Parent Equipment
			WHEN 'CTTY' THEN CH.CostTypeID --Cost Type
			WHEN 'SYST' THEN CH.SystemID --System
			WHEN 'SUBS' THEN CH.SubSystemID --Sub System
			WHEN 'PRTA' THEN PT.Task_Header_ID --Strategy Task
			WHEN 'EVTT' THEN PT.TaskTypeId --Task Type
			WHEN 'EVCC' THEN PT.ComponentCodeId --Component Code
			WHEN 'MDCO' THEN PT.ModifierId --Modifier Code
			WHEN 'PRTY' THEN P.Part_Type_ID --Part Type
			WHEN 'PMAN' THEN PT.ManufacturerId --Part Manufacturer
			WHEN 'PART' THEN PT.Part_Id --Primary Part No
			WHEN 'PPDS' THEN PT.Part_Id --Primary Part Description			
			WHEN 'SARP' THEN PT.SalesResponsibilityID --Sales Resp
			ELSE NULL
		END AS GroupByID1,
		CASE @GroupBy1
			WHEN 'BRAN' THEN EH.Branch --Branch
			WHEN 'SITE' THEN EH.Site --Site
			WHEN 'FLEE' THEN EH.Fleet --Fleet
			WHEN 'ECLS' THEN EH.Eqp_Class_Desc --Equipment Class
			WHEN 'EGRP' THEN EH.Equipment_Group_Desc --Equipment Group
			WHEN 'MANU' THEN EH.Manufacturer --Manufacturer
			WHEN 'MODL' THEN EH.Model --Model
			WHEN 'EQPL' THEN EH.EqpPlan --Equipment
			WHEN 'REGN' THEN EH.Region_Desc --Region
			WHEN 'DEVI' THEN EH.Division_Desc --Division								
			WHEN 'CRIT' THEN EH.Eqp_Criticality_Desc --Equipment Criticality
			WHEN 'LCTN' THEN EH.Eqp_Location_Desc --Equipment Location
			WHEN 'CTGR' THEN EH.Eqp_Category_Desc --Equipment Category
			WHEN 'ECCT' THEN EH.Cost_Centre --Equipment Cost Centre
			WHEN 'CRSP' THEN EH.Cost_Responsibility_Desc --Responsibility
			WHEN 'CNTT' THEN EH.ContractType --Contract Type
			WHEN 'CONT' THEN EH.Contract --Contract
			WHEN 'PEQP' THEN NULL --Parent Equipment
			WHEN 'CTTY' THEN CH.CostType --Cost Type
			WHEN 'SYST' THEN CH.System --System
			WHEN 'SUBS' THEN CH.SubSystem --Sub System
			WHEN 'PRTA' THEN TH.Description --Strategy Task
			WHEN 'EVTT' THEN TT.Code + ' - ' + TT.Description --Task Type
			WHEN 'EVCC' THEN CH.Code + ' - ' + CH.Description --Component Code
			WHEN 'MDCO' THEN MC.Code + ' - ' + MC.Description --Modifier Code
			WHEN 'PRTY' THEN PTY.PartType + ' ' + PTY.PartTypeDesc --Part Type
			WHEN 'PMAN' THEN M.Manufacturer --Part Manufacturer
			WHEN 'PART' THEN P.Part --Primary Part No
			WHEN 'PPDS' THEN P.PartDescription --Primary Part Description
			WHEN 'SARP' THEN E.Surname + ', ' + E.First_Name --Sales Resp
			ELSE NULL
		END AS GroupBy1,
		CASE @GroupBy2
			WHEN 'BRAN' THEN EH.BranchId --Branch
			WHEN 'SITE' THEN EH.SiteId --Site
			WHEN 'FLEE' THEN EH.FleetId --Fleet
			WHEN 'ECLS' THEN EH.Eqp_Class_Id --Equipment Class
			WHEN 'EGRP' THEN EH.Equipment_Group_Id --Equipment Group
			WHEN 'MANU' THEN EH.ManufacturerId --Manufacturer
			WHEN 'MODL' THEN EH.ModelId --Model
			WHEN 'EQPL' THEN EH.EqpPlanId --Equipment
			WHEN 'REGN' THEN EH.Region_Id --Region
			WHEN 'DEVI' THEN EH.Division_Id --Division								
			WHEN 'CRIT' THEN EH.Eqp_Criticality_Id --Equipment Criticality
			WHEN 'LCTN' THEN EH.Eqp_Location_Id --Equipment Location
			WHEN 'CTGR' THEN EH.Eqp_Category_Id --Equipment Category
			WHEN 'ECCT' THEN EH.Cost_Centre_ID --Equipment Cost Centre
			WHEN 'CRSP' THEN EH.Cost_Responsibility_ID --Responsibility
			WHEN 'CNTT' THEN EH.ContractTypeID --Contract Type
			WHEN 'CONT' THEN EH.ContractId --Contract
			WHEN 'PEQP' THEN NULL --Parent Equipment
			WHEN 'CTTY' THEN CH.CostTypeID --Cost Type
			WHEN 'SYST' THEN CH.SystemID --System
			WHEN 'SUBS' THEN CH.SubSystemID --Sub System
			WHEN 'PRTA' THEN PT.Task_Header_ID --Strategy Task
			WHEN 'EVTT' THEN PT.TaskTypeId --Task Type
			WHEN 'EVCC' THEN PT.ComponentCodeId --Component Code
			WHEN 'MDCO' THEN PT.ModifierId --Modifier Code
			WHEN 'PRTY' THEN P.Part_Type_ID --Part Type
			WHEN 'PMAN' THEN PT.ManufacturerId --Part Manufacturer
			WHEN 'PART' THEN PT.Part_Id --Primary Part No
			WHEN 'PPDS' THEN PT.Part_Id --Primary Part Description
			WHEN 'SARP' THEN PT.SalesResponsibilityID --Sales Resp
			ELSE NULL
		END AS GroupByID2,
		CASE @GroupBy2
			WHEN 'BRAN' THEN EH.Branch --Branch
			WHEN 'SITE' THEN EH.Site --Site
			WHEN 'FLEE' THEN EH.Fleet --Fleet
			WHEN 'ECLS' THEN EH.Eqp_Class_Desc --Equipment Class
			WHEN 'EGRP' THEN EH.Equipment_Group_Desc --Equipment Group
			WHEN 'MANU' THEN EH.Manufacturer --Manufacturer
			WHEN 'MODL' THEN EH.Model --Model
			WHEN 'EQPL' THEN EH.EqpPlan --Equipment
			WHEN 'REGN' THEN EH.Region_Desc --Region
			WHEN 'DEVI' THEN EH.Division_Desc --Division								
			WHEN 'CRIT' THEN EH.Eqp_Criticality_Desc --Equipment Criticality
			WHEN 'LCTN' THEN EH.Eqp_Location_Desc --Equipment Location
			WHEN 'CTGR' THEN EH.Eqp_Category_Desc --Equipment Category
			WHEN 'ECCT' THEN EH.Cost_Centre --Equipment Cost Centre
			WHEN 'CRSP' THEN EH.Cost_Responsibility_Desc --Responsibility
			WHEN 'CNTT' THEN EH.ContractType --Contract Type
			WHEN 'CONT' THEN EH.Contract --Contract
			WHEN 'PEQP' THEN NULL --Parent Equipment
			WHEN 'CTTY' THEN CH.CostType --Cost Type
			WHEN 'SYST' THEN CH.System --System
			WHEN 'SUBS' THEN CH.SubSystem --Sub System
			WHEN 'PRTA' THEN TH.Description --Strategy Task
			WHEN 'EVTT' THEN TT.Code + ' - ' + TT.Description --Task Type
			WHEN 'EVCC' THEN CH.Code + ' - ' + CH.Description --Component Code
			WHEN 'MDCO' THEN MC.Code + ' - ' + MC.Description --Modifier Code
			WHEN 'PRTY' THEN PTY.PartType + ' ' + PTY.PartTypeDesc --Part Type
			WHEN 'PMAN' THEN M.Manufacturer --Part Manufacturer
			WHEN 'PART' THEN P.Part  --Primary Part No
			WHEN 'PPDS' THEN P.PartDescription --Primary Part Description
			WHEN 'SARP' THEN E.Surname + ', ' + E.First_Name --Sales Resp
			ELSE NULL
		END AS GroupBy2,
		CASE @GroupBy3
			WHEN 'BRAN' THEN EH.BranchId --Branch
			WHEN 'SITE' THEN EH.SiteId --Site
			WHEN 'FLEE' THEN EH.FleetId --Fleet
			WHEN 'ECLS' THEN EH.Eqp_Class_Id --Equipment Class
			WHEN 'EGRP' THEN EH.Equipment_Group_Id --Equipment Group
			WHEN 'MANU' THEN EH.ManufacturerId --Manufacturer
			WHEN 'MODL' THEN EH.ModelId --Model
			WHEN 'EQPL' THEN EH.EqpPlanId --Equipment
			WHEN 'REGN' THEN EH.Region_Id --Region
			WHEN 'DEVI' THEN EH.Division_Id --Division								
			WHEN 'CRIT' THEN EH.Eqp_Criticality_Id --Equipment Criticality
			WHEN 'LCTN' THEN EH.Eqp_Location_Id --Equipment Location
			WHEN 'CTGR' THEN EH.Eqp_Category_Id --Equipment Category
			WHEN 'ECCT' THEN EH.Cost_Centre_ID --Equipment Cost Centre
			WHEN 'CRSP' THEN EH.Cost_Responsibility_ID --Responsibility
			WHEN 'CNTT' THEN EH.ContractTypeID --Contract Type
			WHEN 'CONT' THEN EH.ContractId --Contract
			WHEN 'PEQP' THEN NULL --Parent Equipment
			WHEN 'CTTY' THEN CH.CostTypeID --Cost Type
			WHEN 'SYST' THEN CH.SystemID --System
			WHEN 'SUBS' THEN CH.SubSystemID --Sub System
			WHEN 'PRTA' THEN PT.Task_Header_ID --Strategy Task
			WHEN 'EVTT' THEN PT.TaskTypeId --Task Type
			WHEN 'EVCC' THEN PT.ComponentCodeId --Component Code
			WHEN 'MDCO' THEN PT.ModifierId --Modifier Code
			WHEN 'PRTY' THEN P.Part_Type_ID --Part Type
			WHEN 'PMAN' THEN PT.ManufacturerId --Part Manufacturer
			WHEN 'PART' THEN PT.Part_Id --Primary Part No
			WHEN 'PPDS' THEN PT.Part_Id --Primary Part Description
			WHEN 'SARP' THEN PT.SalesResponsibilityID --Sales Resp
			ELSE NULL
		END AS GroupByID3,
		CASE @GroupBy3
			WHEN 'BRAN' THEN EH.Branch --Branch
			WHEN 'SITE' THEN EH.Site --Site
			WHEN 'FLEE' THEN EH.Fleet --Fleet
			WHEN 'ECLS' THEN EH.Eqp_Class_Desc --Equipment Class
			WHEN 'EGRP' THEN EH.Equipment_Group_Desc --Equipment Group
			WHEN 'MANU' THEN EH.Manufacturer --Manufacturer
			WHEN 'MODL' THEN EH.Model --Model
			WHEN 'EQPL' THEN EH.EqpPlan --Equipment
			WHEN 'REGN' THEN EH.Region_Desc --Region
			WHEN 'DEVI' THEN EH.Division_Desc --Division								
			WHEN 'CRIT' THEN EH.Eqp_Criticality_Desc --Equipment Criticality
			WHEN 'LCTN' THEN EH.Eqp_Location_Desc --Equipment Location
			WHEN 'CTGR' THEN EH.Eqp_Category_Desc --Equipment Category
			WHEN 'ECCT' THEN EH.Cost_Centre --Equipment Cost Centre
			WHEN 'CRSP' THEN EH.Cost_Responsibility_Desc --Responsibility
			WHEN 'CNTT' THEN EH.ContractType --Contract Type
			WHEN 'CONT' THEN EH.Contract --Contract
			WHEN 'PEQP' THEN NULL --Parent Equipment
			WHEN 'CTTY' THEN CH.CostType --Cost Type
			WHEN 'SYST' THEN CH.System --System
			WHEN 'SUBS' THEN CH.SubSystem --Sub System
			WHEN 'PRTA' THEN TH.Description --Strategy Task
			WHEN 'EVTT' THEN TT.Code + ' - ' + TT.Description --Task Type
			WHEN 'EVCC' THEN CH.Code + ' - ' + CH.Description --Component Code
			WHEN 'MDCO' THEN MC.Code + ' - ' + MC.Description --Modifier Code
			WHEN 'PRTY' THEN PTY.PartType + ' ' + PTY.PartTypeDesc --Part Type
			WHEN 'PMAN' THEN M.Manufacturer --Part Manufacturer
			WHEN 'PART' THEN P.Part --Primary Part No
			WHEN 'PPDS' THEN P.PartDescription --Primary Part Description
			WHEN 'SARP' THEN E.Surname + ', ' + E.First_Name --Sales Resp
			ELSE NULL
		END AS GroupBy3,
		CASE @GroupBy4
			WHEN 'BRAN' THEN EH.BranchId --Branch
			WHEN 'SITE' THEN EH.SiteId --Site
			WHEN 'FLEE' THEN EH.FleetId --Fleet
			WHEN 'ECLS' THEN EH.Eqp_Class_Id --Equipment Class
			WHEN 'EGRP' THEN EH.Equipment_Group_Id --Equipment Group
			WHEN 'MANU' THEN EH.ManufacturerId --Manufacturer
			WHEN 'MODL' THEN EH.ModelId --Model
			WHEN 'EQPL' THEN EH.EqpPlanId --Equipment
			WHEN 'REGN' THEN EH.Region_Id --Region
			WHEN 'DEVI' THEN EH.Division_Id --Division								
			WHEN 'CRIT' THEN EH.Eqp_Criticality_Id --Equipment Criticality
			WHEN 'LCTN' THEN EH.Eqp_Location_Id --Equipment Location
			WHEN 'CTGR' THEN EH.Eqp_Category_Id --Equipment Category
			WHEN 'ECCT' THEN EH.Cost_Centre_ID --Equipment Cost Centre
			WHEN 'CRSP' THEN EH.Cost_Responsibility_ID --Responsibility
			WHEN 'CNTT' THEN EH.ContractTypeID --Contract Type
			WHEN 'CONT' THEN EH.ContractId --Contract
			WHEN 'PEQP' THEN NULL --Parent Equipment
			WHEN 'CTTY' THEN CH.CostTypeID --Cost Type
			WHEN 'SYST' THEN CH.SystemID --System
			WHEN 'SUBS' THEN CH.SubSystemID --Sub System
			WHEN 'PRTA' THEN PT.Task_Header_ID --Strategy Task
			WHEN 'EVTT' THEN PT.TaskTypeId --Task Type
			WHEN 'EVCC' THEN PT.ComponentCodeId --Component Code
			WHEN 'MDCO' THEN PT.ModifierId --Modifier Code
			WHEN 'PRTY' THEN P.Part_Type_ID --Part Type
			WHEN 'PMAN' THEN PT.ManufacturerId --Part Manufacturer
			WHEN 'PART' THEN PT.Part_Id --Primary Part No
			WHEN 'PPDS' THEN PT.Part_Id --Primary Part Description
			WHEN 'SARP' THEN PT.SalesResponsibilityID --Sales Resp
			ELSE NULL
		END AS GroupByID4,
		CASE @GroupBy4
			WHEN 'BRAN' THEN EH.Branch --Branch
			WHEN 'SITE' THEN EH.Site --Site
			WHEN 'FLEE' THEN EH.Fleet --Fleet
			WHEN 'ECLS' THEN EH.Eqp_Class_Desc --Equipment Class
			WHEN 'EGRP' THEN EH.Equipment_Group_Desc --Equipment Group
			WHEN 'MANU' THEN EH.Manufacturer --Manufacturer
			WHEN 'MODL' THEN EH.Model --Model
			WHEN 'EQPL' THEN EH.EqpPlan --Equipment
			WHEN 'REGN' THEN EH.Region_Desc --Region
			WHEN 'DEVI' THEN EH.Division_Desc --Division								
			WHEN 'CRIT' THEN EH.Eqp_Criticality_Desc --Equipment Criticality
			WHEN 'LCTN' THEN EH.Eqp_Location_Desc --Equipment Location
			WHEN 'CTGR' THEN EH.Eqp_Category_Desc --Equipment Category
			WHEN 'ECCT' THEN EH.Cost_Centre --Equipment Cost Centre
			WHEN 'CRSP' THEN EH.Cost_Responsibility_Desc --Responsibility
			WHEN 'CNTT' THEN EH.ContractType --Contract Type
			WHEN 'CONT' THEN EH.Contract --Contract
			WHEN 'PEQP' THEN NULL --Parent Equipment
			WHEN 'CTTY' THEN CH.CostType --Cost Type
			WHEN 'SYST' THEN CH.System --System
			WHEN 'SUBS' THEN CH.SubSystem --Sub System
			WHEN 'PRTA' THEN TH.Description --Strategy Task
			WHEN 'EVTT' THEN TT.Code + ' - ' + TT.Description --Task Type
			WHEN 'EVCC' THEN CH.Code + ' - ' + CH.Description --Component Code
			WHEN 'MDCO' THEN MC.Code + ' - ' + MC.Description --Modifier Code
			WHEN 'PRTY' THEN PTY.PartType + ' ' + PTY.PartTypeDesc --Part Type
			WHEN 'PMAN' THEN M.Manufacturer --Part Manufacturer
			WHEN 'PART' THEN P.Part --Primary Part No
			WHEN 'PPDS' THEN P.PartDescription --Primary Part Description
			WHEN 'SARP' THEN E.Surname + ', ' + E.First_Name --Sales Resp
			ELSE NULL
		END AS GroupBy4

FROM         
		tblProjTaskOpts AS PTO LEFT OUTER JOIN
		tblProjTaskAmts AS PTA ON PTO.ProjTaskOptId = PTA.ProjTaskOptId RIGHT OUTER JOIN
		EQUIPMENT_HIERARCHY_V AS EH INNER JOIN
		tblProjTasks AS PT ON EH.EqpProjId = PT.EqpProjId INNER JOIN
		TASK_HEADER AS TH ON PT.Task_Header_ID=TH.Task_Header_ID INNER JOIN
		COMPONENT_HIERARCHY_V AS CH ON PT.ComponentCodeId = CH.ComponentCodeID INNER JOIN
		tblTaskTypes AS TT ON PT.TaskTypeId = TT.TaskTypeID INNER JOIN
		tblModifierCodes AS MC ON PT.ModifierId = MC.ModifierID ON PTO.ProjTaskId = PT.ProjTaskId LEFT OUTER JOIN
		tblManufacturers AS M ON PT.ManufacturerId = M.ManufacturerId LEFT OUTER JOIN
		tblPartTypes AS PTY INNER JOIN
		tblParts AS P ON PTY.PartTypeId = P.Part_Type_ID ON PT.Part_Id = P.PartId LEFT OUTER JOIN
		EMPLOYEE E ON E.Employee_ID=PT.SalesResponsibilityID
WHERE     
		(EH.ProjHeaderId = @ProjHeaderID)	--AL: 02/06/09
		AND (PT.Unscheduled=0)
		AND (EH.BranchId IN (SELECT list_item FROM dbo.LIST_TO_TABLE_F(@BranchId)) OR ISNULL(@BranchId,'')='')
		AND (EH.SiteId IN (SELECT list_item FROM dbo.LIST_TO_TABLE_F(@SiteID)) OR ISNULL(@SiteID,'')='')
		AND (EH.FleetId IN (SELECT list_item FROM dbo.LIST_TO_TABLE_F(@FleetID)) OR ISNULL(@FleetID,'')='')
		AND (EH.Eqp_Class_Id IN (SELECT list_item FROM dbo.LIST_TO_TABLE_F(@EqpClassId)) OR ISNULL(@EqpClassId,'')='')
		AND (EH.Equipment_Group_Id IN (SELECT list_item FROM dbo.LIST_TO_TABLE_F(@EqpGroupId)) OR ISNULL(@EqpGroupId,'')='')
		AND (EH.ManufacturerId IN (SELECT list_item FROM dbo.LIST_TO_TABLE_F(@ManufacturerId)) OR ISNULL(@ManufacturerId,'')='')
		AND (EH.ModelId IN (SELECT list_item FROM dbo.LIST_TO_TABLE_F(@ModelID)) OR ISNULL(@ModelID,'')='')
		AND (EH.EqpPlanId IN (SELECT list_item FROM dbo.LIST_TO_TABLE_F(@EqpPlanID)) OR ISNULL(@EqpPlanID,'')='')
		AND (EH.Region_Id IN (SELECT list_item FROM dbo.LIST_TO_TABLE_F(@RegionId)) OR ISNULL(@RegionId,'')='')
		AND (EH.Division_Id IN (SELECT list_item FROM dbo.LIST_TO_TABLE_F(@DivisionId)) OR ISNULL(@DivisionId,'')='')
		AND (EH.Eqp_Criticality_Id IN (SELECT list_item FROM dbo.LIST_TO_TABLE_F(@EqpCriticalityId)) OR ISNULL(@EqpCriticalityId,'')='')
		AND (EH.Eqp_Location_Id IN (SELECT list_item FROM dbo.LIST_TO_TABLE_F(@EqpLocationId)) OR ISNULL(@EqpLocationId,'')='')
		AND (EH.Eqp_Category_Id IN (SELECT list_item FROM dbo.LIST_TO_TABLE_F(@EqpCategoryId)) OR ISNULL(@EqpCategoryId,'')='')
		AND (EH.Cost_Centre_ID IN (SELECT list_item FROM dbo.LIST_TO_TABLE_F(@EqpCostCentreID)) OR ISNULL(@EqpCostCentreID,'')='')
		AND (EH.Cost_Responsibility_ID IN (SELECT list_item FROM dbo.LIST_TO_TABLE_F(@CostResponsibilityID)) OR ISNULL(@CostResponsibilityID,'')='')
		AND (EH.ContractId IN (SELECT list_item FROM dbo.LIST_TO_TABLE_F(@ContractID)) OR ISNULL(@ContractID,'')='')
		AND (EH.ContractTypeID IN (SELECT list_item FROM dbo.LIST_TO_TABLE_F(@ContractTypeID)) OR ISNULL(@ContractTypeID,'')='')

		AND (EH.EqpPlanID IN (SELECT EqpPlanID FROM dbo.EQP_SIBLINGS_F(@ParentEquipmentID)) OR ISNULL(@ParentEquipmentID,'')='')

		AND (CH.CostTypeID IN (SELECT list_item FROM dbo.LIST_TO_TABLE_F(@CostTypeID)) OR ISNULL(@CostTypeID,'')='')
		AND (CH.SystemID IN (SELECT list_item FROM dbo.LIST_TO_TABLE_F(@SystemID)) OR ISNULL(@SystemID,'')='')
		AND (CH.SubSystemID IN (SELECT list_item FROM dbo.LIST_TO_TABLE_F(@SubSystemID)) OR ISNULL(@SubSystemID,'')='')
		AND (PT.Task_Header_ID IN (SELECT list_item FROM dbo.LIST_TO_TABLE_F(@TaskHeaderId)) OR ISNULL(@TaskHeaderId,'')='')
		AND (PT.TaskTypeId IN (SELECT list_item FROM dbo.LIST_TO_TABLE_F(@TaskTypeID)) OR ISNULL(@TaskTypeID,'')='')
		AND (PT.ComponentCodeId IN (SELECT list_item FROM dbo.LIST_TO_TABLE_F(@ComponentCodeID)) OR ISNULL(@ComponentCodeID,'')='')
		AND (PT.ModifierId IN (SELECT list_item FROM dbo.LIST_TO_TABLE_F(@modifierID)) OR ISNULL(@modifierID,'')='')
		AND (PTA.Cost_Bearer_ID IN (SELECT list_item FROM dbo.LIST_TO_TABLE_F(@CostBearerID)) OR ISNULL(@CostBearerID,'')='')
		AND (P.Part_Type_ID IN (SELECT list_item FROM dbo.LIST_TO_TABLE_F(@PartTypeID)) OR ISNULL(@PartTypeID,'')='')
		AND (PT.ManufacturerId IN (SELECT list_item FROM dbo.LIST_TO_TABLE_F(@PartManufacturerID)) OR ISNULL(@PartManufacturerID,'')='')
		AND (PT.Part_Id IN (SELECT list_item FROM dbo.LIST_TO_TABLE_F(@PrimaryPartNoID)) OR ISNULL(@PrimaryPartNoID,'')='')
		AND (PT.SalesResponsibilityID IN (SELECT list_item FROM dbo.LIST_TO_TABLE_F(@SalesResponsibilityID)) OR ISNULL(@SalesResponsibilityID,'')='')

GROUP BY
		PT.ProjTaskId,EH.EqpPlanID,PT.PctPurchasePart,PT.PctPurchaseNewPart,
		CASE @GroupBy1
			WHEN 'BRAN' THEN EH.BranchId --Branch
			WHEN 'SITE' THEN EH.SiteId --Site
			WHEN 'FLEE' THEN EH.FleetId --Fleet
			WHEN 'ECLS' THEN EH.Eqp_Class_Id --Equipment Class
			WHEN 'EGRP' THEN EH.Equipment_Group_Id --Equipment Group
			WHEN 'MANU' THEN EH.ManufacturerId --Manufacturer
			WHEN 'MODL' THEN EH.ModelId --Model
			WHEN 'EQPL' THEN EH.EqpPlanId --Equipment
			WHEN 'REGN' THEN EH.Region_Id --Region
			WHEN 'DEVI' THEN EH.Division_Id --Division								
			WHEN 'CRIT' THEN EH.Eqp_Criticality_Id --Equipment Criticality
			WHEN 'LCTN' THEN EH.Eqp_Location_Id --Equipment Location
			WHEN 'CTGR' THEN EH.Eqp_Category_Id --Equipment Category
			WHEN 'ECCT' THEN EH.Cost_Centre_ID --Equipment Cost Centre
			WHEN 'CRSP' THEN EH.Cost_Responsibility_ID --Responsibility
			WHEN 'CNTT' THEN EH.ContractTypeID --Contract Type
			WHEN 'CONT' THEN EH.ContractId --Contract
			WHEN 'PEQP' THEN NULL --Parent Equipment
			WHEN 'CTTY' THEN CH.CostTypeID --Cost Type
			WHEN 'SYST' THEN CH.SystemID --System
			WHEN 'SUBS' THEN CH.SubSystemID --Sub System
			WHEN 'PRTA' THEN PT.Task_Header_ID --Strategy Task
			WHEN 'EVTT' THEN PT.TaskTypeId --Task Type
			WHEN 'EVCC' THEN PT.ComponentCodeId --Component Code
			WHEN 'MDCO' THEN PT.ModifierId --Modifier Code
			WHEN 'PRTY' THEN P.Part_Type_ID --Part Type
			WHEN 'PMAN' THEN PT.ManufacturerId --Part Manufacturer
			WHEN 'PART' THEN PT.Part_Id --Primary Part No
			WHEN 'PPDS' THEN PT.Part_Id --Primary Part Description
			WHEN 'SARP' THEN PT.SalesResponsibilityID --Sales Resp
			ELSE NULL
		END,
		CASE @GroupBy1
			WHEN 'BRAN' THEN EH.Branch --Branch
			WHEN 'SITE' THEN EH.Site --Site
			WHEN 'FLEE' THEN EH.Fleet --Fleet
			WHEN 'ECLS' THEN EH.Eqp_Class_Desc --Equipment Class
			WHEN 'EGRP' THEN EH.Equipment_Group_Desc --Equipment Group
			WHEN 'MANU' THEN EH.Manufacturer --Manufacturer
			WHEN 'MODL' THEN EH.Model --Model
			WHEN 'EQPL' THEN EH.EqpPlan --Equipment
			WHEN 'REGN' THEN EH.Region_Desc --Region
			WHEN 'DEVI' THEN EH.Division_Desc --Division								
			WHEN 'CRIT' THEN EH.Eqp_Criticality_Desc --Equipment Criticality
			WHEN 'LCTN' THEN EH.Eqp_Location_Desc --Equipment Location
			WHEN 'CTGR' THEN EH.Eqp_Category_Desc --Equipment Category
			WHEN 'ECCT' THEN EH.Cost_Centre --Equipment Cost Centre
			WHEN 'CRSP' THEN EH.Cost_Responsibility_Desc --Responsibility
			WHEN 'CNTT' THEN EH.ContractType --Contract Type
			WHEN 'CONT' THEN EH.Contract --Contract
			WHEN 'PEQP' THEN NULL --Parent Equipment
			WHEN 'CTTY' THEN CH.CostType --Cost Type
			WHEN 'SYST' THEN CH.System --System
			WHEN 'SUBS' THEN CH.SubSystem --Sub System
			WHEN 'PRTA' THEN TH.Description --Strategy Task
			WHEN 'EVTT' THEN TT.Code + ' - ' + TT.Description --Task Type
			WHEN 'EVCC' THEN CH.Code + ' - ' + CH.Description --Component Code
			WHEN 'MDCO' THEN MC.Code + ' - ' + MC.Description --Modifier Code
			WHEN 'PRTY' THEN PTY.PartType + ' ' + PTY.PartTypeDesc --Part Type
			WHEN 'PMAN' THEN M.Manufacturer --Part Manufacturer
			WHEN 'PART' THEN P.Part  --Primary Part No
			WHEN 'PPDS' THEN P.PartDescription --Primary Part Description
			WHEN 'SARP' THEN E.Surname + ', ' + E.First_Name --Sales Resp
			ELSE NULL
		END,
		CASE @GroupBy2
			WHEN 'BRAN' THEN EH.BranchId --Branch
			WHEN 'SITE' THEN EH.SiteId --Site
			WHEN 'FLEE' THEN EH.FleetId --Fleet
			WHEN 'ECLS' THEN EH.Eqp_Class_Id --Equipment Class
			WHEN 'EGRP' THEN EH.Equipment_Group_Id --Equipment Group
			WHEN 'MANU' THEN EH.ManufacturerId --Manufacturer
			WHEN 'MODL' THEN EH.ModelId --Model
			WHEN 'EQPL' THEN EH.EqpPlanId --Equipment
			WHEN 'REGN' THEN EH.Region_Id --Region
			WHEN 'DEVI' THEN EH.Division_Id --Division								
			WHEN 'CRIT' THEN EH.Eqp_Criticality_Id --Equipment Criticality
			WHEN 'LCTN' THEN EH.Eqp_Location_Id --Equipment Location
			WHEN 'CTGR' THEN EH.Eqp_Category_Id --Equipment Category
			WHEN 'ECCT' THEN EH.Cost_Centre_ID --Equipment Cost Centre
			WHEN 'CRSP' THEN EH.Cost_Responsibility_ID --Responsibility
			WHEN 'CNTT' THEN EH.ContractTypeID --Contract Type
			WHEN 'CONT' THEN EH.ContractId --Contract
			WHEN 'PEQP' THEN NULL --Parent Equipment
			WHEN 'CTTY' THEN CH.CostTypeID --Cost Type
			WHEN 'SYST' THEN CH.SystemID --System
			WHEN 'SUBS' THEN CH.SubSystemID --Sub System
			WHEN 'PRTA' THEN PT.Task_Header_ID --Strategy Task
			WHEN 'EVTT' THEN PT.TaskTypeId --Task Type
			WHEN 'EVCC' THEN PT.ComponentCodeId --Component Code
			WHEN 'MDCO' THEN PT.ModifierId --Modifier Code
			WHEN 'PRTY' THEN P.Part_Type_ID --Part Type
			WHEN 'PMAN' THEN PT.ManufacturerId --Part Manufacturer
			WHEN 'PART' THEN PT.Part_Id --Primary Part No
			WHEN 'PPDS' THEN PT.Part_Id --Primary Part Description
			WHEN 'SARP' THEN PT.SalesResponsibilityID --Sales Resp
			ELSE NULL
		END,
		CASE @GroupBy2
			WHEN 'BRAN' THEN EH.Branch --Branch
			WHEN 'SITE' THEN EH.Site --Site
			WHEN 'FLEE' THEN EH.Fleet --Fleet
			WHEN 'ECLS' THEN EH.Eqp_Class_Desc --Equipment Class
			WHEN 'EGRP' THEN EH.Equipment_Group_Desc --Equipment Group
			WHEN 'MANU' THEN EH.Manufacturer --Manufacturer
			WHEN 'MODL' THEN EH.Model --Model
			WHEN 'EQPL' THEN EH.EqpPlan --Equipment
			WHEN 'REGN' THEN EH.Region_Desc --Region
			WHEN 'DEVI' THEN EH.Division_Desc --Division								
			WHEN 'CRIT' THEN EH.Eqp_Criticality_Desc --Equipment Criticality
			WHEN 'LCTN' THEN EH.Eqp_Location_Desc --Equipment Location
			WHEN 'CTGR' THEN EH.Eqp_Category_Desc --Equipment Category
			WHEN 'ECCT' THEN EH.Cost_Centre --Equipment Cost Centre
			WHEN 'CRSP' THEN EH.Cost_Responsibility_Desc --Responsibility
			WHEN 'CNTT' THEN EH.ContractType --Contract Type
			WHEN 'CONT' THEN EH.Contract --Contract
			WHEN 'PEQP' THEN NULL --Parent Equipment
			WHEN 'CTTY' THEN CH.CostType --Cost Type
			WHEN 'SYST' THEN CH.System --System
			WHEN 'SUBS' THEN CH.SubSystem --Sub System
			WHEN 'PRTA' THEN TH.Description --Strategy Task
			WHEN 'EVTT' THEN TT.Code + ' - ' + TT.Description --Task Type
			WHEN 'EVCC' THEN CH.Code + ' - ' + CH.Description --Component Code
			WHEN 'MDCO' THEN MC.Code + ' - ' + MC.Description --Modifier Code
			WHEN 'PRTY' THEN PTY.PartType + ' ' + PTY.PartTypeDesc --Part Type
			WHEN 'PMAN' THEN M.Manufacturer --Part Manufacturer
			WHEN 'PART' THEN P.Part  --Primary Part No
			WHEN 'PPDS' THEN P.PartDescription --Primary Part Description
			WHEN 'SARP' THEN E.Surname + ', ' + E.First_Name --Sales Resp
			ELSE NULL
		END,
		CASE @GroupBy3
			WHEN 'BRAN' THEN EH.BranchId --Branch
			WHEN 'SITE' THEN EH.SiteId --Site
			WHEN 'FLEE' THEN EH.FleetId --Fleet
			WHEN 'ECLS' THEN EH.Eqp_Class_Id --Equipment Class
			WHEN 'EGRP' THEN EH.Equipment_Group_Id --Equipment Group
			WHEN 'MANU' THEN EH.ManufacturerId --Manufacturer
			WHEN 'MODL' THEN EH.ModelId --Model
			WHEN 'EQPL' THEN EH.EqpPlanId --Equipment
			WHEN 'REGN' THEN EH.Region_Id --Region
			WHEN 'DEVI' THEN EH.Division_Id --Division								
			WHEN 'CRIT' THEN EH.Eqp_Criticality_Id --Equipment Criticality
			WHEN 'LCTN' THEN EH.Eqp_Location_Id --Equipment Location
			WHEN 'CTGR' THEN EH.Eqp_Category_Id --Equipment Category
			WHEN 'ECCT' THEN EH.Cost_Centre_ID --Equipment Cost Centre
			WHEN 'CRSP' THEN EH.Cost_Responsibility_ID --Responsibility
			WHEN 'CNTT' THEN EH.ContractTypeID --Contract Type
			WHEN 'CONT' THEN EH.ContractId --Contract
			WHEN 'PEQP' THEN NULL --Parent Equipment
			WHEN 'CTTY' THEN CH.CostTypeID --Cost Type
			WHEN 'SYST' THEN CH.SystemID --System
			WHEN 'SUBS' THEN CH.SubSystemID --Sub System
			WHEN 'PRTA' THEN PT.Task_Header_ID --Strategy Task
			WHEN 'EVTT' THEN PT.TaskTypeId --Task Type
			WHEN 'EVCC' THEN PT.ComponentCodeId --Component Code
			WHEN 'MDCO' THEN PT.ModifierId --Modifier Code
			WHEN 'PRTY' THEN P.Part_Type_ID --Part Type
			WHEN 'PMAN' THEN PT.ManufacturerId --Part Manufacturer
			WHEN 'PART' THEN PT.Part_Id --Primary Part No
			WHEN 'PPDS' THEN PT.Part_Id --Primary Part Description
			WHEN 'SARP' THEN PT.SalesResponsibilityID --Sales Resp
			ELSE NULL
		END,
		CASE @GroupBy3
			WHEN 'BRAN' THEN EH.Branch --Branch
			WHEN 'SITE' THEN EH.Site --Site
			WHEN 'FLEE' THEN EH.Fleet --Fleet
			WHEN 'ECLS' THEN EH.Eqp_Class_Desc --Equipment Class
			WHEN 'EGRP' THEN EH.Equipment_Group_Desc --Equipment Group
			WHEN 'MANU' THEN EH.Manufacturer --Manufacturer
			WHEN 'MODL' THEN EH.Model --Model
			WHEN 'EQPL' THEN EH.EqpPlan --Equipment
			WHEN 'REGN' THEN EH.Region_Desc --Region
			WHEN 'DEVI' THEN EH.Division_Desc --Division								
			WHEN 'CRIT' THEN EH.Eqp_Criticality_Desc --Equipment Criticality
			WHEN 'LCTN' THEN EH.Eqp_Location_Desc --Equipment Location
			WHEN 'CTGR' THEN EH.Eqp_Category_Desc --Equipment Category
			WHEN 'ECCT' THEN EH.Cost_Centre --Equipment Cost Centre
			WHEN 'CRSP' THEN EH.Cost_Responsibility_Desc --Responsibility
			WHEN 'CNTT' THEN EH.ContractType --Contract Type
			WHEN 'CONT' THEN EH.Contract --Contract
			WHEN 'PEQP' THEN NULL --Parent Equipment
			WHEN 'CTTY' THEN CH.CostType --Cost Type
			WHEN 'SYST' THEN CH.System --System
			WHEN 'SUBS' THEN CH.SubSystem --Sub System
			WHEN 'PRTA' THEN TH.Description --Strategy Task
			WHEN 'EVTT' THEN TT.Code + ' - ' + TT.Description --Task Type
			WHEN 'EVCC' THEN CH.Code + ' - ' + CH.Description --Component Code
			WHEN 'MDCO' THEN MC.Code + ' - ' + MC.Description --Modifier Code
			WHEN 'PRTY' THEN PTY.PartType + ' ' + PTY.PartTypeDesc --Part Type
			WHEN 'PMAN' THEN M.Manufacturer --Part Manufacturer
			WHEN 'PART' THEN P.Part  --Primary Part No
			WHEN 'PPDS' THEN P.PartDescription --Primary Part Description
			WHEN 'SARP' THEN E.Surname + ', ' + E.First_Name --Sales Resp
			ELSE NULL
		END,
		CASE @GroupBy4
			WHEN 'BRAN' THEN EH.BranchId --Branch
			WHEN 'SITE' THEN EH.SiteId --Site
			WHEN 'FLEE' THEN EH.FleetId --Fleet
			WHEN 'ECLS' THEN EH.Eqp_Class_Id --Equipment Class
			WHEN 'EGRP' THEN EH.Equipment_Group_Id --Equipment Group
			WHEN 'MANU' THEN EH.ManufacturerId --Manufacturer
			WHEN 'MODL' THEN EH.ModelId --Model
			WHEN 'EQPL' THEN EH.EqpPlanId --Equipment
			WHEN 'REGN' THEN EH.Region_Id --Region
			WHEN 'DEVI' THEN EH.Division_Id --Division								
			WHEN 'CRIT' THEN EH.Eqp_Criticality_Id --Equipment Criticality
			WHEN 'LCTN' THEN EH.Eqp_Location_Id --Equipment Location
			WHEN 'CTGR' THEN EH.Eqp_Category_Id --Equipment Category
			WHEN 'ECCT' THEN EH.Cost_Centre_ID --Equipment Cost Centre
			WHEN 'CRSP' THEN EH.Cost_Responsibility_ID --Responsibility
			WHEN 'CNTT' THEN EH.ContractTypeID --Contract Type
			WHEN 'CONT' THEN EH.ContractId --Contract
			WHEN 'PEQP' THEN NULL --Parent Equipment
			WHEN 'CTTY' THEN CH.CostTypeID --Cost Type
			WHEN 'SYST' THEN CH.SystemID --System
			WHEN 'SUBS' THEN CH.SubSystemID --Sub System
			WHEN 'PRTA' THEN PT.Task_Header_ID --Strategy Task
			WHEN 'EVTT' THEN PT.TaskTypeId --Task Type
			WHEN 'EVCC' THEN PT.ComponentCodeId --Component Code
			WHEN 'MDCO' THEN PT.ModifierId --Modifier Code
			WHEN 'PRTY' THEN P.Part_Type_ID --Part Type
			WHEN 'PMAN' THEN PT.ManufacturerId --Part Manufacturer
			WHEN 'PART' THEN PT.Part_Id --Primary Part No
			WHEN 'PPDS' THEN PT.Part_Id --Primary Part Description
			WHEN 'SARP' THEN PT.SalesResponsibilityID --Sales Resp
			ELSE NULL
		END,
		CASE @GroupBy4
			WHEN 'BRAN' THEN EH.Branch --Branch
			WHEN 'SITE' THEN EH.Site --Site
			WHEN 'FLEE' THEN EH.Fleet --Fleet
			WHEN 'ECLS' THEN EH.Eqp_Class_Desc --Equipment Class
			WHEN 'EGRP' THEN EH.Equipment_Group_Desc --Equipment Group
			WHEN 'MANU' THEN EH.Manufacturer --Manufacturer
			WHEN 'MODL' THEN EH.Model --Model
			WHEN 'EQPL' THEN EH.EqpPlan --Equipment
			WHEN 'REGN' THEN EH.Region_Desc --Region
			WHEN 'DEVI' THEN EH.Division_Desc --Division								
			WHEN 'CRIT' THEN EH.Eqp_Criticality_Desc --Equipment Criticality
			WHEN 'LCTN' THEN EH.Eqp_Location_Desc --Equipment Location
			WHEN 'CTGR' THEN EH.Eqp_Category_Desc --Equipment Category
			WHEN 'ECCT' THEN EH.Cost_Centre --Equipment Cost Centre
			WHEN 'CRSP' THEN EH.Cost_Responsibility_Desc --Responsibility
			WHEN 'CNTT' THEN EH.ContractType --Contract Type
			WHEN 'CONT' THEN EH.Contract --Contract
			WHEN 'PEQP' THEN NULL --Parent Equipment
			WHEN 'CTTY' THEN CH.CostType --Cost Type
			WHEN 'SYST' THEN CH.System --System
			WHEN 'SUBS' THEN CH.SubSystem --Sub System
			WHEN 'PRTA' THEN TH.Description --Strategy Task
			WHEN 'EVTT' THEN TT.Code + ' - ' + TT.Description --Task Type
			WHEN 'EVCC' THEN CH.Code + ' - ' + CH.Description --Component Code
			WHEN 'MDCO' THEN MC.Code + ' - ' + MC.Description --Modifier Code
			WHEN 'PRTY' THEN PTY.PartType + ' ' + PTY.PartTypeDesc --Part Type
			WHEN 'PMAN' THEN M.Manufacturer --Part Manufacturer
			WHEN 'PART' THEN P.Part  --Primary Part No
			WHEN 'PPDS' THEN P.PartDescription --Primary Part Description
			WHEN 'SARP' THEN E.Surname + ', ' + E.First_Name --Sales Resp
			ELSE NULL
		END
		
IF @GroupBy1='PEQP' OR @GroupBy2='PEQP' OR @GroupBy3='PEQP' OR @GroupBy4='PEQP'
BEGIN
	--get parent Eqps for each eqp
	--a: get IDs
	CREATE TABLE #EQP
	(
		EqpPlanID int primary key,
		ParentEqpPlanID int	
	)
	CREATE NONCLUSTERED INDEX [IX_STRATEGY_TEMP] ON [#EQP] (EqpPlanID ASC,ParentEqpPlanID ASC)

	INSERT INTO #EQP(EqpPlanID,ParentEqpPlanID)
	SELECT	EqpPlanId,NULL 
	FROM	#TASK
	GROUP BY EqpPlanId

	DECLARE @selection varchar(max)
	SET @selection= REPLACE(REPLACE((select DISTINCT EqpPlanId from #EQP for xml raw),'<row eqpplanid="',''),'"/>',',')

	UPDATE #EQP 
	SET ParentEqpPlanID = dbo.GET_TOPMOST_PARENT_EQUIPMENT_F(EqpPlanId,@selection)			

	--b: get names and update #tasks
	UPDATE	T 
	SET		GroupByID1 = CASE @GroupBy1 WHEN 'PEQP' THEN E.ParentEqpPlanID ELSE GroupByID1 END,
			GroupBy1 = CASE @GroupBy1 WHEN 'PEQP' THEN EP.EqpPlan ELSE GroupBy1 END, 
			GroupByID2 = CASE @GroupBy2 WHEN 'PEQP' THEN E.ParentEqpPlanID ELSE GroupByID2 END,
			GroupBy2 = CASE @GroupBy2 WHEN 'PEQP' THEN EP.EqpPlan ELSE GroupBy2 END, 
			GroupByID3 = CASE @GroupBy3 WHEN 'PEQP' THEN E.ParentEqpPlanID ELSE GroupByID3 END,
			GroupBy3 = CASE @GroupBy3 WHEN 'PEQP' THEN EP.EqpPlan ELSE GroupBy3 END, 
			GroupByID4 = CASE @GroupBy4 WHEN 'PEQP' THEN E.ParentEqpPlanID ELSE GroupByID4 END,
			GroupBy4 = CASE @GroupBy4 WHEN 'PEQP' THEN EP.EqpPlan ELSE GroupBy4 END
	FROM 
			#TASK T INNER JOIN
			#EQP E ON T.EqpPlanID=E.EqpPlanID INNER JOIN
			tblEqpPlans EP ON E.ParentEqpPlanID=EP.EqpPlanID

	DROP TABLE #EQP
END

--Debug
--SELECT * FROM #TASK

--2: get tasks occs in period

CREATE TABLE #OCC(ProjtaskID int,Period int,Occs int
	PRIMARY KEY(ProjtaskID,Period) )

INSERT INTO #OCC(ProjtaskID,Period,Occs)
SELECT ProjtaskID,OccDate,SUM(Occs) AS Occs
FROM
	(SELECT	T.ProjtaskID,PTO.OccDate,Count(*) AS Occs
	FROM
			#TASK T INNER JOIN
			(SELECT ProjtaskID,YEAR(OccDate)*100+MONTH(OccDate) AS OccDate FROM tblProjTaskOccs) PTO ON T.ProjtaskID=PTO.ProjtaskID
	WHERE
			PTO.OccDate BETWEEN @StartDate AND @EndDate
	GROUP BY 
			T.ProjtaskID,PTO.OccDate

	UNION ALL

	--Fill in missing periods
	SELECT	T.ProjtaskID,FP.CalenderPeriod,0
	FROM
			#TASK T CROSS JOIN
			tblFinancialPeriods FP
	WHERE
			FP.CalenderPeriod BETWEEN @StartDate AND @EndDate
	)A
GROUP BY ProjtaskID,OccDate

--Debug
--SELECT * FROM #OCC


--GD 1657 give cross tab results
IF (@IsCrossTab = 'TRUE')
BEGIN

	--Set Column name in select query,No need to check if null as group by is mandatory so there must be at least 1 group by.
	SELECT	@SelectQueryForCrossTab = @SelectQueryForCrossTab + 'GroupBy1 AS ' +
		CASE @GroupBy1
			WHEN 'BRAN' THEN 'Branch'
			WHEN 'SITE' THEN 'Site'
			WHEN 'FLEE' THEN 'Fleet'
			WHEN 'ECLS' THEN '''Equipment Class'''
			WHEN 'EGRP' THEN '''Equipment Group'''
			WHEN 'MANU' THEN 'Manufacturer'
			WHEN 'MODL' THEN 'Model'
			WHEN 'EQPL' THEN 'Equipment'
			WHEN 'REGN' THEN 'Region'
			WHEN 'DEVI' THEN 'Division'
			WHEN 'CRIT' THEN '''Equipment Criticality'''
			WHEN 'LCTN' THEN '''Equipment Location'''
			WHEN 'CTGR' THEN '''Equipment Category'''
			WHEN 'ECCT' THEN '''Equipment Cost Centre'''
			WHEN 'CRSP' THEN 'Responsibility'
			WHEN 'CNTT' THEN '''Contract Type'''
			WHEN 'CONT' THEN 'Contract'
			WHEN 'PEQP' THEN '''Parent Equipment'''
			WHEN 'CTTY' THEN '''Cost Type'''
			WHEN 'SYST' THEN 'System'
			WHEN 'SUBS' THEN 'Sub System'
			WHEN 'PRTA' THEN '''Strategy Task'''
			WHEN 'EVTT' THEN '''Task Type'''
			WHEN 'EVCC' THEN '''Component Code'''
			WHEN 'MDCO' THEN '''Modifier Code'''
			WHEN 'PRTY' THEN '''Part Type'''
			WHEN 'PMAN' THEN '''Part Manufacturer'''
			WHEN 'PART' THEN '''Primary Part No'''
			WHEN 'PPDS' THEN '''Primary Part Description'''
			WHEN 'SARP' THEN '''Sales Resp'''
		ELSE NULL
	END 
IF( @GroupBy2 != NULL)
	BEGIN
		SELECT	@SelectQueryForCrossTab = @SelectQueryForCrossTab + ', GroupBy2 AS ' +
		CASE @GroupBy2
			WHEN 'BRAN' THEN 'Branch'
			WHEN 'SITE' THEN 'Site'
			WHEN 'FLEE' THEN 'Fleet'
			WHEN 'ECLS' THEN '''Equipment Class'''
			WHEN 'EGRP' THEN '''Equipment Group'''
			WHEN 'MANU' THEN 'Manufacturer'
			WHEN 'MODL' THEN 'Model'
			WHEN 'EQPL' THEN 'Equipment'
			WHEN 'REGN' THEN 'Region'
			WHEN 'DEVI' THEN 'Division'
			WHEN 'CRIT' THEN '''Equipment Criticality'''
			WHEN 'LCTN' THEN '''Equipment Location'''
			WHEN 'CTGR' THEN '''Equipment Category'''
			WHEN 'ECCT' THEN '''Equipment Cost Centre'''
			WHEN 'CRSP' THEN 'Responsibility'
			WHEN 'CNTT' THEN '''Contract Type'''
			WHEN 'CONT' THEN 'Contract'
			WHEN 'PEQP' THEN '''Parent Equipment'''
			WHEN 'CTTY' THEN '''Cost Type'''
			WHEN 'SYST' THEN 'System'
			WHEN 'SUBS' THEN 'Sub System'
			WHEN 'PRTA' THEN '''Strategy Task'''
			WHEN 'EVTT' THEN '''Task Type'''
			WHEN 'EVCC' THEN '''Component Code'''
			WHEN 'MDCO' THEN '''Modifier Code'''
			WHEN 'PRTY' THEN '''Part Type'''
			WHEN 'PMAN' THEN '''Part Manufacturer'''
			WHEN 'PART' THEN '''Primary Part No'''
			WHEN 'PPDS' THEN '''Primary Part Description'''
			WHEN 'SARP' THEN '''Sales Resp'''
			ELSE NULL
		END
	END	
IF( @GroupBy3 != NULL )
	BEGIN
		SELECT	@SelectQueryForCrossTab = @SelectQueryForCrossTab + ', GroupBy3 AS ' +
		CASE @GroupBy3
			WHEN 'BRAN' THEN 'Branch'
			WHEN 'SITE' THEN 'Site'
			WHEN 'FLEE' THEN 'Fleet'
			WHEN 'ECLS' THEN '''Equipment Class'''
			WHEN 'EGRP' THEN '''Equipment Group'''
			WHEN 'MANU' THEN 'Manufacturer'
			WHEN 'MODL' THEN 'Model'
			WHEN 'EQPL' THEN 'Equipment'
			WHEN 'REGN' THEN 'Region'
			WHEN 'DEVI' THEN 'Division'
			WHEN 'CRIT' THEN '''Equipment Criticality'''
			WHEN 'LCTN' THEN '''Equipment Location'''
			WHEN 'CTGR' THEN '''Equipment Category'''
			WHEN 'ECCT' THEN '''Equipment Cost Centre'''
			WHEN 'CRSP' THEN 'Responsibility'
			WHEN 'CNTT' THEN '''Contract Type'''
			WHEN 'CONT' THEN 'Contract'
			WHEN 'PEQP' THEN '''Parent Equipment'''
			WHEN 'CTTY' THEN '''Cost Type'''
			WHEN 'SYST' THEN 'System'
			WHEN 'SUBS' THEN 'Sub System'
			WHEN 'PRTA' THEN '''Strategy Task'''
			WHEN 'EVTT' THEN '''Task Type'''
			WHEN 'EVCC' THEN '''Component Code'''
			WHEN 'MDCO' THEN '''Modifier Code'''
			WHEN 'PRTY' THEN '''Part Type'''
			WHEN 'PMAN' THEN '''Part Manufacturer'''
			WHEN 'PART' THEN '''Primary Part No'''
			WHEN 'PPDS' THEN '''Primary Part Description'''
			WHEN 'SARP' THEN '''Sales Resp'''
		ELSE NULL
		END
END
IF( @GroupBy4 != NULL)
	BEGIN
		SELECT	@SelectQueryForCrossTab = @SelectQueryForCrossTab + ', GroupBy4 AS ' +
		CASE @GroupBy4
			WHEN 'BRAN' THEN 'Branch'
			WHEN 'SITE' THEN 'Site'
			WHEN 'FLEE' THEN 'Fleet'
			WHEN 'ECLS' THEN '''Equipment Class'''
			WHEN 'EGRP' THEN '''Equipment Group'''
			WHEN 'MANU' THEN 'Manufacturer'
			WHEN 'MODL' THEN 'Model'
			WHEN 'EQPL' THEN 'Equipment'
			WHEN 'REGN' THEN 'Region'
			WHEN 'DEVI' THEN 'Division'
			WHEN 'CRIT' THEN '''Equipment Criticality'''
			WHEN 'LCTN' THEN '''Equipment Location'''
			WHEN 'CTGR' THEN '''Equipment Category'''
			WHEN 'ECCT' THEN '''Equipment Cost Centre'''
			WHEN 'CRSP' THEN 'Responsibility'
			WHEN 'CNTT' THEN '''Contract Type'''
			WHEN 'CONT' THEN 'Contract'
			WHEN 'PEQP' THEN '''Parent Equipment'''
			WHEN 'CTTY' THEN '''Cost Type'''
			WHEN 'SYST' THEN 'System'
			WHEN 'SUBS' THEN 'Sub System'
			WHEN 'PRTA' THEN '''Strategy Task'''
			WHEN 'EVTT' THEN '''Task Type'''
			WHEN 'EVCC' THEN '''Component Code'''
			WHEN 'MDCO' THEN '''Modifier Code'''
			WHEN 'PRTY' THEN '''Part Type'''
			WHEN 'PMAN' THEN '''Part Manufacturer'''
			WHEN 'PART' THEN '''Primary Part No'''
			WHEN 'PPDS' THEN '''Primary Part Description'''
			WHEN 'SARP' THEN '''Sales Resp'''
		ELSE NULL
	END
END
	
--Set Column name in order by query
SELECT	@OrderByCrossTab = @OrderByCrossTab +
		CASE @GroupBy1
			WHEN 'BRAN' THEN 'Branch'
			WHEN 'SITE' THEN 'Site'
			WHEN 'FLEE' THEN 'Fleet'
			WHEN 'ECLS' THEN '''Equipment Class'''
			WHEN 'EGRP' THEN '''Equipment Group'''
			WHEN 'MANU' THEN 'Manufacturer'
			WHEN 'MODL' THEN 'Model'
			WHEN 'EQPL' THEN 'Equipment'
			WHEN 'REGN' THEN 'Region'
			WHEN 'DEVI' THEN 'Division'
			WHEN 'CRIT' THEN '''Equipment Criticality'''
			WHEN 'LCTN' THEN '''Equipment Location'''
			WHEN 'CTGR' THEN '''Equipment Category'''
			WHEN 'ECCT' THEN '''Equipment Cost Centre'''
			WHEN 'CRSP' THEN 'Responsibility'
			WHEN 'CNTT' THEN '''Contract Type'''
			WHEN 'CONT' THEN 'Contract'
			WHEN 'PEQP' THEN '''Parent Equipment'''
			WHEN 'CTTY' THEN '''Cost Type'''
			WHEN 'SYST' THEN 'System'
			WHEN 'SUBS' THEN 'Sub System'
			WHEN 'PRTA' THEN '''Strategy Task'''
			WHEN 'EVTT' THEN '''Task Type'''
			WHEN 'EVCC' THEN '''Component Code'''
			WHEN 'MDCO' THEN '''Modifier Code'''
			WHEN 'PRTY' THEN '''Part Type'''
			WHEN 'PMAN' THEN '''Part Manufacturer'''
			WHEN 'PART' THEN '''Primary Part No'''
			WHEN 'PPDS' THEN '''Primary Part Description'''
			WHEN 'SARP' THEN '''Sales Resp'''
		ELSE NULL
	END 
IF( @GroupBy2! = NULL )
	BEGIN
		SELECT	@OrderByCrossTab = @OrderByCrossTab + ',' +
		CASE @GroupBy2
			WHEN 'BRAN' THEN 'Branch'
			WHEN 'SITE' THEN 'Site'
			WHEN 'FLEE' THEN 'Fleet'
			WHEN 'ECLS' THEN '''Equipment Class'''
			WHEN 'EGRP' THEN '''Equipment Group'''
			WHEN 'MANU' THEN 'Manufacturer'
			WHEN 'MODL' THEN 'Model'
			WHEN 'EQPL' THEN 'Equipment'
			WHEN 'REGN' THEN 'Region'
			WHEN 'DEVI' THEN 'Division'
			WHEN 'CRIT' THEN '''Equipment Criticality'''
			WHEN 'LCTN' THEN '''Equipment Location'''
			WHEN 'CTGR' THEN '''Equipment Category'''
			WHEN 'ECCT' THEN '''Equipment Cost Centre'''
			WHEN 'CRSP' THEN 'Responsibility'
			WHEN 'CNTT' THEN '''Contract Type'''
			WHEN 'CONT' THEN 'Contract'
			WHEN 'PEQP' THEN '''Parent Equipment'''
			WHEN 'CTTY' THEN '''Cost Type'''
			WHEN 'SYST' THEN 'System'
			WHEN 'SUBS' THEN 'Sub System'
			WHEN 'PRTA' THEN '''Strategy Task'''
			WHEN 'EVTT' THEN '''Task Type'''
			WHEN 'EVCC' THEN '''Component Code'''
			WHEN 'MDCO' THEN '''Modifier Code'''
			WHEN 'PRTY' THEN '''Part Type'''
			WHEN 'PMAN' THEN '''Part Manufacturer'''
			WHEN 'PART' THEN '''Primary Part No'''
			WHEN 'PPDS' THEN '''Primary Part Description'''
			WHEN 'SARP' THEN '''Sales Resp'''
		ELSE NULL
	END
END
IF( @GroupBy3 != NULL)
	BEGIN
		SELECT	@OrderByCrossTab = @OrderByCrossTab + ', ' +
		CASE @GroupBy3
			WHEN 'BRAN' THEN 'Branch'
			WHEN 'SITE' THEN 'Site'
			WHEN 'FLEE' THEN 'Fleet'
			WHEN 'ECLS' THEN '''Equipment Class'''
			WHEN 'EGRP' THEN '''Equipment Group'''
			WHEN 'MANU' THEN 'Manufacturer'
			WHEN 'MODL' THEN 'Model'
			WHEN 'EQPL' THEN 'Equipment'
			WHEN 'REGN' THEN 'Region'
			WHEN 'DEVI' THEN 'Division'
			WHEN 'CRIT' THEN '''Equipment Criticality'''
			WHEN 'LCTN' THEN '''Equipment Location'''
			WHEN 'CTGR' THEN '''Equipment Category'''
			WHEN 'ECCT' THEN '''Equipment Cost Centre'''
			WHEN 'CRSP' THEN 'Responsibility'
			WHEN 'CNTT' THEN '''Contract Type'''
			WHEN 'CONT' THEN 'Contract'
			WHEN 'PEQP' THEN '''Parent Equipment'''
			WHEN 'CTTY' THEN '''Cost Type'''
			WHEN 'SYST' THEN 'System'
			WHEN 'SUBS' THEN 'Sub System'
			WHEN 'PRTA' THEN '''Strategy Task'''
			WHEN 'EVTT' THEN '''Task Type'''
			WHEN 'EVCC' THEN '''Component Code'''
			WHEN 'MDCO' THEN '''Modifier Code'''
			WHEN 'PRTY' THEN '''Part Type'''
			WHEN 'PMAN' THEN '''Part Manufacturer'''
			WHEN 'PART' THEN '''Primary Part No'''
			WHEN 'PPDS' THEN '''Primary Part Description'''
			WHEN 'SARP' THEN '''Sales Resp'''
		ELSE NULL
	END
END
IF(@GroupBy4!=NULL)
	BEGIN
	SELECT	@OrderByCrossTab = @OrderByCrossTab + ','+
		CASE @GroupBy4
			WHEN 'BRAN' THEN 'Branch'
			WHEN 'SITE' THEN 'Site'
			WHEN 'FLEE' THEN 'Fleet'
			WHEN 'ECLS' THEN '''Equipment Class'''
			WHEN 'EGRP' THEN '''Equipment Group'''
			WHEN 'MANU' THEN 'Manufacturer'
			WHEN 'MODL' THEN 'Model'
			WHEN 'EQPL' THEN 'Equipment'
			WHEN 'REGN' THEN 'Region'
			WHEN 'DEVI' THEN 'Division'
			WHEN 'CRIT' THEN '''Equipment Criticality'''
			WHEN 'LCTN' THEN '''Equipment Location'''
			WHEN 'CTGR' THEN '''Equipment Category'''
			WHEN 'ECCT' THEN '''Equipment Cost Centre'''
			WHEN 'CRSP' THEN 'Responsibility'
			WHEN 'CNTT' THEN '''Contract Type'''
			WHEN 'CONT' THEN 'Contract'
			WHEN 'PEQP' THEN '''Parent Equipment'''
			WHEN 'CTTY' THEN '''Cost Type'''
			WHEN 'SYST' THEN 'System'
			WHEN 'SUBS' THEN 'Sub System'
			WHEN 'PRTA' THEN '''Strategy Task'''
			WHEN 'EVTT' THEN '''Task Type'''
			WHEN 'EVCC' THEN '''Component Code'''
			WHEN 'MDCO' THEN '''Modifier Code'''
			WHEN 'PRTY' THEN '''Part Type'''
			WHEN 'PMAN' THEN '''Part Manufacturer'''
			WHEN 'PART' THEN '''Primary Part No'''
			WHEN 'PPDS' THEN '''Primary Part Description'''
			WHEN 'SARP' THEN '''Sales Resp'''
		ELSE NULL
	END	
END	

			CREATE TABLE [#temp](
				[GroupByID1] [varchar](max)COLLATE DATABASE_DEFAULT  NULL,
				[GroupBy1] [varchar](max) COLLATE DATABASE_DEFAULT NULL,
				[GroupByID2] [varchar](max)COLLATE DATABASE_DEFAULT  NULL,
				[GroupBy2] [varchar](max) COLLATE DATABASE_DEFAULT NULL,
				[GroupByID3] [varchar](max) COLLATE DATABASE_DEFAULT NULL,
				[GroupBy3] [varchar](max) COLLATE DATABASE_DEFAULT NULL,
				[GroupByID4] [varchar](max) COLLATE DATABASE_DEFAULT NULL,
				[GroupBy4] [varchar](max) COLLATE DATABASE_DEFAULT NULL,
				[PeriodStr] [varchar](max) COLLATE DATABASE_DEFAULT NULL,
				[Val] [varchar](max) COLLATE DATABASE_DEFAULT NULL,
				[Period] [int] NULL,	
			) ON [PRIMARY]

			INSERT INTO #temp			
			SELECT	GroupByID1,GroupBy1,
					GroupByID2,GroupBy2,
					GroupByID3,GroupBy3,
					GroupByID4,GroupBy4,
					CASE @AnalyseBy 
						WHEN 'YEAR' THEN CAST(Period/100 AS VARCHAR)
						WHEN 'QRTR' THEN LEFT(Period,4) + '-Q' + CONVERT(varchar(1),((Right(Period,2)+2)/3))
						ELSE  RIGHT(CONVERT(varchar, CONVERT(datetime, CONVERT(varchar,Period) + '01', 112), 6), 6)
					END As PeriodStr,
					CASE @AnalyseBy 
						WHEN 'YEAR' THEN Period/100
						WHEN 'QRTR' THEN CAST(Left(Period,4) + CONVERT(varchar(1),((Right(Period,2)+2)/3)) AS int)
						ELSE Period
					END As Period,
					NULLIF(SUM(Val),0) AS Val
			FROM
				(SELECT	T.GroupByID1,T.GroupBy1,
						T.GroupByID2,T.GroupBy2,
						T.GroupByID3,T.GroupBy3,
						T.GroupByID4,T.GroupBy4,
						O.Period,
						O.Occs * CASE @CalculationOption
							WHEN 1 THEN T.PctPurchasePart
							WHEN 2 THEN T.PctPurchasePart * T.PctPurchaseNewPart
							ELSE 1 END AS Val
				FROM
					#TASK T INNER JOIN
					#OCC O ON T.ProjtaskID=O.ProjtaskID
				)A
			GROUP BY
					GroupByID1,GroupBy1,
					GroupByID2,GroupBy2,
					GroupByID3,GroupBy3,
					GroupByID4,GroupBy4,
					CASE @AnalyseBy 
						WHEN 'YEAR' THEN CAST(Period/100 AS VARCHAR)
						WHEN 'QRTR' THEN LEFT(Period,4) + '-Q' + CONVERT(varchar(1),((Right(Period,2)+2)/3))
						ELSE  RIGHT(CONVERT(varchar, CONVERT(datetime, CONVERT(varchar,Period) + '01', 112), 6), 6)
					END,
					CASE @AnalyseBy 
						WHEN 'YEAR' THEN Period/100
						WHEN 'QRTR' THEN CAST(Left(Period,4) + CONVERT(varchar(1),((Right(Period,2)+2)/3)) AS int)
						ELSE Period
					END
			ORDER BY
					CASE @AnalyseBy 
						WHEN 'YEAR' THEN Period/100
						WHEN 'QRTR' THEN CAST(Left(Period,4) + CONVERT(varchar(1),((Right(Period,2)+2)/3)) AS int)
						ELSE Period
					END
					

			DECLARE @ListCol VARCHAR(MAX)
			DECLARE @Query VARCHAR(MAX)

			SELECT  @ListCol = STUFF(( SELECT DISTINCT  '],[' + Val  FROM   #temp ORDER BY '],[' + Val 	FOR XML PATH('') ), 1, 2, '') + ']'

			SET @Query =  'SELECT * FROM ( SELECT '+@SelectQueryForCrossTab+', Val,Period from #temp WHERE Period!=0 ) tmp PIVOT (SUM(Period) for Val in('+@ListCol+')) AS pvt
						 ORDER BY  '+ @OrderByCrossTab
			EXECUTE (@Query)

			DROP TABLE #temp

			END
ELSE
			--3: Returned query
			SELECT	GroupByID1,GroupBy1,
					GroupByID2,GroupBy2,
					GroupByID3,GroupBy3,
					GroupByID4,GroupBy4,
					CASE @AnalyseBy 
						WHEN 'YEAR' THEN CAST(Period/100 AS VARCHAR)
						WHEN 'QRTR' THEN LEFT(Period,4) + '-Q' + CONVERT(varchar(1),((Right(Period,2)+2)/3))
						ELSE  RIGHT(CONVERT(varchar, CONVERT(datetime, CONVERT(varchar,Period) + '01', 112), 6), 6)
					END As PeriodStr,
					CASE @AnalyseBy 
						WHEN 'YEAR' THEN Period/100
						WHEN 'QRTR' THEN CAST(Left(Period,4) + CONVERT(varchar(1),((Right(Period,2)+2)/3)) AS int)
						ELSE Period
					END As Period,
					NULLIF(SUM(Val),0) AS Val
			FROM
				(SELECT	T.GroupByID1,T.GroupBy1,
						T.GroupByID2,T.GroupBy2,
						T.GroupByID3,T.GroupBy3,
						T.GroupByID4,T.GroupBy4,
						O.Period,
						O.Occs * CASE @CalculationOption
							WHEN 1 THEN T.PctPurchasePart
							WHEN 2 THEN T.PctPurchasePart * T.PctPurchaseNewPart
							ELSE 1 END AS Val
				FROM
					#TASK T INNER JOIN
					#OCC O ON T.ProjtaskID=O.ProjtaskID
				)A
			GROUP BY
					GroupByID1,GroupBy1,
					GroupByID2,GroupBy2,
					GroupByID3,GroupBy3,
					GroupByID4,GroupBy4,
					CASE @AnalyseBy 
						WHEN 'YEAR' THEN CAST(Period/100 AS VARCHAR)
						WHEN 'QRTR' THEN LEFT(Period,4) + '-Q' + CONVERT(varchar(1),((Right(Period,2)+2)/3))
						ELSE  RIGHT(CONVERT(varchar, CONVERT(datetime, CONVERT(varchar,Period) + '01', 112), 6), 6)
					END,
					CASE @AnalyseBy 
						WHEN 'YEAR' THEN Period/100
						WHEN 'QRTR' THEN CAST(Left(Period,4) + CONVERT(varchar(1),((Right(Period,2)+2)/3)) AS int)
						ELSE Period
					END
			ORDER BY
					CASE @AnalyseBy 
						WHEN 'YEAR' THEN Period/100
						WHEN 'QRTR' THEN CAST(Left(Period,4) + CONVERT(varchar(1),((Right(Period,2)+2)/3)) AS int)
						ELSE Period
					END

--4: cleanup
DROP TABLE #TASK,#OCC


GO


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[RPT_CHANGEOUT_ANALYSIS_P]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[RPT_CHANGEOUT_ANALYSIS_P]
GO

 
create  PROCEDURE RPT_CHANGEOUT_ANALYSIS_P
/******************************************************************************
	File: 
	Name: RPT_CHANGEOUT_ANALYSIS_P

	Called By: 

	Desc:
             

	Auth: Patrick Joy
	Date: 21-Sep-2005
*******************************************************************************
		Change History
*******************************************************************************
Date:		Author:		Description:
--------	--------	----------------------------------------
14-Dec-05	P Joy		Removed changeout restriction
30-Jan-05	P Joy		Changed test for NULL
24-May-06	P Joy		Exclude YTS work orders
04-Oct-06	A Lass.		Revamped to allow for Component Changeout Analysis Report
18-Dec-06	A Lass.		remove 2 ms to end date
08-Jan-07	SI			Added description for CC, MC, TT
21-Jul-07	KN			Fixed - Collation and tempDB Conflicts
03-Jan-08	AL			Enh 353: add 5 new Analyse by options + max of 5 + filters
04-Jan-08	AL			Modified Part Number caption
21-Jan-08	AL			Provide default values
24-Apr-08   YS			Changed Projection_Type_Id to Projection_Header_Id
06-Jun-08	YS			Set NULL occs to 0
23-Oct-08	KN			Fixed Serial Number appearing twice
23-Oct-08	AL			CR7530: Provide AnalyseByName even when filling up empty periods
21-Sep-09	TAS			CR8389: Added UserID
19-Aug-10	VV			#351 Error Attempt to fetch logical page (1:160) in database 2 failed. 
						It belongs to allocation unit 196608 not to 3963167674299645952.
12-Apr-11   GD			Issue:1418 Added @OccurrenceTypeID to filter data
06-May-11   GD			Issue:1418 Added @OccurrenceTypeID to first where condition
17 Jun 11   GD          Fixed Issue #1657 for cross tab
04 Jul 11   GD          Fixed issue #2031 to have @ParentEquipmentID
19 Aug 11   GD          Fixed issue #2305
24 Aug 11	VV			#2355 - incorrect number of occurrencies
*******************************************************************************/
	/* Param List */

@Branch Varchar(MAX)='',
@Site Varchar(MAX)='',
@Fleet Varchar(MAX)='',
@EqpPlanId Varchar(MAX)='',
@ModifierCodeId Varchar(MAX)='',
@ModelId Varchar(MAX)='',
@TaskTypeId Varchar(MAX)='',
@CostTypeId Varchar(MAX)='',
@ComponentCodeId Varchar(MAX)='',
@Proj_Type_Id Varchar(MAX)='',
@SystemId Varchar(MAX)='',
@SubSystemId Varchar(MAX)='',
@StartDate datetime,
@EndDate datetime,
@AnalyseBy varchar(50)='',
@entire_Term int,
@plan_To_month int,
@StrategyTaskID Varchar(MAX)='',
@RegionId Varchar(MAX)='',
@DivisionId Varchar(MAX)='',
@CostResponsibilityID Varchar(MAX)='',
@EqpLocationId Varchar(MAX)='',
@UserID INT=0,
@OccurrenceTypeID Varchar(MAX)='',
@IsCrosstab BIT=0,
@ParentEquipmentID VARCHAR(MAX) = ''

AS


SET NOCOUNT ON

DECLARE  @SQL Varchar(MAX)
DECLARE  @Select1 Varchar(MAX),@Select2 Varchar(MAX)
DECLARE  @Where1 Varchar(MAX), @Where2 Varchar(MAX)
DECLARE  @GroupBy Varchar(MAX)

	--Create a temporary table
	 CREATE TABLE #aa_ChangeoutAnalysis(
		AnalyseByVal1 varchar(200) COLLATE database_default,
		AnalyseByName1 varchar(50) COLLATE database_default,
		AnalyseByVal2 varchar(200) COLLATE database_default,
		AnalyseByName2 varchar(50) COLLATE database_default,
		AnalyseByVal3 varchar(200) COLLATE database_default,
		AnalyseByName3 varchar(50) COLLATE database_default,
		AnalyseByVal4 varchar(200) COLLATE database_default,
		AnalyseByName4 varchar(50) COLLATE database_default,
		AnalyseByVal5 varchar(200) COLLATE database_default,
		AnalyseByName5 varchar(50) COLLATE database_default,
		PeriodVal int,
		PeriodDesc varchar(50) COLLATE database_default,
		Occs int)
	--******************************************
	--Change Start
	--Tas 21-Sep-09
		SET @UserId=ISNULL(@UserId,0)
		DECLARE @Level int
		SELECT @Level=User_Access_Level_Id From USER_LEVEL_PERMISSION where AMT_User_Id = @UserId
		SET @Level=ISNULL(@Level,0)

			/*
			0 -ALL
			1-Branch,
			2-Site
			*/
	--Change End
	--******************************************

if @Branch = '' SET @Branch = NULL
if @Site = '' SET @Site = NULL
if @Fleet = '' SET @Fleet = NULL
if @EqpPlanId = '' SET @EqpPlanId = NULL
if @ModifierCodeId = '' SET @ModifierCodeId = NULL
if @ModelId = '' SET @ModelId = NULL
if @TaskTypeId = '' SET @TaskTypeId = NULL
if @CostTypeId = '' SET @CostTypeId = NULL
if @ComponentCodeId = '' SET @ComponentCodeId = NULL
if @Proj_Type_Id = '' SET @Proj_Type_Id = '1'
if @SystemId = '' SET @SystemId = NULL
if @SubSystemId = '' SET @SubSystemId = NULL
if @StrategyTaskID = '' SET @StrategyTaskID = NULL
if @RegionId = '' SET @RegionId = NULL
if @DivisionId = '' SET @DivisionId = NULL
if @CostResponsibilityID = '' SET @CostResponsibilityID = NULL
if @EqpLocationId = '' SET @EqpLocationId = NULL
IF @ParentEquipmentID = '' SET @ParentEquipmentID = NULL

IF @AnalyseBy<>''
	IF RIGHT(@AnalyseBy,1)<>',' SET @AnalyseBy=@AnalyseBy+','

if @entire_Term = 1 Begin 
			SET @StartDate = '1900-01-01' 
			SET @EndDate = '2100-01-01'
		End

if @Plan_To_month = 1 Begin 
			SET @StartDate = '1900-01-01' 
			SET @EndDate = GetDate()
		End

--AL: 18/12/06
SET @EndDate=DATEADD(ms,-2,@EndDate)	

SET @Select1=''
SET @Select2=''
SET @GroupBy=''


DECLARE @Counter int,@Column varchar(10),@pointer int
SET @pointer=0
SET @Counter=CHARINDEX(',',@AnalyseBy)

DECLARE @SelectListCrossTab VARCHAR(MAX)
DECLARE @OrderByCrossTab Varchar(Max)
set @SelectListCrossTab =''
SET @OrderByCrossTab =''
	
WHILE @Counter>0 AND @AnalyseBy<>''
BEGIN
	--Retrieve GroupBy
	SET @Column=LEFT(@AnalyseBy,@Counter-1)
	SET @AnalyseBy=RIGHT(@AnalyseBy,LEN(@AnalyseBy)-@Counter)
	SET @pointer=@pointer + 1

	if @Column = 'BRAN'
		BEGIN
			SET @Select1 = @Select1 +  ' ,tblBranches.Branch '
			SET @Select2 = @Select2 +  ' ,''Branch'' '
			SET @GroupBy = @GroupBy +  ' ,tblBranches.Branch '
			SET @SelectListCrossTab = @SelectListCrossTab + 'AnalyseByVal' + CAST(@pointer AS VARCHAR) + ' AS Branch ,'
			SET @OrderByCrossTab = @OrderByCrossTab + 'Branch,'
		END
	
	else if @Column = 'SITE'
		BEGIN
			SET @Select1 = @Select1 +  ' ,tblSites.Site '
			SET @Select2 = @Select2 +  ' ,''Site'' '
			SET @GroupBy = @GroupBy +  ' ,tblSites.Site '
			SET @SelectListCrossTab = @SelectListCrossTab + 'AnalyseByVal' + CAST(@pointer AS VARCHAR) + ' AS Site,'
			SET @OrderByCrossTab = @OrderByCrossTab + 'Site,'
		END
	
	else if @Column = 'FLEE'
		BEGIN
			SET @Select1 = @Select1 +  ' ,tblFleets.Fleet '
			SET @Select2 = @Select2 +  ' ,''Fleet'' '
			SET @GroupBy = @GroupBy +  ' ,tblFleets.Fleet '
			SET @SelectListCrossTab = @SelectListCrossTab + 'AnalyseByVal' + CAST(@pointer AS VARCHAR) + ' AS Fleet,'
			SET @OrderByCrossTab = @OrderByCrossTab + 'Fleet,'
		END
	
	else if @Column = 'MODL'
		BEGIN
			SET @Select1 = @Select1 +  ' ,tblModels.Model '
			SET @Select2 = @Select2 +  ' ,''Model'' '
			SET @GroupBy = @GroupBy +  ' ,tblModels.Model '
			SET @SelectListCrossTab = @SelectListCrossTab + 'AnalyseByVal' + CAST(@pointer AS VARCHAR) + ' AS Model,'
			SET @OrderByCrossTab = @OrderByCrossTab + 'Model,'
		END
	
	else if @Column = 'SYST'
		BEGIN
			SET @Select1 = @Select1 +  ' ,tblSystems.System '
			SET @Select2 = @Select2 +  ' ,''System'' '
			SET @GroupBy = @GroupBy +  ' ,tblSystems.System '
			SET @SelectListCrossTab = @SelectListCrossTab + 'AnalyseByVal' + CAST(@pointer AS VARCHAR) + ' AS System,'
			SET @OrderByCrossTab = @OrderByCrossTab + 'System,'
		END
	
	else if @Column = 'SUBS'
		BEGIN
			SET @Select1 = @Select1 +  ' ,tblSubSystems.SubSystem '
			SET @Select2 = @Select2 +  ' ,''SubSystem'' '
			SET @GroupBy = @GroupBy +  ' ,tblSubSystems.SubSystem '
			SET @SelectListCrossTab = @SelectListCrossTab + 'AnalyseByVal'+ CAST(@pointer AS VARCHAR) +' AS ''Sub System''' + ','
			SET @OrderByCrossTab = @OrderByCrossTab + '''Sub System''' + ','
		END
		
	else if @Column = 'EVCC'
		BEGIN
			SET @Select1 = @Select1 +  ' ,tblComponentCodes.Code+''-''+tblComponentCodes.Description '
			SET @Select2 = @Select2 +  ' ,''Component'' '
			SET @GroupBy = @GroupBy +  ' ,tblComponentCodes.Code+''-''+tblComponentCodes.Description '
			SET @SelectListCrossTab = @SelectListCrossTab + 'AnalyseByVal' + CAST(@pointer AS VARCHAR) + ' AS Component,'
			SET @OrderByCrossTab = @OrderByCrossTab  + 'Component,'
		END
	
	else if @Column = 'EVTT'
		BEGIN
			SET @Select1 = @Select1 +  ' ,tblTaskTypes.Code+''-''+tblTaskTypes.Description '
			SET @Select2 = @Select2 +  ' ,''Task Type'' '
			SET @GroupBy = @GroupBy +  ' ,tblTaskTypes.Code+''-''+tblTaskTypes.Description '
			SET @SelectListCrossTab = @SelectListCrossTab + 'AnalyseByVal' + CAST(@pointer AS VARCHAR) + ' AS ''Task Type''' + ','
			SET @OrderByCrossTab = @OrderByCrossTab + '''Task Type'','
		END
	
	else if @Column = 'EQPL'
		BEGIN
			SET @Select1 = @Select1 +  ' ,tblEqpPlans.EqpPlan '
			SET @Select2 = @Select2 +  ' ,''Equipment'' '
			SET @GroupBy = @GroupBy +  ' ,tblEqpPlans.EqpPlan '
			SET @SelectListCrossTab = @SelectListCrossTab + 'AnalyseByVal' + CAST(@pointer AS VARCHAR) + ' AS Equipment,'
			SET @OrderByCrossTab = @OrderByCrossTab + 'Equipment,'
		END
	
	else if @Column = 'MDCO'
		BEGIN
			SET @Select1 = @Select1 +  ' ,tblModifierCodes.Code+''-''+tblModifierCodes.Description '
			SET @Select2 = @Select2 +  ' ,''Modifier Code'' '
			SET @GroupBy = @GroupBy +  ' ,tblModifierCodes.Code+''-''+tblModifierCodes.Description '
			SET @SelectListCrossTab = @SelectListCrossTab + 'AnalyseByVal' + CAST(@pointer AS VARCHAR) + ' AS ''Modifier Code''' + ','
			SET @OrderByCrossTab = @OrderByCrossTab + '''Modifier Code''' + ','
		END
	
	else if @Column = 'CTTY'
		BEGIN
			SET @Select1 = @Select1 +  ' ,tblCostTypes.CostType '
			SET @Select2 = @Select2 +  ' ,''Cost Type'' '
			SET @GroupBy = @GroupBy +  ' ,tblCostTypes.CostType '
			SET @SelectListCrossTab = @SelectListCrossTab + 'AnalyseByVal' + CAST(@pointer AS VARCHAR) + ' AS ''Cost Type''' + ','
			SET @OrderByCrossTab = @OrderByCrossTab + '''Cost Type''' + ','
		END
	
	else if @Column = 'PRTA'
		BEGIN
			SET @Select1 = @Select1 +  ' ,TASK_HEADER.Description '
			SET @Select2 = @Select2 +  ' ,''Task'' '
			SET @GroupBy = @GroupBy +  ' ,TASK_HEADER.Description '
			SET @SelectListCrossTab = @SelectListCrossTab + 'AnalyseByVal' + CAST(@pointer AS VARCHAR) + ' AS ''Task Header''' + ','
			SET @OrderByCrossTab = @OrderByCrossTab + '''Task Header''' + ','
		END
	
	--AL: 03/01/08 - ENH 353: add new analyse by options CRSP,DEVI,LCTN,PRPN,REGN
	else if @Column = 'CRSP'
		BEGIN
			SET @Select1 = @Select1 +  ' ,COST_RESPONSIBILITY.Cost_Responsibility_Code+''-''+COST_RESPONSIBILITY.Cost_Responsibility_Desc '
			SET @Select2 = @Select2 +  ' ,''Cost Resp.'' '
			SET @GroupBy = @GroupBy +  ' ,COST_RESPONSIBILITY.Cost_Responsibility_Code+''-''+COST_RESPONSIBILITY.Cost_Responsibility_Desc '
			SET @SelectListCrossTab = @SelectListCrossTab + 'AnalyseByVal' + CAST(@pointer AS VARCHAR) + ' AS ''Cost Responsibility''' + ','
			SET @OrderByCrossTab = @OrderByCrossTab + '''Cost Responsibility''' + ','
		END
	else if @Column = 'DEVI'
		BEGIN
			SET @Select1 = @Select1 +  ' ,DIVISION.Division_Code+''-''+DIVISION.Division_Desc '
			SET @Select2 = @Select2 +  ' ,''Division'' '
			SET @GroupBy = @GroupBy +  ' ,DIVISION.Division_Code+''-''+DIVISION.Division_Desc '
			SET @SelectListCrossTab = @SelectListCrossTab + 'AnalyseByVal' + CAST(@pointer AS VARCHAR) + ' AS Division,'
			SET @OrderByCrossTab = @OrderByCrossTab + 'Division' + ','
		END
	else if @Column = 'LCTN'
		BEGIN
			SET @Select1 = @Select1 +  ' ,EQP_LOCATION.Eqp_Location_Code+''-''+EQP_LOCATION.Eqp_Location_Desc '
			SET @Select2 = @Select2 +  ' ,''Eqp Location'' '
			SET @GroupBy = @GroupBy +  ' ,EQP_LOCATION.Eqp_Location_Code+''-''+EQP_LOCATION.Eqp_Location_Desc '
			SET @SelectListCrossTab = @SelectListCrossTab + 'AnalyseByVal' + CAST(@pointer AS VARCHAR) + ' AS ''Equipment Location''' + ','
			SET @OrderByCrossTab = @OrderByCrossTab + '''Equipment Location''' + ','
		END
	else if @Column = 'PRPN'
		BEGIN
			SET @Select1 = @Select1 +  ' ,CASE WHEN ISNULL(tblProjTasks.Part_Id,0)>0 THEN tblParts.Part WHEN ISNULL(tblProjTasks.Rotable_Part_Id,0)>0 THEN ROTABLE_PART.Part_Number ELSE ''NONE'' END '
			SET @Select2 = @Select2 +  ' ,''Primary Part'' '
			SET @GroupBy = @GroupBy +  ' ,CASE WHEN ISNULL(tblProjTasks.Part_Id,0)>0 THEN tblParts.Part WHEN ISNULL(tblProjTasks.Rotable_Part_Id,0)>0 THEN ROTABLE_PART.Part_Number ELSE ''NONE'' END '
			SET @SelectListCrossTab = @SelectListCrossTab + 'AnalyseByVal' + CAST(@pointer AS VARCHAR) + ' AS ''Primary Part''' + ','
			SET @OrderByCrossTab = @OrderByCrossTab + '''Primary Part''' + ','
		END
	else if @Column = 'REGN'
		BEGIN
			SET @Select1 = @Select1 +  ' ,REGION.Region_Code+''-''+REGION.Region_Desc '
			SET @Select2 = @Select2 +  ' ,''Region'' '
			SET @GroupBy = @GroupBy +  ' ,REGION.Region_Code+''-''+REGION.Region_Desc '
				SET @SelectListCrossTab = @SelectListCrossTab + 'AnalyseByVal' + CAST(@pointer AS VARCHAR) + ' AS Region,'
			SET @OrderByCrossTab = @OrderByCrossTab + 'Region' + ','
		END
	else if @Column = 'SRNO'
		BEGIN
--			SET @Select1 = @Select1 +  ' ,tblEquipment.SerialNumber+''-''+tblEquipment.SerialNumber '
--			SET @Select2 = @Select2 +  ' ,''Serial Number'' '
--			SET @GroupBy = @GroupBy +  ' ,tblEquipment.SerialNumber+''-''+tblEquipment.SerialNumber '
			SET @Select1 = @Select1 +  ' ,tblEquipment.SerialNumber '
			SET @Select2 = @Select2 +  ' ,''Serial Number'' '
			SET @GroupBy = @GroupBy +  ' ,tblEquipment.SerialNumber '
			SET @SelectListCrossTab = @SelectListCrossTab + 'AnalyseByVal' + CAST(@pointer AS VARCHAR) + ' AS ''Serial Number''' + ','
			SET @OrderByCrossTab = @OrderByCrossTab + '''Serial Number''' + ','
		END

	else 
		BEGIN
			SET @Select1 = @Select1 +  ' ,'''' '
			SET @Select2 = @Select2 +  ' ,'''' '
		END
END
WHILE @pointer<5
BEGIN
	SET @Select1 = @Select1 +  ' ,'''' '
	SET @Select2 = @Select2 +  ' ,'''' '
	SET @pointer=@pointer+1
END

SET @SQL = ' FROM
		tblSites INNER JOIN
		tblBranches ON dbo.tblSites.BranchId = tblBranches.BranchId INNER JOIN
		tblFleets ON tblSites.SiteId = tblFleets.SiteId INNER JOIN
		tblEqpPlans ON tblFleets.FleetId = tblEqpPlans.FleetId INNER JOIN
		tblSubSystems INNER JOIN
		tblSystems ON tblSubSystems.SystemID = tblSystems.SystemID INNER JOIN
		tblComponentCodes ON tblSubSystems.SubSystemID = tblComponentCodes.SubSystemID INNER JOIN
		tblProjTasks ON tblComponentCodes.ComponentCodeID = tblProjTasks.ComponentCodeId INNER JOIN
		tblEqpProjs ON tblProjTasks.EqpProjId = tblEqpProjs.EqpProjId ON tblEqpPlans.EqpPlanId = tblProjTasks.EqpPlanId INNER JOIN
		tblEquipment ON tblEqpPlans.EquipmentId = tblEquipment.EquipmentId INNER JOIN
		tblModels ON tblEquipment.ModelId = tblModels.ModelId INNER JOIN
		tblModifierCodes ON tblModifierCodes.ModifierID = tblProjTasks.ModifierId INNER JOIN
		tblCostTypes ON tblCostTypes.CostTypeID = tblSystems.CostTypeID INNER JOIN
		tblTaskTypes ON tblTaskTypes.TaskTypeID = tblProjTasks.TaskTypeId INNER JOIN
		tblProjTaskOccs ON tblProjTasks.ProjTaskId = tblProjTaskOccs.ProjTaskId INNER JOIN
		CALENDAR_DATES ON CALENDAR_DATES.Calendar_Date = CONVERT(datetime, CONVERT(char(10), tblProjTaskOccs.OccDate, 101)) INNER JOIN
		TASK_HEADER ON tblProjTasks.Task_Header_Id = TASK_HEADER.Task_Header_Id LEFT OUTER JOIN
		ROTABLE_PART ON tblProjTasks.Rotable_Part_Id = ROTABLE_PART.Rotable_Part_Id LEFT OUTER JOIN
		tblParts ON tblProjTasks.Part_Id = tblParts.PartId LEFT OUTER JOIN
		EQP_LOCATION ON tblEqpPlans.Eqp_Location_Id = EQP_LOCATION.Eqp_Location_Id LEFT OUTER JOIN
		COST_RESPONSIBILITY ON tblEqpPlans.Cost_Responsibility_ID = COST_RESPONSIBILITY.Cost_Responsibility_ID LEFT OUTER JOIN
		REGION ON tblEqpPlans.Region_Id = REGION.Region_Id LEFT OUTER JOIN 
		DIVISION ON tblEqpPlans.Division_Id = DIVISION.Division_Id '/*VV #2355 INNER JOIN
		tblWorkOrderProjs ON tblProjTasks.ProjTaskId = tblWorkOrderProjs.ProjTaskId INNER JOIN
		tblWorkOrders ON tblWorkOrderProjs.WorkOrderId = tblWorkOrders.WorkOrderId'*/
SET @Where2=''

	--*******************************************
	--Change Start
	--Tas 21-Sep-09
	SET @Where2 = @Where2 + ' AND ('+CAST(@Level AS varchar(50))+'<>1 OR tblSites.branchId In (SELECT AMT_OBJECT_ID FROM USER_LEVEL_PERMISSION WHERE AMT_USER_ID = '+CAST(@UserId AS varchar(50))+'))'
	SET @Where2 =@Where2	+ ' AND ('+CAST(@Level AS varchar(50))+'<>2 OR tblSites.SiteId IN(SELECT AMT_OBJECT_ID FROM USER_LEVEL_PERMISSION WHERE AMT_USER_ID = '+CAST(@UserId AS varchar(50))+'))'
	
	--Change End
	--*******************************************

IF @Branch IS NOT NULL SET @Where2 = @Where2 + ' AND tblSites.branchId IN ( ' +  @Branch + ') '
IF @Site IS NOT NULL SET @Where2 = @Where2 + ' AND tblSites.SiteId IN ( ' +  @Site + ') '
IF @Fleet IS NOT NULL SET @Where2 = @Where2 + ' AND tblFleets.FleetId IN ( ' +  @Fleet + ') '
IF @EqpPlanId IS NOT NULL SET @Where2 = @Where2 + ' AND tblEqpPlans.eqpplanid IN ( ' +  @EqpPlanId + ') '
IF @ModifierCodeId IS NOT NULL SET @Where2 = @Where2 + ' AND tblModifierCodes.ModifierId IN ( ' +  @ModifierCodeId + ') '
IF @ModelId IS NOT NULL SET @Where2 = @Where2 + ' AND tblModels.ModelId IN ( ' +  @ModelId + ') '
IF @TaskTypeId IS NOT NULL SET @Where2 = @Where2 + ' AND tblTaskTypes.TaskTypeId IN ( ' +  @TaskTypeId + ') '
IF @CostTypeId IS NOT NULL SET @Where2 = @Where2 + ' AND tblSystems.CostTypeId IN ( ' +  @CostTypeId + ') '
IF @ComponentCodeId IS NOT NULL SET @Where2 = @Where2 + ' AND tblComponentCodes.componentcodeid IN (' + @ComponentCodeId + ') '
IF @SystemId IS NOT NULL SET @Where2 = @Where2 + ' AND tblSystems.SystemId IN (' + @SystemId + ') '
IF @SubSystemId IS NOT NULL SET @Where2 = @Where2 + ' AND tblSubSystems.SubSystemId IN (' + @SubSystemId + ') '
IF @StrategyTaskID IS NOT NULL SET @Where2 = @Where2 + ' AND TASK_HEADER.Task_Header_Id IN (' + @StrategyTaskID + ') '
IF @RegionId IS NOT NULL SET @Where2 = @Where2 + ' AND tblEqpPlans.Region_Id IN (' + @RegionId + ') '
IF @DivisionId IS NOT NULL SET @Where2 = @Where2 + ' AND tblEqpPlans.Division_Id IN (' + @DivisionId + ') '
IF @CostResponsibilityID IS NOT NULL SET @Where2 = @Where2 + ' AND tblEqpPlans.Cost_Responsibility_ID IN (' + @CostResponsibilityID + ') '
IF @EqpLocationId IS NOT NULL SET @Where2 = @Where2 + ' AND tblEqpPlans.Eqp_Location_Id IN (' + @EqpLocationId + ') '
IF @ParentEquipmentID IS NOT NULL SET @Where2 = @Where2 + ' AND tblEqpPlans.EqpPlanID IN (SELECT EqpPlanID FROM dbo.EQP_SIBLINGS_F('+@ParentEquipmentID+')) '


-- Insert projected changeouts
SET @Where1 = ' WHERE ( ' + ''''+ CONVERT(CHAR(10), @StartDate,120) + ''''+ ' <= OccDate AND ' +'''' + CONVERT(CHAR(10), @EndDate,120) +'''' + ' >= OccDate) AND Projection_Header_Id IN (' + @Proj_Type_Id + ') '
--print 'INSERT INTO #aa_ChangeoutAnalysis(PeriodVal,PeriodDesc,Occs,AnalyseByVal1,AnalyseByVal2,AnalyseByVal3,AnalyseByVal4,AnalyseByVal5,AnalyseByName1,AnalyseByName2,AnalyseByName3,AnalyseByName4,AnalyseByName5) SELECT CALENDAR_DATES.Calendar_Period, right(convert(varchar,convert(datetime,convert(varchar,CALENDAR_DATES.Calendar_Period) + ''01'',112),106),8),Count(*) ' + @Select1 + @Select2 + @SQL  + @Where1 + @Where2 + ' Group By CALENDAR_DATES.Calendar_Period' + @GroupBy

/*VV #2355 
--Include @OccurrenceTypeID If Not Null
BEGIN 
	IF @occurrenceTypeID <>'' 
		SET @Where1=@Where1+'AND tblWorkOrders.AMTOccurrenceTypeId  IN (' + @OccurrenceTypeID + ')'
END
*/


EXEC('INSERT INTO #aa_ChangeoutAnalysis(PeriodVal,PeriodDesc,Occs,AnalyseByVal1,AnalyseByVal2,AnalyseByVal3,AnalyseByVal4,AnalyseByVal5,AnalyseByName1,AnalyseByName2,
AnalyseByName3,AnalyseByName4,AnalyseByName5) SELECT CALENDAR_DATES.Calendar_Period, right(convert(varchar,convert(datetime,convert(varchar,CALENDAR_DATES.Calendar_Period) + 
''01'',112),106),8),isnull(Count(*),0) ' + @Select1 + @Select2 + @SQL  + @Where1 + @Where2 + ' Group By CALENDAR_DATES.Calendar_Period' + @GroupBy)

-- Insert previous changouts
SET @SQL = ' FROM 
		tblSites INNER JOIN
		tblBranches ON tblSites.BranchId = tblBranches.BranchId INNER JOIN
		tblFleets ON tblSites.SiteId = tblFleets.SiteId INNER JOIN
		tblEqpPlans ON tblFleets.FleetId = tblEqpPlans.FleetId INNER JOIN
		tblSubSystems INNER JOIN
		tblSystems ON tblSubSystems.SystemID = tblSystems.SystemID INNER JOIN
		tblComponentCodes ON tblSubSystems.SubSystemID = tblComponentCodes.SubSystemID INNER JOIN
		tblProjTasks ON tblComponentCodes.ComponentCodeID = tblProjTasks.ComponentCodeId INNER JOIN
		tblEqpProjs ON tblProjTasks.EqpProjId = tblEqpProjs.EqpProjId ON tblEqpPlans.EqpPlanId = tblProjTasks.EqpPlanId INNER JOIN
		tblEquipment ON tblEqpPlans.EquipmentId = tblEquipment.EquipmentId INNER JOIN
		tblModels ON tblEquipment.ModelId = tblModels.ModelId INNER JOIN
		tblModifierCodes ON tblModifierCodes.ModifierID = tblProjTasks.ModifierId INNER JOIN
		tblCostTypes ON tblCostTypes.CostTypeID = tblSystems.CostTypeID INNER JOIN
		tblTaskTypes ON tblTaskTypes.TaskTypeID = tblProjTasks.TaskTypeId INNER JOIN
		tblWorkOrderProjs ON tblProjTasks.ProjTaskId = tblWorkOrderProjs.ProjTaskId INNER JOIN
		tblWorkOrders ON tblWorkOrderProjs.WorkOrderId = tblWorkOrders.WorkOrderId INNER JOIN
		CALENDAR_DATES ON CALENDAR_DATES.Calendar_Date = CONVERT(datetime, CONVERT(char(10), tblWorkOrders.AMTStartDate, 101)) INNER JOIN
		TASK_HEADER ON tblProjTasks.Task_Header_Id = TASK_HEADER.Task_Header_Id LEFT OUTER JOIN
		ROTABLE_PART ON tblProjTasks.Rotable_Part_Id = ROTABLE_PART.Rotable_Part_Id LEFT OUTER JOIN
		tblParts ON tblProjTasks.Part_Id = tblParts.PartId LEFT OUTER JOIN
		EQP_LOCATION ON tblEqpPlans.Eqp_Location_Id = EQP_LOCATION.Eqp_Location_Id LEFT OUTER JOIN
		DIVISION ON tblEqpPlans.Division_Id = DIVISION.Division_Id LEFT OUTER JOIN
		REGION ON tblEqpPlans.Region_Id = REGION.Region_Id LEFT OUTER JOIN
		COST_RESPONSIBILITY ON tblEqpPlans.Cost_Responsibility_ID = COST_RESPONSIBILITY.Cost_Responsibility_ID '
SET @Where1 = ' WHERE ( ' + '''' + CONVERT(CHAR(10), @StartDate,120) + '''' + '  <= AMTStartDate AND ' + '''' + CONVERT(CHAR(10), @EndDate,120) + '''' + ' >= AMTStartDate) AND Projection_Header_Id  IN (' + @Proj_Type_Id + ') AND tblWorkOrders.AMTJobStatus_Id <> 3 '
--print 'INSERT INTO #aa_ChangeoutAnalysis(PeriodVal,PeriodDesc,Occs,AnalyseByVal1,AnalyseByVal2,AnalyseByVal3,AnalyseByVal4,AnalyseByVal5,AnalyseByName1,AnalyseByName2,AnalyseByName3,AnalyseByName4,AnalyseByName5) SELECT CALENDAR_DATES.Calendar_Period, right(convert(varchar,convert(datetime,convert(varchar,CALENDAR_DATES.Calendar_Period) + ''01'',112),106),8),Count(*) ' + @Select1 + @Select2 + @SQL  + @Where1 + @Where2 + ' Group By CALENDAR_DATES.Calendar_Period' + @GroupBy

--Include @OccurrenceTypeID If Not Null
BEGIN 
	IF @occurrenceTypeID <>'' 
		SET @Where1=@Where1+'AND tblWorkOrders.AMTOccurrenceTypeId  IN (' + @OccurrenceTypeID + ')'
END

EXEC('INSERT INTO #aa_ChangeoutAnalysis(PeriodVal,PeriodDesc,Occs,AnalyseByVal1,AnalyseByVal2,AnalyseByVal3,AnalyseByVal4,AnalyseByVal5,AnalyseByName1,AnalyseByName2,AnalyseByName3,AnalyseByName4,AnalyseByName5) SELECT CALENDAR_DATES.Calendar_Period, right(convert(varchar,convert(datetime,convert(varchar,CALENDAR_DATES.Calendar_Period) + ''01'',112),106),8),isnull(Count(*),0) ' + @Select1 + @Select2 + @SQL  + @Where1 + @Where2 + ' Group By CALENDAR_DATES.Calendar_Period' + @GroupBy)
-- Min,Max Period Val


DECLARE @MinPeriod int
DECLARE @MaxPeriod int

SELECT @MinPeriod=MIN(PeriodVal), @MaxPeriod=MAX(PeriodVal) FROM #aa_ChangeoutAnalysis

--select @MinPeriod as MinPeriod,@MaxPeriod as MaxPeriod

--select * into aa_ChangeoutAnalysis from #aa_ChangeoutAnalysis return

/*VV #351*/
select AnalyseByVal1,AnalyseByVal2,AnalyseByVal3,AnalyseByVal4,AnalyseByVal5,
AnalyseByName1,AnalyseByName2,AnalyseByName3,AnalyseByName4,AnalyseByName5
INTO #B_aa_ChangeoutAnalysis
from #aa_ChangeoutAnalysis
group by AnalyseByVal1,AnalyseByVal2,AnalyseByVal3,AnalyseByVal4,AnalyseByVal5,
AnalyseByName1,AnalyseByName2,AnalyseByName3,AnalyseByName4,AnalyseByName5


insert into #aa_ChangeoutAnalysis(PeriodVal,PeriodDesc,Occs,AnalyseByVal1,AnalyseByVal2,AnalyseByVal3,AnalyseByVal4,AnalyseByVal5,
AnalyseByName1,AnalyseByName2,AnalyseByName3,AnalyseByName4,AnalyseByName5)

--AL: 23/10/08
select	FP.CalenderPeriod,right(convert(varchar,convert(datetime,convert(varchar,FP.CalenderPeriod) + '01',112),106),8),0 as Occs,
		AnalyseByVal1,AnalyseByVal2,AnalyseByVal3,AnalyseByVal4,AnalyseByVal5,
		AnalyseByName1,AnalyseByName2,AnalyseByName3,AnalyseByName4,AnalyseByName5
from
	/*VV #351 (select AnalyseByVal1,AnalyseByVal2,AnalyseByVal3,AnalyseByVal4,AnalyseByVal5,
			AnalyseByName1,AnalyseByName2,AnalyseByName3,AnalyseByName4,AnalyseByName5
	from #aa_ChangeoutAnalysis
	group by AnalyseByVal1,AnalyseByVal2,AnalyseByVal3,AnalyseByVal4,AnalyseByVal5,
			AnalyseByName1,AnalyseByName2,AnalyseByName3,AnalyseByName4,AnalyseByName5) A */
	#B_aa_ChangeoutAnalysis A
			CROSS JOIN 
	tblFinancialPeriods FP
where FP.CalenderPeriod BETWEEN @MinPeriod AND @MaxPeriod

/*VV #351*/
DROP TABLE #B_aa_ChangeoutAnalysis


--GD #1657 if Cross tab
If(@IsCrossTab='true')
BEGIN
DECLARE @ListCol VARCHAR(MAX)
DECLARE @Query VARCHAR(MAX)
	CREATE TABLE [#temp](
						[AnalyseByVal1] [varchar](max) COLLATE DATABASE_DEFAULT NULL,
						[AnalyseByName1] [varchar](max) COLLATE DATABASE_DEFAULT NULL,
						[AnalyseByVal2] [varchar](max) COLLATE DATABASE_DEFAULT NULL,
						[AnalyseByName2] [varchar](max) COLLATE DATABASE_DEFAULT NULL,
						[AnalyseByVal3] [varchar](max) COLLATE DATABASE_DEFAULT NULL,
						[AnalyseByName3] [varchar](max) COLLATE DATABASE_DEFAULT NULL,
						[AnalyseByVal4] [varchar](max) COLLATE DATABASE_DEFAULT NULL,
						[AnalyseByName4] [varchar](max) COLLATE DATABASE_DEFAULT NULL,
						[AnalyseByVal5] [varchar](max) COLLATE DATABASE_DEFAULT NULL,
						[AnalyseByName5] [varchar](max) COLLATE DATABASE_DEFAULT NULL,
						[PeriodVal] [varchar](max) COLLATE DATABASE_DEFAULT NULL,
						[PeriodDesc] [varchar](max) COLLATE DATABASE_DEFAULT NULL,						
						[Occs] [int] NULL						
					) ON [PRIMARY]
					
	INSERT INTO #temp				
				SELECT AnalyseByVal1,AnalyseByName1,NULLIF(AnalyseByVal2,'')as AnalyseByVal2,AnalyseByName2,NULLIF(AnalyseByVal3,'')as AnalyseByVal3,
				AnalyseByName3,NULLIF(AnalyseByVal4,'')as AnalyseByVal4,AnalyseByName4,NULLIF(AnalyseByVal5,'')as AnalyseByVal5,AnalyseByName5,
				PeriodVal,PeriodDesc,SUM(Occs) as Occs
				FROM #aa_ChangeoutAnalysis
				GROUP BY AnalyseByVal1 , AnalyseByName1, AnalyseByVal2, AnalyseByVal2, AnalyseByName2, AnalyseByVal3, AnalyseByVal3,
				AnalyseByName3,  AnalyseByVal4, AnalyseByVal4, AnalyseByName4, AnalyseByVal5, AnalyseByVal5, AnalyseByName5 ,
				PeriodVal , PeriodDesc
				ORDER BY AnalyseByVal1, AnalyseByVal2, AnalyseByVal3, AnalyseByVal4, AnalyseByVal5, PeriodVal
	
	SELECT  @ListCol = STUFF(( SELECT DISTINCT  '],[' + PeriodVal  FROM  #temp	ORDER BY '],[' + PeriodVal 	FOR XML PATH('') ), 1, 2, '') + ']'
	
	SET @Query =  'SELECT * FROM ( SELECT '+@SelectListCrossTab +'PeriodVal,Occs from #temp WHERE Occs!=0 ) tmp PIVOT (SUM(Occs) for PeriodVal in('+@ListCol+')) AS pvt
				  ORDER BY '+SUBSTRING(@OrderByCrossTab,1,LEN(@OrderByCrossTab)-1)
						  
	EXECUTE (@Query)
		
END
ELSE
	BEGIN
select AnalyseByVal1,AnalyseByName1,NULLIF(AnalyseByVal2,'')as AnalyseByVal2,AnalyseByName2,NULLIF(AnalyseByVal3,'')as AnalyseByVal3,
		AnalyseByName3,NULLIF(AnalyseByVal4,'')as AnalyseByVal4,AnalyseByName4,NULLIF(AnalyseByVal5,'')as AnalyseByVal5,AnalyseByName5,
		PeriodVal,PeriodDesc,SUM(Occs) as Occs
from #aa_ChangeoutAnalysis
group by AnalyseByVal1,AnalyseByName1,AnalyseByVal2, AnalyseByVal2,AnalyseByName2,AnalyseByVal3, AnalyseByVal3,
		AnalyseByName3,AnalyseByVal4, AnalyseByVal4,AnalyseByName4,AnalyseByVal5, AnalyseByVal5,AnalyseByName5,
		PeriodVal,PeriodDesc
order by AnalyseByVal1,AnalyseByVal2,AnalyseByVal3,AnalyseByVal4,AnalyseByVal5,PeriodVal
END
drop table #aa_ChangeoutAnalysis

GO


/****** Object:  StoredProcedure [dbo].[RPT_CUSTOMER_AGREEMENT_SUMMARY_P]    Script Date: 08/23/2011 09:57:45 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[RPT_CUSTOMER_AGREEMENT_SUMMARY_P]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[RPT_CUSTOMER_AGREEMENT_SUMMARY_P]
GO

/****** Object:  StoredProcedure [dbo].[RPT_CUSTOMER_AGREEMENT_SUMMARY_P]    Script Date: 08/23/2011 09:57:45 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



create PROCEDURE [dbo].[RPT_CUSTOMER_AGREEMENT_SUMMARY_P]

/******************************************************************************
	File: 
	Name: RPT_CUSTOMER_AGREEMENT_SUMMARY_P
	Called By: 

	Desc: Get data for Consumables Forecast report
             

	Auth: Veronika Vasylyeva
	Date: 3 Mar 2009
*******************************************************************************
		Change History
*******************************************************************************
Date:		Author:		Description:
--------	--------	----------------------------------------
23-Aug-11   G Dhillon   #2283 Incomplete fluid calculation in Agreement Summary 2 report
18-Jul-11	V Vasylyeva	#2098 rounding usage  for cost per year 
						because of float calculations. 
12-May-11	V Vasylyeva	#378 changed end usage calculations
17-Sep-09	V Vasylyeva	CR8325 Modelling enhancements
*******************************************************************************/
	/* Param List */
    @EqpPlanId int,
    @ProjHeaderId int,
    @CostBearerID varchar(MAX)='',
	@IncludeLube int =0/* All=0,Include=1,Exclude=2*/,
	@Esc bit=1 /*Normal=1, No escalation=0*/,
	@ShowAv bit=1,
	@ShowLabHrs bit=1,
	@ShowLabRate bit=1,
	@ShowLubeCost bit=1,
	@ShowLubeQty bit=1,
	@ShowProj bit=1,
	@AdjustCosts bit=0
AS

/* All=0,Include=1,Exclude=2*/
DECLARE @LubeIncl int
DECLARE @LubeExcl int
DECLARE @EqpProjId int
DECLARE @Days varchar(10)
DECLARE @PMId int

/*VV CR8325*/
DECLARE @AdjFactor float
DECLARE @Billing float
DECLARE @RiskPremiumPct float
DECLARE @TotalCost float
DECLARE @DefCB int
/*VV #378*/
DECLARE @TermByUsage int

SET @LubeIncl=1
SET @LubeExcl=2

SET @Days='Days'

SELECT @DefCB=CostBearerId FROM tblCostBearers WHERE Default_Value=1

SELECT @PMId=TaskTypeId FROM tblTaskTypes WHERE Code='PM'

CREATE TABLE #aa_CostBearer(CostBearerId int, Incl int,Lube int,AdjFactor float PRIMARY KEY (CostBearerId))

INSERT INTO #aa_CostBearer(CostBearerId, Incl,Lube,AdjFactor)
SELECT CB.CostBearerId, 
CASE ISNULL(@CostBearerID,'') WHEN '' THEN 1 ELSE CASE WHEN LTT.List_Item>0 THEN 1 ELSE 0 END END AS Incl,
CASE @IncludeLube WHEN @LubeIncl THEN 1 WHEN @LubeExcl THEN 0 ELSE
	CASE ISNULL(@CostBearerID,'') WHEN '' THEN 1 ELSE CASE WHEN LTT.List_Item>0 THEN 1 ELSE 0 END END
END AS Lube,1 AS AdjFactor
FROM
tblCostBearers CB
	LEFT JOIN
(SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@CostBearerID)) LTT
	ON CB.CostBearerId=LTT.List_Item


--Equipment details
CREATE TABLE #aa_EqpProj(EqpPlanId int,EqpProjId int,TotalTerm float,AnnualUtil float,
NoYears int,StartUsage float,QUOMId int,ProjUsageProfileId int,EndUsage float,ExchangeRateId int,
StartDate datetime,StartIntervalId int,EndIntervalId int,FleetId int,Utilisation_Method_Id int,
OriginalCommissionDate datetime,EndDate datetime
PRIMARY KEY(EqpPlanId,EqpProjId))

INSERT INTO #aa_EqpProj(EqpPlanId,EqpProjId,TotalTerm,AnnualUtil,/*NoYears,*/StartUsage,QUOMId,ProjUsageProfileId,EndUsage,
ExchangeRateId,StartDate,FleetId,Utilisation_Method_Id,OriginalCommissionDate,EndDate)
SELECT 
EP.EqpPlanId,EPR.EqpProjId,

CASE 
/* VV #378
WHEN EP.Primary_QUOM_ID=EPR.EndQUOMId THEN EPR.EndUsage - EPSU.StartUsage
*/
WHEN EP.Primary_QUOM_ID=EPR.EndQUOMId THEN 

CASE WHEN EPR.Eqp_Term_Rule_ID=@TermByUsage THEN EPR.EndUsage ELSE
	dbo.GET_EQUIPMENT_END_USAGE_F(EP.EqpPlanId, EP.Primary_QUOM_ID,EPR.EndDate,EP.Utilisation_Method_Id,
	 EPR.Annual_Utilisation,EPR.ProjUsageProfileId) END
- EPSU.StartUsage
	 
WHEN EP.Primary_QUOM_ID IS NULL THEN CAST(EPR.EndDate AS float)-CAST(EP.StartDate AS float)
/* VV #378
ELSE dbo.GET_USAGE_FROM_DATE_F(EPR.EqpProjId,EP.Primary_QUOM_ID,EPR.EndDate) -EPSU.StartUsage
*/
ELSE CASE WHEN EPR.Eqp_Term_Rule_ID=@TermByUsage THEN EPR.EndUsage ELSE
	dbo.GET_EQUIPMENT_END_USAGE_F(EP.EqpPlanId, EP.Primary_QUOM_ID,EPR.EndDate,EP.Utilisation_Method_Id,
	 EPR.Annual_Utilisation,EPR.ProjUsageProfileId) END
- EPSU.StartUsage END AS TotalTerm,
CASE EP.Utilisation_Method_Id
WHEN 2 THEN EPR.Annual_Utilisation
WHEN 3 THEN 365.25
ELSE NULL END AS  AnnualUtil,
EPSU.StartUsage,
EP.Primary_QUOM_ID AS QUOMId,EPR.ProjUsageProfileId,EPR.EndUsage,EPR.ExchangeRateId,EP.StartDate,
EP.FleetId,EP.Utilisation_Method_Id,EP.OriginalCommissionDate,EPR.EndDate
FROM 
tblEqpPlans EP
	INNER JOIN
tblEqpProjs EPR
	ON EP.EqpPlanId=EPR.EqpPlanId AND EPR.Projection_Header_id=@ProjHeaderId
	LEFT JOIN
tblEqpPlanStartUsages EPSU
	ON EP.EqpPlanId=EPSU.EqpPlanId AND EP.Primary_QUOM_Id=EPSU.StartUsageQUOMId
WHERE EP.EqpPlanId=@EqpPlanId /*AND EP.Equipment_Type_Id=@EqpTypeModelling*/

IF @@ROWCOUNT=0 RETURN

/*VV CR8325*/
SET @AdjFactor=1

IF @AdjustCosts=1
BEGIN  

	SELECT @Billing=SUM(RB.PrimeBillProj) FROM 
	tblRepBilling RB
		INNER JOIN
	#aa_EqpProj EPR
		ON RB.EqpProjID=EPR.EqpProjID
	
	SELECT @TotalCost=CASE @Esc WHEN 1 THEN 
						SUM(PC.PrimePartsSell+PC.PrimeLabourSell+	PC.PrimeMiscSell)
					  ELSE 	
					    SUM(PC.PrimePartsSellNoEsc+PC.PrimeLabourSellNoEsc+	PC.PrimeMiscSellNoEsc)
					  END
	FROM
	tblRepProjCosts PC
		INNER JOIN
	#aa_EqpProj EPR
		ON PC.EqpProjID=EPR.EqpProjID
	WHERE PC.CostBearerID=@DefCB
	  
    IF ISNULL(@Billing,0)<>0 SET @AdjFactor=ISNULL(@Billing/NULLIF(@TotalCost,0),1)
    
    IF EXISTS(SELECT * FROM SALES_AGREEMENT SA 
			INNER JOIN 
		#aa_EqpProj EP
			ON SA.Agr_Eqp_Plan_ID=EP.EqpPlanId
			INNER JOIN
		tblEqpProjs EPR
			ON EP.EqpProjId=EPR.EqpProjId
		WHERE SA.Agr_Type_Id=4/*Cost Cap*/ AND EPR.Projection_Type_ID=6/*Estimate-Current*/)
	BEGIN
		SELECT @RiskPremiumPct=Pct_Risk_Premium
		FROM
		SALES_AGREEMENT SA 
			INNER JOIN 
		#aa_EqpProj EP
			ON SA.Agr_Eqp_Plan_ID=EP.EqpPlanId
			
		SET @AdjFactor=ISNULL((@TotalCost+@TotalCost * (@RiskPremiumPct /100.00))/NULLIF(@TotalCost,0),1)
	END
	
	UPDATE #aa_CostBearer SET AdjFactor=@AdjFactor WHERE CostBearerId=@DefCB
END

IF EXISTS(SELECT EqpPlanId FROM #aa_EqpProj WHERE ProjUsageProfileId>0)
BEGIN
	UPDATE #aa_EqpProj SET AnnualUtil=(SELECT AVG(USA.UsagePerCalYear)
									FROM  
									tblUsageProfiles UP 
										INNER JOIN
									tblUsageSteps US 
										ON UP.UsageProfileId = US.UsageProfileId 
										INNER JOIN
									tblUsageStepAmts USA 
										ON US.UsageStepId = USA.UsageStepId 
										INNER JOIN
									#aa_EqpProj EPR 
										ON UP.UsageProfileId = EPR.ProjUsageProfileId AND USA.UsageQUOMId = EPR.QUOMId
									)
END


CREATE TABLE #z_CostSummary(EqpProjId int,FieldRate float,ShopRate float,DealerFldLabour float,
LubeIncl float,PM_P float,PM_L float, PM_M float,UN_P float, UN_L float, UN_M float,
Total_P float,Total_L float, Total_M float
PRIMARY KEY(EqpProjId))

INSERT INTO #z_CostSummary(EqpProjId,FieldRate,ShopRate)
SELECT	
Z.EqpProjId,
SUM(CB.AdjFactor*CB.Incl*CASE WHEN Labour_Hrs_Field = 1 THEN 
	CASE WHEN @Esc=1 THEN CE.CumLaborEscalation ELSE 1.00 END * 
		PTO.Probability / 100 * PTA.LaborCost / ERC.ExRate	
	ELSE 0 END)/NULLIF(SUM(CB.Incl*CASE WHEN Labour_Hrs_Field = 1 THEN LaborHours ELSE 0.00 END),0) AS FieldRate,

SUM(CB.AdjFactor*CB.Incl*CASE WHEN Labour_Hrs_Field = 0 THEN 
	CASE WHEN @Esc=1 THEN CE.CumLaborEscalation ELSE 1.00 END * 
		PTO.Probability / 100.00 * PTA.LaborCost / ERC.ExRate	
	ELSE 0.00 END)/NULLIF(SUM(CB.Incl*CASE WHEN Labour_Hrs_Field = 0 THEN LaborHours ELSE 0.00 END),0) AS ShopRate

FROM 
#aa_EqpProj Z
	INNER JOIN
tblProjTasks PT
	ON Z.EqpProjId=PT.EqpProjId
	INNER JOIN 
tblProjTaskOpts PTO
	ON PTO.ProjTaskId = PT.ProjTaskId
	INNER JOIN 
PROJ_TASK_AMT_COST_1_V PTA
	ON PTA.ProjTaskOptId = PTO.ProjTaskOptId
	INNER JOIN 
tblCostEscalations CE
	ON PTA.Pricing_Date >= CE.EscalationDate AND PTA.Pricing_Date < CE.EndDate
	INNER JOIN 
tblCostPartsEscalations CPE
	ON CE.CostEscalationId = CPE.CostEscalationId AND CPE.ManufacturerId = PT.ManufacturerId
	INNER JOIN 
tblEqpProjs EPR
	ON PT.EqpProjId = EPR.EqpProjId
	INNER JOIN 
tblExRates ER
	ON EPR.ExchangeRateId = ER.ExRateID
	INNER JOIN 
tblExRateCurrencies ERC
	ON ERC.ExRateID = ER.ExRateID AND ERC.CurrencyID = PTA.CurrencyID
	INNER JOIN
#aa_CostBearer CB
	ON PTA.Cost_Bearer_Id =CB.CostBearerId
WHERE (PTA.LaborHours>0) 
GROUP BY Z.EqpProjId


--drop table aa_EqpProj,aa_CostBearer
--select * into aa_EqpProj from #aa_EqpProj
--select * into aa_CostBearer from #aa_CostBearer
--return

IF @@ROWCOUNT=0 
BEGIN
	INSERT INTO #z_CostSummary(EqpProjId) SELECT EqpProjId FROM #aa_EqpProj
END

UPDATE #z_CostSummary SET DealerFldLabour=(SELECT AVG(LaborShare) FROM
(SELECT 
ISNULL(SUM(PTA.LaborShare*Labour_Hrs_Field)/NULLIF(SUM(CAST(Labour_Hrs_Field AS int)),0),0) AS LaborShare
FROM 
#aa_EqpProj Z
	INNER JOIN
tblProjTasks PT
	ON Z.EqpProjId=PT.EqpProjId
	INNER JOIN 
tblProjTaskOpts PTO
	ON PTO.ProjTaskId = PT.ProjTaskId
	INNER JOIN 
PROJ_TASK_AMT_COST_1_V PTA
	ON PTA.ProjTaskOptId = PTO.ProjTaskOptId
	INNER JOIN
#aa_CostBearer CB
	ON PTA.Cost_Bearer_Id =CB.CostBearerId
WHERE PTA.LaborHours>0 AND CB.Incl=1
GROUP BY PT.ProjTaskId) A)


UPDATE CS SET 
CS.Total_P=A.Total_P,CS.Total_L=A.Total_L,CS.Total_M=A.Total_M,
CS.PM_P=A.PM_P,CS.PM_L=A.PM_L,CS.PM_M=A.PM_M,
CS.UN_P=A.UN_P,CS.UN_L=A.UN_L,CS.UN_M=A.UN_M,
CS.LubeIncl=A.LubeIncl
FROM
#z_CostSummary CS
	INNER JOIN
(
SELECT PC.EqpProjId,

SUM(CB.AdjFactor*CASE WHEN PTA.Consumable=1 AND JC.Lube=1 THEN CB.Lube ELSE CB.Incl END*
CASE @Esc WHEN 1 THEN PC.PrimePartsSell ELSE PC.PrimePartsSellNoEsc END) AS Total_P,

SUM(CB.AdjFactor*CB.Incl*CASE @Esc WHEN 1 THEN PC.PrimeLabourSell ELSE PC.PrimeLabourSellNoEsc END) AS Total_L,
	 
SUM(CB.AdjFactor*CB.Incl*CASE @Esc WHEN 1 THEN PC.PrimeMiscSell ELSE PC.PrimeMiscSellNoEsc END) AS Total_M,

SUM(CB.AdjFactor*CASE WHEN PTA.Consumable=1 AND JC.Lube=1 THEN CB.Lube ELSE 0.00 END *
	CASE @Esc WHEN 1 THEN PC.PrimePartsSell ELSE PC.PrimePartsSellNoEsc END)
AS LubeIncl,

SUM(CB.AdjFactor*CASE WHEN PTA.Consumable=1 AND JC.Lube=1 THEN CB.Lube ELSE CB.Incl END*
(CASE PT.TaskTypeId WHEN @PMId THEN 1 ELSE 0.00 END)*
(CASE @Esc WHEN 1 THEN PC.PrimePartsSell ELSE PC.PrimePartsSellNoEsc END)) 
AS PM_P,
SUM(CB.AdjFactor*(CASE PT.TaskTypeId WHEN @PMId THEN CB.Incl ELSE 0.00 END)*
(CASE @Esc WHEN 1 THEN PC.PrimeLabourSell ELSE PC.PrimeLabourSellNoEsc END))
AS PM_L,
SUM(CB.AdjFactor*(CASE PT.TaskTypeId WHEN @PMId THEN CB.Incl ELSE 0.00 END)*
(CASE @Esc WHEN 1 THEN PC.PrimeMiscSell ELSE PC.PrimeMiscSellNoEsc END) )
AS PM_M,
/*Unscheduled tasks cannot be consumables*/
SUM(CB.AdjFactor*CASE PT.Unscheduled WHEN 0 THEN 0 ELSE CB.Incl END*
(CASE @Esc WHEN 1 THEN PC.PrimePartsSell ELSE PC.PrimePartsSellNoEsc END) )
AS UN_P,
SUM(CB.AdjFactor*CASE PT.Unscheduled WHEN 0 THEN 0 ELSE CB.Incl END*
(CASE @Esc WHEN 1 THEN PC.PrimeLabourSell ELSE PC.PrimeLabourSellNoEsc END)) 
AS UN_L,
SUM(CB.AdjFactor*CASE PT.Unscheduled WHEN 0 THEN 0 ELSE CB.Incl END*
(CASE @Esc WHEN 1 THEN PC.PrimeMiscSell ELSE PC.PrimeMiscSellNoEsc END))
AS UN_M
FROM
#aa_EqpProj Z
	LEFT JOIN
tblRepProjCosts PC
	ON Z.EqpProjId=PC.EqpProjId
	INNER JOIN
PROJ_TASK_AMT_COST_1_V PTA
	ON PC.ProjTaskAmtId=PTA.ProjTaskAmtId
	INNER JOIN
tblProjTasks PT
	ON PC.ProjTaskId=PT.ProjTaskId
	INNER JOIN
#aa_CostBearer CB
	ON PTA.Cost_Bearer_Id =CB.CostBearerId
	LEFT JOIN
tblJobCodes JC
	ON PTA.JobCodeId=JC.JobCodeId
GROUP BY PC.EqpProjId
) A
	ON CS.EqpProjId=A.EqpProjId

--Equipment years
CREATE TABLE #aa_EqpYears(YearId int IDENTITY(1,1),EqpProjId int, PeriodStart int,PeriodEnd int PRIMARY KEY (YearId))

INSERT INTO #aa_EqpYears(EqpProjId,PeriodStart,PeriodEnd)
SELECT DISTINCT EP.EqpProjId,FP.CalenderPeriod/100*100+MONTH(EP.StartDate) AS PeriodStart,
(FP.CalenderPeriod/100+1)*100+MONTH(EP.StartDate) AS PeriodEnd
FROM 
#aa_EqpProj EP
	INNER JOIN
tblFinancialPeriods FP
	ON FP.CalenderPeriod>=YEAR(EP.StartDate)*100+MONTH(EP.StartDate) AND FP.CalenderPeriod<=YEAR(EP.EndDate)*100+MONTH(EP.EndDate)
ORDER BY FP.CalenderPeriod/100*100+MONTH(EP.StartDate),(FP.CalenderPeriod/100+1)*100+MONTH(EP.StartDate)

DECLARE @AvailabilityTypeId int

SELECT @AvailabilityTypeId=CASE WHEN EPR.Utilisation_Method_Id = 3 THEN 1 ELSE F.Availability_Type_Id END 
FROM #aa_EqpProj EPR INNER JOIN tblFleets F ON EPR.FleetId=F.FleetId

--Output Equipment Details
SELECT EPR.EqpProjId,EH.Model,EH.EqpPlan,EH.ProjName,EH.EqpCustomer,ISNULL(Q.UOMShortDesc,@Days) AS UOM,
EPR.TotalTerm,EPR.AnnualUtil,(SELECT MAX(YearId) FROM #aa_EqpYears) AS NoYears,ISNULL(EPR.StartUsage,0) AS StartUsage,
ISNULL(CS.FieldRate,0) AS FieldRate,ISNULL(CS.ShopRate,0) AS ShopRate,ISNULL(CS.DealerFldLabour,0) AS DealerFldLabour,
ISNULL(CS.LubeIncl,0) AS LubeIncl,ISNULL((Total_P+Total_L+Total_M)/NULLIF(TotalTerm,0),0) AS Rate,
(SELECT Availability_Description FROM AVAILABILITY_TYPE WHERE Availability_Type_Id=@AvailabilityTypeId) AS Availability,
'1 '+LEFT(CONVERT(varchar(50),StartDate,100),3) AS StartMonth
--into table_1

FROM
#aa_EqpProj EPR
	INNER JOIN
EQUIPMENT_HIERARCHY_V EH
	ON EPR.EqpProjId=EH.EqpProjId
	LEFT JOIN
tblQUOMs Q
	ON EPR.QuomId=Q.QuomId
	LEFT JOIN
#z_CostSummary CS
	ON EPR.EqpProjId=CS.EqpProjId

--Output Cost Summary
/*SELECT * into table_2 from
(*/
SELECT EqpProjId,1 AS CostId,'Scheduled Repairs' AS Descr,
ISNULL(Total_P,0)-ISNULL(PM_P,0)-ISNULL(UN_P,0) AS PCost,
ISNULL(Total_L,0)-ISNULL(PM_L,0)-ISNULL(UN_L,0) AS LCost,
ISNULL(Total_M,0)-ISNULL(PM_M,0)-ISNULL(UN_M,0) AS MCost
FROM #z_CostSummary
UNION ALL
SELECT EqpProjId,2 AS CostId,'PM Services' AS Descr,
ISNULL(PM_P,0) AS PCost,ISNULL(PM_L,0)AS LCost,ISNULL(PM_M,0) AS MCost
FROM #z_CostSummary
UNION ALL
SELECT EqpProjId,3 AS CostId,'Unscheduled Repairs' AS Descr,
ISNULL(UN_P,0) AS PCost,ISNULL(UN_L,0) AS LCost,ISNULL(UN_M,0) AS MCost
FROM #z_CostSummary
/*) a*/


--Interval Cost Summary. The logic is copied from RPT_TOTAL_COST_INTERVAL_P
DECLARE @Interval int

SET @Interval=(SELECT CAST(AnnualUtil AS int) FROM #aa_EqpProj)

--Create a temporary table for costs
CREATE TABLE #aa_CostComparison(
	[PartsCost] [float] NULL ,
	[LabourCost] [float] NULL ,
	[MiscCost] [float] NULL ,
	[Lube] [float] NULL, 
	[Usage] [float])

INSERT INTO #aa_CostComparison (PartsCost,LabourCost,MiscCost,Usage,Lube)
SELECT 

SUM(CB.AdjFactor*CASE CAST(PTA.Consumable AS int)*CAST(JC.Lube as int) WHEN 1 THEN 0 ELSE CB.Incl END*
pta.PartsCost* pto.Probability * 
CASE @Esc WHEN 1 THEN cpe.CumPartsEscalation / cpe1.CumPartsEscalation ELSE 1.00 END
/ 100.00 / erc.ExRate) AS PartsCost,

SUM(CB.AdjFactor*CB.Incl*pta.TotalLabourCost * pto.Probability * 
CASE @Esc WHEN 1 THEN ce.CumLaborEscalation / ce1.CumLaborEscalation ELSE 1.00 END
/ 100.00 / erc.ExRate) AS LabourCost,

SUM(CB.AdjFactor*CB.Incl*pta.TotalMiscCost * pto.Probability * 
CASE @Esc WHEN 1 THEN ce.CumMiscEscalation / ce1.CumMiscEscalation ELSE 1.00 END
/ 100.00 / erc.ExRate) AS MiscCost,

CASE 
WHEN occ.OccDate<=EP.StartDate OR ISNULL(PT.UsageQUOMId,0)<>ISNULL(EP.QUOMId,0) THEN
	dbo.GET_USAGE_FROM_DATE_F(pt.EqpProjId,EP.QUOMId,
	CASE WHEN occ.OccDate<=EP.StartDate THEN DATEADD(n,1,EP.StartDate) ELSE occ.OccDate END) 
ELSE occ.OccUsage END AS Usage,

SUM(CB.AdjFactor*CASE CAST(PTA.Consumable as int)*CAST(JC.Lube as int) WHEN 1 THEN CB.Lube ELSE 0.00 END*
pta.PartsCost* pto.Probability * 
CASE @Esc WHEN 1 THEN cpe.CumPartsEscalation / cpe1.CumPartsEscalation ELSE 1.00 END
/ 100.00 / erc.ExRate) AS Lube

	FROM 
#aa_EqpProj EP
	INNER JOIN
tblProjTasks PT
	ON EP.EqpProjId=PT.EqpProjId
	INNER JOIN 
tblProjTaskOpts pto 
	ON PT.ProjTaskId = pto.ProjTaskId
	INNER JOIN 
PROJ_TASK_AMT_COST_1_V pta 
	ON PTO.ProjTaskOptId = pta.ProjTaskOptId
	INNER JOIN 
tblProjTaskOccs occ 
	ON PT.ProjTaskId = occ.ProjTaskId 	
	INNER JOIN 
tblExRateCurrencies erc 
	ON pta.CurrencyId = erc.CurrencyID AND EP.ExchangeRateId = erc.ExRateID
	INNER JOIN 
tblCostEscalations ce 
	ON ce.EndDate > pta.Pricing_Date AND ce.EscalationDate <= pta.Pricing_Date 
	INNER JOIN 
tblCostPartsEscalations cpe 
	ON ce.CostEscalationId = cpe.CostEscalationId AND cpe.ManufacturerId = pt.ManufacturerId
	INNER JOIN 
tblCostEscalations ce1 
	ON occ.OccDate >= ce1.EscalationDate AND occ.OccDate < ce1.EndDate
	INNER JOIN 
tblCostPartsEscalations cpe1 
	ON ce1.CostEscalationId = cpe1.CostEscalationId AND pt.ManufacturerId = cpe1.ManufacturerId
	INNER JOIN
#aa_CostBearer CB
	ON PTA.Cost_Bearer_Id =CB.CostBearerId
	LEFT OUTER JOIN
tblJobCodes JC
	ON ISNULL(PTA.JobCodeId,0)=JC.JobCodeId
	
GROUP BY CASE 
WHEN occ.OccDate<=EP.StartDate OR ISNULL(PT.UsageQUOMId,0)<>ISNULL(EP.QUOMId,0) THEN
	dbo.GET_USAGE_FROM_DATE_F(pt.EqpProjId,EP.QUOMId,
	CASE WHEN occ.OccDate<=EP.StartDate THEN DATEADD(n,1,EP.StartDate) ELSE occ.OccDate END) 
ELSE occ.OccUsage END

DECLARE @IntervalMin int
DECLARE @IntervalMax int
DECLARE @IntNumber int

--Set start and end interval id
UPDATE #aa_EqpProj 
SET StartIntervalId=FLOOR(ISNULL(StartUsage,0)/@Interval),EndIntervalId=CEILING(ISNULL(EndUsage,0)/@Interval)

SELECT @IntervalMin	=MIN(StartIntervalId),	@IntervalMax=MAX(EndIntervalId)
FROM #aa_EqpProj

CREATE TABLE #aa_Intervals(IntervalId int,IntervalStart int,IntervalEnd int PRIMARY KEY (IntervalId))

SET @IntNumber=@IntervalMin

WHILE @IntNumber<=@IntervalMax
BEGIN
	INSERT INTO #aa_Intervals(IntervalId,IntervalStart,IntervalEnd)
	VALUES(@IntNumber,@IntNumber*@Interval,(@IntNumber+1)*@Interval)

	SET @IntNumber=@IntNumber+1
END


IF EXISTS (SELECT ProjTaskId FROM 
tblProjTasks PT
	INNER JOIN
#aa_EqpProj EPR
	ON PT.EqpProjId=EPR.EqpProjId
WHERE PT.Unscheduled<>0)
BEGIN
	
	CREATE TABLE #aa_EqpPeriod(EqpProjId int,IntervalId int,
	IntervalStartDate datetime,IntervalEndDate datetime,
	StartPeriod int,EndPeriod int
	 PRIMARY KEY (EqpProjId,IntervalId))

	INSERT INTO #aa_EqpPeriod(EqpProjId,IntervalId,IntervalStartDate,IntervalEndDate)
	SELECT EPR.EqpProjId,I.IntervalId,

	/*This will return eqpstart date if period starts before the start date*/
	dbo.GET_DATE_FROM_USAGE_F(EPR.EqpProjId,EPR.QUOMId,I.IntervalStart) AS IntervalStartDate,

	dbo.GET_DATE_FROM_USAGE_F(EPR.EqpProjId,EPR.QUOMId,I.IntervalEnd) AS IntervalEndDate
	FROM
	#aa_EqpProj EPR
		INNER JOIN
	#aa_Intervals I
		ON I.IntervalId >= EPR.StartIntervalId AND I.IntervalId<=EPR.EndIntervalId

	UPDATE #aa_EqpPeriod SET 
	StartPeriod=YEAR(IntervalStartDate)*100+MONTH(IntervalStartDate),	
	EndPeriod=YEAR(IntervalEndDate)*100+MONTH(IntervalEndDate)



	CREATE TABLE #aa_Usages(EqpProjId int, CalenderPeriod int, PeriodStartUsage float,PeriodEndUsage float,
		PeriodUsage float)

	IF EXISTS(SELECT QUOMId FROM #aa_EqpProj WHERE QUOMId IS NULL)
	BEGIN

		--Calculate usages in days. RepUsage table does not have date based records if equipment is not date based

		INSERT INTO #aa_Usages(EqpProjId, CalenderPeriod, PeriodStartUsage,PeriodEndUsage,PeriodUsage)
		SELECT DISTINCT PT.EqpProjId,RPC.Period AS CalenderPeriod,

		CAST(RU.PeriodStartDate as float)-CAST(EP.StartDate as float) AS PeriodStartUsage,
		CAST(RU.PeriodEndDate as float)-CAST(EP.StartDate as float) AS PeriodEndUsage,
		RU.PeriodDays AS PeriodUsage
		FROM
		#aa_EqpProj EP
			INNER JOIN
		tblProjTasks PT
			ON EP.EqpProjId=PT.EqpProjId
			INNER JOIN
		tblRepProjCosts RPC
			ON PT.ProjTaskId=RPC.ProjTaskId 
			INNER JOIN		
		tblRepUsages RU
			ON RPC.Period=RU.CalenderPeriod AND RPC.EqpProjId=RU.EqpProjId AND ISNULL(RU.QUOMId,0)=ISNULL(EP.EndQUOMId,0)
		WHERE PT.Unscheduled<>0
		
	END
	ELSE --QUOMId>0
	BEGIN
		INSERT INTO #aa_Usages(EqpProjId, CalenderPeriod, PeriodStartUsage,PeriodEndUsage,
		PeriodUsage)
		SELECT DISTINCT PT.EqpProjId,RU.CalenderPeriod, RU.PeriodStartUsage,RU.PeriodEndUsage,
		RU.PeriodUsage
		FROM
		#aa_EqpProj EP
			INNER JOIN
		tblProjTasks PT
			ON EP.EqpProjId=PT.EqpProjId
			INNER JOIN
		tblRepProjCosts RPC
			ON PT.ProjTaskId=RPC.ProjTaskId 
			INNER JOIN		
		tblRepUsages RU
			ON RPC.Period=RU.CalenderPeriod AND RPC.EqpProjId=RU.EqpProjId AND RU.QUOMId=EP.QUOMId
		WHERE PT.Unscheduled<>0
	END

	/*(1) Add costs for the intervals which start period< end period*/

	INSERT INTO #aa_CostComparison (PartsCost,LabourCost,MiscCost,Usage,Lube)
	SELECT 
	SUM(
		CASE 
		/*Could happen for the last interval*/
		WHEN RU.PeriodEndUsage<I.IntervalStart THEN 0
		/*period usage is in the interval*/
		WHEN RU.PeriodStartUsage >=I.IntervalStart AND RU.PeriodEndUsage<=I.IntervalEnd THEN 1.00
		/*interval is in period usage*/
		WHEN RU.PeriodStartUsage <=I.IntervalStart AND RU.PeriodEndUsage>=I.IntervalEnd THEN @Interval/RU.PeriodUsage
		/*period starts before interval and ends in  the interval*/	 
		WHEN RU.PeriodStartUsage<I.IntervalStart AND RU.PeriodEndUsage<=I.IntervalEnd THEN (RU.PeriodEndUsage-I.IntervalStart)/RU.PeriodUsage
		/*period starts in the interval, ends after the interval*/
		WHEN RU.PeriodStartUsage>I.IntervalStart AND RU.PeriodEndUsage>=I.IntervalEnd THEN (I.IntervalEnd-RU.PeriodStartUsage)/RU.PeriodUsage
		END
	* 
	CB.AdjFactor*CASE CAST(PTA.Consumable AS int)*CAST(JC.Lube AS int) WHEN 1 THEN 0 ELSE CB.Incl END *
	CASE @Esc WHEN 1 THEN RPC.PrimePartsSell ELSE RPC.PrimePartsSellNoEsc END
	
	) AS PartsCost,

	SUM(
	
	CASE 
	/*Could happen for the last interval*/
	WHEN RU.PeriodEndUsage<I.IntervalStart THEN 0
	/*period usage is in the interval*/
	WHEN RU.PeriodStartUsage >=I.IntervalStart AND RU.PeriodEndUsage<=I.IntervalEnd THEN 1.00
	/*interval is in period usage*/
	WHEN RU.PeriodStartUsage <=I.IntervalStart AND RU.PeriodEndUsage>=I.IntervalEnd THEN @Interval/RU.PeriodUsage
	/*period starts before interval and ends in  the interval*/	 
	WHEN RU.PeriodStartUsage<I.IntervalStart AND RU.PeriodEndUsage<=I.IntervalEnd THEN (RU.PeriodEndUsage-I.IntervalStart)/RU.PeriodUsage
	/*period starts in the interval, ends after the interval*/
	WHEN RU.PeriodStartUsage>I.IntervalStart AND RU.PeriodEndUsage>=I.IntervalEnd THEN (I.IntervalEnd-RU.PeriodStartUsage)/RU.PeriodUsage
	END * CB.AdjFactor*CB.Incl*
	CASE @Esc WHEN 1 THEN RPC.PrimeLabourSell ELSE RPC.PrimeLabourSellNoEsc END) AS LabourCost,

	SUM(
	CASE 
	/*Could happen for the last interval*/
	WHEN RU.PeriodEndUsage<I.IntervalStart THEN 0
	/*period usage is in the interval*/
	WHEN RU.PeriodStartUsage >=I.IntervalStart AND RU.PeriodEndUsage<=I.IntervalEnd THEN 1.00
	/*interval is in period usage*/
	WHEN RU.PeriodStartUsage <=I.IntervalStart AND RU.PeriodEndUsage>=I.IntervalEnd THEN @Interval/RU.PeriodUsage
	/*period starts before interval and ends in  the interval*/	 
	WHEN RU.PeriodStartUsage<I.IntervalStart AND RU.PeriodEndUsage<=I.IntervalEnd THEN (RU.PeriodEndUsage-I.IntervalStart)/RU.PeriodUsage
	/*period starts in the interval, ends after the interval*/
	WHEN RU.PeriodStartUsage>I.IntervalStart AND RU.PeriodEndUsage>=I.IntervalEnd THEN (I.IntervalEnd-RU.PeriodStartUsage)/RU.PeriodUsage
	END * CB.AdjFactor*CB.Incl*
	CASE @Esc WHEN 1 THEN RPC.PrimeMiscSell ELSE RPC.PrimeMiscSellNoEsc END) AS MiscCost,

	CASE 
	WHEN I.IntervalStart+@Interval/2.00>E.EndUsage THEN E.EndUsage
	ELSE I.IntervalStart+@Interval/2.00 END AS Usage,

	SUM(
		CASE 
		/*Could happen for the last interval*/
		WHEN RU.PeriodEndUsage<I.IntervalStart THEN 0
		/*period usage is in the interval*/
		WHEN RU.PeriodStartUsage >=I.IntervalStart AND RU.PeriodEndUsage<=I.IntervalEnd THEN 1.00
		/*interval is in period usage*/
		WHEN RU.PeriodStartUsage <=I.IntervalStart AND RU.PeriodEndUsage>=I.IntervalEnd THEN @Interval/RU.PeriodUsage
		/*period starts before interval and ends in  the interval*/	 
		WHEN RU.PeriodStartUsage<I.IntervalStart AND RU.PeriodEndUsage<=I.IntervalEnd THEN (RU.PeriodEndUsage-I.IntervalStart)/RU.PeriodUsage
		/*period starts in the interval, ends after the interval*/
		WHEN RU.PeriodStartUsage>I.IntervalStart AND RU.PeriodEndUsage>=I.IntervalEnd THEN (I.IntervalEnd-RU.PeriodStartUsage)/RU.PeriodUsage
		END
	* 
	CASE CB.AdjFactor*CAST(PTA.Consumable AS int)*CAST(JC.Lube AS int) WHEN 0 THEN 0 ELSE CB.Lube END*
	CASE @Esc WHEN 1 THEN RPC.PrimePartsSell ELSE RPC.PrimePartsSellNoEsc END
	
	) AS Lube
	
	FROM
	#aa_EqpProj E
		INNER JOIN
	tblProjTasks PT
		ON E.EqpProjId=PT.EqpProjId
		INNER JOIN
	#aa_EqpPeriod EP
		ON PT.EqpProjId=EP.EqpProjId
		INNER JOIN
	#aa_Intervals I
		ON EP.IntervalId=I.IntervalId
		INNER JOIN
	tblRepProjCosts RPC
		ON PT.ProjTaskId=RPC.ProjTaskId AND EP.EqpProjId=RPC.EqpProjId AND 
		   RPC.Period >=EP.StartPeriod AND RPC.Period<=EP.EndPeriod 
		INNER JOIN
	tblProjTaskAmts PTA
		ON RPC.ProjTaskAmtId=PTA.ProjTaskAmtId
		INNER JOIN
	#aa_Usages RU
		ON RPC.Period=RU.CalenderPeriod AND RPC.EqpProjId=RU.EqpProjId 
		INNER JOIN
	#aa_CostBearer CB
		ON RPC.CostBearerId =CB.CostBearerId 
		LEFT OUTER JOIN
	tblJobCodes JC
		ON ISNULL(PTA.JobCodeId,0)=JC.JobCodeId
	WHERE PT.Unscheduled<>0
	GROUP BY
	I.IntervalStart,E.EndUsage,I.IntervalEnd
	
	DROP TABLE #aa_EqpPeriod,#aa_Usages
END

/*VV #378 Discussed with RF: Put all costs beyond equipment end to the last interval*/
/*VV #2098 ROUND Usage to 4 digits because of float calculations*/

DECLARE @EndUsage float

SELECT @EndUsage=EndUsage FROM #aa_EqpProj

UPDATE #aa_CostComparison SET Usage=ROUND(CASE WHEN Usage>@EndUsage THEN @EndUsage ELSE Usage END,4)



CREATE TABLE #aa_CostInterval(
PartsCost float,LabourCost float, MiscCost float,Lube float,IntervalId int PRIMARY KEY (IntervalId))

INSERT INTO #aa_CostInterval(IntervalId,PartsCost,LabourCost, MiscCost,Lube)
SELECT I.IntervalId,SUM(PartsCost) AS PartsCost,SUM(LabourCost) AS LabourCost, 
SUM(MiscCost) AS MiscCost,SUM(Lube) AS Lube
FROM
#aa_CostComparison CC
	INNER JOIN
#aa_Intervals I
	ON CC.Usage >I.IntervalStart AND CC.Usage<=I.IntervalEnd
GROUP BY I.IntervalId

DROP TABLE #aa_CostComparison

--Add Missing intervals
INSERT INTO #aa_CostInterval(IntervalId,PartsCost,LabourCost, MiscCost,Lube)
SELECT I.IntervalId,0 AS PartsCost,0 AS LabourCost, 0 AS MiscCost,0 AS Lube
FROM
#aa_Intervals I
	LEFT JOIN
#aa_CostInterval CI
	ON I.IntervalId=CI.IntervalId
WHERE CI.IntervalId IS NULL


UPDATE I SET I.IntervalStart=FLOOR(EPR.StartUsage)
FROM
#aa_Intervals I
	CROSS JOIN
#aa_EqpProj EPR
WHERE I.IntervalStart<EPR.StartUsage

UPDATE I SET I.IntervalEnd=CEILING(EPR.EndUsage)
FROM
#aa_Intervals I
	CROSS JOIN
#aa_EqpProj EPR
WHERE I.IntervalEnd>EPR.EndUsage

DELETE #aa_Intervals 
WHERE IntervalStart>IntervalEnd OR IntervalStart=IntervalEnd


--Output Interval Cost Summary Final
SELECT I.IntervalId,CI.PartsCost,CI.LabourCost, CI.MiscCost,CI.Lube,
I.IntervalStart,I.IntervalEnd
--into table_3
FROM
#aa_CostInterval CI
	INNER JOIN
#aa_Intervals I
	ON CI.IntervalId=I.IntervalId


--Annual Availability Summary. the logic is copied from RPT_EQUIPMENT_AVAILABILITY_FORECAST_P
IF @ShowAv=1 AND EXISTS(SELECT EPR.FleetId FROM #aa_EqpProj EPR INNER JOIN tblFleets F ON EPR.FleetId=F.FleetId 
						WHERE F.Enable_Forecasting_Availability=1)
BEGIN

	CREATE TABLE #aa_Availability(EqpProjId int,YearId int,TotalScheduledHours float,TotalOperatingHours float,
	TotalBaseDowntime float,TotalPlannedDowntime float	PRIMARY KEY(EqpProjId,YearId))

	INSERT INTO #aa_Availability(EqpProjId,YearId,TotalPlannedDowntime)

	SELECT EP.EqpProjId,A.YearId,
	ISNULL(MAX(A.SUM_TASK_DOWNTIME) + 
	(1- (ISNULL(F.Scheduling_Efficiency,0)/100))* (SUM(A.SUM_TASK_DOWNTIME) -MAX(A.SUM_TASK_DOWNTIME)),0) AS TotalPlannedDowntime
	FROM
	#aa_EqpProj EP
		INNER JOIN
	tblFleets F
		ON EP.FleetId=F.FleetId
		LEFT JOIN
	(SELECT EPR.EqpProjId,EY.YearId,PC.ProjTaskId,
	SUM(PC.Duration) AS SUM_TASK_DOWNTIME
	FROM
	#aa_EqpProj EPR
		INNER JOIN
	tblRepProjCosts PC
		ON EPR.EqpProjId=PC.EqpProjId
		INNER JOIN
	tblProjTasks PT
		ON PC.ProjTaskId=PT.ProjTaskId
		INNER JOIN
	TASK_SPECIFIC_DOWNTIME TSD
		ON EPR.FleetId=TSD.Fleet_Id AND PT.TaskTypeId=TSD.TaskTypeId
		INNER JOIN
	#aa_EqpYears EY
		ON PC.Period>=EY.PeriodStart AND PC.Period<EY.PeriodEnd
		INNER JOIN
	#aa_CostBearer CB
		ON PC.CostBearerID=CB.CostBearerID
	WHERE
	CB.Incl=1 AND /*This is for consistency with availability forecast report. Discussed with GE.*/PT.Unscheduled=0
	GROUP BY EPR.EqpProjId, EY.YearId,PC.ProjTaskId) A
		ON EP.EqpProjId=A.EqpProjId
	GROUP BY EP.EqpProjId,A.YearId,F.Scheduling_Efficiency

	--Insert missing years
	INSERT INTO #aa_Availability(EqpProjId,YearId,TotalPlannedDowntime)
	SELECT EY.EqpProjId,EY.YearId, 0 AS TotalPlannedDowntime
	FROM
	#aa_EqpYears EY
		LEFT JOIN
	#aa_Availability A
		ON EY.YearId=A.YearId
	WHERE A.YearId IS NULL

	UPDATE AV SET
	AV.TotalScheduledHours=ISNULL(B.TotalScheduledHours,0),
	AV.TotalBaseDowntime=ISNULL(B.TotalBaseDowntime,0),
	AV.TotalOperatingHours=ISNULL(B.TotalOperatingHours,0)
	
	FROM
	#aa_Availability AV
		INNER JOIN
	(SELECT C.EqpProjId,C.YearId,
	SUM(C.Scheduled_Hours) AS TotalScheduledHours,
	SUM(C.Base_Downtime) AS TotalBaseDowntime,
	SUM(C.Operating_Hours) AS TotalOperatingHours
	FROM
		(SELECT EP.EqpProjId, EY.YearId, 
		(F.Annual_Scheduled_Hours / 365) * RU.PeriodDays AS Scheduled_Hours,
		CASE  
		WHEN DATEDIFF( MONTH, ISNULL(EP.OriginalCommissionDate,EP.StartDate), RU.PeriodStartDate) >=0 AND DATEDIFF( MONTH, ISNULL(EP.OriginalCommissionDate,EP.StartDate), RU.PeriodStartDate) < 12  THEN ((1-Availability_Year_1/100)* ((F.Annual_Scheduled_Hours / 365) * RU.PeriodDays)) 
		WHEN DATEDIFF( MONTH, ISNULL(EP.OriginalCommissionDate,EP.StartDate), RU.PeriodStartDate) >=12 AND DATEDIFF( MONTH, ISNULL(EP.OriginalCommissionDate,EP.StartDate), RU.PeriodStartDate) < 24 THEN ((1-Availability_Year_2/100)* ((F.Annual_Scheduled_Hours / 365) * RU.PeriodDays)) 
		WHEN DATEDIFF( MONTH, ISNULL(EP.OriginalCommissionDate,EP.StartDate), RU.PeriodStartDate) >=24 AND DATEDIFF( MONTH, ISNULL(EP.OriginalCommissionDate,EP.StartDate), RU.PeriodStartDate) < 36 THEN ((1-Availability_Year_3/100)* ((F.Annual_Scheduled_Hours / 365) * RU.PeriodDays)) 
		WHEN DATEDIFF( MONTH, ISNULL(EP.OriginalCommissionDate,EP.StartDate), RU.PeriodStartDate) >=36 AND DATEDIFF( MONTH, ISNULL(EP.OriginalCommissionDate,EP.StartDate), RU.PeriodStartDate) < 48 THEN ((1-Availability_Year_4/100)* ((F.Annual_Scheduled_Hours / 365) * RU.PeriodDays)) 
		WHEN DATEDIFF( MONTH, ISNULL(EP.OriginalCommissionDate,EP.StartDate), RU.PeriodStartDate) >=48 AND DATEDIFF( MONTH, ISNULL(EP.OriginalCommissionDate,EP.StartDate), RU.PeriodStartDate) < 60 THEN ((1-Availability_Year_5/100)* ((F.Annual_Scheduled_Hours / 365) * RU.PeriodDays)) 
		WHEN DATEDIFF( MONTH, ISNULL(EP.OriginalCommissionDate,EP.StartDate), RU.PeriodStartDate) >=60 AND DATEDIFF( MONTH, ISNULL(EP.OriginalCommissionDate,EP.StartDate), RU.PeriodStartDate) < 72 THEN ((1-Availability_Year_6/100)* ((F.Annual_Scheduled_Hours / 365) * RU.PeriodDays)) 
		WHEN DATEDIFF( MONTH, ISNULL(EP.OriginalCommissionDate,EP.StartDate), RU.PeriodStartDate) >=72 AND DATEDIFF( MONTH, ISNULL(EP.OriginalCommissionDate,EP.StartDate), RU.PeriodStartDate) < 84 THEN ((1-Availability_Year_7/100)* ((F.Annual_Scheduled_Hours / 365) * RU.PeriodDays)) 
		WHEN DATEDIFF( MONTH, ISNULL(EP.OriginalCommissionDate,EP.StartDate), RU.PeriodStartDate) >=84 AND DATEDIFF( MONTH, ISNULL(EP.OriginalCommissionDate,EP.StartDate), RU.PeriodStartDate) < 96  THEN ((1-Availability_Year_8/100)* ((F.Annual_Scheduled_Hours / 365) * RU.PeriodDays)) 
		WHEN DATEDIFF( MONTH, ISNULL(EP.OriginalCommissionDate,EP.StartDate), RU.PeriodStartDate) >=96 AND DATEDIFF( MONTH, ISNULL(EP.OriginalCommissionDate,EP.StartDate), RU.PeriodStartDate) < 108  THEN ((1-Availability_Year_9/100)* ((F.Annual_Scheduled_Hours / 365) * RU.PeriodDays)) 
		ELSE  ((1-Availability_Year_10/100)* ((F.Annual_Scheduled_Hours / 365) * RU.PeriodDays)) 
		END	AS Base_Downtime,	
		CASE WHEN EP.Utilisation_Method_Id = 2 OR EP.Utilisation_Method_Id = 3 THEN ISNULL(RU.PeriodUsage, 0)
			ELSE
			CASE
				WHEN EP.Utilisation_Method_Id IN(2,3) THEN EP.AnnualUtil
				WHEN USR.ChildQuomId = EP.QUOMID THEN 1 
				WHEN USA.USAGEPERCALYEAR = 0 THEN 0 
				ELSE (SELECT USAGEPERCALYEAR FROM tblUsageStepAmts U WHERE U.UsageStepId = USA.UsageStepId AND U.UsageQUOMId = EP.QUOMId) /  USA.USAGEPERCALYEAR 
			END * ISNULL(RU.PeriodUsage, 0) 
		END AS Operating_Hours
		
		FROM  
		#aa_EqpProj EP       
			INNER JOIN
		tblFleets F 
			ON EP.FleetId = F.FleetId 
			INNER JOIN
		tblRepUsages RU 
			ON RU.EqpProjID = EP.EqpProjId AND ISNULL(EP.QUOMId, 0) = ISNULL(RU.QUOMID, 0) 
			INNER JOIN
		#aa_EqpYears EY
			ON RU.CalenderPeriod>=EY.PeriodStart AND RU.CalenderPeriod<EY.PeriodEnd
			LEFT OUTER JOIN
		tblUsageProfiles UP 
			ON EP.ProjUsageProfileId = UP.UsageProfileId 
			LEFT OUTER JOIN
		tblUsageSteps US 
			ON UP.UsageProfileId = US.UsageProfileId AND 
			RU.PeriodStartDate >= US.StartDate AND RU.PeriodStartDate<=US.EndDate AND 
			RU.PeriodEndDate >= US.StartDate AND RU.PeriodEndDate<=US.EndDate 
			LEFT OUTER JOIN
		tblUsageStepRels USR 
			ON US.UsageStepId = USR.UsageStepId AND RU.QUOMID = USR.ChildQUOMId 
			LEFT OUTER JOIN
		tblUsageStepAmts USA 
			ON USR.ChildQUOMId = USA.UsageQUOMId AND USR.UsageStepId = USA.UsageStepId ) C

	GROUP BY C.EqpProjId, C.YearId) B
		ON AV.EqpProjId=B.EqpProjId AND AV.YearId=B.YearId

	--Availability Output
--"Scheduled Hours",Usage,"Base Downtime",Specific Task Downtime,Available,Availability %,"Cumulative Availability %"
	SELECT A.YearId,'Year '+CAST(A.YearId AS varchar(50)) AS YearNum, 
	ISNULL(A.TotalScheduledHours,0) AS SchedHrs,ISNULL(A.TotalOperatingHours,0) AS Usage, 
	ISNULL(A.TotalBaseDowntime,0) AS BaseDT,ISNULL(A.TotalPlannedDowntime,0) AS SpecTaskDT,
	CASE @AvailabilityTypeId WHEN 1 THEN
	ISNULL(A.TotalScheduledHours,0) - ISNULL(A.TotalPlannedDowntime,0)-ISNULL(A.TotalBaseDowntime,0)
	ELSE ISNULL(A.TotalOperatingHours,0) END AS Available,

	100*ISNULL(CASE @AvailabilityTypeId WHEN 1 THEN 
		(ISNULL(A.TotalScheduledHours,0) - ISNULL(A.TotalPlannedDowntime,0)-ISNULL(A.TotalBaseDowntime,0))/NULLIF(A.TotalScheduledHours,0)
		ELSE ISNULL(A.TotalOperatingHours,0) /
		NULLIF((ISNULL(A.TotalOperatingHours,0)+ISNULL(A.TotalPlannedDowntime,0)+ISNULL(A.TotalBaseDowntime,0)),0) END,0) AS Availability,
	B.CumAvail
--	into table_4
	FROM
	#aa_Availability A
		INNER JOIN
	(SELECT A1.YearId,
	100*ISNULL(CASE @AvailabilityTypeId WHEN 1 THEN 
		(ISNULL(SUM(A2.TotalScheduledHours),0) - ISNULL(SUM(A2.TotalPlannedDowntime),0)-ISNULL(SUM(A2.TotalBaseDowntime),0))/
		NULLIF(SUM(A2.TotalScheduledHours),0)
		ELSE ISNULL(SUM(A2.TotalOperatingHours),0) /
		NULLIF((ISNULL(SUM(A2.TotalOperatingHours),0)+ISNULL(SUM(A2.TotalPlannedDowntime),0)+ISNULL(SUM(A2.TotalBaseDowntime),0)),0) END,0)
	AS CumAvail
	from 

	#aa_Availability A1
		INNER JOIN
	#aa_Availability A2
		on A1.YearId>=A2.YearId
	GROUP BY A1.YearId) B
		ON A.YearId=B.YearId
	ORDER BY A.YearId
	
END
ELSE
BEGIN
	SELECT 0 AS YearId ,'' AS YearNum,0 AS SchedHrs,0 AS Usage,0 AS BaseDT,0 AS SpecTaskDT,0 AS Available,0 AS Availability,
	0 AS CumAvail
	FROM #aa_EqpProj WHERE EqpProjId=-1

END

-- Annual Labour Hours Summary, Annual Labour Rate Summary
IF @ShowLabHrs=1 OR @ShowLabRate=1
BEGIN
	--Output
	SELECT YearId,'Year '+CAST(YearId AS varchar(50)) AS YearNum,
	ISNULL(SUM(PMHrs),0) AS PMHrs,ISNULL(SUM(RIHrs),0) AS RIHrs,ISNULL(SUM(FHrs),0) AS FHrs,ISNULL(SUM(SHrs),0) AS SHrs,
	ISNULL(SUM(PM_LCost),0) AS PM_LCost,ISNULL(SUM(RI_LCost),0) AS RI_LCost,
	ISNULL(SUM(F_LCost),0) AS F_LCost,ISNULL(SUM(S_LCost),0) AS S_LCost
	--into table_5
	FROM
	(SELECT EY.YearId,
	CASE PT.TaskTypeId WHEN @PMId THEN PC.LabourHours ELSE 0 END AS PMHrs,
	CASE WHEN PT.TaskTypeId=@PMId THEN 0
		WHEN JC.RemoveInstall=1 THEN PC.LabourHours 
		ELSE 0 END AS RIHrs,

	CASE WHEN PT.TaskTypeId=@PMId OR JC.RemoveInstall=1 THEN 0
		WHEN PTA.Labour_Hrs_Field=1 THEN PC.LabourHours ELSE 0 END AS FHrs,

	CASE WHEN PT.TaskTypeId=@PMId OR JC.RemoveInstall=1 THEN 0
		WHEN PTA.Labour_Hrs_Field=0 THEN PC.LabourHours ELSE 0 END AS SHrs,
	--Labour Cost
	CB.AdjFactor*CASE PT.TaskTypeId WHEN @PMId THEN CASE @Esc WHEN 1 THEN PC.PrimeLabourSell ELSE PC.PrimeLabourSellNoEsc END
	 ELSE 0 END AS PM_LCost,

	CB.AdjFactor*CASE WHEN PT.TaskTypeId=@PMId THEN 0
		WHEN JC.RemoveInstall=1 THEN CASE @Esc WHEN 1 THEN PC.PrimeLabourSell ELSE PC.PrimeLabourSellNoEsc END 
		ELSE 0 END AS RI_LCost,

	CB.AdjFactor*CASE WHEN PT.TaskTypeId=@PMId OR JC.RemoveInstall=1 THEN 0
		WHEN PTA.Labour_Hrs_Field=1 THEN CASE @Esc WHEN 1 THEN PC.PrimeLabourSell ELSE PC.PrimeLabourSellNoEsc END
	 ELSE 0 END AS F_LCost,

	CB.AdjFactor*CASE WHEN PT.TaskTypeId=@PMId OR JC.RemoveInstall=1 THEN 0
		WHEN PTA.Labour_Hrs_Field=0 THEN CASE @Esc WHEN 1 THEN PC.PrimeLabourSell ELSE PC.PrimeLabourSellNoEsc END 
	ELSE 0 END AS S_LCost

	FROM
	#aa_EqpProj EPR
		INNER JOIN
	tblRepProjCosts PC
		ON EPR.EqpProjId=PC.EqpProjId
		INNER JOIN
	tblProjTasks PT
		ON PC.ProjTaskId=PT.ProjTaskId
		INNER JOIN
	PROJ_TASK_AMT_COST_1_V PTA
		ON PC.ProjTaskAmtId=PTA.ProjTaskAmtId
		INNER JOIN
	#aa_CostBearer CB
		ON PC.CostBearerId=CB.CostBearerId
		INNER JOIN
	#aa_EqpYears EY
			ON PC.Period>=EY.PeriodStart AND PC.Period<EY.PeriodEnd
		LEFT JOIN
	tblJobCodes JC
		ON PTA.JobCodeId=JC.JobCodeId
	WHERE CB.Incl=1
	UNION ALL
	SELECT EY.YearId,0.00 AS PMHrs,0.00 AS RIHrs,0.00 AS FHrs,0.00 AS SHrs,
	0.00 AS PM_LCost,0.00 AS RI_LCost,0.00 AS F_LCost,0.00 AS S_LCost
	FROM #aa_EqpYears EY) A
	GROUP BY YearId
	ORDER BY YearId
		
END
ELSE
BEGIN
	SELECT 0 AS YearId,'' AS YearNum,0 AS PMHrs,0 AS RIHrs,0 AS FHrs,0 AS SHrs,0 AS PM_LCost,0 AS RI_LCost,0 AS F_LCost,
	0 AS S_LCost
	FROM #aa_EqpProj WHERE EqpProjId=-1
END



--Annual Labour Rate Summary ($)
IF @ShowLubeCost=1
BEGIN
	/*No filtering by cost bearer. the report showes in the heading:  
	Annual Lube Summary - Cost ($)    (Note, this is independent of contract inclusions/exclusions)*/

	CREATE TABLE #aa_LubeSummary(YearId int,JobCodeId int,Cost float PRIMARY KEY (YearId,JobCodeId))

	INSERT INTO #aa_LubeSummary(YearId,JobCodeId,Cost)
	SELECT EY.YearId,JC.JobCodeId,
	CASE @Esc WHEN 1 THEN SUM(PC.PrimePartsSell) ELSE SUM(PC.PrimePartsSellNoEsc) END AS Cost
	FROM
	#aa_EqpProj EPR
		INNER JOIN
	tblRepProjCosts PC
		ON EPR.EqpProjId=PC.EqpProjId
		INNER JOIN
	tblProjTasks PT
		ON PC.ProjTaskId=PT.ProjTaskId
		INNER JOIN
	PROJ_TASK_AMT_COST_1_V PTA
		ON PC.ProjTaskAmtId=PTA.ProjTaskAmtId
		INNER JOIN
	#aa_EqpYears EY
			ON PC.Period>=EY.PeriodStart AND PC.Period<EY.PeriodEnd
		INNER JOIN
	tblJobCodes JC
		ON PTA.JobCodeId=JC.JobCodeId
	WHERE PTA.Consumable=1 AND JC.Lube=1
	GROUP BY EY.YearId,JC.JobCodeId

	--Missing periods
	INSERT INTO #aa_LubeSummary(YearId,JobCodeId,Cost)
	SELECT A.YearId,A.JobCodeId,0 AS Cost
	FROM
	(	SELECT EY.YearId,JC.JobCodeId FROM
		(SELECT DISTINCT JobCodeId FROM #aa_LubeSummary) JC
			CROSS JOIN
		#aa_EqpYears EY
	) A
		LEFT JOIN
	#aa_LubeSummary LS
		ON A.YearId=LS.YearId AND A.JobCodeId=LS.JobCodeId
	WHERE LS.JobCodeId IS NULL

	--Final output
	SELECT LS.YearId,'Year '+CAST(LS.YearId AS varchar(50)) AS YearNum,
	JC.ConsumableDescription AS Consumable,JC.ConsumableUOM AS UOM,ISNULL(LS.Cost,0) AS Cost
--	 into table_6
	FROM
	#aa_LubeSummary LS
		INNER JOIN
	tblJobCodes JC
		ON LS.JobCodeId=JC.JobCodeId
	ORDER BY LS.YearId
	DROP TABLE #aa_LubeSummary
END
ELSE
BEGIN
	SELECT 0 AS YearId,'' AS YearNum,'' AS Consumable,'' AS UOM,0 AS Cost
	FROM #aa_EqpProj WHERE EqpProjId=-1
END
IF @ShowLubeQty=1
BEGIN
	CREATE TABLE #aa_LubeQty(YearId int,JobCodeId int,Qty float PRIMARY KEY (YearId,JobCodeId))

	INSERT INTO #aa_LubeQty(YearId,JobCodeId,Qty)

	SELECT EY.YearId,
	JC.JobCodeId,SUM(PTA.QtyVolume*(1.0 + PTA.PercentTopUp / 100.00)) AS Qty 
	FROM
	#aa_EqpProj EPR
		INNER JOIN
	tblProjTasks PT
		ON EPR.EqpProjId=PT.EqpProjId
		INNER JOIN 
	tblProjTaskOpts PTO 
		ON PT.ProjTaskId = pto.ProjTaskId
		INNER JOIN 
	PROJ_TASK_AMT_COST_1_V PTA 
		ON PTO.ProjTaskOptId = PTA.ProjTaskOptId AND (PTA.Consumable=1)
		INNER JOIN 
	tblProjTaskOccs occ 
		ON PT.ProjTaskId = occ.ProjTaskId 
		INNER JOIN
	#aa_EqpYears EY
			ON YEAR(Occ.OccDate)*100+MONTH(Occ.OccDate)>=EY.PeriodStart AND 
			   YEAR(Occ.OccDate)*100+MONTH(Occ.OccDate)<EY.PeriodEnd
		INNER JOIN
	tblJobCodes JC
		ON PTA.JobCodeId=JC.JobCodeId
	WHERE PTA.Consumable=1 AND JC.Lube=1 AND PTA.PartsCost<>0/*Do not show 0 costs*/
	GROUP BY EY.YearId,	JC.JobCodeId

	--Missing periods
	INSERT INTO #aa_LubeQty(YearId,JobCodeId,Qty)
	SELECT A.YearId,A.JobCodeId,0 AS Qty
	FROM
	(	SELECT EY.YearId,JC.JobCodeId FROM
		(SELECT DISTINCT JobCodeId FROM #aa_LubeQty) JC
			CROSS JOIN
		#aa_EqpYears EY
	) A
		LEFT JOIN
	#aa_LubeQty LS
		ON A.YearId=LS.YearId AND A.JobCodeId=LS.JobCodeId
	WHERE LS.JobCodeId IS NULL

	--Final output
	SELECT LS.YearId,'Year '+CAST(LS.YearId AS varchar(50)) AS YearNum,
	JC.ConsumableDescription AS Consumable,JC.ConsumableUOM AS UOM,ISNULL(LS.Qty,0) AS Qty
--	 into table_7
	FROM
	#aa_LubeQty LS
		INNER JOIN
	tblJobCodes JC
		ON LS.JobCodeId=JC.JobCodeId
	ORDER BY LS.YearId

	DROP TABLE #aa_LubeQty
		
END
ELSE
BEGIN
	SELECT 0 AS YearId,'' AS YearNum,'' AS Consumable,'' AS UOM,0 AS Qty
	FROM #aa_EqpProj WHERE EqpProjId=-1
END

IF @ShowProj=1
BEGIN
	/*Where there is a Repair reserve Task linked to a Strategy task, you need to add that cost
	to the Parent task. Objective is to not show the RR task
	Calculation is:
	Add [Total RR cost/Parent Occs] to Parent cost
	Same for labour and duration*/
	CREATE TABLE #aa_ProjSummary(ProjTaskId int,[First] float,Frequency float,Task_Header_Id int,ParentTaskId int,
	QUOMId int,Cost float PRIMARY KEY(ProjTaskId))
	
	INSERT INTO #aa_ProjSummary(ProjTaskId,[First],Frequency,Task_Header_Id,ParentTaskId,QUOMId,Cost)
	SELECT	
	PT.ProjTaskId,PT.First,PT.Frequency,PT.Task_Header_Id,PT.ParentTaskId,PT.UsageQUOMId AS QUOMId,
	SUM(CB.AdjFactor*CASE CAST(PTA.Consumable AS int)*CAST(JC.Lube as int) WHEN 1 THEN CB.Lube ELSE CB.Incl END*
	pta.PartsCost* pto.Probability * 
	CASE @Esc WHEN 1 THEN cpe.CumPartsEscalation ELSE 1.00 END
	/ 100.00 / erc.ExRate) +

	SUM(CB.AdjFactor*CB.Incl*pta.TotalLabourCost * pto.Probability * 
	CASE @Esc WHEN 1 THEN ce.CumLaborEscalation ELSE 1.00 END
	/ 100.00 / erc.ExRate) +

	SUM(CB.AdjFactor*CB.Incl*pta.TotalMiscCost * pto.Probability * 
	CASE @Esc WHEN 1 THEN ce.CumMiscEscalation  ELSE 1.00 END
	/ 100.00 / erc.ExRate) AS Cost
	
	FROM 
	#aa_EqpProj Z
		INNER JOIN
	tblProjTasks PT
		ON Z.EqpProjId=PT.EqpProjId
		INNER JOIN 
	tblProjTaskOpts PTO
		ON PTO.ProjTaskId = PT.ProjTaskId
		INNER JOIN 
	PROJ_TASK_AMT_COST_1_V PTA
		ON PTA.ProjTaskOptId = PTO.ProjTaskOptId
		INNER JOIN 
	tblCostEscalations CE
		ON PTA.Pricing_Date >= CE.EscalationDate AND PTA.Pricing_Date < CE.EndDate
		INNER JOIN 
	tblCostPartsEscalations CPE
		ON CE.CostEscalationId = CPE.CostEscalationId AND CPE.ManufacturerId = PT.ManufacturerId
		INNER JOIN 
	tblEqpProjs EPR
		ON PT.EqpProjId = EPR.EqpProjId
		INNER JOIN 
	tblExRates ER
		ON EPR.ExchangeRateId = ER.ExRateID
		INNER JOIN 
	tblExRateCurrencies ERC
		ON ERC.ExRateID = ER.ExRateID AND ERC.CurrencyID = PTA.CurrencyID
		INNER JOIN
	#aa_CostBearer CB
		ON PTA.Cost_Bearer_Id =CB.CostBearerId
		LEFT JOIN
	tblJobCodes JC
		ON PTA.JobCodeId=JC.JobCodeId
	GROUP BY PT.ProjTaskId,PT.First,PT.Frequency,PT.Task_Header_Id,PT.ParentTaskId,PT.UsageQUOMId

	--Output projection Summary
	SELECT PT.ProjTaskId,TH.Description,ISNULL(Q.UOMShortDesc,@Days) AS UOM,
	PT.First,PT.Frequency,
	ISNULL(PT.Cost+ISNULL((PCC.Total_P+PCC.Total_L+PCC.Total_M)/NULLIF(OCCP.Occ,0),0),0) AS Cost,
	ISNULL(OCCP.Occ,0) AS Occ,
	ISNULL(PCP.Total_P+PCP.Total_L+PCP.Total_M+ISNULL(PCC.Total_P+PCC.Total_L+PCC.Total_M,0),0) AS TotalC,
	ISNULL(PCP.Total_LH+ISNULL(PCC.Total_LH,0),0) AS TotalL,
	ISNULL(PCP.Total_D+ISNULL(PCC.Total_D,0),0) AS TotalD
-- into table_8
	FROM
	#aa_ProjSummary PT
		INNER JOIN
	TASK_HEADER TH
		ON PT.Task_Header_Id=TH.Task_Header_Id
		LEFT JOIN
	tblQUOMs Q
		ON PT.QUOMId=Q.QUOMId
		LEFT JOIN
	(SELECT PT.ProjTaskId,
	SUM(CB.AdjFactor*CASE WHEN PTA.Consumable=1 AND JC.Lube=1 THEN CB.Lube ELSE CB.Incl END*
	CASE @Esc WHEN 1 THEN PC.PrimePartsSell ELSE PC.PrimePartsSellNoEsc END) AS Total_P,

	SUM(CB.AdjFactor*CB.Incl*CASE @Esc WHEN 1 THEN PC.PrimeLabourSell ELSE PC.PrimeLabourSellNoEsc END) AS Total_L,
	 
	SUM(CB.AdjFactor*CB.Incl*CASE @Esc WHEN 1 THEN PC.PrimeMiscSell ELSE PC.PrimeMiscSellNoEsc END) AS Total_M,
	SUM(CB.Incl*PC.LabourHours) AS Total_LH,
	SUM(CB.Incl*PC.Duration) AS Total_D
	FROM
	#aa_ProjSummary PT
		INNER JOIN
	tblRepProjCosts PC
		ON PT.ProjTaskId=PC.ProjTaskId
		INNER JOIN 
	PROJ_TASK_AMT_COST_1_V PTA
		ON PC.ProjTaskAmtId=PTA.ProjTaskAmtId
		INNER JOIN
	#aa_CostBearer CB
		ON PTA.Cost_Bearer_Id =CB.CostBearerId
		LEFT JOIN
	tblJobCodes JC
		ON PTA.JobCodeId=JC.JobCodeId
	WHERE PT.ParentTaskId IS NULL
	GROUP BY PT.ProjTaskId) PCP
		ON PT.ProjTaskId=PCP.ProjTaskId
		LEFT JOIN
	(SELECT PT.ParentTaskId,
	SUM(CB.AdjFactor*CASE WHEN PTA.Consumable=1 AND JC.Lube=1 THEN CB.Lube ELSE CB.Incl END*
	CASE @Esc WHEN 1 THEN PC.PrimePartsSell ELSE PC.PrimePartsSellNoEsc END) AS Total_P,

	SUM(CB.AdjFactor*CB.Incl*CASE @Esc WHEN 1 THEN PC.PrimeLabourSell ELSE PC.PrimeLabourSellNoEsc END) AS Total_L,
	 
	SUM(CB.AdjFactor*CB.Incl*CASE @Esc WHEN 1 THEN PC.PrimeMiscSell ELSE PC.PrimeMiscSellNoEsc END) AS Total_M,
	SUM(CB.Incl*PC.LabourHours) AS Total_LH,
	SUM(CB.Incl*PC.Duration) AS Total_D
	FROM
	#aa_ProjSummary PT
		INNER JOIN
	tblRepProjCosts PC
		ON PT.ProjTaskId=PC.ProjTaskId
		INNER JOIN 
	PROJ_TASK_AMT_COST_1_V PTA
		ON PC.ProjTaskAmtId=PTA.ProjTaskAmtId
		INNER JOIN
	#aa_CostBearer CB
		ON PTA.Cost_Bearer_Id =CB.CostBearerId
		LEFT JOIN
	tblJobCodes JC
		ON PTA.JobCodeId=JC.JobCodeId
	WHERE PT.ParentTaskId >0
	GROUP BY PT.ParentTaskId) PCC
		ON PT.ProjTaskId=PCC.ParentTaskId
		LEFT JOIN
	(SELECT PT.ProjTaskId, COUNT(OCC.ProjTaskId) AS Occ
	FROM 
	#aa_ProjSummary PT
		INNER JOIN 
	tblProjTaskOccs occ 
		ON PT.ProjTaskId = occ.ProjTaskId 
		WHERE PT.ParentTaskId IS NULL
	GROUP BY PT.ProjTaskId) OCCP
		ON PT.ProjTaskId=OCCP.ProjTaskId
		
	WHERE PT.ParentTaskId IS NULL

	
END
ELSE
BEGIN
	SELECT 0 AS ProjTaskId,'' AS Description,'' AS UOM,0 AS [First],0 AS Frequency,0 AS Cost,0 AS Occ,0 AS TotalC,
	0 AS TotalL,0 AS TotalD
	FROM #aa_EqpProj WHERE EqpProjId=-1
END
GO

--=============================================================================
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SYSTEM_TASK_QUEUE_GET_P]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[SYSTEM_TASK_QUEUE_GET_P]
GO

create Procedure SYSTEM_TASK_QUEUE_GET_P
/******************************************************************************
	File: 
	Name: SYSTEM_TASK_QUEUE_GET_P

	Called By: 

	Desc: 

	Auth: 	Sergey Ivanov
	Date: 	10 Aug 2006
*******************************************************************************
		Change History
*******************************************************************************
Date:		Author:		Description:
--------	--------	----------------------------------------
23-08-11	RJ			E622 - Retrieves Last_Run_Time to use in CalcThread System Tasks 
*******************************************************************************/
	/* Param List */

AS

SELECT	stq.Task_Queue_Id, stq.Status_Id, stq.Thread_Id, stq.is_Delete, st.SQL_Routine,
	dbo.SYSTEM_TASK_PARAM_GET_F(st.System_Task_Id) as SQL_Params, Last_Run_Time
FROM	AMT_SYSTEM_TASK_QUEUE stq
	LEFT JOIN AMT_SYSTEM_TASK st ON stq.System_Task_Id = st.System_Task_Id
ORDER BY stq.Status_Id, ISNULL(stq.Start_Time,'2300-01-01'), st.Priority

RETURN

GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[RPT_PROJECTION_AND_INVERVAL_ANALYSIS_P]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[RPT_PROJECTION_AND_INVERVAL_ANALYSIS_P]
GO

create  PROCEDURE [dbo].[RPT_PROJECTION_AND_INVERVAL_ANALYSIS_P]

/******************************************************************************
	File: 
	Name: RPT_PROJECTION_AND_INVERVAL_ANALYSIS_P
	Called By: 

	Desc: Get data for Cost per Interval Report
	(based on SP RPT_TOTAL_COST_ANALYSIS_P)
             

	Auth: Sergey Babeshko
	Date: 23-Dec-2004
*******************************************************************************
		Change History
*******************************************************************************
Date:		Author:		Description:
--------	--------	---------------------------------------- 
10-Jun-09	K N			CR8257: Report not always in correct order.
13 May 11	V Vasylyeva	#378 Last interval sometime shows 1 additional hour because
						of the calculation of the end date of equipment (It is 1 min 
						after the equipment end date calculated from usage)
18-Jul-11	V Vasylyeva	#2098 rounding usage because of float calculations. 
24-Aug-11   G Dhillon   #2282 Calculation of total per hour in projections with uneven intervals is incorrect
 2 Nov 11	V Vasylyeva	#2663 date based tasks do not show
*******************************************************************************/

	@Interval INT = 0, 
    @dealerId INT = 1,
    @branchId VARCHAR(MAX)='',
    @site_ID VARCHAR(MAX)='',
    @fleet_ID VARCHAR(MAX)='',
    @eqp_Plan_ID VARCHAR(MAX)='',
    @ProjHeaderId VARCHAR(MAX)='',
    @CostBearerID VARCHAR(MAX)='',
    @costResponsibilityID VARCHAR(MAX)='',
    @costCentreID VARCHAR(MAX)='',
    @costActivityID VARCHAR(MAX)='',
    @costExpenseID VARCHAR(MAX)='',   
    @modelId VARCHAR(MAX) = '',
    @costTypeID VARCHAR(MAX) = '',
    @systemID VARCHAR(MAX) = '',
    @subSystemID VARCHAR(MAX) = '',
    @taskTypeID VARCHAR(MAX) = '',
    @componentCodeID VARCHAR(MAX) = '',
    @modifierID VARCHAR(MAX) = '',
    @projTaskId VARCHAR(MAX) = '',--ComponentCode.ModifierCode.TaskType.ApplicationCode
    @Parts_Labour_Misc INT=0,
    @AnalyseBy VARCHAR(10) = '',
    @ShowSellAmt BIT = 1, 
    @CountIntervals BIT = 0,
	@QUOMID INT = -1,
	@Summary BIT=1,
	@Escalated BIT = 1

AS


IF @Interval = 0 RETURN
-- Parts/Labour/Misc: ALL=0,PART=1,LABOUR=2,MISC=3

DECLARE @All INT
DECLARE @Parts INT
DECLARE @Labour INT
DECLARE @Misc INT

DECLARE @P FLOAT
DECLARE @L FLOAT
DECLARE @M FLOAT

/*VV #378*/
DECLARE @TermByUsage int

SET @TermByUsage=1

SET @All=0
SET @Parts=1
SET @Labour=2
SET @Misc=3

SET @branchId =REPLACE(@branchId,'''','')
SET @site_ID =REPLACE(@site_ID,'''','')
SET @fleet_ID =REPLACE(@fleet_ID,'''','')
SET @eqp_Plan_ID =REPLACE(@eqp_Plan_ID,'''','')
SET @ProjHeaderId =REPLACE(@ProjHeaderId,'''','')
SET @CostBearerID =REPLACE(@CostBearerID,'''','')
SET @costResponsibilityID =REPLACE(@costResponsibilityID,'''','')
SET @costCentreID =REPLACE(@costCentreID,'''','')
SET @costActivityID =REPLACE(@costActivityID,'''','')
SET @costExpenseID =REPLACE(@costExpenseID,'''','')   
SET @modelId =REPLACE(@modelId,'''','')
SET @costTypeID =REPLACE(@costTypeID,'''','')
SET @systemID =REPLACE(@systemID,'''','')
SET @subSystemID =REPLACE(@subSystemID,'''','')
SET @taskTypeID =REPLACE(@taskTypeID,'''','')
SET @componentCodeID =REPLACE(@componentCodeID,'''','')
SET @modifierID =REPLACE(@modifierID,'''','')
SET @projTaskId =REPLACE(@projTaskId,'''','')

--Set Parts/Labour/Misc to all if it is null
SET @Parts_Labour_Misc=ISNULL(@Parts_Labour_Misc,@All)

IF @Parts_Labour_Misc=@All
BEGIN
	SET @P=1
	SET @L=1
	SET @M=1
END
IF @Parts_Labour_Misc=@Parts
BEGIN
	SET @P=1
	SET @L=0
	SET @M=0
END
IF @Parts_Labour_Misc=@Labour
BEGIN
	SET @P=0
	SET @L=1
	SET @M=0
END
IF @Parts_Labour_Misc=@Misc
BEGIN
	SET @P=0
	SET @L=0
	SET @M=1
END

SET @AnalyseBy='PRTA'

SET @QUOMID=NULLIF(@QUOMID,999)

IF @QUOMID=-1 SET @QUOMID=(SELECT QUOMId FROM tblQUOMs WHERE QUOMDefault<>0)

--Create a temp table for equipment to filter QUOM
CREATE TABLE #aa_EqpProj(EqpProjId INT,ModelId INT,Model VARCHAR(200) COLLATE DATABASE_DEFAULT,
Cost_Responsibility_ID INT,Projection_Type_ID INT,FleetId INT,ExchangeRateId INT,
Default_Cost_Bearer_ID INT,Cost_Centre_ID INT,StartDate DATETIME,EndDate DATETIME,
StartUsage FLOAT, EndUsage FLOAT,StartIntervalId INT,EndIntervalId INT,EndQUOMId INT
PRIMARY KEY(EqpProjId))

IF @QUOMID>0
BEGIN
	INSERT INTO #aa_EqpProj(EqpProjId,ModelId,Model,Cost_Responsibility_ID,Projection_Type_ID,FleetId,ExchangeRateId,
	Default_Cost_Bearer_ID,Cost_Centre_ID,StartDate,EndDate,StartUsage, EndUsage,EndQUOMId)
	SELECT DISTINCT EH.EqpProjId,EH.ModelId,EH.Model,EH.Cost_Responsibility_ID,EH.Projection_Type_ID,
	EH.FleetId,EH.ExchangeRateId,EH.Default_Cost_Bearer_ID,EH.Cost_Centre_ID,
	EH.EqpStartDate,EH.EndDate,dbo.GET_USAGE_FROM_DATE_F(EH.EqpProjId,@QUOMID,EH.EqpStartDate) AS StartUsage,
	/*VV #378
	dbo.GET_USAGE_FROM_DATE_F(EH.EqpProjId,@QUOMID,EH.EndDate) AS EndUsage,*/
	CASE WHEN EPR.Eqp_Term_Rule_ID=@TermByUsage /*VV #2663*/ AND ISNULL(EPR.EndQUOMId,0)=ISNULL(@QUOMID,0) THEN EPR.EndUsage ELSE
	dbo.GET_EQUIPMENT_END_USAGE_F(EH.EqpPlanId, @QUOMID,EH.EndDate,EH.Utilisation_Method_Id,
	 EPR.Annual_Utilisation,EH.UsageProfileId) END AS EndUsage,
	EH.QUOMId AS EndQUOMId
	FROM  
	EQUIPMENT_HIERARCHY_V EH 
		INNER JOIN
	tblEqpProjs EPR
		ON EH.EqpProjId=EPR.EqpProjId
		LEFT JOIN
	tblUsageProfiles UP
		ON EH.UsageProfileId=UP.UsageProfileId       
		LEFT JOIN
	tblUsageSteps US 
		ON US.UsageProfileId=UP.UsageProfileId
		LEFT JOIN
	tblUsageStepRels USR 
		ON US.UsageStepId = USR.UsageStepId 
	WHERE ISNULL(USR.ChildQUOMId,EH.QUOMId)=@QUOMId AND
	 (@dealerId=0 OR EH.DealerId=@dealerId) AND
	(@branchId='' OR EH.BranchId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@branchId))) AND
	(@site_ID='' OR EH.SiteId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@site_ID))) AND
	(@fleet_ID='' OR EH.FleetId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@fleet_ID))) AND
	(@eqp_Plan_ID='' OR EH.EqpPlanId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@eqp_Plan_ID))) AND
	(@modelId='' OR EH.ModelId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@modelId))) AND
	(@ProjHeaderId='' OR EH.ProjHeaderId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@ProjHeaderId))) 
END
ELSE
BEGIN
	INSERT INTO #aa_EqpProj(EqpProjId,ModelId,Model,Cost_Responsibility_ID,Projection_Type_ID,FleetId,ExchangeRateId,
	Default_Cost_Bearer_ID,Cost_Centre_ID,StartDate,EndDate,StartUsage, EndUsage,EndQUOMId)
	SELECT DISTINCT EH.EqpProjId,EH.ModelId,EH.Model,EH.Cost_Responsibility_ID,EH.Projection_Type_ID,
	EH.FleetId,EH.ExchangeRateId,EH.Default_Cost_Bearer_ID,EH.Cost_Centre_ID,
	EH.EqpStartDate,EH.EndDate,dbo.GET_USAGE_FROM_DATE_F(EH.EqpProjId,@QUOMID,EH.EqpStartDate) AS StartUsage,
	/* VV #378 dbo.GET_USAGE_FROM_DATE_F(EH.EqpProjId,@QUOMID,EH.EndDate) AS EndUsage,*/
	CASE WHEN EPR.Eqp_Term_Rule_ID=@TermByUsage /*VV #2663*/ AND ISNULL(EPR.EndQUOMId,0)=ISNULL(@QUOMID,0) THEN EPR.EndUsage ELSE
	dbo.GET_EQUIPMENT_END_USAGE_F(EH.EqpPlanId, @QUOMID,EH.EndDate,EH.Utilisation_Method_Id,
	 EPR.Annual_Utilisation,EH.UsageProfileId) END AS EndUsage,
	EH.QUOMId AS EndQUOMId
	FROM  
	EQUIPMENT_HIERARCHY_V EH 
		INNER JOIN
	tblEqpProjs EPR
		ON EH.EqpProjId=EPR.EqpProjId
	WHERE 
	 (@dealerId=0 OR EH.DealerId=@dealerId) AND
	(@branchId='' OR EH.BranchId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@branchId))) AND
	(@site_ID='' OR EH.SiteId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@site_ID))) AND
	(@fleet_ID='' OR EH.FleetId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@fleet_ID))) AND
	(@eqp_Plan_ID='' OR EH.EqpPlanId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@eqp_Plan_ID))) AND
	(@modelId='' OR EH.ModelId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@modelId))) AND
	(@ProjHeaderId='' OR EH.ProjHeaderId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@ProjHeaderId))) 
END

--SELECT * INTO aa_EqpProj FROM #aa_EqpProj
--SELECT *  FROM #aa_EqpProj
--RETURN

IF @@ROWCOUNT=0 RETURN

--Task header
CREATE TABLE #aa_Task_Header(Task_Header_Id INT PRIMARY KEY (Task_Header_Id))
IF @ProjTaskId<>''
BEGIN
	INSERT INTO #aa_Task_Header(Task_Header_Id)
	SELECT DISTINCT PT.Task_Header_Id FROM 
	tblProjTasks PT
		INNER JOIN
	dbo.LIST_TO_TABLE_F(@projTaskId) LTT
		ON PT.ProjTaskId=LTT.List_Item
	
END


--#region Task Details
CREATE TABLE #aa_Tasks(	
ProjTaskID INT,EqpProjID INT,SystemID INT,ManufacturerId INT,UsageQUOMId INT,Cost_Activity_ID INT,
Cost_Expense_ID INT,Unscheduled BIT

PRIMARY KEY(ProjTaskID,EqpProjID))

--Get all tasks
INSERT INTO #aa_Tasks (ProjTaskID,EqpProjID,SystemID,ManufacturerId,UsageQUOMId,Cost_Activity_ID,Cost_Expense_ID,
Unscheduled)
SELECT PT.ProjTaskID,PT.EqpProjID,S.SystemID,PT.ManufacturerId,PT.UsageQUOMId,TT.Cost_Activity_ID,
SS.Cost_Expense_ID,CASE PT.Unscheduled WHEN 0 THEN 0 ELSE 1 END AS Unscheduled
FROM 
tblProjTasks PT
	INNER JOIN
#aa_EqpProj EPR
	ON PT.EqpProjId=EPR.EqpProjId
	INNER JOIN
tblTaskTypes TT
	ON PT.TaskTypeId = TT.TaskTypeID
	INNER JOIN
tblComponentCodes CC 
	ON PT.ComponentCodeId = CC.ComponentCodeID
	INNER JOIN 
tblSubSystems SS 
	ON CC.SubSystemID = SS.SubSystemID 
	INNER JOIN
tblSystems S ON SS.SystemID = S.SystemID
	 INNER JOIN
tblCostTypes CT 
	ON S.CostTypeID = CT.CostTypeID	 
WHERE 
(@taskTypeID='' OR PT.TaskTypeID IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@taskTypeID))) AND
(@componentCodeID='' OR PT.ComponentCodeID IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@componentCodeID))) AND
(@modifierID='' OR PT.ModifierId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@modifierID))) AND
(@projTaskId='' OR PT.Task_Header_Id IN (SELECT Task_Header_Id FROM #aa_Task_Header)) AND
(@systemID='' OR S.SystemID IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@systemID))) AND
(@subSystemID='' OR SS.SubSystemID IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@subSystemID))) AND
(@costTypeID='' OR S.CostTypeID IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@costTypeID))) 

DROP TABLE #aa_Task_Header

--drop table aa_EqpProj,aa_Tasks
--select * into aa_EqpProj from #aa_EqpProj
--select * into aa_Tasks from #aa_Tasks 
--
-- return
	
/*For calculation of actual costs. We need to filter by 
@CostBearerID,@costResponsibilityID,@costCentreID,@costActivityID,@costExpenseID 

This script was copied from usp_Update_RepActualCosts
*/

CREATE TABLE #ProjTaskDefaults (ProjTaskId INT,CountJobs INT,Cost_Bearer_ID INT,Parts_Cost_Expense_ID INT,
Misc_Cost_Expense_ID INT,Labour_Cost_Expense_ID INT,Cost_Centre_ID INT
PRIMARY KEY(ProjTaskId) )

CREATE TABLE #PTADefaults(ProjTaskAmtId INT,ProjTaskOptId INT,ProjTaskId INT,Cost_Centre_ID INT,Parts_Cost_Expense_ID INT,
Labour_Cost_Expense_ID INT,Misc_Cost_Expense_ID INT,Cost_Bearer_ID INT
PRIMARY KEY(ProjTaskAmtId,ProjTaskOptId))

INSERT INTO #PTADefaults(ProjTaskAmtId,ProjTaskOptId,ProjTaskId,Cost_Centre_ID,Parts_Cost_Expense_ID,Labour_Cost_Expense_ID,
Misc_Cost_Expense_ID,Cost_Bearer_ID)
SELECT     
PTA.ProjTaskAmtId, PTA.ProjTaskOptId,PT.ProjTaskId,
ISNULL(PTA.Cost_Centre_ID,CASE COUNT(CA.Cost_Allocation_Id) WHEN 1 THEN MAX(CAD.Cost_Centre_Id) ELSE PTA.Cost_Centre_ID END) AS Cost_Centre_ID, 
ISNULL(PTA.Parts_Cost_Expense_ID,CASE COUNT(CA.Cost_Allocation_Id) WHEN 1 THEN MAX(CAD.Parts_Cost_Expense_Id) ELSE PTA.Parts_Cost_Expense_ID END) AS Parts_Cost_Expense_ID, 
ISNULL(PTA.Labour_Cost_Expense_ID,CASE COUNT(CA.Cost_Allocation_Id) WHEN 1 THEN MAX(CAD.Labour_Cost_Expense_Id) ELSE PTA.Labour_Cost_Expense_ID END) AS Labour_Cost_Expense_ID, 
ISNULL(PTA.Misc_Cost_Expense_ID,CASE COUNT(CA.Cost_Allocation_Id) WHEN 1 THEN MAX(CAD.Misc_Cost_Expense_Id) ELSE PTA.Misc_Cost_Expense_ID END) AS Misc_Cost_Expense_ID, 
ISNULL(PTA.Cost_Bearer_ID,CASE COUNT(CA.Cost_Allocation_Id) WHEN 1 THEN MAX(CAD.Cost_Bearer_Id) ELSE PTA.Cost_Bearer_ID END) AS Cost_Bearer_ID
FROM 
#aa_Tasks A
	INNER JOIN  
tblProjTasks PT
	ON A.ProjTaskId=PT.ProjTaskId
	INNER JOIN     
tblProjTaskOpts PTO 
	ON PT.ProjTaskId=PTO.ProjTaskId
	INNER JOIN
tblProjTaskAmts PTA 
	ON PTO.ProjTaskOptId = PTA.ProjTaskOptId 	
	LEFT OUTER JOIN
COST_ALLOCATION_DETAIL CAD 
	INNER JOIN
COST_ALLOCATION CA 
	ON CAD.Cost_Allocation_Id = CA.Cost_Allocation_Id 
	ON PTA.ProjTaskAmtId = CA.Proj_Task_Amt_Id
GROUP BY PTA.ProjTaskAmtId, PTA.ProjTaskOptId,PT.ProjTaskId,PTA.Misc_Cost_Expense_ID, PTA.Labour_Cost_Expense_ID, 
PTA.Cost_Bearer_ID, PTA.Parts_Cost_Expense_ID, PTA.Cost_Centre_ID


INSERT INTO #ProjTaskDefaults(ProjTaskId,CountJobs,Cost_Bearer_ID,Parts_Cost_Expense_ID,
Misc_Cost_Expense_ID,Labour_Cost_Expense_ID,Cost_Centre_ID)
SELECT     
PTA.ProjTaskId, 
COUNT(PTA.ProjTaskAmtId) AS CountJobs, MAX(PTA.Cost_Bearer_ID) AS Cost_Bearer_ID, 
MAX(PTA.Parts_Cost_Expense_ID) AS Parts_Cost_Expense_ID, MAX(PTA.Misc_Cost_Expense_ID) AS Misc_Cost_Expense_ID, 
MAX(PTA.Labour_Cost_Expense_ID) AS Labour_Cost_Expense_ID, MAX(PTA.Cost_Centre_ID) AS Cost_Centre_ID 
FROM  
#PTADefaults PTA 	
GROUP BY PTA.ProjTaskId


UPDATE #ProjTaskDefaults SET
Cost_Bearer_ID=NULL,
Parts_Cost_Expense_ID=NULL,
Misc_Cost_Expense_ID=NULL,
Labour_Cost_Expense_ID=NULL,
Cost_Centre_ID=NULL
WHERE CountJobs>1 OR CountJobs<1
 
DROP TABLE #PTADefaults
--#endregion

--Create a temporary table for costs
CREATE TABLE #aa_CostComparison(
	[ProjTaskId] [INT],
 	[PartsCost] [FLOAT] NULL ,
	[LabourCost] [FLOAT] NULL ,
	[MiscCost] [FLOAT] NULL ,
	[USAGE] [FLOAT])
--#region Actual Costs

--	Insert into temporary table the actual costs for current and alternate projections 
INSERT INTO #aa_CostComparison (ProjTaskId,PartsCost,LabourCost,MiscCost,USAGE)
SELECT 
A.ProjTaskId,
SUM(woo.PartsSell*wos.PercentParts / 100.00 / wo.ExchangeRate) AS PartsCost,
SUM(woo.LabourSell*wos.PercentLabour / 100.00 / wo.ExchangeRate) AS LabourCost,
SUM(woo.MiscSell*wos.PercentMisc / 100.00 / wo.ExchangeRate) AS MiscCost,

dbo.GET_USAGE_FROM_DATE_F(A.EqpProjId,@QUOMID,
CASE WHEN PWO.AMTStartDate<=EP.StartDate THEN DATEADD(n,1,EP.StartDate) ELSE PWO.AMTStartDate END) AS USAGE
FROM 
tblWorkOrderProjs WOP
	INNER JOIN
#aa_Tasks A
	ON WOP.ProjTaskId = A.ProjTaskId
	INNER JOIN
#ProjTaskDefaults PT
	ON A.ProjTaskId=PT.ProjTaskId
	INNER JOIN
#aa_EqpProj EP
	ON A.EqpProjId=EP.EqpProjId
	INNER JOIN
tblWorkOrders WO
	ON WOP.WorkOrderId=WO.AmtParentWorkOrderId 
	INNER JOIN
tblWorkOrderOperations WOO 
	ON WO.WorkOrderId = WOO.WorkOrderId 
	INNER JOIN
tblWorkOrderSettlements WOS 
	ON WO.WorkOrderId = WOS.WorkOrderId
	INNER JOIN
tblWorkOrders PWO
	ON WO.AmtParentWorkOrderId=PWO.WorkOrderId
	LEFT OUTER JOIN
TASK T
	ON PWO.WorkOrderId=T.Work_Order_Id
WHERE 
/*(EP.Projection_Type_Id IN(1,3)/* Current, Alternate*/) AND*/
(@CostBearerID='' OR ISNULL(WOS.CostBearerId,ISNULL(ISNULL(T.Cost_Bearer_ID, PT.Cost_Bearer_Id), EP.Default_Cost_Bearer_ID)) IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@CostBearerID))) AND
(@costCentreID='' OR ISNULL(ISNULL(T.Cost_Centre_ID, PT.Cost_Centre_ID),EP.Cost_Centre_ID) IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@costCentreID))) AND
(@costActivityID='' OR ISNULL(WOS.Cost_Activity_ID,A.Cost_Activity_ID) IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@costActivityID))) AND
(@costExpenseID='' OR 
ISNULL(WOS.Cost_Expense_ID,ISNULL(ISNULL(T.Parts_Cost_Expense_Id, PT.Parts_Cost_Expense_Id),A.Cost_Expense_ID)) IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@costExpenseID)) OR
ISNULL(WOS.Cost_Expense_ID,ISNULL(ISNULL(T.Labour_Cost_Expense_Id, PT.Labour_Cost_Expense_Id),A.Cost_Expense_ID)) IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@costExpenseID)) OR
ISNULL(WOS.Cost_Expense_ID,ISNULL(ISNULL(T.Misc_Cost_Expense_Id, PT.Misc_Cost_Expense_Id),A.Cost_Expense_ID)) IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@costExpenseID))) AND

(@costResponsibilityID='' OR ISNULL(WOS.Cost_Responsibility_ID,EP.Cost_Responsibility_ID) IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@costResponsibilityID)))

GROUP BY A.ProjTaskId,A.EqpProjId,CASE WHEN PWO.AMTStartDate<=EP.StartDate THEN DATEADD(n,1,EP.StartDate) ELSE PWO.AMTStartDate END

DROP TABLE #ProjTaskDefaults

--#endregion
	


--#region Insert into temporary table the future costs for current and alternate projections and the costsfor all other projections. Do not include unassigned tasks
 
INSERT INTO #aa_CostComparison (ProjTaskId,PartsCost,LabourCost,MiscCost,USAGE)
SELECT 
PT.ProjTaskId,

CASE WHEN @Escalated = 1 THEN
	SUM(pta.PartsCost * pto.Probability * cpe.CumPartsEscalation / cpe1.CumPartsEscalation / 100.00 / erc.ExRate)
ELSE 
	SUM(pta.PartsCost * pto.Probability / 100.00 / erc.ExRate)
END  AS PartsCost,

CASE WHEN @Escalated = 1 THEN
	SUM(pta.TotalLabourCost * pto.Probability * ce.CumLaborEscalation / ce1.CumLaborEscalation / 100.00 / erc.ExRate) 
ELSE 
	SUM(pta.TotalLabourCost * pto.Probability / 100.00 / erc.ExRate)
END  AS LabourCost,
CASE WHEN @Escalated = 1 THEN
	SUM(pta.TotalMiscCost * pto.Probability * ce.CumMiscEscalation / ce1.CumMiscEscalation / 100.00 / erc.ExRate)
ELSE 
	SUM(pta.TotalMiscCost * pto.Probability / 100.00 / erc.ExRate)
END AS MiscCost,

CASE 
WHEN occ.OccDate<=EP.StartDate OR ISNULL(PT.UsageQUOMId,0)<>ISNULL(@QUOMId,0) THEN
	dbo.GET_USAGE_FROM_DATE_F(pt.EqpProjId,@QUOMId,
	CASE WHEN occ.OccDate<=EP.StartDate THEN DATEADD(n,1,EP.StartDate) ELSE occ.OccDate END) 
ELSE occ.OccUsage END AS USAGE
	FROM 
#aa_EqpProj EP
	INNER JOIN
#aa_Tasks PT
	ON EP.EqpProjId=PT.EqpProjId
	INNER JOIN 
tblProjTaskOpts pto 
	ON PT.ProjTaskId = pto.ProjTaskId
	INNER JOIN 
PROJ_TASK_AMT_COST_1_V pta 
	ON PTO.ProjTaskOptId = pta.ProjTaskOptId
	INNER JOIN 
tblProjTaskOccs occ 
	ON PT.ProjTaskId = occ.ProjTaskId 	
	INNER JOIN 
tblExRateCurrencies erc 
	ON pta.CurrencyId = erc.CurrencyID AND EP.ExchangeRateId = erc.ExRateID
	INNER JOIN 
tblCostEscalations ce 
	ON ce.EndDate > pta.Pricing_Date AND ce.EscalationDate <= pta.Pricing_Date 
	INNER JOIN 
tblCostPartsEscalations cpe 
	ON ce.CostEscalationId = cpe.CostEscalationId AND cpe.ManufacturerId = pt.ManufacturerId
	INNER JOIN 
tblCostEscalations ce1 
	ON occ.OccDate >= ce1.EscalationDate AND occ.OccDate < ce1.EndDate
	INNER JOIN 
tblCostPartsEscalations cpe1 
	ON ce1.CostEscalationId = cpe1.CostEscalationId AND pt.ManufacturerId = cpe1.ManufacturerId
WHERE (PT.Unscheduled=0) AND
(@costResponsibilityID='' OR EP.Cost_Responsibility_ID IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@costResponsibilityID))) AND
(@CostBearerID='' OR ISNULL(pta.Cost_Bearer_ID, ep.Default_Cost_Bearer_ID) IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@CostBearerID))) AND
(@costCentreID='' OR ISNULL(pta.Cost_Centre_ID, ep.Cost_Centre_ID) IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@costCentreID))) AND
(@costExpenseID='' OR 
	ISNULL(pta.Parts_Cost_Expense_ID, pt.Cost_Expense_ID) IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@costExpenseID)) OR
	ISNULL(pta.Labour_Cost_Expense_ID, pt.Cost_Expense_ID) IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@costExpenseID)) OR
	ISNULL(pta.Misc_Cost_Expense_ID, pt.Cost_Expense_ID) IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@costExpenseID))
) 
GROUP BY PT.ProjTaskId,PT.EqpProjId,PT.UsageQUOMId,occ.OccDate,EP.StartDate,occ.OccUsage

--#endregion

--drop table aa_CostComparison
--SELECT * into aa_CostComparison from #aa_CostComparison
--return
--Intervals

DECLARE @IntervalMin INT
DECLARE @IntervalMax INT
DECLARE @IntNumber INT

--Set start and end interval id
UPDATE #aa_EqpProj SET StartIntervalId=FLOOR(StartUsage/@Interval),EndIntervalId=CEILING(EndUsage/@Interval)

SELECT @IntervalMin	=MIN(StartIntervalId),	@IntervalMax=MAX(EndIntervalId)
FROM #aa_EqpProj

CREATE TABLE #aa_Intervals(IntervalId INT,IntervalStart INT,IntervalEnd INT PRIMARY KEY (IntervalId))

SET @IntNumber=@IntervalMin

WHILE @IntNumber<=@IntervalMax
BEGIN
	INSERT INTO #aa_Intervals(IntervalId,IntervalStart,IntervalEnd)
	VALUES(@IntNumber,@IntNumber*@Interval,(@IntNumber+1)*@Interval)

	SET @IntNumber=@IntNumber+1
END

IF EXISTS (SELECT ProjTaskId FROM #aa_Tasks WHERE Unscheduled=1)
BEGIN
	
	CREATE TABLE #aa_EqpPeriod(EqpProjId INT,IntervalId INT,
	IntervalStartDate DATETIME,IntervalEndDate DATETIME,
	StartPeriod INT,EndPeriod INT
	 PRIMARY KEY (EqpProjId,IntervalId))

	INSERT INTO #aa_EqpPeriod(EqpProjId,IntervalId,IntervalStartDate,IntervalEndDate)
	SELECT EPR.EqpProjId,I.IntervalId,

	/*This will return eqpstart date if period starts before the start date*/
	dbo.GET_DATE_FROM_USAGE_F(EPR.EqpProjId,@QUOMId,I.IntervalStart) AS IntervalStartDate,

	dbo.GET_DATE_FROM_USAGE_F(EPR.EqpProjId,@QUOMId,I.IntervalEnd) AS IntervalEndDate
	FROM
	#aa_EqpProj EPR
		INNER JOIN
	#aa_Intervals I
		ON I.IntervalId >= EPR.StartIntervalId AND I.IntervalId<=EPR.EndIntervalId

	UPDATE #aa_EqpPeriod SET 
	StartPeriod=YEAR(IntervalStartDate)*100+MONTH(IntervalStartDate),	
	EndPeriod=YEAR(IntervalEndDate)*100+MONTH(IntervalEndDate)

--drop table aa_EqpProj
--select * into aa_EqpProj from #aa_EqpProj
--return
--drop table aa_Intervals,aa_EqpPeriod
--	select * into aa_Intervals from #aa_Intervals
--	select * into aa_EqpPeriod from #aa_EqpPeriod
--	return

	CREATE TABLE #aa_Usages(EqpProjId INT, CalenderPeriod INT, PeriodStartUsage FLOAT,PeriodEndUsage FLOAT,
		PeriodUsage FLOAT)

	IF @QUOMId IS NULL
	BEGIN

		--Calculate usages in days. RepUsage table does not have date based records if equipment is not date based

		INSERT INTO #aa_Usages(EqpProjId, CalenderPeriod, PeriodStartUsage,PeriodEndUsage,PeriodUsage)
		SELECT DISTINCT PT.EqpProjId,RPC.Period AS CalenderPeriod,

		CAST(RU.PeriodStartDate AS FLOAT)-CAST(EP.StartDate AS FLOAT) AS PeriodStartUsage,
		CAST(RU.PeriodEndDate AS FLOAT)-CAST(EP.StartDate AS FLOAT) AS PeriodEndUsage,
		RU.PeriodDays AS PeriodUsage
		FROM
		#aa_EqpProj EP
			INNER JOIN
		#aa_Tasks PT
			ON EP.EqpProjId=PT.EqpProjId
			INNER JOIN
		tblRepProjCosts RPC
			ON PT.ProjTaskId=RPC.ProjTaskId 
			INNER JOIN		
		tblRepUsages RU
			ON RPC.Period=RU.CalenderPeriod AND RPC.EqpProjId=RU.EqpProjId AND ISNULL(RU.QUOMId,0)=ISNULL(EP.EndQUOMId,0)
		WHERE PT.Unscheduled=1
		
	END
	ELSE --@QUOMId>0
	BEGIN
		INSERT INTO #aa_Usages(EqpProjId, CalenderPeriod, PeriodStartUsage,PeriodEndUsage,
		PeriodUsage)
		SELECT DISTINCT PT.EqpProjId,RU.CalenderPeriod, RU.PeriodStartUsage,RU.PeriodEndUsage,
		RU.PeriodUsage
		FROM
		#aa_Tasks PT
			INNER JOIN
		tblRepProjCosts RPC
			ON PT.ProjTaskId=RPC.ProjTaskId 
			INNER JOIN		
		tblRepUsages RU
			ON RPC.Period=RU.CalenderPeriod AND RPC.EqpProjId=RU.EqpProjId AND RU.QUOMId=@QUOMId
		WHERE PT.Unscheduled=1
	END

--drop table aa_EqpProj
--select * into aa_EqpProj from #aa_EqpProj
--return
--drop table aa_Intervals,aa_EqpPeriod
--	select * into aa_Intervals from #aa_Intervals
--	select * into aa_EqpPeriod from #aa_EqpPeriod
--	return
--select * into aa_Usages from #aa_Usages
--select * into aa_Tasks from #aa_Tasks

--return

	/*(1) Add costs for the intervals which start period< end period*/

	INSERT INTO #aa_CostComparison (ProjTaskId,PartsCost,LabourCost,MiscCost,USAGE)
	SELECT 
	PT.ProjTaskId,

	SUM(
		CASE 
		/*Could happen for the last interval*/
		WHEN RU.PeriodEndUsage<I.IntervalStart THEN 0
		/*period usage is in the interval*/
		WHEN RU.PeriodStartUsage >=I.IntervalStart AND RU.PeriodEndUsage<=I.IntervalEnd THEN 1.00
		/*interval is in period usage*/
		WHEN RU.PeriodStartUsage <=I.IntervalStart AND RU.PeriodEndUsage>=I.IntervalEnd THEN @Interval/RU.PeriodUsage
		/*period starts before interval and ends in  the interval*/	 
		WHEN RU.PeriodStartUsage<I.IntervalStart AND RU.PeriodEndUsage<=I.IntervalEnd THEN (RU.PeriodEndUsage-I.IntervalStart)/RU.PeriodUsage
		/*period starts in the interval, ends after the interval*/
		WHEN RU.PeriodStartUsage>I.IntervalStart AND RU.PeriodEndUsage>=I.IntervalEnd THEN (I.IntervalEnd-RU.PeriodStartUsage)/RU.PeriodUsage
		END
	* 
	RPC.PrimePartsSell) AS PartsCost,

	SUM(
	
	CASE 
	/*Could happen for the last interval*/
	WHEN RU.PeriodEndUsage<I.IntervalStart THEN 0
	/*period usage is in the interval*/
	WHEN RU.PeriodStartUsage >=I.IntervalStart AND RU.PeriodEndUsage<=I.IntervalEnd THEN 1.00
	/*interval is in period usage*/
	WHEN RU.PeriodStartUsage <=I.IntervalStart AND RU.PeriodEndUsage>=I.IntervalEnd THEN @Interval/RU.PeriodUsage
	/*period starts before interval and ends in  the interval*/	 
	WHEN RU.PeriodStartUsage<I.IntervalStart AND RU.PeriodEndUsage<=I.IntervalEnd THEN (RU.PeriodEndUsage-I.IntervalStart)/RU.PeriodUsage
	/*period starts in the interval, ends after the interval*/
	WHEN RU.PeriodStartUsage>I.IntervalStart AND RU.PeriodEndUsage>=I.IntervalEnd THEN (I.IntervalEnd-RU.PeriodStartUsage)/RU.PeriodUsage
	END * RPC.PrimeLabourSell) AS LabourCost,

	SUM(
	CASE 
	/*Could happen for the last interval*/
	WHEN RU.PeriodEndUsage<I.IntervalStart THEN 0
	/*period usage is in the interval*/
	WHEN RU.PeriodStartUsage >=I.IntervalStart AND RU.PeriodEndUsage<=I.IntervalEnd THEN 1.00
	/*interval is in period usage*/
	WHEN RU.PeriodStartUsage <=I.IntervalStart AND RU.PeriodEndUsage>=I.IntervalEnd THEN @Interval/RU.PeriodUsage
	/*period starts before interval and ends in  the interval*/	 
	WHEN RU.PeriodStartUsage<I.IntervalStart AND RU.PeriodEndUsage<=I.IntervalEnd THEN (RU.PeriodEndUsage-I.IntervalStart)/RU.PeriodUsage
	/*period starts in the interval, ends after the interval*/
	WHEN RU.PeriodStartUsage>I.IntervalStart AND RU.PeriodEndUsage>=I.IntervalEnd THEN (I.IntervalEnd-RU.PeriodStartUsage)/RU.PeriodUsage
	END *RPC.PrimeMiscSell) AS MiscCost,
	CASE 
	WHEN I.IntervalStart+@Interval/2.00>E.EndUsage THEN E.EndUsage
	ELSE I.IntervalStart+@Interval/2.00 END AS USAGE
	FROM
	#aa_EqpProj E
		INNER JOIN
	#aa_Tasks PT
		ON E.EqpProjId=PT.EqpProjId
		INNER JOIN
	#aa_EqpPeriod EP
		ON PT.EqpProjId=EP.EqpProjId
		INNER JOIN
	#aa_Intervals I
		ON EP.IntervalId=I.IntervalId
		INNER JOIN
	tblRepProjCosts RPC
		ON PT.ProjTaskId=RPC.ProjTaskId AND EP.EqpProjId=RPC.EqpProjId AND 
		   RPC.Period >=EP.StartPeriod AND RPC.Period<=EP.EndPeriod 
		INNER JOIN
	#aa_Usages RU
		ON RPC.Period=RU.CalenderPeriod AND RPC.EqpProjId=RU.EqpProjId  
	WHERE PT.Unscheduled=1 AND
	(@costResponsibilityID='' OR RPC.Cost_Responsibility_ID IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@costResponsibilityID))) AND
	(@CostBearerID='' OR RPC.CostBearerID IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@CostBearerID))) AND
	(@costCentreID='' OR RPC.Cost_Centre_ID IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@costCentreID))) AND
	(@costExpenseID='' OR RPC.Cost_Expense_ID IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@costExpenseID)))

	GROUP BY PT.ProjTaskId,I.IntervalStart,E.EndUsage,I.IntervalEnd
	
	DROP TABLE #aa_EqpPeriod,#aa_Usages
	
END

--SELECT * into aa_CostComparison from #aa_CostComparison 

/*VV #378 Discussed with RF: Put all costs beyond equipment end to the last interval*/
/*VV #2098 ROUND Usage to 4 digits because of float calculations*/
UPDATE C SET C.Usage=ROUND(CASE WHEN C.Usage>E.EndUsage THEN E.EndUsage ELSE C.Usage END,4)
from
#aa_CostComparison C
	INNER JOIN
tblProjTasks PT
	ON C.ProjTaskId=PT.ProjTaskId
	INNER JOIN
#aa_EqpProj E
	ON PT.EqpProjId=E.EqpProjId


--Create a temporary table
CREATE TABLE #aa_CostInterval(
ProjTaskId INT,
Cost FLOAT,	
PartsCost FLOAT,
MiscCost FLOAT,
LabourCost FLOAT,
IntervalId INT)
	
--#aa_CostComparison (AnalyseByID,AnalyseBy,PartsCost,LabourCost,MiscCost,Usage)
--
--#aa_Intervals(IntervalId int,IntervalStart int,IntervalEnd 



CREATE TABLE #aa_AnalyseBy(ProjTaskId INT  PRIMARY KEY (ProjTaskId))
 
BEGIN
	
	INSERT INTO #aa_CostInterval(ProjTaskId, Cost,PartsCost,MiscCost,LabourCost,IntervalId)
	SELECT CC.ProjTaskId, @P*SUM(CC.PartsCost)+@L*SUM(CC.LabourCost)+@M*SUM(CC.MiscCost) AS Cost,
	SUM(CC.PartsCost),
	SUM(CC.MiscCost),
	SUM(CC.LabourCost),
	I.IntervalId
	FROM
	#aa_CostComparison CC
		INNER JOIN
	#aa_Intervals I
		ON CC.USAGE >I.IntervalStart AND CC.USAGE<=I.IntervalEnd
	GROUP BY CC.ProjTaskId, I.IntervalId

	INSERT INTO #aa_AnalyseBy(ProjTaskId)
	SELECT DISTINCT ProjTaskId FROM #aa_Tasks

END

--Add Missing intervals
INSERT INTO #aa_CostInterval(ProjTaskId,PartsCost,MiscCost,LabourCost,Cost,IntervalId)
SELECT A.ProjTaskId,0,0,0, 0 AS Cost,A.IntervalId
FROM
(SELECT ProjTaskId,IntervalId FROM #aa_AnalyseBy CROSS JOIN #aa_Intervals) A
	LEFT JOIN
#aa_CostInterval CI
	ON A.ProjTaskId=CI.ProjTaskId  AND A.IntervalId=CI.IntervalId
WHERE CI.IntervalId IS NULL

DECLARE @MinUsage FLOAT
DECLARE @MaxUsage FLOAT

SELECT @MinUsage=MIN(StartUsage),@MaxUsage=MAX(EndUsage) FROM #aa_EqpProj

UPDATE #aa_Intervals SET IntervalStart=@MinUsage
WHERE IntervalStart<@MinUsage

UPDATE #aa_Intervals SET IntervalEnd=@MaxUsage
WHERE IntervalEnd>@MaxUsage

DELETE #aa_Intervals 
WHERE IntervalStart>IntervalEnd OR IntervalStart=IntervalEnd


CREATE TABLE #_PROJECTIONANDINTERVALANALYSIS
(
	ProjTaskId INT PRIMARY KEY (ProjTaskId),
	Model VARCHAR(100) COLLATE DATABASE_DEFAULT,
	Equipment VARCHAR(100) COLLATE DATABASE_DEFAULT,
	ProjectionName VARCHAR(200) COLLATE DATABASE_DEFAULT,
	StrategyTask VARCHAR(500) COLLATE DATABASE_DEFAULT,
	TaskType VARCHAR(100) COLLATE DATABASE_DEFAULT,
	JobCode VARCHAR(100) COLLATE DATABASE_DEFAULT,
	UOM VARCHAR(100) COLLATE DATABASE_DEFAULT,
	[FIRST] FLOAT,
	Frequency FLOAT,
	FieldLabourHours FLOAT,
	ShopLabourHours FLOAT,
	Parts FLOAT,
	Labour FLOAT,
	Misc FLOAT,
	Cost FLOAT
)

INSERT INTO #_PROJECTIONANDINTERVALANALYSIS
(ProjTaskId,Model,Equipment,ProjectionName,StrategyTask,TaskType,UOM,[FIRST],Frequency,Parts,Labour,Misc,FieldLabourHours,ShopLabourHours)

SELECT     	
	A.ProjTaskId,
	V.Model,
	V.Equipment,
	V.ProjName,
	TH.Description,
	TT.Description,
	ISNULL(Q.UOMShortDesc,'Days') AS UOM,
	PT.FIRST,
	PT.Frequency,
	CASE WHEN @Escalated = 1 THEN SUM(CPE.CumPartsEscalation * PTO.Probability / 100 * PTA.PartsCost / ERC.ExRate) ELSE SUM(PTO.Probability / 100 * PTA.PartsCost / ERC.ExRate) END AS Parts,
	CASE WHEN @Escalated = 1 THEN SUM(CE.CumLaborEscalation * PTO.Probability / 100 * PTA.TotalLabourCost / ERC.ExRate) ELSE SUM(PTO.Probability / 100 * PTA.TotalLabourCost / ERC.ExRate) END AS Labour, 	 
	CASE WHEN @Escalated = 1 THEN SUM(CE.CumMiscEscalation * PTO.Probability / 100 * PTA.TotalMiscCost / ERC.ExRate) ELSE SUM(PTO.Probability / 100 * PTA.TotalMiscCost / ERC.ExRate) END AS Misc,
	SUM(CASE PTA.Labour_Hrs_Field WHEN 1 THEN LaborHours ELSE 0 END) AS Field,
	SUM(CASE PTA.Labour_Hrs_Field WHEN 0 THEN LaborHours ELSE 0 END) AS Shop 
	FROM 
		#aa_Tasks  A
	INNER JOIN tblProjTasks PT ON PT.ProjTaskId = A.ProjTaskId	 
	INNER JOIN tblEqpProjs EPR ON EPR.EqpProjId = PT.EqpProjId
	INNER JOIN EQUIPMENT_HIERARCHY_V V ON V.EqpProjId = PT.EqpProjId
	INNER JOIN TASK_HEADER TH ON TH.Task_Header_Id = PT.Task_Header_Id
	INNER JOIN tblTaskTypes TT ON TT.TaskTypeId = PT.TaskTypeId
	/*#2663 INNER JOIN tblQUOMS Q ON Q.QuomId = PT.UsageQUOMId*/
	INNER JOIN	tblProjTaskOpts PTO	ON PTO.ProjTaskId = PT.ProjTaskId
	INNER JOIN 	PROJ_TASK_AMT_COST_1_V PTA	ON PTA.ProjTaskOptId = PTO.ProjTaskOptId
	INNER JOIN 	tblCostEscalations CE		ON PTA.Pricing_Date >= CE.EscalationDate AND PTA.Pricing_Date < CE.EndDate
	INNER JOIN 	tblCostPartsEscalations CPE		ON CE.CostEscalationId = CPE.CostEscalationId AND CPE.ManufacturerId = PT.ManufacturerId		 
	INNER JOIN 	tblExRates ER	ON EPR.ExchangeRateId = ER.ExRateID
	INNER JOIN 	tblExRateCurrencies ERC	ON ERC.ExRateID = ER.ExRateID AND ERC.CurrencyID = PTA.CurrencyID 
	/*#2663*/ LEFT JOIN tblQUOMS Q ON PT.UsageQUOMId=Q.QuomId
GROUP BY
		A.ProjTaskId,
	V.Model,
	V.Equipment,
	V.ProjName,
	TH.Description,
	TT.Description,
	Q.UOMShortDesc,
	PT.FIRST,
	PT.Frequency
 
SELECT CI.ProjTaskId,
	PIA.Model,
	PIA.Equipment,
	PIA.ProjectionName,
	PIA.StrategyTask,
	PIA.TaskType,
	PIA.JobCode,
	PIA.UOM,
	PIA.FIRST,
	PIA.Frequency,
	PIA.FieldLabourHours,
	PIA.ShopLabourHours,
	PIA.Parts,
	PIA.Labour,
	PIA.Misc,
	PIA.Parts+PIA.Labour+PIA.Misc AS Cost,
CI.PartsCost,CI.MiscCost,CI.LabourCost,CI.Cost AS TotalCost,I.IntervalStart AS PeriodStartUsage,
CAST(I.IntervalStart AS VARCHAR)+' - '+CAST(I.IntervalEnd AS VARCHAR) AS INTERVAL,
I.IntervalStart,I.IntervalEnd, 1 AS IntOrder
FROM
#aa_CostInterval CI
	INNER JOIN
#aa_Intervals I
	ON CI.IntervalId=I.IntervalId
	 INNER JOIN #_PROJECTIONANDINTERVALANALYSIS PIA ON PIA.ProjTaskId = CI.ProjTaskId
UNION ALL
SELECT NULL,
	PIA.Model,
	PIA.Equipment,
	PIA.ProjectionName,
	'Total',
	'',
	'',
	'',
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
SUM(CI.PartsCost),SUM(CI.MiscCost),SUM(CI.LabourCost),SUM(CI.Cost) AS TotalCost,I.IntervalStart AS PeriodStartUsage,
CAST(I.IntervalStart AS VARCHAR)+' - '+CAST(I.IntervalEnd AS VARCHAR) AS INTERVAL,
I.IntervalStart,I.IntervalEnd, 2 AS IntOrder
FROM
#aa_CostInterval CI
	INNER JOIN
#aa_Intervals I
	ON CI.IntervalId=I.IntervalId
	 INNER JOIN #_PROJECTIONANDINTERVALANALYSIS PIA ON PIA.ProjTaskId = CI.ProjTaskId 
GROUP BY  
	PIA.Model,
	PIA.Equipment,
	PIA.ProjectionName,
	I.IntervalStart,CAST(I.IntervalStart AS VARCHAR)+' - '+CAST(I.IntervalEnd AS VARCHAR),I.IntervalStart,I.IntervalEnd
UNION ALL
SELECT NULL,
	PIA.Model,
	PIA.Equipment,
	PIA.ProjectionName,
	'Total Per Hour',
	'',
	'',
	'',
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
SUM(CI.PartsCost)/@Interval,SUM(CI.MiscCost)/@Interval,SUM(CI.LabourCost)/@Interval,
--GD 2282
CASE WHEN (I.IntervalEnd-I.IntervalStart)< @Interval THEN SUM(CI.Cost)/(I.IntervalEnd-I.IntervalStart) ELSE SUM(CI.Cost)/@Interval  END AS TotalCost,
I.IntervalStart AS PeriodStartUsage,
CAST(I.IntervalStart AS VARCHAR)+' - '+CAST(I.IntervalEnd AS VARCHAR) AS INTERVAL,
I.IntervalStart,I.IntervalEnd, 3 AS IntOrder
FROM
#aa_CostInterval CI
	INNER JOIN
#aa_Intervals I
	ON CI.IntervalId=I.IntervalId
	 INNER JOIN #_PROJECTIONANDINTERVALANALYSIS PIA ON PIA.ProjTaskId = CI.ProjTaskId 
GROUP BY  
	PIA.Model,
	PIA.Equipment,
	PIA.ProjectionName,
	I.IntervalStart,CAST(I.IntervalStart AS VARCHAR)+' - '+CAST(I.IntervalEnd AS VARCHAR),I.IntervalStart,I.IntervalEnd
ORDER BY IntOrder,I.IntervalStart
 
	
DROP TABLE #aa_CostInterval,#aa_Tasks,#aa_CostComparison,#aa_Intervals,#_PROJECTIONANDINTERVALANALYSIS

GO


/****** Object:  StoredProcedure [dbo].[JOB_COST_IMPORT_P]    Script Date: 08/26/2011 17:11:28 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[JOB_COST_IMPORT_P]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[JOB_COST_IMPORT_P]
GO

  
CREATE  PROCEDURE [dbo].[JOB_COST_IMPORT_P]  
/******************************************************************************  
 File:   
 Name: JOB_COST_IMPORT_P  
 Desc: 1. JOB_COST_IMPORT_P  
  
 Auth: Koushik Nagarajan  
 Date: 16-June-2007  
*******************************************************************************  
  Change History  
*******************************************************************************  
 Date:  Author:  Description:  
 -------- -------- ----------------------------------------  
  5 Sep 2007 V Vasylyeva Fixed duplicating of projTaskAmts costs if there are multiple cost allocation details imported  
  5 Sep 2007 D Smith  Fixed duplicating of COST_ALLOCATION_DETAIL records (included SiteId in JOIN)  
  6 Sep 2007 K Nagarajan Fixed Unlinking the existing Cost Allocation.  
 15 Jan 2008 K Nagarajan Fixed duplicate linking.(CA- PT)  
 12 Feb 2008 K Nagarajan Fixed updating other projection's Cost Allocation   
 13 May 2008 K Nagarajan Fixed Checking Whether the existing CA is Linked to Current Projection  
 20 Oct 2008 K Nagarajan Fixed a bug in identifying the Existing CA Record.  
  5 Nov 2008 V Vasylyeva CR7659 Added cost allocation configurations   
  9 Feb 2008 V Vasylyeva CR7856 Parts cost expense was set to labour cost expense  
  2-Jul-2009 V Vasylyeva CR8302: added EXEC LABOUR_RATES_MISSING_ADD_P  
 20 Aug 2009 V Vasylyeva CR8375 Increasing Modifier Code to 50 char  
 26 Nov 2009 AL   CR8457: removed End_Use_Code  
 18 Apr 2011 G Dhillon changed the size of Work_Group to 50  
 26 Aug 2011 G Dhillon   write error description in Import_Error table  
 06 Sep 2011 R Joyce	 2421 - Cost_Centre should be 30 chars
 14 Oct 2011 G Dhillon   2620 Error in Forecast Cost Adjuster when Processing Adjustments
*******************************************************************************/  
  /* Param List */  
 @XMLDocument XML,  
 @ImportFailed BIT = 0 OUTPUT,  
 @Warnings VARCHAR(MAX)  = '' OUTPUT,   
 @Message VARCHAR(MAX)  = '' OUTPUT,  
 @InterfaceName VARCHAR(200) = NULL,  
 @InterfaceSource INT = 0  
AS  
SET NOCOUNT ON  
  
SET @Warnings = ''  
SET @Message = ''  
  
DECLARE @TodaysDate DATETIME  
SET @TodaysDate = GETDATE()  
  
DECLARE @ModelSerialSeparator varchar(5)  
SELECT TOP 1 @ModelSerialSeparator = ISNULL(ModelSerialSeparator,'') FROM AMT_VARIABLE  
  
DECLARE @PrimeCurrency VARCHAR(10)  
SELECT TOP 1 @PrimeCurrency = Currency  FROM tblCurrencies WHERE PrimaryCurr <> 0  
  
IF @PrimeCurrency IS NULL  
 BEGIN  
  SET @Message = 'ERROR: Unable to find the primary currency.'  
  RETURN  
 END  
  
DECLARE @DefaultProjTaskJobCodeID INT  
DECLARE @DefaultProjTaskJobCode VARCHAR(10)  
  
SELECT @DefaultProjTaskJobCodeID = Varchar_Value FROM AMT_TYPED_VARIABLE WHERE Value_Name = 'DefaultProjTaskJobCodeId'  
  
SELECT @DefaultProjTaskJobCode = Code FROM tblJobCodes WHERE JobCodeId = @DefaultProjTaskJobCodeID  
  
IF @DefaultProjTaskJobCode IS NULL   
BEGIN  
 SELECT TOP 1   
  @DefaultProjTaskJobCodeID = JobCodeId,   
  @DefaultProjTaskJobCode = Code   
 FROM tblJobCodes   
 WHERE Default_Record <> 0   
 SET @Warnings = 'WARNING: Unable to find the global default Job code. Using the table default Job Code..'  
END  
  
IF @DefaultProjTaskJobCode IS NULL  
 BEGIN  
  SET @Message = 'ERROR: Unable to find the default Job Code.'  
  RETURN  
 END  
  
DECLARE @LineBreak VARCHAR(2)  
SET @LineBreak = CHAR(13) + CHAR(10)  
  
CREATE TABLE #I_JOB_COSTS  
(  
 Id INT NOT NULL IDENTITY (1,1) PRIMARY KEY,  
 Cost_Allocation_Ref VARCHAR(100) COLLATE database_default NULL,  
 Scheduling_Task_Link BIT NULL,  
 Delete_Cost_Allocation BIT DEFAULT 0,  
 Model VARCHAR(20) COLLATE database_default  NULL,  
 Serial_No VARCHAR(50) COLLATE database_default  NULL,  
 Registration_Counter VARCHAR(20) COLLATE database_default  NULL,  
 Component_Code VARCHAR(10) COLLATE database_default  NULL,  
 /*VV CR8375*/  
 Modifier_Code VARCHAR(70) COLLATE database_default  NULL,  
 Currency VARCHAR(10) COLLATE database_default  NULL,  
 Job_Code VARCHAR(10) COLLATE database_default  NULL,  
 Work_Group VARCHAR(50) COLLATE database_default  NULL,  
 Cost_Centre VARCHAR(30) COLLATE database_default  NULL,     --RJ Increased to 30 - Issue 2421
 Cost_Bearer VARCHAR(10) COLLATE database_default  NULL,  
 Parts_Expense VARCHAR(10) COLLATE database_default  NULL,  
 Labour_Expense VARCHAR(10) COLLATE database_default  NULL,  
 Misc_Expense VARCHAR(10) COLLATE database_default  NULL,  
 Labour_Activity VARCHAR(10) COLLATE database_default  NULL,  
 Labour_Hours FLOAT DEFAULT 0,  
 Duration_Hours FLOAT DEFAULT 0,   
 Parts_Sell FLOAT DEFAULT 0,   
 Labour_Sell FLOAT DEFAULT 0,   
 Misc_Sell FLOAT DEFAULT 0,   
 System_Source VARCHAR(10) COLLATE database_default  NULL,  
 Projection_Type INT DEFAULT 1,  
 SiteId INT NULL,  
 EqpPlanId INT NULL,  
 EqpProjId INT NULL,   
 ProjTaskId INT NULL,   
 ProjTaskAmtId INT  NULL,  
 SchedulingTaskId INT NULL,   
 CostAllocationId INT NULL,   
 CostAllocationDetailId INT  NULL/* VV 5-Nov-2008,  
 ResetProjTaskAmtCostCodes BIT  DEFAULT 0*/  
)  
  
DECLARE @docHandle  int  
EXEC sp_xml_preparedocument @docHandle OUTPUT, @xmlDocument  
INSERT INTO #I_JOB_COSTS  
(  
 Cost_Allocation_Ref,  
 Scheduling_Task_Link,  
 Delete_Cost_Allocation,  
 Model,  
 Serial_No,  
 Registration_Counter,  
 Component_Code,  
 Modifier_Code,  
 Currency,  
 Job_Code,  
 Work_Group,  
 Cost_Centre,  
 Cost_Bearer,  
 Parts_Expense,  
 Labour_Expense,  
 Misc_Expense,  
 Labour_Activity,  
 Labour_Hours,  
 Duration_Hours,  
 Parts_Sell,  
 Labour_Sell,  
 Misc_Sell,  
 System_Source  
)  
SELECT   
 NULLIF(LTRIM(RTRIM(IJC.Cost_Allocation_Ref)),'') AS Cost_Allocation_Ref,  
 IJC.Scheduling_Task_Link AS Scheduling_Task_Link,  
 ISNULL(IJC.Delete_Cost_Allocation,0) AS Delete_Cost_Allocation,  
 NULLIF(LTRIM(RTRIM(IJC.Model)),'') AS Model,  
 NULLIF(LTRIM(RTRIM(IJC.Serial_No)),'') AS Serial_No,  
 NULLIF(LTRIM(RTRIM(IJC.Registration_Counter)),'') AS Registration_Counter,  
 NULLIF(LTRIM(RTRIM(IJC.Component_Code)),'') AS Component_Code,  
 NULLIF(LTRIM(RTRIM(IJC.Modifier_Code)),'') AS Modifier_Code,  
 ISNULL(NULLIF(LTRIM(RTRIM(IJC.Currency)),''),@PrimeCurrency) AS Currency,  
 ISNULL(NULLIF(LTRIM(RTRIM(IJC.Job_Code)),''),JC.Code) AS Job_Code,  
 NULLIF(LTRIM(RTRIM(IJC.Work_Group)),'') AS Work_Group,  
 NULLIF(LTRIM(RTRIM(IJC.Cost_Centre)),'') AS Cost_Centre,  
 NULLIF(LTRIM(RTRIM(IJC.Cost_Bearer)),'') AS Cost_Bearer,  
 NULLIF(LTRIM(RTRIM(IJC.Parts_Expense)),'') AS Parts_Expense,  
 NULLIF(LTRIM(RTRIM(IJC.Labour_Expense)),'') AS Labour_Expense,  
 NULLIF(LTRIM(RTRIM(IJC.Misc_Expense)),'') AS Misc_Expense,  
 NULLIF(LTRIM(RTRIM(IJC.Labour_Activity)),'') AS Labour_Activity,  
 ISNULL(IJC.Labour_Hours,0) AS Labour_Hours,  
 ISNULL(IJC.Duration_Hours,0) AS Duration_Hours,  
 ISNULL(IJC.Parts_Sell,0) AS Parts_Sell,  
 ISNULL(IJC.Labour_Sell,0) AS Labour_Sell,  
 ISNULL(IJC.Misc_Sell,0) AS Misc_Sell,  
 NULLIF(LTRIM(RTRIM(IJC.System_Source)),'') AS System_Source  
FROM OPENXML(@docHandle, N'/I_JOBCOSTs/I_JOBCOST',2) WITH #I_JOB_COSTS  IJC  
  LEFT JOIN tblJobCodes JC ON JC.JobCodeId = @DefaultProjTaskJobCodeID  
EXEC sp_xml_removedocument @docHandle  
  
  
  
-- Update EqpProjId,ProjtaskId, SchedulingTaskId, Site Id  
UPDATE IJC SET    
 IJC.EqpPlanId = E.EqpPlanId,  
 IJC.EqpProjId = EPROJ.EqpProjId,   
 IJC.ProjTaskId = CASE WHEN IJC.Scheduling_Task_Link= 1 THEN PTST.ProjTaskId ELSE ISNULL(PTCA.ProjTaskId,PT.ProjTaskId) END , -- KN 20070906 Assign the already linked Cost Allocation  
 IJC.SiteId = F.SiteId,  
 IJC.CostAllocationId = CA.Cost_Allocation_Id,-- CASE WHEN PTCA.ProjTaskId IS NULL THEN NULL ELSE CA.Cost_Allocation_Id END,  
 IJC.SchedulingTaskId = ST.SchedulingTaskId,  
 IJC.Cost_Bearer = ISNULL(IJC.Cost_Bearer, CB.WO_Code),  
 IJC.Cost_Centre = ISNULL(IJC.Cost_Centre,CC.Cost_Centre_Code),  
 IJC.Modifier_Code = ISNULL(IJC.Modifier_Code,MC.Code)  
FROM #I_JOB_COSTS IJC   
 LEFT JOIN tblModels M ON  M.Model = IJC.Model   
 LEFT JOIN tblEquipment EQ ON  EQ.ModelId = M.ModelId     
    AND (   
      (@ModelSerialSeparator = '' AND EQ.SerialNumber=ISNULL(IJC.Serial_No, CASE WHEN IJC.Projection_Type IN (1,2) THEN '' ELSE EQ.SerialNumber END))  
     OR  (@ModelSerialSeparator <> '' AND IJC.Model+ @ModelSerialSeparator +ISNULL(IJC.Serial_No, CASE WHEN IJC.Projection_Type IN (1,2) THEN '' ELSE EQ.SerialNumber END)=EQ.SerialNumber)   
     )  
 LEFT JOIN tblEqpPlans E ON E.EquipmentId = EQ.EquipmentId AND E.Reg_Counter = ISNULL(IJC.Registration_Counter,E.Reg_Counter)     
 INNER JOIN tblEqpProjs EPROJ ON E.EqpPlanId = EPROJ.EqpPlanId AND EPROJ.Projection_Type_Id = IJC.Projection_Type  
 LEFT JOIN   
   (-- if serial number and model matches more than one equipment , then select the equipment which has greater End Date  
    SELECT     MAX(dbo.tblEqpProjs.EndDate) AS EndDate, dbo.tblEquipment.SerialNumber, dbo.tblEquipment.ModelId  
    FROM         dbo.tblEquipment INNER JOIN  
       dbo.tblEqpPlans ON dbo.tblEquipment.EquipmentId = dbo.tblEqpPlans.EquipmentId INNER JOIN  
            dbo.tblEqpProjs ON dbo.tblEqpPlans.EqpPlanId = dbo.tblEqpProjs.EqpPlanId  
      WHERE     (dbo.tblEqpProjs.Projection_Type_ID = 1)  
      GROUP BY dbo.tblEquipment.SerialNumber, dbo.tblEquipment.ModelId  
   ) EqpMaxEndDate  
  ON EqpMaxEndDate.SerialNumber = EQ.SerialNumber AND EqpMaxEndDate.ModelId = EQ.ModelId AND EPROJ.EndDate = EqpMaxEndDate.EndDate   
 LEFT JOIN tblFleets F ON F.FleetId = E.FleetId  
 LEFT JOIN SCHEDULING_TASK ST ON (IJC.Cost_Allocation_Ref = ST.ExternalIdentifier AND IJC.Scheduling_Task_Link = 1)  
 LEFT JOIN COST_ALLOCATION CA ON CA.Cost_Allocation_Ref = IJC.Cost_Allocation_Ref AND CA.System_Source_Id <> 1  
 LEFT JOIN tblProjTaskAmts PTA ON PTA.ProjTaskAmtId = CA.Proj_Task_Amt_Id  
 LEFT JOIN tblProjTaskOpts PTO ON PTO.ProjTaskOptId = PTA.ProjTaskOptId  
 LEFT JOIN tblProjTasks PTCA ON PTCA.ProjTaskId = PTO.ProjTaskId AND PTCA.EqpProjId = EPROJ.EqpProjId   
 LEFT JOIN tblCostBearers CB ON CB.CostBearerId = E.Default_Cost_Bearer_Id  
 LEFT JOIN COST_CENTRE CC ON CC.Cost_Centre_Id = E.Cost_Centre_Id  
 LEFT JOIN tblModifierCodes MC ON MC.ModifierId = 0  
 LEFT JOIN   
 (  
  SELECT     PT.EqpPlanId, PT.EqpProjId, MC.Code AS Modifier_Code, CC.Code AS Component_Code, COUNT(*) AS NumberOfComb, MAX(PT.ProjTaskId) AS ProjTaskId --, MAX(ProjTaskAmtId) AS ProjTaskAmtId  
  FROM tblProjTasks PT   
   INNER JOIN tblModifierCodes MC ON PT.ModifierId = MC.ModifierID   
   INNER JOIN tblComponentCodes CC ON PT.ComponentCodeId = CC.ComponentCodeID     
  GROUP BY PT.EqpPlanId, PT.EqpProjId, CC.Code, MC.Code  
 ) PT ON PT.EqpPlanId = E.EqpPlanId AND PT.EqpProjId = EPROJ.EqpProjId AND  PT.Component_Code = IJC.Component_Code AND PT.Modifier_Code = ISNULL(IJC.Modifier_Code,MC.Code) AND PT.NumberofComb = 1   
 LEFT JOIN tblProjTasks PTST ON PTST.ExternalIdentifier = IJC.Cost_Allocation_Ref AND PTST.EqpPlanId = E.EqpPlanId AND PTST.EqpProjId = EPROJ.EqpProjId  
  
/******************************************************  
VV 5-Nov-2008   
  
Use cost allocation configuration to determine which fields are imported  
for external cost allocations  
******************************************************/  
DECLARE @WorkGroup bit, @CostCentre bit, @PartsCostExpense bit, @LabourCostExpense bit,   
@MiscCostExpense bit, @CostBearer bit, @LabourActivity bit ,@JobCode bit  
  
SELECT       
 @WorkGroup=WorkGroup, @CostCentre=CostCentre, @PartsCostExpense=PartsCostExpense,   
 @LabourCostExpense=LabourCostExpense, @MiscCostExpense=MiscCostExpense, @CostBearer=CostBearer,   
 @LabourActivity=LabourActivity,@JobCode=JobCode  
 FROM COST_ALLOCATION_CONFIGURATION  
  
UPDATE JC SET  
 Job_Code =CASE @JobCode WHEN 0 THEN Job_Code ELSE NULL END,  
 Work_Group=CASE @WorkGroup WHEN 0 THEN Work_Group ELSE NULL END,  
 Cost_Centre =CASE @CostCentre WHEN 0 THEN Cost_Centre ELSE NULL END,  
 /*VV Cost bearer is a required field in cost allocations*/  
 --Cost_Bearer=CASE @CostBearer WHEN 0 THEN Cost_Bearer ELSE NULL END,  
 Parts_Expense=CASE @PartsCostExpense WHEN 0 THEN Parts_Expense ELSE NULL END,  
 Labour_Expense=CASE @LabourCostExpense WHEN 0 THEN Labour_Expense ELSE NULL END,  
 Misc_Expense=CASE @MiscCostExpense WHEN 0 THEN Misc_Expense ELSE NULL END,  
 Labour_Activity=CASE @LabourActivity WHEN 0 THEN Labour_Activity ELSE NULL END  
FROM   
#I_JOB_COSTS JC  
  
   
  
  
  
/***************************************************/  
 -- LOG AND DELETE INVALID ROWS  
/***************************************************/  
DECLARE @tmpMessage VARCHAR(MAX)  
SET @tmpMessage = ''  
  
  
--VV 5-Nov-2008 Reject cost allocations with system source AMT  
  
SELECT @tmpMessage = @tmpMessage + CAST(IJC.Id AS VARCHAR) + ' - Cannot import AMT System source: ' +SS.System_Source_Code  
  + @LineBreak  
FROM   
#I_JOB_COSTS IJC  
 INNER JOIN  
SYSTEM_SOURCE SS  
 ON IJC.System_Source=SS.System_Source_Code  
WHERE SS.AMTSystemSource=1  
  
IF @tmpMessage <> ''  
BEGIN  
 DELETE IJC  
 FROM   
 #I_JOB_COSTS IJC  
 INNER JOIN  
SYSTEM_SOURCE SS  
 ON IJC.System_Source=SS.System_Source_Code  
WHERE SS.AMTSystemSource=1  
  
 SET @Message = @Message + @LineBreak + 'ERROR: Cannot add/update. One or more required field is null for following record number(s): '+ @LineBreak + @tmpMessage  
 SET @tmpMessage = ''  
END   
  
-- Delete if any of the required field is not supplied  
SELECT @tmpMessage = @tmpMessage + CAST(IJC.Id AS VARCHAR) + CASE   
 WHEN IJC.EqpPlanId IS NULL THEN ' - Unable to find the Equipment'  
 WHEN IJC.EqpProjId IS NULL THEN ' - Unable to find the Projection'  
 WHEN IJC.Component_Code IS NULL THEN ' - Component_Code is not specified'  
 WHEN IJC.Model IS NULL THEN ' - Model is not specified'  
 WHEN IJC.Serial_No IS NULL THEN ' -  Serial_No is not specified'  
 WHEN Scheduling_Task_Link IS NULL THEN ' - Scheduling_Task_Link is not Specified'  
 WHEN Cost_Allocation_Ref IS NULL THEN ' - Cost_Allocation_Ref is not Specified'  
 ELSE ''  
END + @LineBreak  
FROM #I_JOB_COSTS IJC  
WHERE IJC.EqpPlanId IS NULL OR IJC.EqpProjId IS NULL OR IJC.Component_Code IS NULL OR IJC.Model IS NULL OR IJC.Serial_No IS NULL OR IJC.Scheduling_Task_Link IS NULL OR IJC.Cost_Allocation_Ref IS NULL  
  
IF @tmpMessage <> ''  
BEGIN  
 DELETE IJC  
 FROM #I_JOB_COSTS IJC  
 WHERE IJC.EqpPlanId IS NULL OR IJC.EqpProjId IS NULL OR IJC.Component_Code IS NULL OR IJC.Model IS NULL OR IJC.Serial_No IS NULL OR IJC.Scheduling_Task_Link IS NULL OR IJC.Cost_Allocation_Ref IS NULL  
  
 SET @Message = @Message + @LineBreak + 'ERROR: Cannot add/update. One or more required field is null for following record number(s): '+ @LineBreak + @tmpMessage  
 SET @tmpMessage = ''  
END  
  
-- Delete if not Prime Currency  
SELECT @tmpMessage = @tmpMessage + CAST(IJC.Id AS VARCHAR) + @LineBreak  
FROM #I_JOB_COSTS IJC  
WHERE IJC.Currency <> @PrimeCurrency  
IF @tmpMessage <> ''  
BEGIN  
 DELETE IJC  
 FROM #I_JOB_COSTS IJC  
 WHERE IJC.Currency <> @PrimeCurrency  
  
 SET @Message = @Message + @LineBreak + 'ERROR: Cannot add/update. Primary currency is not used in the following record number(s): '+ @LineBreak + @tmpMessage  
 SET @tmpMessage = ''  
END  
  
-- Delete if Duplicate   
SELECT @tmpMessage = @tmpMessage + CAST(IJC.Id AS VARCHAR) + CASE   
 WHEN DUP.EC > 1 THEN ' - Duplicate Equipment Plan'  
 WHEN DUP.CC > 1 THEN ' - Duplicate Component Code'  
 WHEN DUP.MC > 1 THEN ' - Duplicate Modifier Code'  
 WHEN DUP.CUR > 1 THEN ' - Duplicate Currency'  
END + @LineBreak  
FROM #I_JOB_COSTS IJC  
 INNER JOIN   
 (  
  SELECT Cost_Allocation_Ref, COUNT(DISTINCT EqpPlanId) AS EC,COUNT(DISTINCT Component_Code) CC, COUNT(Distinct Modifier_Code) MC, COUNT(DISTINCT Currency) CUR  
  FROM #I_JOB_COSTS  
  GROUP BY Cost_Allocation_Ref  
 ) DUP ON DUP.Cost_Allocation_Ref = IJC.Cost_Allocation_Ref AND (DUP.EC > 1 OR DUP.CC > 1 OR DUP.MC > 1 OR DUP.CUR > 1)  
  
IF @tmpMessage <> ''  
BEGIN  
 DELETE IJC   
 FROM #I_JOB_COSTS IJC  
 INNER JOIN   
 (  
  SELECT Cost_Allocation_Ref, COUNT(DISTINCT EqpPlanId) AS EC,COUNT(DISTINCT Component_Code) CC, COUNT(Distinct Modifier_Code) MC, COUNT(DISTINCT Currency) CUR  
  FROM #I_JOB_COSTS  
  GROUP BY Cost_Allocation_Ref  
 ) DUP ON DUP.Cost_Allocation_Ref = IJC.Cost_Allocation_Ref AND (DUP.EC > 1 OR DUP.CC > 1 OR DUP.MC > 1 OR DUP.CUR > 1)  
  
 SET @Message = @Message + @LineBreak + 'ERROR: Cannot add/update. For a Cost Allocation Ref, there are mulitples of EqpPlan or Comp Code or Mod Code or Currency exists in the following record number(s): '+ @LineBreak + @tmpMessage  
 SET @tmpMessage = ''  
END  
  
-- Delete if not simple mode  
SELECT @tmpMessage = @tmpMessage + CAST(IJC.Id AS VARCHAR) + @LineBreak  
FROM #I_JOB_COSTS IJC   
LEFT JOIN  
( SELECT PT.ProjTaskId, COUNT(PTA.ProjTaskAmtId) AS JobCount, MAX(ISNULL(PT.Rotable_Part_Id,0)) AS Rotable_Part_Id  
 FROM tblProjtasks PT  
  INNER JOIN tblProjTaskOpts PTO ON  PTO.ProjTaskId = PT.ProjTaskId  
  INNER JOIN tblProjTaskAmts PTA ON PTA.ProjTaskOptId = PTO.ProjTaskOptId     
 GROUP BY PT.ProjTaskId    
) DMPT ON IJC.ProjTaskId = DMPT.ProjTaskId   
WHERE IJC.ProjTaskId IS NOT NULL AND (DMPT.JobCount > 1 OR DMPT.Rotable_Part_Id > 0)  
  
IF @tmpMessage <> ''  
BEGIN  
 DELETE IJC   
 FROM  #I_JOB_COSTS IJC  
 LEFT JOIN  
 ( SELECT PT.ProjTaskId, COUNT(PTA.ProjTaskAmtId) AS JobCount, MAX(ISNULL(PT.Rotable_Part_Id,0)) AS Rotable_Part_Id  
  FROM tblProjtasks PT  
   INNER JOIN tblProjTaskOpts PTO ON  PTO.ProjTaskId = PT.ProjTaskId  
   INNER JOIN tblProjTaskAmts PTA ON PTA.ProjTaskOptId = PTO.ProjTaskOptId    
  WHERE PT.ProjTaskId IN (SELECT DISTINCT ProjTaskID FROM #I_JOB_COSTS WHERE ProjTaskID IS NOT NULL)  
  GROUP BY PT.ProjTaskId   
 ) DMPT ON IJC.ProjTaskId = DMPT.ProjTaskId  
 WHERE IJC.ProjTaskId IS NOT NULL AND (DMPT.JobCount > 1 OR DMPT.Rotable_Part_Id > 0)  
  
 SET @Message = @Message + @LineBreak + 'ERROR: Cannot update. The Cost Allocation is refering to a detailed mode task for the following record number(s): '+ @LineBreak + @tmpMessage  
 SET @tmpMessage = ''  
END  
  
-- Delete if Delete_Cost_Allocation = 1  
IF EXISTS ( SELECT IJC.Id FROM  #I_JOB_COSTS IJC WHERE IJC.Delete_Cost_Allocation = 1)  
BEGIN  
 UPDATE PTA  
 SET  
  PTA.LaborCost = 0,  
  PTA.PartsCost = 0,  
  PTA.MiscCost = 0,  
  PTA.LaborHours = 0,  
  PTA.Duration = 0  
 FROM #I_JOB_COSTS  IJC  
  INNER JOIN COST_ALLOCATION CA ON IJC.CostAllocationId = CA.Cost_Allocation_Id  
  INNER JOIN tblProjTaskAmts PTA ON CA.Proj_Task_Amt_Id = PTA.ProjTaskAmtId  
 WHERE IJC.Delete_Cost_Allocation = 1  
  
 DELETE CA  
 FROM COST_ALLOCATION CA  
  INNER JOIN #I_JOB_COSTS  IJC ON IJC.CostAllocationId = CA.Cost_Allocation_Id  
 WHERE IJC.Delete_Cost_Allocation = 1  
  
 DELETE FROM #I_JOB_COSTS WHERE Delete_Cost_Allocation = 1  
END  
  
-- Delete if Cost bearer NOT in the table  
SELECT @tmpMessage = @tmpMessage + CAST(IJC.Id AS VARCHAR) + @LineBreak  
FROM #I_JOB_COSTS IJC  
 LEFT JOIN tblCostBearers CB ON CB.WO_Code = IJC.Cost_Bearer  
WHERE CB.CostBearerId IS NULL   
/*VV 5-Nov-08*/AND IJC.Cost_Bearer IS NOT NULL  
IF @tmpMessage <> ''  
BEGIN  
 DELETE IJC  
 FROM #I_JOB_COSTS IJC  
  LEFT JOIN tblCostBearers CB ON CB.WO_Code = IJC.Cost_Bearer  
 WHERE CB.CostBearerId IS NULL  
 /*VV 5-Nov-08*/AND IJC.Cost_Bearer IS NOT NULL  
  
 SET @Message = @Message + @LineBreak + 'ERROR: Cannot add/update. Cost bearer not found or mismatch in the following record number(s): '+ @LineBreak + @tmpMessage  
 SET @tmpMessage = ''  
END  
/***************************************************/  
 -- ADD NEW CODES  
/***************************************************/  
DECLARE @NumOfRecCreated INT  
DECLARE @SubSystemId INT  
  
-- Component Codes   
IF EXISTS(  
  SELECT DISTINCT IJC.Component_Code  
  FROM #I_JOB_COSTS IJC  
   LEFT JOIN tblComponentCodes CC ON CC.Code = IJC.Component_Code   
  WHERE CC.ComponentCodeId IS NULL  
)  
BEGIN  
  
 SELECT TOP 1 @SubSystemId = SubSystemID FROM tblSubSystems WHERE Unassigned <> 0  
  
 INSERT INTO tblComponentCodes (Code, SubSystemId, [Description], BudgetCode, LastModByUserId, LastModDate, CreateByUserId, CreateDate)  
 SELECT DISTINCT IJC.Component_Code, @SubSystemId, IJC.Component_Code, 1, 0, @TodaysDate, 0, @TodaysDate  
 FROM #I_JOB_COSTS IJC  
  LEFT JOIN tblComponentCodes CC ON CC.Code = IJC.Component_Code   
 WHERE CC.ComponentCodeId IS NULL  
  
 SET @NumOfRecCreated = @@ROWCOUNT  
 IF @NumOfRecCreated > 0  
  SET @Warnings = @Warnings+ 'WARNING: ' + CAST(@NumOfRecCreated AS VARCHAR) + ' new component code record(s) created;' + @LineBreak  
END  
  
-- Modifier Codes  
INSERT INTO tblModifierCodes  
                 (Code, [Description], BudgetCode,LastModByUserId, LastModDate, CreateByUserId, CreateDate)  
SELECT   
 DISTINCT  IJC.Modifier_Code, IJC.Modifier_Code, 1, 0, @TodaysDate, 0, @TodaysDate  
FROM  
 #I_JOB_COSTS  IJC  
 LEFT JOIN tblModifierCodes MC ON MC.Code =  IJC.Modifier_Code   
WHERE MC.ModifierId IS NULL AND IJC.Modifier_Code IS NOT NULL  
  
SET @NumOfRecCreated = @@ROWCOUNT  
IF @NumOfRecCreated > 0  
 SET @Warnings = @Warnings+ 'WARNING: ' + CAST(@NumOfRecCreated AS VARCHAR) + ' new modifier code record(s) created;' + @LineBreak  
  
-- Add JobCode if it's a new one  
DECLARE @GlobalJobCodeId int  
SET @GlobalJobCodeId = 0  
SELECT TOP 1 @GlobalJobCodeId=Global_Job_Id FROM GLOBAL_JOB_CODES WHERE Default_Record<>0  
IF @GlobalJobCodeId>0  
BEGIN  
 INSERT tblJobCodes (Code, Description, LastModByUserId, LastModDate, CreateByUserId, CreateDate, Global_Job_Code_Id)  
 SELECT DISTINCT IJC.Job_Code, IJC.Job_Code, 0, GETDATE(), 0, GETDATE(), @GlobalJobCodeId  
 FROM #I_JOB_COSTS  IJC  
 LEFT JOIN tblJobCodes JC ON JC.Code =  IJC.Job_Code  
 WHERE JC.JobCodeId IS NULL AND IJC.Job_Code IS NOT NULL  
   
 SET @NumOfRecCreated = @@ROWCOUNT  
 IF @NumOfRecCreated > 0  
  SET @Warnings = @Warnings+ 'WARNING: ' + CAST(@NumOfRecCreated AS VARCHAR) + ' new Job code record(s) created;' + @LineBreak  
  
END  
  
INSERT INTO tblModifierCodes  
                      (Code, [Description], BudgetCode,LastModByUserId, LastModDate, CreateByUserId, CreateDate)  
SELECT   
 DISTINCT  IJC.Modifier_Code, IJC.Modifier_Code, 1, 0, @TodaysDate, 0, @TodaysDate  
FROM  
 #I_JOB_COSTS  IJC  
 LEFT JOIN tblModifierCodes MC ON MC.Code =  IJC.Modifier_Code   
WHERE MC.ModifierId IS NULL AND IJC.Modifier_Code IS NOT NULL  
  
SET @NumOfRecCreated = @@ROWCOUNT  
IF @NumOfRecCreated > 0  
 SET @Warnings = @Warnings+ 'WARNING: ' + CAST(@NumOfRecCreated AS VARCHAR) + ' new modifier code record(s) created;' + @LineBreak  
  
-- Work Group  
INSERT INTO WORK_GROUP  
                      (Description, Site_ID, Work_Group_Code)  
SELECT   
 DISTINCT IJC.Work_Group, IJC.SiteId, IJC.Work_Group  
FROM  
 #I_JOB_COSTS IJC  
 LEFT JOIN WORK_GROUP WG ON WG.Work_Group_Code = IJC.Work_Group  
WHERE  IJC.Work_Group IS NOT NULL AND WG.Work_Group_Id IS NULL  
  
SET @NumOfRecCreated = @@ROWCOUNT  
IF @NumOfRecCreated > 0  
 SET @Warnings = @Warnings+ 'WARNING: ' + CAST(@NumOfRecCreated AS VARCHAR) + ' new work group record(s) created;' + @LineBreak  
  
-- Cost Expense (P,L,M)  
INSERT INTO COST_EXPENSE  
                      (Cost_Expense_Code, Cost_Expense_Desc)  
SELECT   
  DISTINCT IJC.Parts_Expense,IJC.Parts_Expense  
FROM  
 #I_JOB_COSTS IJC  
 LEFT JOIN COST_EXPENSE CE ON CE.Cost_Expense_Code = IJC.Parts_Expense   
WHERE  IJC.Parts_Expense IS NOT NULL AND CE.Cost_Expense_Id IS NULL  
UNION  
SELECT   
 DISTINCT IJC.Misc_Expense,IJC.Misc_Expense  
FROM  
 #I_JOB_COSTS IJC  
 LEFT JOIN COST_EXPENSE CE ON CE.Cost_Expense_Code = IJC.Misc_Expense   
WHERE  IJC.Misc_Expense IS NOT NULL AND CE.Cost_Expense_Id IS NULL  
UNION   
SELECT   
 DISTINCT IJC.Labour_Expense,IJC.Labour_Expense  
FROM  
 #I_JOB_COSTS IJC  
 LEFT JOIN COST_EXPENSE CE ON CE.Cost_Expense_Code = IJC.Labour_Expense   
WHERE  IJC.Labour_Expense IS NOT NULL AND CE.Cost_Expense_Id IS NULL  
  
SET @NumOfRecCreated = @@ROWCOUNT  
IF @NumOfRecCreated > 0  
 SET @Warnings = @Warnings+ 'WARNING: ' + CAST(@NumOfRecCreated AS VARCHAR) + ' new cost expense record(s) created;' + @LineBreak  
  
-- Cost Centre,  
INSERT INTO COST_CENTRE  
                      (Cost_Centre_Code, Cost_Centre_Desc)  
SELECT   
 DISTINCT IJC.Cost_Centre,IJC.Cost_Centre  
FROM  
 #I_JOB_COSTS IJC  
 LEFT JOIN COST_CENTRE CC ON CC.Cost_Centre_Code = IJC.Cost_Centre  
WHERE  IJC.Cost_Centre IS NOT NULL AND CC.Cost_Centre_Id IS NULL  
  
SET @NumOfRecCreated = @@ROWCOUNT  
IF @NumOfRecCreated > 0  
 SET @Warnings = @Warnings+ 'WARNING: ' + CAST(@NumOfRecCreated AS VARCHAR) + ' new cost centre record(s) created;' + @LineBreak  
  
-- Labour Activity  
INSERT INTO tblLabourActivities  
                      (ActivityCode, LabourActivity, LastModByUserId, LastModDate, CreateByUserId, CreateDate)  
SELECT   
 DISTINCT IJC.Labour_Activity, IJC.Labour_Activity,0,@TodaysDate,0,@TodaysDate  
FROM  
 #I_JOB_COSTS IJC  
 LEFT JOIN tblLabourActivities LA ON LA.ActivityCode = IJC.Labour_Activity  
WHERE  IJC.Labour_Activity IS NOT NULL AND LA.LabourActivityId IS NULL  
  
SET @NumOfRecCreated = @@ROWCOUNT  
IF @NumOfRecCreated > 0  
BEGIN  
 --VV CR8302  
 EXEC LABOUR_RATES_MISSING_ADD_P  
 SET @Warnings = @Warnings+ 'WARNING: ' + CAST(@NumOfRecCreated AS VARCHAR) + ' new labour activity record(s) created;' + @LineBreak  
END  
  
-- System Source  
INSERT INTO SYSTEM_SOURCE  
                      (System_Source_Code)  
SELECT   
 DISTINCT  IJC.System_Source  
FROM  
 #I_JOB_COSTS  IJC  
 LEFT JOIN SYSTEM_SOURCE SS ON SS.System_Source_Code =  IJC.System_Source   
WHERE   IJC.System_Source IS NOT  NULL AND SS.System_Source_Id IS NULL  
  
SET @NumOfRecCreated = @@ROWCOUNT  
IF @NumOfRecCreated > 0  
 SET @Warnings = @Warnings+ 'WARNING: ' + CAST(@NumOfRecCreated AS VARCHAR) + ' new system source record(s) created;' + @LineBreak  
  
--UPDATE ProjTaskAMTId  
UPDATE IJC  
 SET IJC.ProjTaskAmtId = PTA.ProjTaskAmtId  
FROM #I_JOB_COSTS  IJC  
 INNER JOIN tblProjTaskOpts PTO ON  PTO.ProjTaskId = IJC.ProjTaskId  
 INNER JOIN tblProjTaskAmts PTA ON PTA.ProjTaskOptId = PTO.ProjTaskOptId  
 INNER JOIN  
 (  
  SELECT ProjtaskId, COUNT(DISTINCT Cost_Allocation_Ref) CAR  
  FROM #I_JOB_COSTS  
  GROUP BY ProjtaskId  
 )DUP ON DUP.ProjTaskId = IJC.ProjTaskId  AND DUP.CAR = 1  
WHERE NOT EXISTS ( SELECT CA.Cost_Allocation_Id FROM COST_ALLOCATION CA WHERE CA.Proj_Task_Amt_Id = PTA.ProjTaskAmtId AND CA.Cost_Allocation_Ref <> IJC.Cost_Allocation_Ref)  
-- Above Condition added by KN 15-Jan-2008  
-- Make sure the ProjTaskAmtId is not linked to some other Cost Allocation already.  
  
  
-- UNLINK COST ALLOCATIONS IF IT HAS CHANGED  
SET @tmpMessage = ''  
SELECT   
 @tmpMessage = @tmpMessage + CAST(CA.Proj_Task_Amt_Id AS VARCHAR) +','  
FROM #I_JOB_COSTS  IJC   
 INNER JOIN COST_ALLOCATION CA ON CA.Cost_Allocation_Id = IJC.CostAllocationID   
WHERE  
 CA.Proj_Task_Amt_Id IS NOT NULL AND   
 (  
  ISNULL(IJC.ProjTaskAmtId,0) <> CA.Proj_Task_Amt_Id  
  --Any other to check  
 )  
  
IF @tmpMessage <> ''  
BEGIN  
 UPDATE PTA  
 SET  
  PTA.LaborCost = 0,  
  PTA.PartsCost = 0,  
  PTA.MiscCost = 0,  
  PTA.LaborHours = 0,  
  PTA.Duration = 0  
 FROM dbo.LIST_TO_TABLE_F(@tmpMessage) IJC    
  INNER JOIN tblProjTaskAmts PTA ON IJC.List_Item = PTA.ProjTaskAmtId  
  
 SET @tmpMessage = ''  
END  
   
-- UPDATE COST ALLOCATIONS TABLE  
UPDATE CA  
 SET  
 CA.Currency_Id = IJC_U.CurrencyId,  
 CA.System_Source_Id = IJC_U.System_Source_Id,  
 CA.Component_Code_Id = IJC_U.ComponentCodeId,  
 CA.ModifierId = IJC_U.ModifierId,  
 CA.Model_Id = IJC_U.ModelId,  
 CA.Eqp_Plan_Id = IJC_U.EqpPlanId,  
 CA.Scheduling_Task_Id = IJC_U.SchedulingTaskId,  
 CA.Proj_Task_Amt_Id = IJC_U.ProjTaskAmtId  
FROM COST_ALLOCATION CA  
INNER JOIN   
(  
SELECT DISTINCT   
 IJC.CostAllocationId,  
 IJC.Cost_Allocation_Ref,   
 C.CurrencyId,  
 SS.System_Source_Id,  
 CC.ComponentCodeId,  
 MC.ModifierId,  
 M.ModelId,  
 IJC.EqpPlanId,  
 IJC.SchedulingTaskId,  
 IJC.ProjTaskAmtId  
FROM #I_JOB_COSTS IJC  
 LEFT JOIN tblCurrencies C ON C.Currency = IJC.Currency  
 LEFT JOIN SYSTEM_SOURCE SS ON SS.System_Source_Code = IJC.System_Source  
 LEFT JOIN tblComponentCodes CC ON CC.Code = IJC.Component_Code  
 LEFT JOIN tblModifierCodes MC ON MC.Code  = IJC.Modifier_Code  
 LEFT JOIN tblModels M ON  M.Model = IJC.Model     
WHERE IJC.CostAllocationId IS NOT NULL  
)  IJC_U ON IJC_U.CostAllocationId = CA.Cost_Allocation_Id  
  
  
-- RESET THE COST CODES IN THE tblProjTaskAmts for a New Cost Allocation Record  
-- VV 5-Nov-08 UPDATE #I_JOB_COSTS SET ResetProjTaskAmtCostCodes = 1 WHERE CostAllocationId IS NULL  
  
  
  
-- INSERT COST ALLOCATIONS  
INSERT INTO COST_ALLOCATION  
(  
 Cost_Allocation_Ref,  
 Currency_Id,  
 System_Source_Id,  
 Component_Code_Id,  
 Model_Id,  
 Eqp_Plan_Id,  
 ModifierId,  
 Scheduling_Task_Id,  
 Proj_Task_Amt_Id  
)  
SELECT   
 DISTINCT   
 IJC.Cost_Allocation_Ref,   
 C.CurrencyId,  
 SS.System_Source_Id,  
 CC.ComponentCodeId,  
 M.ModelId,  
 IJC.EqpPlanId,  
 MC.ModifierId,  
 IJC.SchedulingTaskId,  
 IJC.ProjTaskAmtId  
FROM    #I_JOB_COSTS IJC  
 LEFT JOIN tblCurrencies C ON C.Currency = IJC.Currency  
 LEFT JOIN SYSTEM_SOURCE SS ON SS.System_Source_Code = IJC.System_Source  
 LEFT JOIN tblComponentCodes CC ON CC.Code = IJC.Component_Code  
 LEFT JOIN tblModifierCodes MC ON MC.Code  = IJC.Modifier_Code  
 LEFT JOIN tblModels M ON  M.Model = IJC.Model    
WHERE IJC.CostAllocationId IS NULL  
  
UPDATE IJC  
 SET IJC.CostAllocationId = CA.Cost_Allocation_ID  
FROM    #I_JOB_COSTS IJC  
 LEFT JOIN COST_ALLOCATION CA ON IJC.Cost_Allocation_Ref = CA.Cost_Allocation_Ref AND ISNULL(IJC.ProjTaskAmtId,0) = ISNULL(CA.Proj_Task_Amt_Id,0) AND  CA.System_Source_Id <> 1  
WHERE IJC.CostAllocationId IS NULL  
  
-- DELETE COST ALLOCATION DETAILS  
DELETE CAD  
FROM COST_ALLOCATION_DETAIL CAD  
 INNER JOIN  #I_JOB_COSTS IJC ON CAD.Cost_Allocation_ID = IJC.CostAllocationID  
  
-- INSERT COST ALLOCATION DETAILS  
INSERT INTO COST_ALLOCATION_DETAIL(  
 Cost_Allocation_Id,   
 Work_Group_Id,   
 Cost_Centre_Id,   
 Parts_Cost_Expense_Id,   
 Labour_Cost_Expense_Id,   
 Misc_Cost_Expense_Id,   
 Cost_Bearer_Id,   
 Labour_Activity_Id,   
 Job_Code_Id,  
 Parts_Cost,   
 Misc_Cost,   
 Labour_Cost,   
 Labour_Hrs,   
 Duration_Hrs    
)  
SELECT   
 IJC.CostAllocationId,   
 WG.Work_Group_Id,  
 CCEN.Cost_Centre_Id,  
 CEP.Cost_Expense_Id,  
 CEL.Cost_Expense_Id,  
 CEM.Cost_Expense_Id,  
 CB.CostBearerId,  
 LA.LabourActivityId,  
 ISNULL(JC.JobCodeId,@DefaultProjTaskJobCodeID),  
 SUM(IJC.Parts_Sell),   
 SUM(IJC.Misc_Sell),   
 SUM(IJC.Labour_Sell),   
 SUM(IJC.Labour_Hours),   
 SUM(IJC.Duration_Hours)  
FROM    #I_JOB_COSTS IJC  
 LEFT JOIN WORK_GROUP WG ON WG.Work_Group_Code = IJC.Work_Group /* DS 2007-09-05 */ AND WG.Site_Id = IJC.SiteId /* DS 2007-09-05 */   
 LEFT JOIN COST_CENTRE CCEN ON CCEN.Cost_Centre_Code = IJC.Cost_Centre  
 LEFT JOIN COST_EXPENSE CEP ON CEP.Cost_Expense_Code = IJC.Parts_Expense   
 LEFT JOIN COST_EXPENSE CEL ON CEL.Cost_Expense_Code = IJC.Labour_Expense  
 LEFT JOIN COST_EXPENSE CEM ON CEM.Cost_Expense_Code = IJC.Misc_Expense  
 LEFT JOIN tblLabourActivities LA ON LA.ActivityCode = IJC.Labour_Activity  
 LEFT JOIN tblJobCodes JC ON JC.Code = IJC.Job_Code  
 LEFT JOIN tblCostBearers CB ON CB.WO_Code = IJC.Cost_Bearer  
GROUP BY   
 IJC.CostAllocationId,   
 WG.Work_Group_Id,  
 CCEN.Cost_Centre_Id,  
 CEP.Cost_Expense_Id,  
 CEL.Cost_Expense_Id,  
 CEM.Cost_Expense_Id,  
 CB.CostBearerId,  
 LA.LabourActivityId,  
 JC.JobCodeId  
  
  
  
-- LINK COST ALLOCATIONS  
UPDATE PTA   
SET  
 PTA.LaborCost = A.LaborCost,  
 PTA.PartsCost = A.PartsCost,  
 PTA.MiscCost = A.MiscCost,  
 PTA.LaborHours = A.LaborHours,  
 PTA.Duration = A.Duration,  
 PTA.Pricing_Date = @TodaysDate,  
   
 /* VV 5-Nov-08  
 PTA.Parts_Cost_Expense_ID = CASE WHEN A.ResetCodes = 1 THEN NULL ELSE PTA.Parts_Cost_Expense_ID END ,  
 PTA.Labour_Cost_Expense_Id = CASE WHEN A.ResetCodes = 1 THEN NULL ELSE PTA.Labour_Cost_Expense_Id END,  
 PTA.Misc_Cost_Expense_Id = CASE WHEN A.ResetCodes = 1 THEN NULL ELSE PTA.Misc_Cost_Expense_Id END,  
 PTA.Cost_Centre_ID = CASE WHEN A.ResetCodes = 1 THEN NULL ELSE PTA.Cost_Centre_ID END,  
 PTA.Work_Group_Id = CASE WHEN A.ResetCodes = 1 THEN NULL ELSE PTA.Work_Group_Id END,  
 PTA.Cost_Bearer_ID = CASE WHEN A.ResetCodes = 1 THEN NULL ELSE PTA.Cost_Bearer_ID END,  
 PTA.Labour_Activity_Id = CASE WHEN A.ResetCodes = 1 THEN NULL ELSE PTA.Labour_Activity_Id END  
 */  
  
 PTA.Parts_Cost_Expense_ID = CASE @PartsCostExpense WHEN 0 THEN NULL ELSE PTA.Parts_Cost_Expense_ID END ,  
 PTA.Labour_Cost_Expense_Id = CASE @LabourCostExpense WHEN 0 THEN NULL ELSE PTA.Labour_Cost_Expense_Id END,  
 PTA.Misc_Cost_Expense_Id = CASE @MiscCostExpense WHEN 0 THEN NULL ELSE PTA.Misc_Cost_Expense_Id END,  
 PTA.Cost_Centre_ID = CASE @CostCentre WHEN 0 THEN NULL ELSE PTA.Cost_Centre_ID END,  
 PTA.Work_Group_Id = CASE @WorkGroup WHEN 0 THEN NULL ELSE PTA.Work_Group_Id END,  
 PTA.Cost_Bearer_ID = CASE @CostBearer WHEN 0 THEN NULL ELSE PTA.Cost_Bearer_ID END,  
 PTA.Labour_Activity_Id = CASE @LabourActivity WHEN 0 THEN NULL ELSE PTA.Labour_Activity_Id END,  
 PTA.JobCodeId = CASE @JobCode WHEN 0 THEN NULL ELSE PTA.JobCodeId END  
  
  
FROM tblProjTaskAmts PTA  
 INNER JOIN  
 (  
  SELECT   
     DISTINCT CA.Proj_Task_Amt_Id,SUM(Parts_Cost) AS PartsCost, SUM(Misc_Cost) AS MiscCost, SUM(Labour_Cost) AS LaborCost,   
    SUM(Labour_Hrs) AS LaborHours, SUM(Duration_Hrs) AS Duration/* VV 5-Nov-2008,IJC.ResetProjTaskAmtCostCodes AS ResetCodes*/  
  FROM  COST_ALLOCATION CA  
   /*VV 5-Nov-2008*/  
   INNER JOIN SYSTEM_SOURCE SS ON CA.System_Source_Id=SS.System_Source_Id  
      
   INNER JOIN COST_ALLOCATION_DETAIL CAD  ON CA.Cost_Allocation_Id=CAD.Cost_Allocation_Id  
   /* VV 4-Sep-07*/  
   INNER JOIN (SELECT DISTINCT CostAllocationId/*VV 5-Nov-2008, ResetProjTaskAmtCostCodes*/ FROM #I_JOB_COSTS) IJC ON IJC.CostAllocationId = CA.Cost_Allocation_Id  
   /*INNER JOIN #I_JOB_COSTS IJC ON IJC.CostAllocationId = CA.Cost_Allocation_Id*/  
  GROUP BY CA.Proj_Task_Amt_Id/*VV 5-Nov-2008,IJC.ResetProjTaskAmtCostCodes*/  
 ) A  
 ON PTA.ProjTaskAmtId=A.Proj_Task_Amt_Id  
WHERE PTA.ProjTaskAmtId IN (SELECT DISTINCT ProjTaskAmtId FROM #I_JOB_COSTS WHERE ProjTaskAmtId IS NOT NULL)  
  
--Update Cost Allocations  
UPDATE CAD SET  
CAD.Job_Code_Id=CASE    
    /*For internal cost allocations update the field only if there is a value in Proj Job*/   
    WHEN SS.AMTSystemSource=1 THEN ISNULL(PTA.JobCodeId,CAD.Job_Code_Id)   
  
    /*External CA field shall be updated from AMT Proj Job*/         
    WHEN SS.AMTSystemSource=0 AND @JobCode=1 THEN PTA.JobCodeId  
      
    /*External CA  the value for the field shall come from CA (A.AMTSystemSource=0 AND @JobCode=0)*/  
    ELSE CAD.Job_Code_Id END,   
  
CAD.Labour_Activity_Id=CASE    
    /*For internal cost allocations update the field only if there is a value in Proj Job*/   
    WHEN SS.AMTSystemSource=1 THEN ISNULL(PTA.Labour_Activity_Id,CAD.Labour_Activity_Id)   
  
    /*External CA field shall be updated from AMT Proj Job*/         
    WHEN SS.AMTSystemSource=0 AND @LabourActivity=1 THEN PTA.Labour_Activity_Id  
      
    /*External CA  the value for the field shall come from CA (A.AMTSystemSource=0 AND @LabourActivity=0)*/  
    ELSE CAD.Labour_Activity_Id END,   
  
CAD.Labour_Cost_Expense_ID=CASE    
    /*For internal cost allocations update the field only if there is a value in Proj Job*/   
    WHEN SS.AMTSystemSource=1 THEN ISNULL(PTA.Labour_Cost_Expense_ID,CAD.Labour_Cost_Expense_ID)   
  
    /*External CA field shall be updated from AMT Proj Job*/         
    WHEN SS.AMTSystemSource=0 AND @LabourCostExpense=1 THEN PTA.Labour_Cost_Expense_ID  
      
    /*External CA  the value for the field shall come from CA (A.AMTSystemSource=0 AND @LabourCostExpense=0)*/  
    ELSE CAD.Labour_Cost_Expense_ID END,   
  
CAD.Parts_Cost_Expense_ID=CASE    
    /*For internal cost allocations update the field only if there is a value in Proj Job*/   
    WHEN SS.AMTSystemSource=1 THEN ISNULL(PTA.Parts_Cost_Expense_ID,CAD.Parts_Cost_Expense_ID)   
  
    /*External CA field shall be updated from AMT Proj Job*/         
    WHEN SS.AMTSystemSource=0 AND @PartsCostExpense=1 THEN PTA.Parts_Cost_Expense_ID  
      
    /*External CA  the value for the field shall come from CA (A.AMTSystemSource=0 AND @PartsCostExpense=0)*/  
    --VV 9-Feb-2009  
    ELSE CAD.Parts_Cost_Expense_ID END,  
  
CAD.Misc_Cost_Expense_ID=CASE    
    /*For internal cost allocations update the field only if there is a value in Proj Job*/   
    WHEN SS.AMTSystemSource=1 THEN ISNULL(PTA.Misc_Cost_Expense_ID,CAD.Misc_Cost_Expense_ID)   
  
    /*External CA field shall be updated from AMT Proj Job*/         
    WHEN SS.AMTSystemSource=0 AND @MiscCostExpense=1 THEN PTA.Misc_Cost_Expense_ID  
      
    /*External CA  the value for the field shall come from CA (A.AMTSystemSource=0 AND @MiscCostExpense=0)*/  
    ELSE CAD.Misc_Cost_Expense_ID END,  
  
CAD.Cost_Bearer_ID=CASE    
    /*For internal cost allocations update the field only if there is a value in Proj Job*/   
    WHEN SS.AMTSystemSource=1 THEN ISNULL(PTA.Cost_Bearer_ID,CAD.Cost_Bearer_ID)   
  
    /*External CA field shall be updated from AMT Proj Job*/         
    WHEN SS.AMTSystemSource=0 AND @CostBearer=1 THEN PTA.Cost_Bearer_ID  
      
    /*External CA  the value for the field shall come from CA (A.AMTSystemSource=0 AND @CostBearer=0)*/  
    ELSE CAD.Cost_Bearer_ID END,  
  
CAD.Cost_Centre_ID=CASE    
    /*For internal cost allocations update the field only if there is a value in Proj Job*/   
    WHEN SS.AMTSystemSource=1 THEN ISNULL(PTA.Cost_Centre_ID,CAD.Cost_Centre_ID)   
  
    /*External CA field shall be updated from AMT Proj Job*/         
    WHEN SS.AMTSystemSource=0 AND @CostCentre=1 THEN PTA.Cost_Centre_ID  
      
    /*External CA  the value for the field shall come from CA (A.AMTSystemSource=0 AND @CostCentre=0)*/  
    ELSE CAD.Cost_Centre_ID END,   
  
CAD.Work_Group_Id=CASE    
    /*For internal cost allocations update the field only if there is a value in Proj Job*/   
    WHEN SS.AMTSystemSource=1 THEN ISNULL(PTA.Work_Group_Id,CAD.Work_Group_Id)   
  
    /*External CA field shall be updated from AMT Proj Job*/         
    WHEN SS.AMTSystemSource=0 AND @WorkGroup=1 THEN PTA.Work_Group_Id  
      
    /*External CA  the value for the field shall come from CA (A.AMTSystemSource=0 AND @WorkGroup=0)*/  
    ELSE CAD.Work_Group_Id END  
FROM  
tblProjTaskAmts PTA  
 INNER JOIN  
COST_ALLOCATION CA  
 ON PTA.ProjTaskAmtId=CA.Proj_Task_Amt_Id  
 INNER JOIN  
COST_ALLOCATION_DETAIL CAD  
 ON CA.Cost_Allocation_Id=CAD.Cost_Allocation_Id  
 INNER JOIN  
SYSTEM_SOURCE SS  
 ON CA.System_Source_Id=SS.System_Source_Id  
 INNER JOIN  
#I_JOB_COSTS JC  
 ON CA.Cost_Allocation_Id=JC.CostAllocationid  
  
DROP TABLE #I_JOB_COSTS  
  
--GD 26 Aug 11 E-610 write error description for connector  
  IF(@InterfaceSource=1)  
  BEGIN  
   IF(len(@Message) > 0)  
   BEGIN  
    INSERT INTO IMPORT_ERROR(ImportFileName,ErrorDescription,LastModDate,ImportErrorTypeId,ImportSourceId)  
    SELECT @InterfaceName AS ImportFileName,CASE WHEN len(@Message)>8000 THEN SUBSTRING(@Message,1,8000) ELSE @Message END AS ErrorDescription,GETDATE(),3,1  
    END  
   IF(len(@Warnings) > 0)  
   BEGIN  
    INSERT INTO IMPORT_ERROR(ImportFileName,ErrorDescription,LastModDate,ImportErrorTypeId,ImportSourceId)  
    SELECT @InterfaceName AS ImportFileName,CASE WHEN len(@Warnings)>8000 THEN SUBSTRING(@Warnings,1,8000) ELSE @Warnings END,GETDATE(),4,1  
   END  
  END   
    
RETURN  
  
  
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[EQUIPMENT_IMPORT_CODES_CREATE_OR_GET]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[EQUIPMENT_IMPORT_CODES_CREATE_OR_GET]
GO

CREATE Procedure EQUIPMENT_IMPORT_CODES_CREATE_OR_GET
/******************************************************************************
	File: 
	Name: EQUIPMENT_IMPORT_CODES_CREATE_OR_GET

	Called By: Equipment Import

	Desc: Gets/creates different code
             

	Auth: Sergey Ivanov
	Date: 28-May-2007
*******************************************************************************
		Change History
*******************************************************************************
Date:		Author:		Description:
--------	--------	----------------------------------------
29 Jun 07	SI			Fix a small bug with @EquipClass <> ''
07 Feb 08	KN			Added ParentEquipName..
11 Nov 08	KN			Display warning , if parent equipment does not exist rather than error
01 Dec 08	KN			Added new check for Duplicate Equipment Names
07 Jan 09	AL			CR7790: Changed Uom to be 50 in length
01 Apr 09	KN			Checked the Cost Bearer with WOCode
12 Jun 09	AL			Replaced usp_Add_Manufacturer with SYSTEM_TABLE_EDIT_P
14 Jan 11	KN			E#403-Support Datebased Equipment
26 Aug 11	TP			E615 : Changed @CostResponsibility parameter from VARCHAR(10) to VARCHAR(50)
28 Sep 11	DA			E635 : Changed @@EquipClass, @EquipGroup, @EqpGroupEx, @EqpClassEx from VARCHAR(10) to VARCHAR(50)
*******************************************************************************/
	/* Param List */
	@EquipmentTypeId INT,
	@EqpPlan VARCHAR(50),
	/*DA E635 */
	@EquipClass VARCHAR(50),
	@EquipGroup VARCHAR(50),
	@Manufacturer VARCHAR(20),
	@Model VARCHAR(20),
	@SerialNumber VARCHAR(50),
	@RegCounter VARCHAR(20),
	@Fleet VARCHAR(50),
	--AL: 07/01/09
	--@Uom VARCHAR(5),
	@Uom VARCHAR(50),
	@Location VARCHAR(10),
	@Criticality VARCHAR(10),
	@CostCategory VARCHAR(10),
	@CostResponsibility VARCHAR(50),
	@Region VARCHAR(10),
	@Division VARCHAR(10),
	@Industry VARCHAR(50),
	@IndustryGroup VARCHAR(50),
	@CostCentre VARCHAR(30),
	@CostBearer VARCHAR(50),
	@ParentEquipName VARCHAR(50)
AS

DECLARE 
	@EqpPlanId INT,
	@ManufacturerId INT,
	@ModelId INT,
	@FleetId INT,
	@IsFleetFound BIT,
	@PrimaryQUOMId INT,
	@EqpLocationId INT,
	@EqpClassCriticalityId INT,
	@EqpCategoryId INT,
	@CostResponsibilityId INT,
	@RegionId INT,
	@DivisionId INT,
	@IndGrpId INT,
	@CostCentreId INT,
	@DefaultCostBearerId INT,
	@IsEqpTerminated BIT,
	@IsEqpInterfaceUpdateAllowed BIT,
	@DefaultAnnualUtilisation FLOAT,
	@DefaultEquipmentEndDate DATETIME,
	@ParentEqpPlanId INT,
	@Warnings VARCHAR(8000)
SET @Warnings = ''

SELECT	TOP 1 @DefaultAnnualUtilisation = DefaultAnnualUtilisation, @DefaultEquipmentEndDate = DefaultEquipmentEndDate
FROM	AMT_VARIABLE


IF @EquipmentTypeId IN (4,5) -- Centreline, Modeling
	SELECT	@EqpPlanId = epl.EqpPlanId, @IsEqpTerminated = epl.Eqp_Terminated, @IsEqpInterfaceUpdateAllowed = epl.IsEqpInterfaceUpdateAllowed
	FROM	tblEqpPlans epl
			LEFT JOIN tblEquipment eqp ON eqp.EquipmentId = epl.EquipmentId			
	WHERE	epl.EqpPlan = @EqpPlan
ELSE
	SELECT	@EqpPlanId = epl.EqpPlanId, @IsEqpTerminated = epl.Eqp_Terminated, @IsEqpInterfaceUpdateAllowed = epl.IsEqpInterfaceUpdateAllowed
	FROM	tblEqpPlans epl
			LEFT JOIN tblEquipment eqp ON eqp.EquipmentId = epl.EquipmentId
	WHERE	UPPER(eqp.SerialNumber) = UPPER(@SerialNumber) AND UPPER(epl.Reg_Counter) = UPPER(@RegCounter)


IF ISNULL(@IsEqpInterfaceUpdateAllowed,1) = 1 AND ISNULL(@IsEqpTerminated,0) = 0
BEGIN
	IF @Model <> ''
	BEGIN
		DECLARE	@ManufacturerEx VARCHAR(20),
				/*DA E635 */
				@EqpGroupEx VARCHAR(50),
				@EqpClassEx VARCHAR(50)
		SELECT	@ModelId = mdl.ModelId, 
				@ManufacturerId = mdl.ManufacturerId,
				@ManufacturerEx = mnf.Manufacturer, 
				@EqpGroupEx = egr.Model_Family_Code,
				@EqpClassEx = ecl.Eqp_Class_Code
		FROM	tblModels mdl
				LEFT JOIN tblManufacturers mnf ON mnf.ManufacturerId = mdl.ManufacturerId
				LEFT JOIN MODEL_FAMILY egr ON egr.Model_Family_Id = mdl.Model_Family_Id
				LEFT JOIN EQP_CLASS ecl ON ecl.Eqp_Class_Id = egr.Eqp_Class_Id
		WHERE	UPPER(Model) = UPPER(@Model)
		IF @ModelId IS NULL AND @Manufacturer <> ''
		BEGIN
			--DECLARE	@ManufacturerId INT
			SELECT	@ManufacturerId = ManufacturerId
			FROM	tblManufacturers mnf	
			WHERE	UPPER(Manufacturer) = UPPER(@Manufacturer)
			IF @ManufacturerId IS NULL
			BEGIN
	--			INSERT tblManufacturers(Manufacturer, ManufacturerDesc, Manufacturer_Code)
	--			VALUES(@Manufacturer, @Manufacturer, SUBSTRING(@Manufacturer, 1, 2))
	--			SET @ManufacturerId = SCOPE_IDENTITY()
				DECLARE @ManufacturerCode VARCHAR(2),@Cmd2 varchar(MAX)
				SET @ManufacturerCode = SUBSTRING(@Manufacturer, 1, 2)
				
				--AL: 12/06/09
				SET @Cmd2=''''+@Manufacturer+''','''+@Manufacturer+''','''+@ManufacturerCode+''''
				EXEC SYSTEM_TABLE_EDIT_P @TableName='tblManufacturers',@ID=@ManufacturerId OUTPUT,
										@Cmd1='Manufacturer,ManufacturerDesc,Manufacturer_Code',
										@Cmd2=@Cmd2
				--EXEC usp_Add_Manufacturer @Manufacturer=@Manufacturer, @ManufacturerDesc=@Manufacturer, 
				--		@Manufacturer_Code=@ManufacturerCode, @NewManufacturerId=@ManufacturerId OUTPUT
			END
			DECLARE @EqpGroupId INT
			SELECT	@EqpGroupId = egr.Model_Family_Id,
					@EqpClassEx = ecl.Eqp_Class_Code
			FROM	MODEL_FAMILY egr
					LEFT JOIN EQP_CLASS ecl ON ecl.Eqp_Class_Id = egr.Eqp_Class_Id
			WHERE	UPPER(egr.Model_Family_Code) = UPPER(@EquipGroup)
			IF @EqpGroupId IS NULL
			BEGIN
				DECLARE @EqpClassId INT
				SELECT	@EqpClassId = ecl.Eqp_Class_Id
				FROM	EQP_CLASS ecl
				WHERE	ecl.Eqp_Class_Code = @EquipClass
				IF @EqpClassId IS NULL AND @EquipClass <> ''
				BEGIN
					INSERT EQP_CLASS(Eqp_Class_Code, Eqp_Class_Desc)
					VALUES(@EquipClass, @EquipClass)
					SET @EqpClassId = SCOPE_IDENTITY()
				END
				INSERT MODEL_FAMILY(Eqp_Class_Id, Model_Family_Code, Model_Family_Desc)
				VALUES(@EqpClassId, @EquipGroup, @EquipGroup)
				SET @EqpGroupId = SCOPE_IDENTITY()
			END
			ELSE -- check inconsistence
				IF UPPER(@EqpClassEx) <> UPPER(@EquipClass)
					SET @Warnings = @Warnings + 'The Equipment Group ''' + @EquipGroup + ''' is associated with ''' + @EqpClassEx + ''' Equipment Class. The requested association with Equipment Class ''' + @EquipClass + ''' is ignored.' + CHAR(13) + CHAR(10)
			INSERT tblModels(Model, ModelDesc, ManufacturerId, Model_Family_Id)
			VALUES(@Model, @Model, @ManufacturerId, @EqpGroupId)
			SET @ModelId = SCOPE_IDENTITY()
		END
		ELSE  -- check inconsistence
		BEGIN
			IF UPPER(@ManufacturerEx) <> UPPER(@Manufacturer)
				SET @Warnings = @Warnings + 'The Model ''' + @Model + ''' is associated with ''' + @ManufacturerEx + ''' Manufacturer. The requested association with Manufacturer ''' + @Manufacturer + ''' is ignored.' + CHAR(13) + CHAR(10)
			IF UPPER(@EqpGroupEx) <> UPPER(@EquipGroup)
				SET @Warnings = @Warnings + 'The Model ''' + @Model + ''' is associated with ''' + @EqpGroupEx + ''' Equipment Group. The requested association with Equipment Group ''' + @EquipGroup + ''' is ignored.' + CHAR(13) + CHAR(10)
			IF UPPER(@EqpClassEx) <> UPPER(@EquipClass)
				SET @Warnings = @Warnings + 'The Equipment Group ''' + @EquipGroup + ''' is associated with ''' + @EqpClassEx + ''' Equipment Class. The requested association with Equipment Class ''' + @EquipClass + ''' is ignored.' + CHAR(13) + CHAR(10)
		END
	END

	IF EXISTS(SELECT EqpPlan FROM tblEqpPlans WHERE EqpPlan = @EqpPlan AND EqpPlanId <> ISNULL(@EqpPlanId,0))
		RAISERROR('The Equipment Name ''%s'' exists for a different machine.', 16, 1, @EqpPlan)

	SELECT	@FleetId = FleetId
	FROM	tblFleets fl
	WHERE	UPPER(Fleet) = UPPER(@Fleet)
	SET @IsFleetFound = 1
	IF @FleetId IS NULL
	BEGIN
		DECLARE @DefFleet VARCHAR(50)
		SELECT	TOP 1 @FleetId = FleetId, @DefFleet = Fleet
		FROM	tblFleets fl
		WHERE	Default_Record = 1
		IF @FleetId IS NULL
			RAISERROR('The default fleet is not set.', 16, 1)
		SET @Warnings = @Warnings + 'The Fleet ''' + @Fleet + ''' is not found. Using the default fleet ''' + @DefFleet + '''' + CHAR(13) + CHAR(10)
		SET @IsFleetFound = 0
	END

	IF @Uom = ''
		--SELECT	TOP 1 @PrimaryQUOMId = QUOMId
		--FROM	tblQUOMs
		--WHERE	QUOMDefault <> 0		
		SET @PrimaryQUOMId = 0
	ELSE
	BEGIN
			SELECT	@PrimaryQUOMId = QUOMId
			FROM	tblQUOMs
			WHERE	UPPER(Short_Desc) = UPPER(@Uom)
		IF @PrimaryQUOMId IS NULL
				RAISERROR('The UOM ''%s'' is not found', 16, 1, @Uom)
	END
	
	IF @Location <> ''
	BEGIN
		SELECT	@EqpLocationId = Eqp_Location_Id
		FROM	EQP_LOCATION
		WHERE	UPPER(Eqp_Location_Code) = UPPER(@Location)
		IF @EqpLocationId IS NULL
		BEGIN
			INSERT EQP_LOCATION(Eqp_Location_Code, Eqp_Location_Desc)
			VALUES(@Location, @Location)
			SET @EqpLocationId = SCOPE_IDENTITY()
		END
	END

	IF @Criticality <> ''
	BEGIN
		SELECT	@EqpClassCriticalityId = Eqp_Criticality_Id
		FROM	EQP_CRITICALITY
		WHERE	UPPER(Eqp_Criticality_Code) = UPPER(@Criticality)
		IF @EqpClassCriticalityId IS NULL
		BEGIN
			INSERT EQP_CRITICALITY(Eqp_Criticality_Code, Eqp_Criticality_Desc)
			VALUES(@Criticality, @Criticality)
			SET @EqpClassCriticalityId = SCOPE_IDENTITY()
		END
	END

	IF @CostCategory <> ''
	BEGIN
		SELECT	@EqpCategoryId = Eqp_Category_Id
		FROM	EQP_CATEGORY
		WHERE	UPPER(Eqp_Category_Code) = UPPER(@CostCategory)
		IF @EqpCategoryId IS NULL
		BEGIN
			INSERT EQP_CATEGORY(Eqp_Category_Code, Eqp_Category_Desc)
			VALUES(@CostCategory, @CostCategory)
			SET @EqpCategoryId = SCOPE_IDENTITY()
		END
	END

	IF @CostResponsibility <> ''
	BEGIN
		SELECT	@CostResponsibilityId = Cost_Responsibility_ID
		FROM	COST_RESPONSIBILITY
		WHERE	UPPER(Cost_Responsibility_Code) = UPPER(@CostResponsibility)
		IF @CostResponsibilityId IS NULL
		BEGIN
			INSERT COST_RESPONSIBILITY(Cost_Responsibility_Code, Cost_Responsibility_Desc)
			VALUES(@CostResponsibility, @CostResponsibility)
			SET @CostResponsibilityId = SCOPE_IDENTITY()
		END
	END

	IF @Region <> ''
	BEGIN
		SELECT	@RegionId = Region_Id
		FROM	REGION
		WHERE	UPPER(Region_Code) = UPPER(@Region)
		IF @RegionId IS NULL
		BEGIN
			INSERT REGION(Region_Code, Region_Desc)
			VALUES(@Region, @Region)
			SET @RegionId = SCOPE_IDENTITY()
		END
	END

	IF @Division <> ''
	BEGIN
		SELECT	@DivisionId = Division_Id
		FROM	DIVISION
		WHERE	UPPER(Division_Code) = UPPER(@Division)
		IF @DivisionId IS NULL
		BEGIN
			INSERT DIVISION(Division_Code, Division_Desc)
			VALUES(@Division, @Division)
			SET @DivisionId = SCOPE_IDENTITY()
		END
	END

	IF @IndustryGroup <> ''
	BEGIN
		DECLARE @IndustryEx VARCHAR(50)
		SELECT	@IndGrpId = IndGrpId, @IndustryEx = IndName
		FROM	tblIndustryGroups indg
				LEFT JOIN tblIndustries ind ON ind.IndId = indg.IndId
		WHERE	UPPER(IndGrpName) = UPPER(@IndustryGroup)
		IF @IndGrpId IS NULL
		BEGIN
			DECLARE @IndustryId INT
			SELECT	@IndustryId = IndId
			FROM	tblIndustries
			WHERE	UPPER(IndName) = UPPER(@Industry)
			IF @IndustryId IS NULL AND @Industry <> ''
			BEGIN
				INSERT tblIndustries(IndName)
				VALUES(@Industry)
				SET @IndustryId = SCOPE_IDENTITY()
			END
			INSERT tblIndustryGroups(IndId, IndGrpName)
			VALUES(@IndustryId, @IndustryGroup)
			SET @IndGrpId = SCOPE_IDENTITY()
		END
		ELSE
			IF UPPER(@IndustryEx) <> UPPER(@Industry)
				SET @Warnings = @Warnings + 'The Industry Group ''' + @IndustryGroup + ''' is associated with ''' + @IndustryEx + ''' Industry. The requested association with Industry ''' + @Industry + ''' is ignored.' + CHAR(13) + CHAR(10)
	END

	IF @CostCentre <> ''
	BEGIN
		SELECT	@CostCentreId = Cost_Centre_ID
		FROM	COST_CENTRE
		WHERE	UPPER(Cost_Centre_Code) = UPPER(@CostCentre)
		IF @CostCentreId IS NULL
		BEGIN
			INSERT COST_CENTRE(Cost_Centre_Code, Cost_Centre_Desc)
			VALUES(@CostCentre, @CostCentre)
			SET @CostCentreId = SCOPE_IDENTITY()
		END
	END

	SELECT	@DefaultCostBearerId = CostBearerId
	FROM	tblCostBearers
	WHERE	UPPER(WO_Code) = UPPER(@CostBearer) --KN 1-Apr-09
	IF @DefaultCostBearerId IS NULL
	BEGIN
		SELECT	TOP 1 @DefaultCostBearerId = CostBearerId
		FROM	tblCostBearers
		WHERE	Default_Value = 1
		IF @DefaultCostBearerId IS NULL
			RAISERROR('The default Cost Bearer is not set.', 16, 1)
	END
	IF @ParentEquipName <> '' AND @EquipmentTypeId IN (1,5) -- REAL AND MODELLING ONLY
	BEGIN
		SELECT @ParentEqpPlanId = EqpPlanId 
		FROM tblEqpPlans 
		WHERE EqpPlan = @ParentEquipName AND Equipment_Type_Id IN (1,5) -- REAL AND MODELLING ONLY
 
		IF @ParentEqpPlanId IS NULL
			SET @Warnings = @Warnings + 'Parent Equipment does not exist.' + CHAR(13) + CHAR(10) --RAISERROR('Parent Equipment does not exist.', 16, 1)
	END
END

SELECT
	ISNULL(@EqpPlanId,0) AS EqpPlanId,
	ISNULL(@ManufacturerId,0) AS ManufacturerId,
	ISNULL(@ModelId,0) AS ModelId,
	ISNULL(@FleetId,0) AS FleetId,
	ISNULL(@IsFleetFound,0) AS IsFleetFound,
	ISNULL(@PrimaryQUOMId,0) AS PrimaryQUOMId,
	ISNULL(@EqpLocationId,0) AS EqpLocationId,
	ISNULL(@EqpClassCriticalityId,0) AS EqpClassCriticalityId,
	ISNULL(@EqpCategoryId,0) AS EqpCategoryId,
	ISNULL(@CostResponsibilityId,0) AS CostResponsibilityId,
	ISNULL(@RegionId,0) AS RegionId,
	ISNULL(@DivisionId,0) AS DivisionId,
	ISNULL(@IndGrpId,0) AS IndGrpId,
	ISNULL(@CostCentreId,0) AS CostCentreId,
	ISNULL(@DefaultCostBearerId,0) AS DefaultCostBearerId,
	ISNULL(@IsEqpTerminated, 0) AS IsEqpTerminated,
	ISNULL(@IsEqpInterfaceUpdateAllowed, 1) AS IsEqpInterfaceUpdateAllowed,
	@DefaultAnnualUtilisation AS DefaultAnnualUtilisation, 
	@DefaultEquipmentEndDate AS DefaultEquipmentEndDate,
	ISNULL(@ParentEqpPlanId,0) AS ParentEqpPlanId,
	ISNULL(@Warnings, '') AS Warnings

GO


/****** Object:  StoredProcedure [dbo].[PLANNING_GRID_GET_P]    Script Date: 09/04/2011 14:43:38 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PLANNING_GRID_GET_P]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[PLANNING_GRID_GET_P]
GO

/****** Object:  StoredProcedure [dbo].[PLANNING_GRID_GET_P]    Script Date: 09/04/2011 14:43:38 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE   Procedure [dbo].[PLANNING_GRID_GET_P]  
/******************************************************************************  
 File:   
 Name: PLANNING_GRID_GET_P  
  
 Called By: EQS32.fMain  
  
 Desc: Returns recordset for Planning screen  
               
  
 Auth: Veronika Vasylyeva  
 Date: 29-Oct-2002  
*******************************************************************************  
  Change History  
*******************************************************************************  
 Date:  Author:  Description:  
 -------- -------- ----------------------------------------
 04 Sep 11 GD   E624 open external wo(added one more parameter Work_Order_ID in select list of end result)  
 08 Apr 10 AL   CR8837: added CanRemoveFromEvent to query type 3  
 06 Apr 10 AL   CR8869: Added AutoLookupPartsReadyStatus in planning  
  3 Mar 10 V Vasylyeva CR8825: Added @CauseId, @EventPBO, @TaskStatusExclude  
  2 Mar 10 V Vasylyeva CR8820: Added @AdminAlert  
 14 Dec 09 AL   CR8635: implemented TASK_GRID_GET_LAB_EDIT_V  
 01 Oct 09 AL   CR8304: added EQSBacklogs and EQSWorkorders  
 21 Sep 09 AL   CR8304: added CanRemoveFromEvent  
 16 Sep 09 AL   CR8304: Added EQSBDWWorkorder mode  
 10 Sep 09 AL   CR8304: Added optional field Eqp Description + changed opt IDs  
 02 Sep 09 AL   CR8304: Added fields for quick menus + fixed options filters + new filters  
 27 Aug 09 AL   CR8304: Added EqpLocation as Additional field  
 24 Aug 09 AL   CR8304: removed IsWorkGroupChanged  
 19 Aug 09 AL   CR8304: Included SkinnyRefresh code  
 03 Aug 09 AL   CR8304: Added EventID and EventPlanStart  
 20 Jul 09 AL   CR8304: Full revamp for 8.4  
 23 Oct 08 AL   changed Strategy_Proj_Task_Opt_ID to Strategy_Proj_Task_ID  
 22 Oct 2008 DS   Returned new Parts Status columns LAST (to not affect VB6 grid formatting)  
 13 Oct 2008 V Vasylyeva Modified Planning status  
 17/09/08 AL   removed links to tblqualifier and tbluoms  
 01-May-08 YS      Fixed Defect Ageing problem for Strategy Task  
 21-Jul-07 KN   Fixed - Collation and tempDB Conflicts  
 21 Jun 07 AL   Change in business rules for Planning status  
 19 Jun 07 AL   Replaced @Last_Mod_Date by @EventID for skinny refresh  
 15 Jun 07 AL   Change in business rules for Planning status AND Defect Ageing  
 15 Jun 07 AL   Detailed Planning tasks only  
 13 Jun 07 AL   Added DefectAgeing and PlanningStatus  
 14 Nov 06 SI  Changed to support date based tasks  
 20-Jun-2006 V Vasylyeva Speeded up the old sp run 50600 ms, the new - 1440 ms  
     The test was performed for all sites (@SiteId=NULL)  
 20-May-2005 S Babeshko Changes for Fleet and Model multiselect  
 07-Jul-2004 V Vasylyeva Changed ISNULL(E.Last_Mod_Date,T.Last_Mod_Date) to use event date  
 05-Jul-2004 V Vasylyeva Transaction isolation level, nolock, updatelock,rowlock  
 02-Jul-2004 D Smith  Added WITH(NOLOCK) to all SELECTS  
 05-May-2004 V Vasylyeva @FleetID, @EqpPlanId_Filter - strings   
            @ModelID  
 15-Apr-2004 V Vasylyeva Show Work Order with <Due>, changed linked  
     when task has work order linked=1,  
     when work order is due linked=-1,  
     when task does not have a work order linked=0  
 22-Mar-2004 M Lam  Changed To_Date Filter to Use IsNull(strategy_date,performed_By_Date)  
 10-Mar-2004 M Lam  Changed Overdue Flag to Use Performed_By_Date if not  
     a Strategy Task. Use Strategy Date as target Date when  
     task is a strategy else use Perform By Date  
 09-Mar-2004 M Lam  Removed Current Usage and Occ Type  
 03-Mar-2004 M Lam  Added New Fields to Select List  
 05-Feb-2004 M Lam  Added Work Order Number  
 07-Jan-2004 V Vasylyeva Made changes for multiple QUOM  
 05-Nov-2003 V Vasylyeva Show ALL planned (YTS) events in the planning screen   
     irrespective of the strategy date for the strategy tasks.    
     THe strategy date is ONLY for NON ASSIGNED strategy tasks.  
 15-May-2003 V Vasylyeva Added dynamic SQL  
 13-Jan-2003 V Vasylyeva Added Last_Mod_Date  
 20-Dec-2002 V Vasylyeva Added IsLinked  
     2-Dec-2002 V Vasylyeva Exclude completed Events  
 26-Nov-2002 V Vasylyeva Added tblProjTasks.PlanStatus  
 22-Nov-2002 V Vasylyeva Added Standard jobs and workscope library links  
 20-Nov-2002 V Vasylyeva Added EqpPlanID, FleetID,Fleet  
 19-Nov-2002 V Vasylyeva Fixed bug, so the query does not return the  
     duplicates  
*******************************************************************************/  
 /* Param List */     
 @UserID int=0,  
 @BranchID varchar(max)='',  
 @SiteID varchar(max)='',  
 @FleetID varchar(max)='',  
 @ModelID varchar(max)='',  
 @ParentEqpPlanID varchar(max)='',  
 @EqpPlanID varchar(max)='',  
 @EqpLocationID varchar(max)='',  
 @EqpCategoryID varchar(max)='',  
 @EqpCustomerID varchar(max)='',  
 @EqpCriticalityID varchar(max)='',  
 @EqpCostCentreID varchar(max)='',  
 @CostResponsibilityID varchar(max)='',  
 @RegionID varchar(max)='',  
 @DivisionID varchar(max)='',  
 @EqpOwner varchar(max)='',  
 @IndustryGroupID varchar(max)='',  
  
 @PlanningBranchID varchar(max)='',  
 @PlanningSiteID varchar(max)='',  
 @TaskTypeID varchar(max)='',  
 @ComponentCodeID varchar(max)='',  
 @SourceID varchar(max)='',  
 @RaisedByID varchar(max)='',  
 @PriorityID varchar(max)='',  
 @PerformAtID varchar(max)='',  
 @WorkGroupID varchar(max)='',  
 @EmployeeID varchar(max)='',  
 @WorkLocationID varchar(max)='',  
 @TaskStatusID varchar(max)='',  
   
 @Strategy int=2,  
 @CondMonitInterv int=2,  
 @EMI int=2,  
 @Authorised int=2,  
 @Breakdown int=2,  
   
 @StartDate datetime,  
 @EndDate datetime,  
   
 @DisplayFields varchar(max)='',  
 @isGetAnyway bit=1,  
 @CheckXML varchar(max)='',  
  
 @QueryType int = 0, --0: Planning, 1: EQSBDWWorkorder, 2: EQSBacklogs, 3: EQSWorkorders  
 @SchedulingGroup varchar(max)='',  
 @AdminAlert int=2,  
 @CauseId varchar(max)='',  
 @EventPBO int=3,  
 @TaskStatusExclude varchar(max)=''  
AS  
  
--------------------------------------------------------  
DECLARE @WOStartDate varchar(50),@WOEndDate varchar(50), @EventEndDate Datetime  
  
SET @WOStartDate=CONVERT(VARCHAR,@StartDate,101)  
SET @WOEndDate=DATEADD(ms,-2,DATEADD(day,1,CONVERT(VARCHAR,@EndDate,101)))  
SET @EventEndDate=DATEADD(ms,-2,DATEADD(day,29,CONVERT(VARCHAR,GETDATE(),101)))  
--SELECT @StartDate,@EndDate  
  
DECLARE @MaxRecords int,@MaxRecordsWarning int,@Count int  
SELECT TOP 1 @MaxRecords=Max_Records,@MaxRecordsWarning=Max_Records_Warning FROM AMT_VARIABLE  
SET @MaxRecords=ISNULL(@MaxRecords,20000)  
SET @MaxRecordsWarning=ISNULL(@MaxRecordsWarning,2000)  
  
/*VV 2-Mar-2010*/  
SET @AdminAlert=ISNULL(@AdminAlert,2)  
  
/*VV CR8825*/  
SET @EventPBO=ISNULL(@EventPBO,3)  
  
--AL: 06/04/10  
DECLARE @AutoLookupPartsReadyStatus bit  
EXEC AMT_TYPED_VARIABLE_GET_P @Value_Name='AutoLookupPartsReadyStatus',  @Varchar_Value=@AutoLookupPartsReadyStatus OUTPUT  
  
SET TRANSACTION ISOLATION LEVEL READ COMMITTED  
  
--0A: EQPPLANS  
CREATE TABLE #EQP(EqpPlanID int PRIMARY KEY,EqpPlan varchar(100) COLLATE database_default,  
    SiteID Int,Site varchar(50) COLLATE database_default,  
    OwnerID varchar(200) COLLATE database_default,Owner varchar(200) COLLATE database_default,  
    FleetID int,Fleet varchar(50) COLLATE database_default,  
    ParentEqpPlanID int,ParentEqpPlan varchar(200) COLLATE database_default,  
    EqpLocationID int, EqpLocation varchar(200) COLLATE database_default)  
INSERT INTO #EQP(EqpPlanID,EqpPlan,SiteID,Site,OwnerID,Owner,FleetID,Fleet,ParentEqpPlanID,ParentEqpPlan,EqpLocationID,EqpLocation)  
EXEC EQP_SELECTOR_GET_P @AnalyseBy='EQPL,SITE,OWNR,FLEE,PEQP,LCTN',  
      @UserID=@UserID,  
      @EquipmentTypeId=1,  
      @AllowNullAnalyseBy=1,  
      @BranchId=@BranchId,  
      @SiteId=@SiteId,  
      @FleetId=@FleetId,  
      @ModelId=@ModelId,  
      @EquipmentId=@EqpPlanId,  
      @ParentEqpPlanID=@ParentEqpPlanId,  
      @EquipmentLocationID=@EqpLocationID,  
      @EquipmentCategoryID=@EqpCategoryID,  
      @EquipmentCustomerId=@EqpCustomerID,  
      @EquipmentCriticalityID=@EqpCriticalityID,  
      @EquipmentCostCentreID=@EqpCostCentreID,  
      @CostResponsibilityID=@CostResponsibilityID,  
      @RegionID=@RegionID,  
      @DivisionID=@DivisionID,  
      @Owner=@EqpOwner,  
      @IndustryGroupID=@IndustryGroupID  
  
--SELECT * FROM #EQP   
  
SELECT Task_ID INTO #V1 FROM TASK_GRID_GET_LAB_EDIT_V WITH(NOLOCK)   
  
  
--0B: Skinny refresh  
CREATE TABLE #PLANNING (  
 Task_ID int PRIMARY KEY,  
 TLastModDate datetime,  
 ELastModDate datetime)  
  
IF ISNULL(@CheckXML,'')<>''  
BEGIN  
 DECLARE @idoc int  
  
 EXEC sp_xml_preparedocument @idoc OUTPUT, @CheckXML  
  
 INSERT INTO #PLANNING(Task_ID,TLastModDate,ELastModDate)  
 SELECT Task_ID,TLastModDate,ELastModDate  
 FROM OPENXML (@idoc, '/Tasks/Task',2) WITH #PLANNING  
  
 EXEC sp_xml_removedocument @idoc  
END  
  
--1: PLANNING GRID  
DECLARE @SQLSelect1 NVARCHAR(MAX),@SQLSelect2 NVARCHAR(MAX),@SQL NVARCHAR(MAX),  
@SQLFrom1 NVARCHAR(MAX),@SQLWhere1 NVARCHAR(MAX),  
@SQLFrom2 NVARCHAR(MAX),@SQLWhere2 NVARCHAR(MAX),  
@SQLOrder NVARCHAR(MAX)  
  
SET @SQLFrom1=' FROM   
  TASK_GRID_GET_V V WITH(NOLOCK) INNER JOIN  
  #EQP E ON V.Eqp_Plan_ID=E.EqpPlanID INNER JOIN  
  tblEqpPlans EP ON V.Eqp_Plan_ID=EP.EqpPlanID LEFT OUTER JOIN  
  #V1 V1 ON V.Task_ID=V1.Task_ID '  
SET @SQLFrom2 =' LEFT OUTER JOIN  
  #PLANNING P ON P.Task_ID=V.Task_ID '  
    
IF ISNULL(@QueryType,0)=3    
 SET @SQLWhere1=' WHERE   
   (FilterDowntime BETWEEN ''' + @WOStartDate + ''' AND ''' + @WOEndDate + ''') '  
ELSE  
 SET @SQLWhere1=' WHERE   
   (V.Overdue<>0 OR  
    (V.Task_Status_ID<>3 OR  
    (V.Task_Status_ID=3 AND FilterDowntime BETWEEN ''' + @WOStartDate + ''' AND ''' + @WOEndDate + '''))) '  
  
  
IF ISNULL(@PlanningBranchID,'')<>'' SET @SQLWhere1=@SQLWhere1 + ' AND (V.PlanningBranchID IN ('+@PlanningBranchID+')) '  
IF ISNULL(@PlanningSiteID,'')<>'' SET @SQLWhere1=@SQLWhere1 + ' AND (V.PlanningSiteID IN ('+@PlanningSiteID+')) '  
IF ISNULL(@TaskTypeID,'')<>'' SET @SQLWhere1=@SQLWhere1 + ' AND (V.Task_Type_ID IN ('+@TaskTypeID+')) '  
IF ISNULL(@ComponentCodeID,'')<>'' SET @SQLWhere1=@SQLWhere1 + ' AND (V.Component_Code_ID IN ('+@ComponentCodeID+')) '  
IF ISNULL(@SourceID,'')<>'' SET @SQLWhere1=@SQLWhere1 + ' AND (V.Source_ID IN ('+@SourceID+')) '  
IF ISNULL(@RaisedByID,'')<>'' SET @SQLWhere1=@SQLWhere1 + ' AND (V.RaisedByID IN ('+@RaisedByID+')) '  
IF ISNULL(@PriorityID,'')<>'' SET @SQLWhere1=@SQLWhere1 + ' AND (V.Priority_ID IN ('+@PriorityID+')) '  
IF ISNULL(@PerformAtID,'')<>'' SET @SQLWhere1=@SQLWhere1 + ' AND (V.PerformAtID IN ('+@PerformAtID+')) '   
IF ISNULL(@WorkGroupID,'')<>'' SET @SQLWhere1=@SQLWhere1 + ' AND (V.Work_Group_ID IN ('+@WorkGroupID+')) '  
IF ISNULL(@EmployeeID,'')<>'' SET @SQLWhere1=@SQLWhere1 + ' AND (V.EmployeeResponsibleID IN ('+@EmployeeID+')) '  
IF ISNULL(@WorkLocationID,'')<>'' SET @SQLWhere1=@SQLWhere1 + ' AND (V.WorkLocationID IN ('+@WorkLocationID+')) '  
IF ISNULL(@TaskStatusID,'')<>'' SET @SQLWhere1=@SQLWhere1 + ' AND (V.Task_Status_ID IN ('+@TaskStatusID+')) '  
IF ISNULL(@TaskStatusExclude,'')<>'' SET @SQLWhere1=@SQLWhere1 + ' AND (V.Task_Status_ID NOT IN ('+@TaskStatusExclude+')) '  
/*VV CR8825*/  
IF ISNULL(@CauseId,'')<>'' SET @SQLWhere1=@SQLWhere1 + ' AND (V.Cause_ID IN ('+@CauseId+')) '  
  
IF ISNULL(@Strategy,0)<2 SET @SQLWhere1=@SQLWhere1 + ' AND (V.IsStrategy='+CONVERT(VARCHAR,ISNULL(@Strategy,0))+') '  
IF ISNULL(@CondMonitInterv,0)<2 SET @SQLWhere1=@SQLWhere1 + ' AND (V.IsCondMonInterv='+CONVERT(VARCHAR,ISNULL(@CondMonitInterv,0))+') '  
IF ISNULL(@EMI,0)<2 SET @SQLWhere1=@SQLWhere1 + ' AND (V.IsLinkedEMI='+CONVERT(VARCHAR,ISNULL(@EMI,2))+') '  
IF ISNULL(@Authorised,0)<2 SET @SQLWhere1=@SQLWhere1 + ' AND (V.IsAuthorised='+CONVERT(VARCHAR,ISNULL(@Authorised,2))+')'  
IF ISNULL(@Breakdown,0)<2 SET @SQLWhere1=@SQLWhere1 + ' AND (V.Break_Down='+CONVERT(VARCHAR,ISNULL(@Breakdown,2))+')'  
/*VV 2-Mar-2010*/  
IF @AdminAlert<2 SET @SQLWhere1=@SQLWhere1 + ' AND (V.IsAdminAlert='+CONVERT(VARCHAR(10),@AdminAlert)+')'  
  
/*VV CR8825*/  
SET @SQLWhere1=@SQLWhere1 + CASE @EventPBO /*0 - planned, 1 - breakdown, 2 - other, 3 - all*/  
 WHEN 0 THEN ' AND (V.PlannedEv=1)'  
 WHEN 1 THEN ' AND (V.BreakdownEv=1)'  
 WHEN 2 THEN ' AND (V.BreakdownEv=0) AND (V.PlannedEv=0)'  
 ELSE '' END  
  
SET @SQLWhere2=' AND (P.Task_ID IS NULL OR P.TLastModDate<V.TLastModDate OR P.ELastModDate<V.ELastModDate) '  
  
SET @SQLOrder=' ORDER BY Overdue DESC,FilterDowntime,EqpPlan '  
  
IF ISNULL(@isGetAnyway,0)=0 AND (@MaxRecords>0 OR @MaxRecordsWarning>0)  
BEGIN  
  
 SET @SQLSelect2='SELECT @CountOUT=Count(*)'+@SQLFrom1+@SQLFrom2+@SQLWhere1+@SQLWhere2  
 EXECUTE sp_executesql @SQLSelect2,N'@CountOUT int OUTPUT',@CountOUT=@Count OUTPUT  
  
 IF ISNULL(@Count,0)>@MaxRecords AND @MaxRecords>0  
 BEGIN  
  SELECT @MaxRecords AS MaxRecords  
  DROP TABLE #EQP,#PLANNING,#V1  
  RETURN  
 END  
 ELSE IF ISNULL(@Count,0)>@MaxRecordsWarning AND @MaxRecordsWarning>0  
 BEGIN  
  SELECT ISNULL(@Count,0) AS Warning  
  DROP TABLE #EQP,#PLANNING,#V1  
  RETURN  
 END  
END  
  
  
IF ISNULL(@QueryType,0)=0  
 SET @SQLSelect1='SELECT V.Task_ID,V.Event_ID,V.ShutDownID,V.Eqp_Plan_ID,V.PlanningSiteID,V.PlanningSite AS PlanningSite2,  
   E.SiteID,E.Site, E.FleetID,E.Fleet AS Fleet2,V.Shifts_Start_Time,V.ProjTaskID,  
   CONVERT(BIT,CASE WHEN V.AMTPlanningModeId=1 THEN 0 ELSE 1 END) AS IsSimpleModeTask,  
   CONVERT(BIT,CASE WHEN V.Task_Mode_ID=1 THEN 0 ELSE 1 END) AS IsAutoCreateWorkorder,  
   V.TLastModDate,V.ELastModDate,  
     
   CASE WHEN V.AMTPlanningModeId=1 THEN NULL ELSE '''' END AS SimpleModeTask,  
   V.Model,  
   V.EqpPlan,  
   CASE WHEN V.IsStrategy=0  
    THEN CASE WHEN V.IsCondMonInterv=0 THEN 0 ELSE 1 END  
    ELSE 2 END AS IsStrategyVal,  
   CASE WHEN V.IsStrategy=0  
    THEN CASE WHEN V.IsCondMonInterv=0 THEN NULL ELSE '''' END  
    ELSE '' '' END AS IsStrategy,  
   V.TaskDescription,  
   V.TaskType,  
   V.TargetDate,  
   V.StrategyConfirmed AS IsStrategyConfirmed,  
   CASE WHEN V.Overdue=0 THEN '''' ELSE ''!'' END AS IsOverdue,  
   V.Priority_ID,V.Priority,  
   V.PlanDuration,  
   V.PlanLabourHours,  
   CONVERT(BIT,CASE WHEN V1.Task_ID IS NULL THEN 1 ELSE 0 END) AS IsLabHrEditable,  
   V.Age,  
   V.PlanningStatus,dbo.JOB_READY_STATUS_CAPTION_F(V.PlanningStatus,0) AS JobReady,   
   V.WorkorderNumber,  
   V.Work_Group_ID,V.Workgroup,  
   CONVERT(BIT,V.IsPrimary) AS IsPrimary,  
   V.Task_Status_ID,V.TaskStatus,  
   CASE WHEN V.Task_Status_ID=1 THEN NULL ELSE V.PlanDowntime END AS PlanDowntime,  
   CONVERT(BIT,CASE WHEN V.AMTPlanningModeId=1 AND V.Task_Status_ID<>1 THEN 0 ELSE 1 END) AS IsPlanStartEditable,  
   V.WorkLocationID,V.WorkLocation,  
   ISNULL(V.PlannedOffset,0) AS Offset,  
   V.EventPlanStart AS EventStart,  
   V.CanRemoveFromEvent,' + CONVERT(varchar,@AutoLookupPartsReadyStatus) + ' AS AutoLookupPartsReadyStatus ,V.Work_Order_ID'  
    
ELSE IF ISNULL(@QueryType,0)=1  
 SET @SQLSelect1='SELECT V.Task_ID,V.Eqp_Plan_ID,  
   CONVERT(BIT,CASE WHEN V.AMTPlanningModeId=1 THEN 0 ELSE 1 END) AS IsSimpleModeTask,  
   CONVERT(BIT,CASE WHEN V.Task_Mode_ID=1 THEN 0 ELSE 1 END) AS IsAutoCreateWorkorder,  
   V.TLastModDate,  
     
   CASE WHEN V.AMTPlanningModeId=1 THEN NULL ELSE '''' END AS SimpleModeTask,  
   V.EqpPlan,  
   CASE WHEN V.IsStrategy=0  
    THEN CASE WHEN V.IsCondMonInterv=0 THEN 0 ELSE 1 END  
    ELSE 2 END AS IsStrategyVal,  
   CASE WHEN V.IsStrategy=0  
    THEN CASE WHEN V.IsCondMonInterv=0 THEN NULL ELSE '''' END  
    ELSE '' '' END AS IsStrategy,  
   V.TaskDescription,  
   V.TargetDate,  
   V.PlanDuration,  
   V.PlanLabourHours,  
   V.Age,  
   V.PlanningStatus,dbo.JOB_READY_STATUS_CAPTION_F(V.PlanningStatus,0) AS JobReady,   
   V.WorkorderNumber,  
   V.Workgroup'  
  
ELSE IF ISNULL(@QueryType,0)=2  
 SET @SQLSelect1='SELECT V.Task_ID,V.Eqp_Plan_ID,E.SiteID,E.FleetID,  
   CONVERT(BIT,CASE WHEN V.AMTPlanningModeId=1 THEN 0 ELSE 1 END) AS IsSimpleModeTask,  
   CONVERT(BIT,CASE WHEN V.Task_Mode_ID=1 THEN 0 ELSE 1 END) AS IsAutoCreateWorkorder,  
   V.TLastModDate,  
     
   CASE WHEN V.AMTPlanningModeId=1 THEN NULL ELSE '''' END AS SimpleModeTask,  
   E.Fleet,V.EqpPlan,  
   V.TaskType,V.ComponentCode,  
   V.TaskDescription,V.PerformAt,V.RaisedDate,  
   V.Task_Status_ID,V.TaskStatus,V.Priority,  
   NULL AS IsLinked,V.WorkOrderNumber,  
   V.PlanDuration,  
   V.PlanningStatus,dbo.JOB_READY_STATUS_CAPTION_F(V.PlanningStatus,0) AS JobReady,  
   CASE WHEN V.IsStrategy=0  
    THEN CASE WHEN V.IsCondMonInterv=0 THEN 0 ELSE 1 END  
    ELSE 2 END AS IsStrategyVal,  
   CASE WHEN V.IsStrategy=0  
    THEN CASE WHEN V.IsCondMonInterv=0 THEN NULL ELSE '''' END  
    ELSE '' '' END AS IsStrategy,  
   V.Strategy_Date,V.StrategyConfirmed,  
   CASE WHEN V.Overdue=0 THEN '''' ELSE ''!'' END AS IsOverdue,V.EMI , V.Work_Order_ID'  
  
ELSE IF ISNULL(@QueryType,0)=3  
 SET @SQLSelect1='SELECT V.Task_ID,V.Event_ID,V.Eqp_Plan_ID,E.SiteID,E.FleetID,V.ProjTaskID,  
   CONVERT(BIT,CASE WHEN V.AMTPlanningModeId=1 THEN 0 ELSE 1 END) AS IsSimpleModeTask,  
   CONVERT(BIT,CASE WHEN V.Task_Mode_ID=1 THEN 0 ELSE 1 END) AS IsAutoCreateWorkorder,  
   V.TLastModDate,  
     
   CASE WHEN V.AMTPlanningModeId=1 THEN NULL ELSE '''' END AS SimpleModeTask,  
   CASE WHEN V.IsAdminAlert=0 THEN NULL ELSE ''!'' END AS AdminAlert,  
   E.Fleet,V.EqpPlan,  
   V.FilterDowntime AS Downtime,   
   CASE WHEN V.IsStrategy=0  
    THEN CASE WHEN V.IsCondMonInterv=0 THEN 0 ELSE 1 END  
    ELSE 2 END AS IsStrategyVal,  
   CASE WHEN V.IsStrategy=0  
    THEN CASE WHEN V.IsCondMonInterv=0 THEN NULL ELSE '''' END  
    ELSE '' '' END AS IsStrategy,  
   V.Task_Status_ID,V.TaskStatus,  
   V.TaskType,V.ComponentCode,  
   V.TaskDescription,NULL AS IsLinked, V.WorkOrderNumber,  
   CONVERT(BIT,CASE WHEN V.Redo_Work_Order_ID IS NULL THEN 0 ELSE 1 END) AS IsRedo,  
   V.Cause,V.EMI,V.PerformAt,CanRemoveFromEvent,V.Work_Order_ID '  
  
WHILE ISNULL(@DisplayFields,'')<>''  
BEGIN    
  DECLARE @DFIndex varchar(3),@Counter int  
    
  SET @Counter=CHARINDEX(',',@DisplayFields)  
  IF @Counter=0  
  BEGIN  
   SET @DFIndex=@DisplayFields  
   SET @DisplayFields=''  
  END  
  ELSE  
  BEGIN  
   SET @DFIndex=LEFT(@DisplayFields,@Counter-1)  
   SET @DisplayFields=RIGHT(@DisplayFields,LEN(@DisplayFields)-@Counter)  
  END  
  
  SET @SQLSelect1=@SQLSelect1+  
   CASE @DFIndex   
    WHEN '00' THEN ',V.PlanningSite'   
    WHEN '01' THEN ',E.Owner'   
    WHEN '02' THEN ',V.Strategy_Usage'   
    WHEN '03' THEN ',V.UOM'   
    WHEN '04' THEN ',V.PerformAt'   
    WHEN '05' THEN ',V.IsLinkedLibrary'   
    WHEN '06' THEN ',V.EmployeeResponsible'   
    WHEN '07' THEN ',CASE WHEN V.Task_Status_ID=1 THEN NULL ELSE V.PlanUpTime END AS PlanUpTime'   
    WHEN '08' THEN ',V.[Shutdown]'   
    WHEN '09' THEN ',CASE WHEN V.Task_Status_ID=1 THEN NULL ELSE V.PlannedOffset END AS PlannedOffset'   
    WHEN '10' THEN ',V.ComponentCode'   
    WHEN '11' THEN ',V.ModifierCode'   
    WHEN '12' THEN ',V.TaskCounter'   
    WHEN '13' THEN ',E.ParentEqpPlan'   
    WHEN '14' THEN ',E.Fleet'   
    WHEN '15' THEN ',V.IsLinkedEMI'   
    WHEN '16' THEN ',CONVERT(VARCHAR,V.Event_ID) AS EventID'   
    WHEN '17' THEN ',V.EventPlanStart'   
    WHEN '18' THEN ',E.EqpLocation AS [Equipment Location]'   
    WHEN '19' THEN ',EP.Description AS [Equipment Description]'   
    WHEN '20' THEN ',V.Model'   
    WHEN '21' THEN ',V.TaskType'   
    WHEN '22' THEN ',V.StrategyConfirmed AS IsStrategyConfirmed'   
    WHEN '23' THEN ',CASE WHEN V.Overdue=0 THEN '''' ELSE ''!'' END AS IsOverdue'   
    WHEN '24' THEN ',V.Priority'   
   END  
 END  
  
  
--1A: ALL tasks OR Tasks/Event that have changed (Skinny Refresh)  
--print @SQLSelect1+@SQLFrom1+@SQLFrom2+@SQLWhere1+@SQLWhere2+@SQLOrder  
EXEC (@SQLSelect1+@SQLFrom1+@SQLFrom2+@SQLWhere1+@SQLWhere2+@SQLOrder)  
  
--1B: Skinny Refresh: tasks that have been deleted  
IF ISNULL(@CheckXML,'')<>''  
BEGIN  
 SET @SQL='SELECT Task_ID FROM #PLANNING WHERE Task_ID NOT IN (SELECT V.Task_ID '+@SQLFrom1+@SQLWhere1+')'  
 --print @SQL  
 EXEC(@SQL)  
END  
  
IF ISNULL(@QueryType,0)=0  
BEGIN  
 --2: EVENTS TO LINK  
 SELECT EV.Event_ID,EV.Eqp_Plan_ID,EV.Planned_Down_Time AS EventPlanStart,EV.Description AS EventDescription,  
   EV.Work_Location_ID AS WorkLocationID,WL.Description AS WorkLocation,  
   EV.ShutdownID,S.Name AS [Shutdown]  
 FROM  
   EVENT EV INNER JOIN  
   #EQP E ON EV.Eqp_Plan_ID=E.EqpPlanID LEFT OUTER JOIN  
   WORK_LOCATION WL ON EV.Work_Location_ID=WL.Work_Location_ID LEFT OUTER JOIN     [SHUTDOWN] S ON EV.ShutdownID=S.ShutdownID  
 WHERE  
   EV.Event_Status_ID=1 --YTS  
   AND EV.Planned_Down_Time<=@EventEndDate  
      
 ORDER BY Eqp_Plan_ID,Planned_Down_Time  
END  
ELSE IF ISNULL(@QueryType,0)=1  
BEGIN  
 --2: Sched Gantt info  
 DECLARE @TaskID varchar(MAX),@SQLSelect3 NVARCHAR(MAX)  
  
 SET @SQLSelect3='SELECT @TaskIDOUT=(SELECT V.Task_ID '+@SQLFrom1+@SQLFrom2+@SQLWhere1+@SQLWhere2 + ' FOR XML RAW)'  
 EXECUTE sp_executesql @SQLSelect3,N'@TaskIDOUT varchar(MAX) OUTPUT',@TaskIDOUT=@TaskID OUTPUT  
 SET @TaskID=REPLACE(REPLACE(@TaskID,'<row Task_ID="',''),'"/>',',')  
  
 --SELECT @TaskID  
  
 EXEC EQS_SCHEDULING_GET_P  
   @UserID=@UserID,  
   @BranchID=@BranchID,  
   @SiteID=@SiteID,  
   @FleetID=@FleetID,  
   @ModelID=@ModelID,  
   @ParentEqpPlanID=@ParentEqpPlanID,  
   @EqpPlanID=@EqpPlanID,  
   @EqpLocationID=@EqpLocationID,  
   @EqpCategoryID=@EqpCategoryID,  
   @EqpCustomerID=@EqpCustomerID,  
   @EqpCriticalityID=@EqpCriticalityID,  
   @EqpCostCentreID=@EqpCostCentreID,  
   @CostResponsibilityID=@CostResponsibilityID,  
   @RegionID=@RegionID,  
   @DivisionID=@DivisionID,  
   @EqpOwner=@EqpOwner,  
   @IndustryGroupID=@IndustryGroupID,  
  
   @PlanningBranchID=@PlanningBranchID,  
   @PlanningSiteID=@PlanningSiteID,  
   @TaskTypeID=@TaskTypeID,  
   @WorkGroupID=@WorkGroupID,  
  
   @LevelDisplay=2,  
   @isGetAnyway=1,  
   @GroupBy=@SchedulingGroup,  
   @TaskID=@TaskID  
END   
DROP TABLE #EQP,#PLANNING,#V1  
  
  
GO


/****** Object:  StoredProcedure [dbo].[OPEN_EXTERNAL_WO_PARAMETERS_GET]    Script Date: 09/04/2011 14:49:48 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[OPEN_EXTERNAL_WO_PARAMETERS_GET]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[OPEN_EXTERNAL_WO_PARAMETERS_GET]
GO

/****** Object:  StoredProcedure [dbo].[OPEN_EXTERNAL_WO_PARAMETERS_GET]    Script Date: 09/04/2011 14:49:48 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE   Procedure [dbo].[OPEN_EXTERNAL_WO_PARAMETERS_GET]    
/******************************************************************************    
 File:     
 Name: OPEN_EXTERNAL_WO_PARAMETERS_GET    
    
 Called By: EQS32.fMain    
    
 Desc: Returns pure workorder number that needs to pass to open EXTERNAL WO  
                   
 Auth: Gurdeep Dhillon  
 Date: 31-08-2011  
*******************************************************************************    
  Change History    
*******************************************************************************    
 Date:  Author:  Description:    
 -------- -------- ----------------------------------------    
       
*******************************************************************************/    
 /* Param List */       
 @WorkOrderId INT  
AS    
    
SELECT WO.PureWONumber FROM tblWorkOrders WO WHERE WO.WorkOrderId=@WorkOrderId
GO


/****** Object:  StoredProcedure [dbo].[SYSTEM_DEFAULTS_GET_P]    Script Date: 09/04/2011 18:53:11 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[SYSTEM_DEFAULTS_GET_P]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[SYSTEM_DEFAULTS_GET_P]
GO

/****** Object:  StoredProcedure [dbo].[SYSTEM_DEFAULTS_GET_P]    Script Date: 09/04/2011 18:53:11 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[SYSTEM_DEFAULTS_GET_P]  
/******************************************************************************  
 File:   
 Name: SYSTEM_DEFAULTS_GET_P  
  
 Called By:   
  
 Desc: Selects system defaults  
         
               
  
 Auth: Veronika Vasylyeva  
 Date: 22-Apr-2004  
*******************************************************************************  
  Change History  
*******************************************************************************  
 Date:  Author:  Description:  
 -------- -------- ----------------------------------------  
 04-Sep-11 G Dhillon Added Show_External_WO for #E624
 27-Jul-10 V Vasylyeva CR9080: Added PH_ImportInvoice  
 16/04/10 AL  CR8888: Added PH_ManualRateSetting  
 02/11/09 AL  CR8431: added 5 new items from client registry  
 06/05/09 AL  added InventorySearchHelp  
 05/05/09 KN  Added QuickWatch Feature  
 02/02/09 AL  added AuthorisationTolerancePct  
 30/01/09 AL  added AuthorisationMode  
 17/09/08 AL  removed links to tblqualifier and tbluoms  
 28-Aug-08 K Nagarajan Added @PriceGroupid, @PriceGroup  
 14 Aug 2008 AL  Added @ICMasterSystem and @ICFeatureEnabled  
 31 Dec 2007 AL  Added MessageAutoRefreshDelay  
 06 Jun 2007 PJ  Added Employee Working Status  
 08 Jan 2007 KN  Added Max_Comp_Life & Min_Comp_Cost  
 15 Dec2006 AL  Added 2nd table with the default projection headers  
 01 Nov 2006 AL  Modified source of AMTFrontPage  
 31 Oct 2006 AL  Added AMTFrontPage  
 05 Sep 2006 AL  Added EnableCostAtCost  
 22-Mar-2006 KN  Added UseDistributionCodes  
 10 Mar 2006 SI  Removed UseSimpleWOMode, add WO_Create_File_Type, WO_Create_Use_Dialog  
 10 Feb 2006 SI  Added DEF_RESPONSIBILITY, DEF_COST_BEARER  
 04 Nov 2005 P Joy  Added SET NOCOUNT ON/OFF  
 14 Oct 2005 V Vasylyeva Added UseSimpleWOMode  
 27 Apr 2005 V Vasylyeva Added DefEqpType  
 07-May-2004 V Vasylyeva Added @Parts_Available_From_ERP  
 20-May-2004 H Singh  Added @CurrencyId and @Currency_Display  
 28-May-2004 V Vasylyeva Added @FinPeriod  
 03-Feb-05 V Vasylyeva Added @DefEqpTypeID  
   
*******************************************************************************/  
 /* Param List */  
   
AS  
  
DECLARE @QUOM_ID int, @CurrencyId int  
DECLARE @QUOM_Display varchar(25), @Currency_Display varchar(25)  
DECLARE @Parts_Available_From_ERP bit  
DECLARE @FinPeriod int  
DECLARE @DatabaseId uniqueidentifier  
DECLARE @RefDataLastModDate datetime  
DECLARE @DefEqpTypeID int  
DECLARE @DefEqpType varchar(50)  
DECLARE @WOCreateFileType int  
DECLARE @WOCreateUseDialog int  
DECLARE @CostBearerId int  
DECLARE @CostBearer varchar(50)  
DECLARE @ResponsibilityId int  
DECLARE @Responsibility varchar(50)  
DECLARE @UseDistributionCodes int  
DECLARE @EnableCostAtCost bit  
DECLARE @AMTFrontPage varchar(8000)  
DECLARE @Max_Comp_Life float  
DECLARE @Min_Comp_Cost float  
DECLARE @EmployeeWorkingStatusId int  
DECLARE @EmployeeWorkingStatus varchar(50)  
DECLARE @MessageAutoRefreshDelay int  
DECLARE @ICMasterSystem bit --AL: 14/08/08  
DECLARE @ICFeatureEnabled bit --AL: 14/08/08  
DECLARE @PriceGroupId INT --KN 28Aug08  
DECLARE @PriceGroup VARCHAR(50)--KN 28Aug08  
DECLARE @AuthorisationMode int --AL: 30/01/09  
DECLARE @AuthorisationTolerancePct int --AL: 02/02/09  
DECLARE @QWFeatureEnabled bit  
DECLARE @InventorySearchHelp varchar(8000) --AL: 06/05/09  
DECLARE @PH_ManualRateSetting bit --AL: 16/04/10  
/*VV CR9080*/  
DECLARE @PH_ImportInvoice bit  
  
--AL: 02/11/09  
DECLARE @GanttRefreshIntervalSeconds int, @SearchMaxChar int, @SearchMaxRows int, @PrintTimeout int  
DECLARE @EnableTaskAuthReport bit 

--GD 30/08/11 E624
DECLARE @Show_External_WO BIT
  
SET NOCOUNT ON  
  
SELECT       
@QUOM_ID=QUOM.QUOMId,   
@QUOM_Display=QUOM.UOMShortDesc  
FROM           
tblQUOMs QUOM   
-- INNER JOIN  
--tblUOMs UOM   
-- ON QUOM.UOMId = UOM.UOMId   
-- INNER JOIN  
--tblQualifiers Q   
-- ON QUOM.QualifierId = Q.QualifierId  
WHERE ISNULL(QUOM.QUOMDefault,0)<>0  
  
SELECT   
@Parts_Available_From_ERP=Parts_Available_From_ERP,   
@WOCreateFileType=WO_Create_File_Type,   
@WOCreateUseDialog=WO_Create_Use_Dialog,   
@UseDistributionCodes = Use_Distribution_Codes,  
@Max_Comp_Life = Max_Comp_Life,   
@Min_Comp_Cost= Min_Comp_Cost,   
@MessageAutoRefreshDelay=MessageAutoRefreshDelay,  
@DatabaseId = Database_Id,@EnableCostAtCost = ISNULL(Enable_Cost_At_Cost,0) ,  
@ICMasterSystem=GlobalDescriptionMaster, --AL: 14/08/08  
@AuthorisationMode=AuthorisationMode,  --AL: 30/01/09  
@AuthorisationTolerancePct=AuthorisationTolerancePct --AL: 02/02/09  
FROM AMT_VARIABLE  
  
Select @CurrencyId = CurrencyId, @Currency_Display = Currency + ' ' + CurrencyDesc  
FROM tblCurrencies  
WHERE PrimaryCurr <> 0  
  
--KN 28Aug08  
SELECT @PriceGroupId = Price_Group_Id , @PriceGroup = Price_Group   
FROM PRICE_GROUP   
WHERE DefaultValue <> 0   
--Current financial period  
  
   
SET @FinPeriod=  
(SELECT FinancialPeriod FROM tblFinancialPeriods   
WHERE CalenderPeriod=YEAR(GETDATE())*100+MONTH(GETDATE()))  
  
  
--get AMT_TYPED_VARIABLEs  
SELECT @AMTFrontPage=CASE WHEN Value_Name = 'Front_Page_HTML' THEN ISNULL(Varchar_Value,'')  ELSE  @AMTFrontPage END ,  
  @InventorySearchHelp=CASE WHEN Value_Name = 'InventorySearchHelp' THEN ISNULL(Varchar_Value,'')  ELSE  @InventorySearchHelp END,  
  @GanttRefreshIntervalSeconds=CASE WHEN Value_Name = 'GanttRefreshIntervalSeconds' THEN ISNULL(Varchar_Value,'')  ELSE  @GanttRefreshIntervalSeconds END,  
  @SearchMaxChar=CASE WHEN Value_Name = 'SearchMaxChar' THEN ISNULL(Varchar_Value,'')  ELSE  @SearchMaxChar END,  
  @SearchMaxRows=CASE WHEN Value_Name = 'SearchMaxRows' THEN ISNULL(Varchar_Value,'')  ELSE  @SearchMaxRows END,  
  @PrintTimeout=CASE WHEN Value_Name = 'PrintTimeout' THEN ISNULL(Varchar_Value,'')  ELSE  @PrintTimeout END,  
  @EnableTaskAuthReport=CASE WHEN Value_Name = 'EnableTaskAuthReport' THEN ISNULL(Varchar_Value,'')  ELSE  @EnableTaskAuthReport END,  
  @PH_ManualRateSetting=CASE WHEN Value_Name = 'PH_ManualRateSetting' THEN ISNULL(Varchar_Value,'')  ELSE  @PH_ManualRateSetting END,
  @Show_External_WO=CASE WHEN Value_Name = 'Show_External_WO' THEN ISNULL(Varchar_Value,'')  ELSE  @Show_External_WO END
   
FROM   
  AMT_TYPED_VARIABLE   
WHERE   
  Value_Name IN ('Front_Page_HTML','InventorySearchHelp','GanttRefreshIntervalSeconds','SearchMaxChar',  
     'SearchMaxRows','EnableTaskAuthReport','PrintTimeout','PH_ManualRateSetting','Show_External_WO')  
       
/*VV CR9080*/  
EXEC AMT_TYPED_VARIABLE_GET_P @Value_Name='PH_ImportInvoice',@Varchar_Value=@PH_ImportInvoice OUTPUT  
  print 'show exter'
  print @SHOW_EXTERNAL_WO
  
--get the most recently Last_Mod_Date of cached reference data  
select @RefDataLastModDate = max(lmd) from REF_DATA_MAX_LAST_MOD_DATES_V  
  
--Get the default equipment type  
SELECT @DefEqpTypeID=Equipment_Type_Id,@DefEqpType=[Type_Name] FROM EQUIPMENT_TYPE WHERE (Default_Record = 1)  
  
SELECT TOP 1 @ResponsibilityId=Responsibility_ID, @Responsibility=[Description] FROM RESPONSIBILITY WHERE (Default_Record = 1)  
  
SELECT TOP 1 @CostBearerId=CostBearerId, @CostBearer=CostBearer FROM tblCostBearers WHERE (Default_Value = 1)  
  
SELECT TOP 1 @EmployeeWorkingStatusId=Employee_Working_Status_ID, @EmployeeWorkingStatus=Employee_Working_Status FROM EMPLOYEE_WORKING_STATUS WHERE (Employee_Working_Status_ID = 1)  
  
SELECT @ICFeatureEnabled=Feature_Enabled FROM AMT_FEATURE WHERE Feature_ID=13 --AMT_IC  
  
SELECT @QWFeatureEnabled=Feature_Enabled FROM AMT_FEATURE WHERE Feature_ID=16 --Quick Watch  
  
SELECT @QUOM_ID AS QUOM_ID,@QUOM_Display AS QUOM_Display, @Parts_Available_From_ERP AS Parts_Available_From_ERP,  
@CurrencyId AS CurrencyId, @Currency_Display AS Currency_Desc,  
@FinPeriod AS FinPeriod, @DatabaseId AS DatabaseId, @RefDataLastModDate AS RefDataLastModDate,  
@DefEqpTypeID as DefEqpTypeID,@DefEqpType as DefEqpType,  
@ResponsibilityId AS ResponsibilityId, @Responsibility AS Responsibility,   
@CostBearerId AS CostBearerId, @CostBearer AS CostBearer,  
@WOCreateFileType AS WOCreateFileType, @WOCreateUseDialog AS WOCreateUseDialog,   
@UseDistributionCodes AS UseDistributionCodes,@EnableCostAtCost AS EnableCostAtCost,  
@AMTFrontPage as AMTFrontPage, @Max_Comp_Life As Max_Comp_Life,@Min_Comp_Cost As Min_Comp_Cost,  
@EmployeeWorkingStatus AS EmployeeWorkingStatus, @EmployeeWorkingStatusID AS EmployeeWorkingStatusID,  
@MessageAutoRefreshDelay AS MessageAutoRefreshDelay,  
@ICMasterSystem AS ICMasterSystem, --AL: 14/08/08  
ISNULL(@ICFeatureEnabled,0) AS ICFeatureEnabled, --AL: 14/08/08  
@PriceGroupId  AS PriceGroupId, --KN 28Aug08  
@PriceGroup AS PriceGroup, --KN 28Aug08  
@AuthorisationMode AS AuthorisationMode, --AL: 30/01/09  
@AuthorisationTolerancePct AS AuthorisationTolerancePct, --AL: 02/02/09  
ISNULL(@QWFeatureEnabled,0) AS QWFeatureEnabled,  
@InventorySearchHelp AS InventorySearchHelp, --AL: 06/05/09  
--AL: 02/11/09  
@GanttRefreshIntervalSeconds AS GanttRefreshIntervalSeconds,   
@SearchMaxChar AS SearchMaxChar,   
@SearchMaxRows AS SearchMaxRows ,   
@PrintTimeout AS PrintTimeout ,  
@EnableTaskAuthReport AS EnableTaskAuthReport,  
@PH_ManualRateSetting AS PH_ManualRateSetting,  
/*VV CR9080*/  
@PH_ImportInvoice AS PH_ImportInvoice,
/*GD 30/08/11 E624*/ 
@Show_External_WO AS Show_External_WO
  
--2nd table: default projection headers AL: 15/12/06  
SELECT DISTINCT dbo.tblEqpPlans.Equipment_Type_Id, dbo.PROJECTION_HEADER.Projection_Header_ID, dbo.PROJECTION_HEADER.Projection_Name  
FROM         dbo.tblEqpProjs INNER JOIN  
                      dbo.PROJECTION_HEADER ON dbo.tblEqpProjs.Projection_Header_ID = dbo.PROJECTION_HEADER.Projection_Header_ID INNER JOIN  
                      dbo.tblEqpPlans ON dbo.tblEqpProjs.EqpPlanId = dbo.tblEqpPlans.EqpPlanId  
WHERE     (dbo.tblEqpProjs.Projection_Type_ID IN (1, 5, 6))  
  
  
SET NOCOUNT OFF  
  
  

GO




IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[EXPORT_WORKORDER_STATUS_P]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[EXPORT_WORKORDER_STATUS_P]
GO


  
CREATE PROCEDURE EXPORT_WORKORDER_STATUS_P  
/******************************************************************************  
   
 Name: EXPORT_WORKORDER_STATUS_P  
  
 Called By:   
  
 Desc:   
  
 Auth:  Veronika Vasylyeva  
 Date:  15-Mar-2011  
*******************************************************************************  
  Change History  
*******************************************************************************  
Date:  Author:  Description:  
-------- -------- ----------------------------------------  
5  Sep 11 RJ   E625: Export CustomerRef and changes to linked WOS
28 Apr 11 VV   E518: only send WO that have a WOS linked  
11 Apr 11 GD   Added parameter External_Backlog_Id in select list  
*******************************************************************************/  
 /* Param List */  
   
AS  
  
DECLARE @ModelSerialSeparator varchar(5)  
  
SELECT @ModelSerialSeparator = ISNULL(ModelSerialSeparator,'') FROM AMT_VARIABLE  
  
IF NOT EXISTS(SELECT Task_ID FROM TASK WHERE SendWOStatus=1)  
 RETURN  
  
SELECT
EH.Model,  
CASE @ModelSerialSeparator   
WHEN '' THEN EH.SerialNumber   
ELSE REPLACE(EH.SerialNumber,EH.Model+@ModelSerialSeparator,'') END AS Serial_Number,  
EH.EquipmentNo AS Reference_Number,WO.WorkOrderNumber AS Workorder_Number,  
T.ExternalBacklogId as External_Backlog_Id,  
WO.PureWONumber AS Pure_Workorder_Number,WO.Ext_Source_ID AS External_Source_ID,  
CASE T.Task_Status_Id  
WHEN 1 THEN 'OUT'  
WHEN 2 THEN 'IP'  
WHEN 3 THEN 'COMP'  
WHEN 5 THEN 'ABAN'  
WHEN 6 THEN 'YTS'  
End AS Planning_Status,  
  
CASE T.Task_Status_Id WHEN 1/*O*/ THEN NULL  
ELSE  
LEFT(CONVERT(varchar(50),  
dbo.WO_DOWN_TIME_F(ISNULL(E.Planned_Down_Time,T.Planned_Down_Time),T.Planned_Offset),120),16)   
END AS Planned_Start_Time,  
  
CASE T.Task_Status_Id WHEN 1/*O*/ THEN NULL  
ELSE  
LEFT(CONVERT(varchar(50),  
dbo.WO_UP_TIME_F(ISNULL(E.Planned_Down_Time,T.Planned_Down_Time),T.Planned_Offset,T.Expected_Duration),120),16)   
END AS Planned_End_Time,  
  
CASE WHEN T.Task_Status_Id IN (1,5,6)/*O,A,YTS*/ THEN NULL  
ELSE  
LEFT(CONVERT(varchar(50),  
dbo.WO_DOWN_TIME_F(ISNULL(E.Actual_Down_Time,T.Actual_Down_Time),T.ActualOffset),120),16)   
END AS Actual_Start_Time,  
CASE WHEN T.Task_Status_Id IN (1,2,5,6)/*O,IP,A,YTS*/ THEN NULL  
ELSE  
LEFT(CONVERT(varchar(50),  
dbo.WO_UP_TIME_F(ISNULL(ISNULL(E.Actual_Down_Time,T.Actual_Down_Time),GETDATE()),T.ActualOffset,T.Actual_Duration),120),16)   
END AS Actual_End_Time,
T.Customer_Ref   --E625
FROM TASK T  
INNER JOIN EQUIPMENT_HIERARCHY_V EH ON T.Eqp_Plan_ID=EH.EqpPlanId AND EH.Projection_Type_ID=1  
LEFT JOIN tblWorkOrders WO  ON T.Work_Order_ID = WO.WorkOrderId                /*RJ E625 after VV E518 LEFT*/  
LEFT JOIN EVENT E ON T.Event_ID=E.Event_ID  
WHERE T.SendWOStatus=1 
AND (ISNULL(ExternalBacklogId, '') <> '' OR (ISNULL(ExternalBacklogId, '') = '' AND WO.WorkOrderId > 0))    --E625
  
  
GO
/****** Object:  StoredProcedure [dbo].[RPT_COMPONENT_HISTORY_P]    Script Date: 09/09/2011 12:04:02 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[RPT_COMPONENT_HISTORY_P]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[RPT_COMPONENT_HISTORY_P]
GO

/****** Object:  StoredProcedure [dbo].[RPT_COMPONENT_HISTORY_P]    Script Date: 09/09/2011 12:04:02 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[RPT_COMPONENT_HISTORY_P]
/******************************************************************************
	File: RPT_COMPONENT_HISTORY_P.sql
	Name: RPT_COMPONENT_HISTORY_P

	Called By: 

	Desc: 
             

	Auth: Koushik.Nagarajan
	Date: 23-Apr-08
*******************************************************************************
		Change History
*******************************************************************************
	Date:		Author:		Description:
	--------	--------	----------------------------------------
	17/09/08	AL			removed links to tblqualifier and tbluoms
	23/10/08	KN			Fixed the Serial Number Mandatory Filter
	23/10/08	KN			Fixed the InUse Components
	31/10/08	KN			Fixed the Filters
	14/11/2008	KN			Added Days Used.
	24 Nov 2008	KN			Fixed duplicate Partial Inuse Rows
	10 Dec 2008	KN			Fixed not diplaying Inuse Partial remove Components  
	22/09/09	AL			CR8414: revamped for 8.4 (include StartingSerialNo)
	02 Nov 2009 Tas			Fixed against Issue Id: 979 for FMG 
	25 Oct 2010	KN			#99 & 177: Increase the Length of Columns
	09 Sep 2011 GD          #2161 Component History Report - Terminated equipment
*******************************************************************************/
	/* Param List */

	@BranchId VARCHAR(MAX) = '',
	@SiteId VARCHAR(MAX) = '',
	@FleetId VARCHAR(MAX) = '',
	@EqpGroupId VARCHAR(MAX) = '',
	@EqpClassId VARCHAR(MAX) = '',
	@ManufacturerId VARCHAR(MAX) = '',
	@ModelId VARCHAR(MAX) = '',
	@EqpPlanId VARCHAR(MAX) = '',
	@ParentEqpPlanId VARCHAR(MAX) = '',
	@SerialNo VARCHAR(MAX) = '',
	@IsExactSerialNoSearch BIT = 0,
	@CompCodeId VARCHAR(MAX) = '',
	@ModifierCodeId VARCHAR(MAX) = '',
	@TaskTypeId VARCHAR(MAX) = '',
	@ProjTaskId VARCHAR(MAX) = '',
	@ChangeoutCategoryId VARCHAR(MAX) = '',
	@ShowInUse TINYINT = 0,
	@OrderBy VARCHAR(MAX) = '',
	@TaskHeaderId VARCHAR(MAX) = '' 

AS
 
SET @BranchId =REPLACE(ISNULL(@BranchId,''),'''','')
SET @SiteId =REPLACE(ISNULL(@SiteId,''),'''','')
SET @FleetId =REPLACE(ISNULL(@FleetId,''),'''','')
SET @EqpGroupId =REPLACE(ISNULL(@EqpGroupId,''),'''','')
SET @EqpClassId =REPLACE(ISNULL(@EqpClassId,''),'''','')
SET @ManufacturerId =REPLACE(ISNULL(@ManufacturerId,''),'''','')
SET @ModelId =REPLACE(ISNULL(@ModelId,''),'''','')
SET @EqpPlanId =REPLACE(ISNULL(@EqpPlanId,''),'''','')
SET @ParentEqpPlanId =REPLACE(ISNULL(@ParentEqpPlanId,''),'''','')
SET @CompCodeId =REPLACE(ISNULL(@CompCodeId,''),'''','')
SET @ModifierCodeId =REPLACE(ISNULL(@ModifierCodeId,''),'''','')
SET @TaskTypeId =REPLACE(ISNULL(@TaskTypeId,''),'''','')
SET @ProjTaskId =REPLACE(ISNULL(@ProjTaskId,''),'''','')
SET @TaskHeaderId =REPLACE(ISNULL(@TaskHeaderId,''),'''','')
SET @ChangeoutCategoryId =REPLACE(ISNULL(@ChangeoutCategoryId,''),'''','')
SET @OrderBy =REPLACE(ISNULL(@OrderBy,''),'''','')

SET @OrderBy =REPLACE(ISNULL(@OrderBy,''),'DateOut','InUse,ISNULL(DateOut,GETDATE())')

IF @OrderBy = '' 
	SET @OrderBy = 'Model, Machine , Component,InUse,ISNULL(DateOut,GETDATE())'

 
CREATE TABLE #RPTCOMPONENTHISTORY(
	RecId INT NOT NULL IDENTITY (1,1) PRIMARY KEY CLUSTERED,
	SerialNo varchar(500) COLLATE DATABASE_DEFAULT NULL,
	EqpPlan  VARCHAR (500)  COLLATE DATABASE_DEFAULT NULL,
	Model VARCHAR (500)  COLLATE DATABASE_DEFAULT NULL,
	Machine varchar(500)  COLLATE DATABASE_DEFAULT NULL,
	Component varchar(500)  COLLATE DATABASE_DEFAULT NULL,
	OccurrenceType varchar(500) COLLATE DATABASE_DEFAULT NULL,
	SerialNumberIn varchar(500) COLLATE DATABASE_DEFAULT NULL,
	SerialNumberOut varchar(500) COLLATE DATABASE_DEFAULT NULL,
	DateIn DateTime,
	DateOut DateTime NULL,
	DaysUsed int,
	UsageIn float,
	UsageOut float,
	LifeUsed float,
	UOM Varchar(50),
	ChangeoutCategory varchar(150) COLLATE DATABASE_DEFAULT NULL,
	LifeConfirmed bit,
	LifeAchieved float,
	Workorder varchar(500)  COLLATE DATABASE_DEFAULT NULL,
	WOContractCost float,
	Duration int,
	EqpProjId INT,
	TaskHeaderID INT,
	UOMId INT,
	InUse INT DEFAULT -1,
	ChangeoutCategoryId int
)

CREATE INDEX #IDX_ID ON #RPTCOMPONENTHISTORY(SerialNo)

	INSERT INTO #RPTCOMPONENTHISTORY(SerialNo,EqpPlan,Model,Machine,Component,OccurrenceType,SerialNumberIn,SerialNumberOut,
									DateIn, DateOut,UsageIn,UsageOut,UOM,LifeUsed,ChangeoutCategory,LifeConfirmed,LifeAchieved, 
									WorkOrder,WOContractCost,Duration,EqpProjId,TaskHeaderID,UOMId,ChangeoutCategoryId,InUse)
	SELECT
		ISNULL(NULLIF(tsk.SerialNoOut,''),ISNULL(tsk.SerialNoIn,'')),
		eh.EqpPlan,
		eh.Model AS Model,
		eh.EqpPlan AS Machine,
		th.Description AS Component,
		occt.OccurrenceType AS OccurrenceType,
		ISNULL(tsk.SerialNoIn,'') AS SerialNumberIn,
		ISNULL(tsk.SerialNoOut,'') AS SerialNumberOut,
		dbo.GET_DATE_FROM_USAGE_F(eh.EqpprojId, pt.UsageQuomId, dbo.GET_USAGE_FROM_DATE_F(eh.EqpProjId, pt.UsageQuomId, wo.AmtStartDate) - wopr.UsageSinceLastOccurrence ) AS DateIn,
		wo.AmtStartDate AS DateOut,
		dbo.GET_USAGE_FROM_DATE_F(eh.EqpProjId, pt.UsageQuomId, wo.AmtStartDate) - wopr.UsageSinceLastOccurrence AS UsageIn,
		dbo.GET_USAGE_FROM_DATE_F(eh.EqpProjId, pt.UsageQuomId, wo.AmtStartDate) AS UsageOut,
		CASE WHEN wo.UsageQUOMId IS NULL THEN 'Days' ELSE QU.UOMShortDesc END AS UOM,
		 wopr.UsageSinceLastOccurrence AS LifeUsed,
		CCC.Code AS ChangeoutCategory,
		ISNULL(tsk.LifeConfirmed,1) AS LifeConfirmed,
		--#GD 2161
		CASE WHEN ISNULL(tsk.ChangeoutCategoryId,1) = 1 THEN         
        CASE WHEN ISNULL(tsk.IsOverwriteLife,0) = 0 THEN wopr.TotalLife ELSE tsk.OverwriteLifeAchieved END  
		ELSE NULL END AS LifeAchieved,
		wo.WorkOrderNumber AS WorkOrder,
		ROUND(woc.ContractSell, 0) AS WOContractCost  ,
		tsk.Actual_Duration AS Duration,
		eh.EqpProjId, pt.Task_Header_ID, pt.UsageQuomId, ISNULL(tsk.ChangeoutCategoryId,1), 0
	FROM	
		--start with strategy workorder settlement
		EQUIPMENT_HIERARCHY_V eh
		INNER JOIN tblProjTasks pt ON pt.EqpProjId = eh.EqpProjId 		
		INNER JOIN tblWorkOrderProjs wopr ON pt.ProjTaskId = wopr.ProjTaskId 
		INNER JOIN tblWorkOrders wo ON wo.WorkOrderId = wopr.WorkOrderId
 		INNER JOIN WORK_ORDER_PARENT_COST_SUMMARY_V woc ON wo.WorkOrderId = woc.WorkOrderId 
 		INNER JOIN WORK_ORDER_JOB_STATUS wojst ON wojst.JobStatus_ID = wo.AMTJobStatus_ID

 		LEFT JOIN tblComponentCodes cc ON wo.AMTComponentCodeId = cc.ComponentCodeID 
 		LEFT JOIN tblOccurrenceTypes occt ON occt.OccurrenceTypeId = wo.AMTOccurrenceTypeId
 		LEFT JOIN TASK_HEADER th ON th.Task_Header_Id = wo.Task_Header_Id 
 		LEFT JOIN tblJobCodes jc ON jc.JobCodeID = wo.AMTJobCodeId
 		LEFT JOIN TASK tsk ON wo.AMTParentWorkOrderId = tsk.Work_Order_ID  
		LEFT JOIN CHANGEOUT_CATEGORY CCC ON CCC.ChangeoutCategoryId = ISNULL(tsk.ChangeoutCategoryId,1)
		LEFT JOIN tblQUOMs qu ON qu.QUOMId = wo.UsageQUOMId
	WHERE  
		--current proj, not unscheduled strat task, parent WO, current wo, IP or C
		eh.Projection_Type_Id = 1 AND PT.Unscheduled = 0 AND wo.WorkOrderId = wo.AMTParentWorkOrderId AND 
		ISNULL(wo.CurrentWorkOrder, 0) <> 0 AND wo.AMTJobStatus_Id <> 3  AND  

		(@BranchId='' OR EH.BranchId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@BranchId))) AND
		(@SiteId='' OR EH.SiteId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@SiteId))) AND
		(@FleetId='' OR EH.FleetId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@FleetId))) AND
		(@EqpClassId='' OR EH.Eqp_Class_Id IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@EqpClassId))) AND
		(@EqpGroupId='' OR EH.Equipment_Group_Id IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@EqpGroupId))) AND
		(@EqpPlanId='' OR EH.EqpPlanId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@EqpPlanId))) AND
		(@ManufacturerId='' OR EH.ManufacturerId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@ManufacturerId))) AND
		(@ModelId='' OR EH.ModelId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@ModelId))) AND
 		(@ParentEqpPlanId='' OR EH.EqpPlanId IN (SELECT EqpPlanId FROM dbo.EQP_SIBLINGS_F(@ParentEqpPlanId))) AND
		(@CompCodeId='' OR CC.ComponentCodeId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@CompCodeId))) AND
		(@TaskTypeId='' OR PT.TaskTypeId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@TaskTypeId)))  AND
 		(@ModifierCodeId='' OR PT.ModifierId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@ModifierCodeId)))  AND
 		(@ProjTaskId='' OR PT.ProjTaskId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@ProjTaskId)))  AND
		(@TaskHeaderId='' OR PT.Task_Header_Id IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@TaskHeaderId)))  --AND
 		--(@ChangeoutCategoryId='' OR ISNULL(tsk.ChangeoutCategoryId,1) IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@ChangeoutCategoryId)))  AND
		--(( ISNULL(NULLIF(tsk.SerialNoOut,''),ISNULL(tsk.SerialNoIn,'')) LIKE '%'+@SerialNo+'%' AND @IsExactSerialNoSearch = 0) OR ( ISNULL(NULLIF(tsk.SerialNoOut,''),ISNULL(tsk.SerialNoIn,'')) =  @SerialNo ) )

--AL: 20/10/09: add starting serial number (if set)
IF @ShowInUse <> 1	AND @ChangeoutCategoryId=''
BEGIN
	INSERT INTO #RPTCOMPONENTHISTORY(SerialNo,EqpPlan,Model,Machine,Component,
									SerialNumberIn,DateIn,UsageIn,UOM)
	SELECT	CH.SerialNo,CH.EqpPlan,CH.Model,CH.Machine,CH.Component,
			PT.StartingSerialNo,CH.DateIn,CH.UsageIn,CH.UOM
	FROM 
			#RPTCOMPONENTHISTORY CH INNER JOIN
			(SELECT MIN(RecID) AS RecID,EqpProjID,TaskHeaderID
			FROM #RPTCOMPONENTHISTORY 
			GROUP BY EqpProjID,TaskHeaderID) MinREC ON CH.RecID=MinREC.RecID  INNER JOIN
			tblProjTasks PT ON CH.EqpProjID=PT.EqpProjID AND CH.TaskHeaderID=PT.Task_Header_ID
	WHERE
			ISNULL(PT.StartingSerialNo,'')<>''
END		

--AL: 20/10/09
--In Use = just the last wo settlement for that strategy task.
--Just show the serial number in if it exists
IF @ShowInUse <> 0	AND @ChangeoutCategoryId=''
BEGIN 
	--AL: 20/10/09
	INSERT INTO #RPTCOMPONENTHISTORY(SerialNo,EqpPlan,Model,Machine,Component,OccurrenceType,
									SerialNumberIn,DateIn,UsageIn,UOM,LifeUsed,ChangeoutCategory,InUse)
	SELECT	CH.SerialNo,CH.EqpPlan,CH.Model,CH.Machine,CH.Component,CH.OccurrenceType,
			CH.SerialNumberIn,CH.DateOut,CH.UsageOut,CH.UOM,
			dbo.GET_USAGE_FROM_DATE_F(CH.EqpProjId,CH.UOMId,GETDATE()) - CH.UsageOut,'In Use',1
	FROM 
			#RPTCOMPONENTHISTORY CH INNER JOIN
			(SELECT MAX(CH.RecId) AS RecId,CH.Machine,CH.Component	--in case there are multiple settlement at the same time
			FROM
				#RPTCOMPONENTHISTORY CH INNER JOIN
				(SELECT Machine,Component,Max(DateOut) AS MaxDate  
				FROM #RPTCOMPONENTHISTORY 
				GROUP BY Machine,Component) A ON
									CH.Machine=A.Machine AND
									CH.Component=A.Component AND
									CH.DateOut=A.MaxDate
			GROUP BY CH.Machine,CH.Component) LastCC ON CH.RecId=LastCC.RecId
END

DECLARE @SQL VARCHAR(MAX)

SET @SQL = 'SELECT 	Model, Machine,Component,OccurrenceType,SerialNumberIn,SerialNumberOut,DateIn,DateOut,
					CASE WHEN INuse=-1 THEN NULL ELSE DATEDIFF(DAY,DateIn,ISNULL(DateOut,GETDATE())) END AS DaysUsed, 
					UsageIn, UsageOut, UOM,
					LifeUsed,ChangeoutCategory, LifeConfirmed,LifeAchieved, WorkOrder,WOContractCost,Duration 
			FROM #RPTCOMPONENTHISTORY 
			WHERE 0=0 '

IF @SerialNo<>'' OR @IsExactSerialNoSearch=1
	SET @SQL = @SQL + ' AND ((' + CONVERT(VARCHAR,@IsExactSerialNoSearch) + ' = 0 AND 
					(ISNULL(SerialNumberIn,'''') LIKE ''%'+@SerialNo+'%'' OR ISNULL(SerialNumberOut,'''') LIKE ''%'+@SerialNo+'%'')) OR
				(ISNULL(SerialNumberIn,'''') ='''+@SerialNo+''' OR ISNULL(SerialNumberOut,'''') ='''+@SerialNo+''')) '

IF @ChangeoutCategoryId<>''
	SET @SQL = @SQL + ' AND (Inuse<>0 OR (Inuse = 0 AND ChangeoutCategoryId IN ('+@ChangeoutCategoryId+')))' 

IF @ShowInUse = 1
	SET @SQL = @SQL + 'AND Inuse = 1'
ELSE IF @ShowInUse = 0
	SET @SQL = @SQL + 'AND Inuse <> 1'


SET @SQL = @SQL  + ' ORDER BY ' + @OrderBy

--PRINT @SQL
EXEC(@SQL)
DROP TABLE #RPTCOMPONENTHISTORY



GO


/****** Object:  StoredProcedure [dbo].[RPT_COMPONENT_LIFE_DISTRIBUTION_P]    Script Date: 09/13/2011 09:57:40 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[RPT_COMPONENT_LIFE_DISTRIBUTION_P]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[RPT_COMPONENT_LIFE_DISTRIBUTION_P]
GO

/****** Object:  StoredProcedure [dbo].[RPT_COMPONENT_LIFE_DISTRIBUTION_P]    Script Date: 09/13/2011 09:57:40 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

create      Procedure [dbo].[RPT_COMPONENT_LIFE_DISTRIBUTION_P]
/******************************************************************************
	File: 
	Name: RPT_COMPONENT_LIFE_DISTRIBUTION_P

	Called By: 

	Desc: Get data for component life distribution report

	Auth: Harpreet Singh
	Date: 12-Feb-2004
*******************************************************************************
		Change History
*******************************************************************************
Date:		Author:		Description:
--------	--------	----------------------------------------
13 Sep 11   GD          #2344 increased the size of cause column in temporary table from 50 to 150
14 Nov 08	KN & DS		Fixed the Message 'UOM Selected Not Common'
29 Oct 08	KN			Fixed Total Life 
28 Oct 08	AL			Fixed Scatter trending / analyse by
08 May 08	AL			Changed returned data for 2nd table in scatter mode
28 Apr 08	AL			Added scattered mode + fixed @occurrenceTypeId
21 Apr 08	KN			Added New Paramaters Redo, Warranty, Life COnfirmed , OriginalPartType
21-Jul-07	KN			Fixed - Collation and tempDB Conflicts
14 Nov 06	SI			Changed to support date based tasks
28 Feb 05	VV			Changed the last output query to be a union query
23 Apr 04	VV			Added Check for Common QUOM
19 Mar 04	HS	        @PlanToCurrentMonth is added
*******************************************************************************/
	/* Param List */

	@dealerId int = 0,
	@branchId varchar(max)='',
	@siteID varchar(max)='',
	@fleetID varchar(max)='',     
	@eqpPlanID varchar(max)='',
	@modelId varchar(max) = '',
	@componentCodeID varchar(max) = '',
	@taskTypeID varchar(max) = '',
	@occurrenceTypeId varchar(max) = '',
	@taskCounter varchar(max) = '',
	@modifierCodeId varchar(max) = '',
	@quomId  int = 1,
	@taskHeaderId varchar(max) = '',
	@startDate datetime = '2000-04-01',
	@endDate datetime = '2004-04-01',
	@analyseBy varchar(10) = 'ALL',
	@Error_Message as varchar(500) = '' OUTPUT,
	@PlanToCurrentMonth bit = 1,
	@Redo int = 2,
	@Warranty int = 2,
	@LifeConfirmed int = 2,
	@OriginalPartTypeID varchar(max) = '',
	--AL: 28/04/08
	@Scattered bit=0,
	@RollingAverage int=10
   

AS
SET NOCOUNT ON


	DECLARE @sql varchar(max)
	DECLARE @RandomNumber as varchar(5)
	Declare @BarChartPlotPoints as int 

--14 Nov 08	KN & DS		Fixed the Message 'UOM Selected Not Common'
/*Check for Common QUOM VV 23-Apr-2004*/

--	DECLARE @QUOM_Is_Common bit
--
--	--Check For commom QUOM
--	EXEC CHECK_COMMON_QUOM_P
--		@DealerID=@dealerId,
--		@BranchID=@branchID,
--		@SiteID=@siteID,
--		@FleetID=@fleetID,
--		@EqpPlanID=@eqpPlanID,
--		@ModelID=@modelID,
--		@ProjHeaderID='',
--		@QUOMID=@quomId,
--		@QUOM_Is_Common=@QUOM_Is_Common OUTPUT
--		
--	IF @QUOM_Is_Common=0 
--	BEGIN
--		SET @Error_Message='UOM selected is not common.'
--		RETURN
--	END
/******************************************/

	SET @BarChartPlotPoints = 50 

	

	
	SET @RandomNumber = CONVERT(CHAR(4), CONVERT(INT,RAND() * 8999) + 1000)
	SET @analyseBy=UPPER(@analyseBy)

	
	CREATE TABLE #_COMP_LIFE_DIST_0 (
		ProjTaskId int NOT NULL,
		Fleet varchar (50) COLLATE database_default NOT NULL,
		OccurenceType varchar (50) COLLATE database_default NOT NULL,
		EqpPlan varchar (50) COLLATE database_default NOT NULL,
		Model varchar (50) COLLATE database_default NOT NULL,
		Modifier varchar (50) COLLATE database_default NOT NULL,
		Cause varchar (150) COLLATE database_default NOT NULL,
		OriginalPartType varchar (50) COLLATE database_default NOT NULL,
		AMTStartDate datetime NOT NULL,
		UsageSinceLastOccurrence float NOT NULL,
		UniqueId int IDENTITY (1, 1) NOT NULL
	) 
	

	SET @sql = ' SELECT COUNT(DISTINCT ISNULL(pt.UsageQUOMId, 0)) 
	FROM dbo.tblProjTasks pt INNER JOIN
	dbo.EQUIPMENT_HIERARCHY_V eh ON pt.EqpProjId = eh.EqpProjId AND pt.EqpPlanId = eh.EqpPlanId INNER JOIN
	dbo.tblWorkOrderProjs wop ON pt.ProjTaskId = wop.ProjTaskId INNER JOIN
	dbo.tblWorkOrders wo ON wop.WorkOrderId = wo.WorkOrderId LEFT JOIN
	dbo.Task T ON T.Work_Order_ID = wo.WorkOrderId
	WHERE eh.CurrentProj <> 0 AND wo.WorkOrderId = wo.AMTParentWorkOrderId 
	AND ISNULL(T.ChangeoutCategoryId,1) = 1 AND CASE WHEN ISNULL(T.IsOverwriteLife, 0) = 1 THEN T.OverwriteLifeAchieved  ELSE wop.TotalLife END IS NOT NULL AND ISNULL(pt.Unscheduled, 0) = 0'
	If @eqpPlanID <> '' SET @sql = @sql + ' AND eh.EqpPlanID IN (' + @eqpPlanID + ' )'
	If @fleetID <> '' SET @sql = @sql + ' AND eh.FleetID IN (' + @fleetID + ' )'
	If @siteID <> '' SET @sql = @sql + ' AND eh.SiteID IN (' + @siteID + ' )'
	If @branchId <> '' SET @sql = @sql + ' AND eh.BranchId IN (' + @branchId + ' )'
	If @dealerId > 0 SET @sql = @sql + ' AND eh.DealerId = ' + Convert(varchar, @dealerId)
	If @modelId <> '' SET @sql = @sql + ' AND eh.ModelId IN (' + @modelId + ')'
	If @componentCodeID <> '' SET @sql = @sql + ' AND wo.AMTComponentCodeId IN (' + @componentCodeID + ')'	
	If @taskTypeID <> '' SET @sql = @sql + ' AND wo.AMTTaskTypeId IN (' + @taskTypeID + ')'	
	IF @occurrenceTypeID <>'' SET @sql = @sql + ' AND wo.AMTOccurrenceTypeId IN (' + @occurrenceTypeID + ')'		--AL: 29/04/08
	IF @taskHeaderID <>'' SET @sql = @sql + ' AND pt.Task_Header_ID IN (' + @taskHeaderID + ')'		    
	IF @modifierCodeID <>'' SET @sql = @sql + ' AND wo.AMTModifierId IN (' + @modifierCodeID + ')'		    
	--IF @occurrenceTypeID <>'' SET @sql = @sql + ' AND wo.AMTApplicationCodeId IN (' + @occurrenceTypeID + ')'	--AL: 29/04/08
	IF @OriginalPartTypeID <> '' SET @sql = @sql + ' AND ISNULL(T.OriginalPartTypeId,0) IN ( ' + @OriginalPartTypeID + ') '
	IF @Redo IN (1,0) SET @sql = @sql + ' AND ISNULL(T.Redo,0) = '+ CAST(@Redo AS VARCHAR) 
	IF @LifeConfirmed IN (1,0)	SET @sql = @sql + ' AND ISNULL(T.LifeConfirmed,1) = '+ CAST(@LifeConfirmed AS VARCHAR) 
	IF @Warranty IN (1,0)	SET @sql = @sql + ' AND ISNULL(T.Task_Warranty,0) = '+ CAST(@Warranty AS VARCHAR) 

	CREATE TABLE #_COMM_QUOM (QUOM_Count int NOT NULL)
	


	Declare @QuomCount as int	

	INSERT INTO #_COMM_QUOM(QUOM_Count)
	EXEC (@SQL)


	SELECT @QuomCount = QUOM_Count FROM #_COMM_QUOM
	DROP TABLE #_COMM_QUOM

	SET @Error_Message = ''
	IF @QuomCount > 1 
		BEGIN
			SET @Error_Message = 'Cannot run report for this selection, because strategy task quom is not consistent for all selected machines'
			--PRINT @Error_Message
			RETURN
		END

	
	SET @sql = ' Select ProjTaskId, Fleet, OccurrenceTypeDesc, EqpPlan, Model, Modifier, Cause, OriginalPartType, AMTStartDate, UsageSinceLastOccurrence'
	SET @sql = @sql + ' FROM TECH_PERF_COMP_LIFE_V '
	SET @sql = @sql + ' WHERE 1 = 1 '
	
	IF @PlanToCurrentMonth = 0 SET @sql = @sql + ' AND (AMTStartDate BETWEEN ' + Char(39) + Convert(varchar, @startDate) + Char(39) + ' 
	AND ' + Char(39) + Convert(varchar, @endDate) + Char(39) + ')'
	
	If @eqpPlanID <> '' SET @sql = @sql + ' AND EqpPlanID IN (' + @eqpPlanID + ' )'
	If @fleetID <> '' SET @sql = @sql + ' AND FleetID IN (' + @fleetID + ' )'
	If @siteID <> '' SET @sql = @sql + ' AND SiteID IN (' + @siteID + ' )'
	If @branchId <> '' SET @sql = @sql + ' AND BranchId IN (' + @branchId + ' )'
	If @dealerId > 0 SET @sql = @sql + ' AND DealerId = ' + Convert(varchar, @dealerId)
	If @modelId <> '' SET @sql = @sql + ' AND ModelId IN (' + @modelId + ')'

	If @componentCodeID <> '' SET @sql = @sql + ' AND AMTComponentCodeId IN (' + @componentCodeID + ')'	
	If @taskTypeID <> '' SET @sql = @sql + ' AND AMTTaskTypeId IN (' + @taskTypeID + ')'	
	IF @occurrenceTypeID <>'' SET @sql = @sql + ' AND AMTOccurrenceTypeId IN (' + @occurrenceTypeID + ')'		--AL: 29/04/08
	IF @taskHeaderID <>'' SET @sql = @sql + ' AND TaskHeaderID IN (' + @taskHeaderID + ')'		    
	IF @quomID > 0 SET @sql = @sql + ' AND ISNULL(EndQUOMId,999) = ' + Convert(varchar, @quomID) + ''		    
	IF @modifierCodeID <>'' SET @sql = @sql + ' AND AMTModifierId IN (' + @modifierCodeID + ')'		    
	--IF @occurrenceTypeID <>'' SET @sql = @sql + ' AND AMTApplicationCodeId IN (' + @occurrenceTypeID + ')'		    --AL: 29/04/08
	IF @OriginalPartTypeID <> '' SET @sql = @sql + ' AND ISNULL(OriginalPartTypeId,0) IN ( ' + @OriginalPartTypeID + ') '
	IF @Redo IN (1,0) SET @sql = @sql + ' AND ISNULL(Redo,0) = '+ CAST(@Redo AS VARCHAR) 
	IF @LifeConfirmed IN (1,0)	SET @sql = @sql + ' AND ISNULL(LifeConfirmed,1) = '+ CAST(@LifeConfirmed AS VARCHAR) 
	IF @Warranty IN (1,0)	SET @sql = @sql + ' AND ISNULL(Task_Warranty,0) = '+ CAST(@Warranty AS VARCHAR) 

	SET @sql = @sql + ' ORDER BY ProjTaskId, AMTStartDate'

	--print @sql 
	INSERT INTO #_COMP_LIFE_DIST_0(ProjTaskId, Fleet, OccurenceType, EqpPlan, Model, Modifier, Cause, OriginalPartType, AMTStartDate, UsageSinceLastOccurrence)
	EXEC(@sql)


 
	/*******************************************************************************************************/
	CREATE TABLE #_COMP_LIFE_DIST_1 (
		ProjTaskId int NOT NULL,
		UniqueId int NOT NULL,
		LifeCount int default (0) Not Null,
		LifeCountText varchar (50) COLLATE database_default default ('') Not Null
	) 


	DECLARE @ProjTaskId int,
			@PrevProjTaskId int,
	        @UniqueId int,
	        @RunningTotal int,
			@LifeCountText as varchar(50)
	
	
	SET @RunningTotal = 0
	
	DECLARE rt_cursor CURSOR READ_ONLY 
	FOR
	SELECT ProjTaskId, UniqueId
	FROM #_COMP_LIFE_DIST_0
	ORDER BY UniqueId
	
	
	OPEN rt_cursor
	
	FETCH NEXT FROM rt_cursor INTO @ProjTaskId, @UniqueId
	
	WHILE @@FETCH_STATUS = 0
	 	BEGIN
	
			IF @PrevProjTaskId = @ProjTaskId
		  		SET @RunningTotal = @RunningTotal + 1
			ELSE
				SET @RunningTotal = 1
		
			IF @RunningTotal = 1 SET @LifeCountText = '1st Life'
			IF @RunningTotal = 2 SET @LifeCountText = '2nd Life'
			IF @RunningTotal = 3 SET @LifeCountText = '3rd Life'
			IF @RunningTotal >= 4 SET @LifeCountText = 'Others'
	
		
		  	INSERT INTO #_COMP_LIFE_DIST_1 (ProjTaskId, UniqueId, LifeCount, LifeCountText)
			VALUES (@ProjTaskId, @UniqueId, @RunningTotal, @LifeCountText)
			
			SET @PrevProjTaskId = @ProjTaskId
		  	FETCH NEXT FROM rt_cursor INTO @ProjTaskId, @UniqueId
	
	 	END
	
	CLOSE rt_cursor
	DEALLOCATE rt_cursor
	/*******************************************************************************************************/	



	/*******************************************************************************************************/
	
	

	Declare @Interval as int
	Declare @MaxLife as int
	Declare @MinLife as int
	Declare @Frequency as int

	SELECT  @Interval = CASE WHEN LEN(CONVERT(int, maxlife - minlife) / @BarChartPlotPoints) > 9 THEN POWER(10, 9)  ELSE POWER(10, LEN(CONVERT(int, maxlife - minlife) / @BarChartPlotPoints)) END,
	@MaxLife = maxlife,
	@MinLife = minlife
	FROM  	(
			SELECT     MAX(UsageSinceLastOccurrence) AS maxlife, MIN(UsageSinceLastOccurrence) AS minlife

	      	FROM          #_COMP_LIFE_DIST_0
			) X


	CREATE TABLE #_INTERVALS (StartFrequency int NOT NULL, EndFrequency int NOT NULL) 
	
	Set @Frequency = 0

	While @Frequency < @MaxLife
		Begin
			
			IF (@Frequency <= @minlife And @Frequency + @Interval > @minlife)
				OR @Frequency + @Interval > @minlife
				Insert Into #_INTERVALS (StartFrequency, EndFrequency) Values (@Frequency, @Frequency + @Interval)

			SET @Frequency = @Frequency + @Interval

		End
	/*******************************************************************************************************/



	SELECT     dbo.#_COMP_LIFE_DIST_0.ProjTaskId, dbo.#_COMP_LIFE_DIST_0.EqpPlan, dbo.#_COMP_LIFE_DIST_0.Model, 
	          dbo.#_COMP_LIFE_DIST_0.Modifier, dbo.#_COMP_LIFE_DIST_0.Cause,dbo.#_COMP_LIFE_DIST_0.OriginalPartType, dbo.#_COMP_LIFE_DIST_1.LifeCountText, 
			  dbo.#_COMP_LIFE_DIST_0.Fleet, dbo.#_COMP_LIFE_DIST_0.OccurenceType, dbo.#_INTERVALS.StartFrequency, 
	          dbo.#_INTERVALS.EndFrequency, COUNT(dbo.#_COMP_LIFE_DIST_1.ProjTaskId) AS Interval_count,
				dbo.#_COMP_LIFE_DIST_0.UsageSinceLastOccurrence,dbo.#_COMP_LIFE_DIST_0.AMTStartDate
	INTO #_COMP_LIFE_DIST
	FROM         dbo.#_COMP_LIFE_DIST_1 INNER JOIN
	          dbo.#_COMP_LIFE_DIST_0 ON dbo.#_COMP_LIFE_DIST_1.ProjTaskId = dbo.#_COMP_LIFE_DIST_0.ProjTaskId AND 
	          dbo.#_COMP_LIFE_DIST_1.UniqueId = dbo.#_COMP_LIFE_DIST_0.UniqueId INNER JOIN
	          dbo.#_INTERVALS ON dbo.#_COMP_LIFE_DIST_0.UsageSinceLastOccurrence >= dbo.#_INTERVALS.StartFrequency AND 
	          dbo.#_COMP_LIFE_DIST_0.UsageSinceLastOccurrence < dbo.#_INTERVALS.EndFrequency
	GROUP BY dbo.#_COMP_LIFE_DIST_0.ProjTaskId, dbo.#_COMP_LIFE_DIST_0.EqpPlan, dbo.#_COMP_LIFE_DIST_0.Model, 
	          dbo.#_COMP_LIFE_DIST_0.Modifier, dbo.#_COMP_LIFE_DIST_0.Cause, dbo.#_COMP_LIFE_DIST_0.OriginalPartType, dbo.#_COMP_LIFE_DIST_1.LifeCountText, 
			  dbo.#_COMP_LIFE_DIST_0.Fleet, dbo.#_COMP_LIFE_DIST_0.OccurenceType, dbo.#_INTERVALS.StartFrequency, 
			  dbo.#_INTERVALS.EndFrequency,dbo.#_COMP_LIFE_DIST_0.UsageSinceLastOccurrence,dbo.#_COMP_LIFE_DIST_0.AMTStartDate
	
	
	IF ISNULL(@Scattered,0)=0
		SELECT 
				CASE @analyseBy 
					WHEN 'EQPL' THEN V2.EqpPlan 
					WHEN 'MODL' THEN V2.Model 
					WHEN 'MDCO' THEN V2.Modifier 
					WHEN 'DTAC' THEN V2.Cause 
					WHEN 'OCTY' THEN V2.OccurenceType 
					WHEN 'FLEE' THEN V2.Fleet 
					WHEN 'ORPT' THEN V2.OriginalPartType
					WHEN 'ALL' THEN '<ALL>'  
					ELSE V2.LifeCountText 
					END  analyse, V2.StartFrequency AS interval, SUM(v2.interval_count) AS interval_count 
		FROM         
					(SELECT	[IN].StartFrequency, LF.Fleet, LF.OccurenceType, LF.EqpPlan, LF.Model, LF.Modifier, LF.Cause, LF.OriginalPartType, LD.LifeCountText, COUNT(DISTINCT LF.UniqueId) AS interval_count
					FROM          
						#_COMP_LIFE_DIST_0 LF INNER JOIN
	          			#_INTERVALS [IN] ON LF.UsageSinceLastOccurrence >= [IN].StartFrequency AND LF.UsageSinceLastOccurrence < [IN].EndFrequency INNER JOIN
	          			#_COMP_LIFE_DIST_1 LD ON LF.ProjTaskId = LD.ProjTaskId AND LF.UniqueId = LD.UniqueId
					GROUP BY LF.EqpPlan, LF.Fleet, LF.OccurenceType, LF.Model, LF.Modifier, LF.Cause, LF.OriginalPartType, LD.LifeCountText, [IN].StartFrequency, [IN].EndFrequency
					
					UNION
					
					SELECT	[IN].StartFrequency,CLD.Fleet,CLD.OccurenceType,CLD.EqpPlan,CLD.Model,CLD.Modifier,CLD.Cause,CLD.OriginalPartType,CLD.LifeCountText, 0 AS interval_count				
					FROM          
						#_COMP_LIFE_DIST CLD CROSS JOIN 
						#_INTERVALS [IN]
					GROUP BY CLD.Fleet,CLD.OccurenceType,CLD.EqpPlan,CLD.Model,CLD.Modifier,CLD.Cause,CLD.OriginalPartType,CLD.LifeCountText,
							[IN].StartFrequency, [IN].EndFrequency
					) V2 
		GROUP BY  	
				CASE @analyseBy 
					WHEN 'EQPL' THEN V2.EqpPlan 
					WHEN 'MODL' THEN V2.Model 
					WHEN 'MDCO' THEN V2.Modifier 
					WHEN 'DTAC' THEN V2.Cause 
					WHEN 'OCTY' THEN V2.OccurenceType 
					WHEN 'FLEE' THEN V2.Fleet 
					WHEN 'ORPT' THEN V2.OriginalPartType
					WHEN 'ALL' THEN '<ALL>'  
					ELSE V2.LifeCountText 
					END, V2.StartFrequency
		ORDER BY analyse, V2.StartFrequency

	ELSE
	BEGIN
		--Scatter: Data
		SELECT DISTINCT
				CASE @analyseBy 
					WHEN 'EQPL' THEN V2.EqpPlan 
					WHEN 'MODL' THEN V2.Model 
					WHEN 'MDCO' THEN V2.Modifier 
					WHEN 'DTAC' THEN V2.Cause 
					WHEN 'OCTY' THEN V2.OccurenceType 
					WHEN 'FLEE' THEN V2.Fleet 
					WHEN 'ORPT' THEN V2.OriginalPartType
					WHEN 'ALL' THEN '<ALL>'  
					ELSE V2.LifeCountText 
					END  analyse, V2.AMTStartDate AS Occurrence, UsageSinceLastOccurrence AS ComponentLife 
		INTO #_SCATTER
		FROM         
			(SELECT	LF.EqpPlan,LF.Model,LF.Modifier,LF.Cause,LF.OccurenceType,LF.Fleet,LF.OriginalPartType,LD.LifeCountText,LF.AMTStartDate,LF.UsageSinceLastOccurrence
			FROM          
					#_COMP_LIFE_DIST_0 LF INNER JOIN
					#_COMP_LIFE_DIST_1 LD ON LF.ProjTaskId = LD.ProjTaskId AND LF.UniqueId = LD.UniqueId

			UNION

			SELECT	CLD.EqpPlan,CLD.Model,CLD.Modifier,CLD.Cause,CLD.OccurenceType,CLD.Fleet,CLD.OriginalPartType,CLD.LifeCountText,CLD.AMTStartDate,CLD.UsageSinceLastOccurrence
			FROM          
					#_COMP_LIFE_DIST CLD
			)V2
		ORDER BY analyse, V2.AMTStartDate

		--Scatter: report
		SELECT * FROM #_SCATTER
		ORDER BY Occurrence,analyse

		--Scatter: Trending line
		SELECT	A.Analyse,A.Occurrence, 
				(SELECT AVG(ComponentLife) 
				 FROM 
					(SELECT TOP(@RollingAverage) ComponentLife 
					 FROM #_SCATTER B 
					 WHERE B.Occurrence<=A.Occurrence AND B.Analyse=A.Analyse
					 ORDER BY B.Occurrence DESC
				)C) AS AVGComponentLife
		FROM
				#_SCATTER A
		ORDER BY Occurrence,analyse

		DROP Table #_SCATTER
	END
	

	DROP TABLE #_COMP_LIFE_DIST_0, #_COMP_LIFE_DIST_1, #_COMP_LIFE_DIST, #_INTERVALS



SET NOCOUNT OFF


GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[RPT_MTBS_MTBF_MTBUPS_P]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[RPT_MTBS_MTBF_MTBUPS_P]
GO


create                Procedure RPT_MTBS_MTBF_MTBUPS_P
/******************************************************************************
	File: RPT_MTBS_MTBF_MTBUPS_P.sql
	Name: RPT_MTBS_MTBF_MTBUPS_P

	Called By: 

	Desc: 1. Get data set for downtime hours report
             

	Auth: Harpreet Singh
	Date: 1-Oct-2002
*******************************************************************************
		Change History
*******************************************************************************
	Date:		Author:		Description:
	--------	--------	----------------------------------------
	17 Jan 07	VV		Discussed with RF: Use actual+projected usages for the report. 
					Usage in the current period is calculated only to the current date
					Use actual and projected usages to calculate utilisation for the last 12 months
	19/12/2006	A Lassauniere	do not include enddate in where clause (1st of next month)
	06/12/2006	A Lassauniere	Restricting event counting to within date period AND added Model filter in the usage query
	16/12/2003	H Singh   	Analyse by Model is fixed
    	6/09/2002	H Singh   	Date where clause is modified 
    	21/10/2002	H Singh   	Modified to support multiselector search control 
	13/11/2002	H Singh   	modified to get correct usage 
	17-Sep-09	TAS		CR8389: Added UserID
	19-Sep-11   TP		Issue 2419.  Increased the size of the @WhereClause variable.

*******************************************************************************/
	/* Param List */
    @DealerID int = 1,
    @BranchId varchar(MAX)='1',
    @SiteID varchar(MAX)='1',
    @FleetID varchar(MAX)='1',
    @EqpPlanID varchar(MAX)='',
    @ModelID varchar(MAX) = '',
    @ResponsibilityID varchar(MAX) = '',
    @TaskTypeID varchar(MAX) = '',
    @CostTypeId varchar(MAX) = '',
    @ComponentCodeID varchar(MAX) = '',
    @Planned int = 1,
    @Breakdown int = 2,
    @SystemId varchar(MAX) = '',
    @SubSystemId varchar(MAX) = '',
    @StartDate datetime = 'May 15 1999 12:00:00:000AM',
    @EndDate datetime = 'May 15 2003 12:00:00:000AM', 
    @AnalyseBy varchar(4) = 'CTTY',
    @ShowTotalAs VARCHAR(10)  = 'SUM' OUTPUT,
   @DateBased varchar(10) = 'False' OUTPUT,
	@UserID INT=0
	


AS
SET NOCOUNT ON

--BY KN

IF @AnalyseBy in ('BRAN','SITE','FLEE','EQPL','MODL','DATE','MONH','QRTR','YEAR')
         SET @ShowTotalAs = 'SUM'
ELSE
        SET @ShowTotalAs = 'AVG'


SET  @DateBased= 'False' 
IF @AnalyseBy = 'MONH' OR @AnalyseBy = 'QRTR' OR @AnalyseBy = 'YEAR'  
	BEGIN
		SET @DateBased = 'True'
	END

--******************************************
--Change Start
--Tas 16-Sep-2009
	SET @UserId=ISNULL(@UserId,0)
	DECLARE @Level int
	SELECT @Level=User_Access_Level_Id From USER_LEVEL_PERMISSION where AMT_User_Id = @UserId
	SET @Level=ISNULL(@Level,0)

		/*
		0 -ALL
		1-Branch,
		2-Site
		*/
--Change End
--******************************************


DECLARE @sSQL as varchar(MAX)
DECLARE @SelectClause as varchar(MAX)
DECLARE @GroupClause as varchar(MAX)
DECLARE @FromClause as varchar(MAX)
DECLARE @WhereClause as varchar(MAX)
DECLARE @OrderClause as varchar(4000)
	
DECLARE @sTempTable as varchar(20)
DECLARE @sTempTable2 as varchar(20)
	

SET @sTempTable = '##tmpMTBSMTBF' + CONVERT(CHAR(4), CONVERT(INT,RAND() * 8999) + 1000)
SET @sTempTable2 = '##tmpUsages' + CONVERT(CHAR(4), CONVERT(INT,RAND() * 8999) + 1000)


SET @SelectClause = ''
SET @GroupClause = ''
SET @FromClause = ''
SET @WhereClause = ''
SET @OrderClause = ''


	/*-------------------------*/
	SET @GroupClause =
	CASE @AnalyseBy 
		WHEN'MONH' THEN 'Left(Calendar_Period,4) + ' + CHAR(39) + '-' + CHAR(39) + ' + Right(Calendar_Period,2)'
		WHEN'QRTR' THEN 'Left(Calendar_Period,4) + ' + CHAR(39) + '-Q' + CHAR(39) + ' + CONVERT(varchar(1),((Right(Calendar_Period,2)+2)/3))'
		WHEN'YEAR' THEN 'LEFT(Calendar_Period,4) '
		WHEN'BRAN' THEN 'Branch'
		WHEN'SITE' THEN 'Site'
		WHEN'FLEE' THEN 'Fleet'
		WHEN'EQPL' THEN 'EqpPlan'
		WHEN'MODL' THEN 'Model'
		WHEN'RESP' THEN 'Responsibility'
		WHEN'EVTT' THEN 'TaskType'
		WHEN'CTTY' THEN 'CostType'
		WHEN'EVCC' THEN 'CompCode'
		WHEN'SYST' THEN 'System'
		WHEN'SUBS' THEN 'SubSystem'
	END	
	/*-------------------------*/

	/*===========================*/
	SET @SelectClause = 'SELECT ' + @GroupClause + ' AS Description,  '
	SET @SelectClause = @SelectClause + ' COUNT(DISTINCT Event_Id) AS NOOfEvents'
	/*===========================*/

	/*-------------------------*/
	IF @ResponsibilityID <> '' 
		SET @FromClause = ' INTO ' + @sTempTable + ' FROM RPT_MTBS_MTBF_MTBUPS_RESP_V '
	ELSE
		SET @FromClause = ' INTO ' + @sTempTable + ' FROM RPT_MTBS_MTBF_MTBUPS_V '
	/*-------------------------*/
	
	/*===========================*/
	SET @WhereClause = ' WHERE (Actual_Up_Time >= ' + CHAR(39) + CONVERT(varchar(10),@StartDate,121) + CHAR(39) + ' AND Actual_Down_Time < ' + CHAR(39) + CONVERT(varchar(10),@EndDate,121) + CHAR(39) + ')'
	SET @WhereClause = @WhereClause + ' AND Calendar_Period BETWEEN '+convert(varchar,YEAR(@StartDate)*100+MONTH(@startDate))+' AND '+convert(varchar,YEAR(@EndDate)*100+MONTH(@EndDate))	--AL 06/12/06: to restrict counting WITHIN the defined period
	If @EqpPlanID <> '' SET @WhereClause = @WhereClause + ' AND EqpPlanID IN (' + @EqpPlanID + ' )'
	If @FleetID <> '' SET @WhereClause = @WhereClause + ' AND FleetID IN (' + @FleetID + ' )'
	--*******************************************
	--Change Start
	--Tas 17-Sep-2009
	SET @WhereClause = @WhereClause + ' AND ('+CAST(@Level AS varchar(50))+'<>1 OR BranchId In (SELECT AMT_OBJECT_ID FROM USER_LEVEL_PERMISSION WHERE AMT_USER_ID = '+CAST(@UserId AS varchar(50))+'))'
	SET @WhereClause =@WhereClause	+ ' AND ('+CAST(@Level AS varchar(50))+'<>2 OR SiteID IN(SELECT AMT_OBJECT_ID FROM USER_LEVEL_PERMISSION WHERE AMT_USER_ID = '+CAST(@UserId AS varchar(50))+'))'
	
	--Change End
	--*******************************************

	If @SiteID <> '' SET @WhereClause = @WhereClause + ' AND SiteID IN (' + @SiteID + ' )'
	If @BranchId <> '' SET @WhereClause = @WhereClause + ' AND BranchId IN (' + @BranchId + ' )'
	If @DealerId > 0 SET @WhereClause = @WhereClause + ' AND DealerId = ' + Convert(varchar, @DealerId)
	IF @ModelID <> ''  SET @WhereClause = @WhereClause + ' AND ModelId IN (' + @ModelID + ')'
	IF @ResponsibilityID <> ''  SET @WhereClause = @WhereClause + ' AND (Responsibility_Id IN (' + @ResponsibilityID + ') OR Responsibility_Id IS NULL)'
	IF @TaskTypeID <> ''  SET @WhereClause = @WhereClause + ' AND Task_Type_Id IN (' + @TaskTypeID + ')'
	IF @CostTypeID <> ''  SET @WhereClause = @WhereClause + ' AND CostTypeID IN (' + @CostTypeID + ')'
	IF @ComponentCodeID <> ''  SET @WhereClause = @WhereClause + ' AND ComponentCodeId IN (' + @ComponentCodeID + ')'
	
	SET @WhereClause = 
	CASE @Planned 
		WHEN 2 THEN @WhereClause + ' AND Planned <> 0' 
		WHEN 3 THEN @WhereClause + ' AND Planned = 0'
		ELSE @WhereClause
	END
	SET @WhereClause = 
	CASE @Breakdown 
		WHEN 2 THEN @WhereClause + ' AND Break_Down <> 0' 
		WHEN 3 THEN @WhereClause + ' AND Break_Down = 0'
		ELSE @WhereClause
	END

	IF @SystemId <> ''  SET @WhereClause = @WhereClause + ' AND SystemId IN (' + @SystemId + ')'
	IF @SubSystemId <> ''  SET @WhereClause = @WhereClause + ' AND SubSystemId IN (' + @SubSystemId + ')'
	/*===========================*/
	
	/*-------------------------*/
	SET @GroupClause = ' GROUP BY ' + @GroupClause 
	/*-------------------------*/	

	/*===========================*/
	SET @OrderClause = ' ORDER BY ' + 
	CASE @AnalyseBy 
		WHEN 'MONH' THEN ' Description'
		WHEN 'QRTR' THEN ' Description'
		WHEN 'YEAR' THEN ' Description'
		ELSE 'Description'
	END
	/*===========================*/


	/*---------------------------*/
	SET @sSQL = @SelectClause + @FromClause + @WhereClause + @GroupClause + @OrderClause
	/*---------------------------*/

-- 	PRINT '@GroupClause = ' + (@GroupClause)
-- 	PRINT '@SelectClause = ' + (@SelectClause) 
-- 	PRINT '@FromClause = ' + (@FromClause) 
-- 	PRINT '@WhereClause = ' + (@WhereClause) 	
-- 	PRINT '@OrderClause = ' + (@OrderClause)
 	--PRINT '@sSQL = ' + (@sSQL)
	
--print @sSQL return
	EXEC (@sSQL)

-- drop table z_mtbs
-- exec ('select * into z_mtbs from ' + @sTempTable)

/* get usages*/
SET @SelectClause = ''
SET @GroupClause = ''
SET @FromClause = ''
SET @WhereClause = ''
SET @OrderClause = ''


	/*-------------------------*/
	SET @GroupClause =
	CASE @AnalyseBy 
		WHEN 'MONH' THEN 'Left(CalendarPeriod,4) + ' + CHAR(39) + '-' + CHAR(39) + ' + Right(CalendarPeriod,2)'
		WHEN 'QRTR' THEN 'Left(CalendarPeriod,4) + ' + CHAR(39) + '-Q' + CHAR(39) + ' + CONVERT(varchar(1),((Right(CalendarPeriod,2)+2)/3))'
		WHEN 'YEAR' THEN 'LEFT(CalendarPeriod,4) '
		WHEN 'BRAN' THEN 'Branch'
		WHEN 'MODL' THEN 'Model'
		WHEN 'SITE' THEN 'Site'
		WHEN 'FLEE' THEN 'Fleet'
		WHEN 'EQPL' THEN 'EqpPlan'
		ELSE 'Dummy' 
	END	
	/*-------------------------*/

	/*===========================*/
	SET @SelectClause = 'SELECT ' + @GroupClause + ' AS Description, '

	--VV 17/01/2007 Use actual+projected usages for the report. Usage in the current period is calculated only to the current date
	SET @SelectClause = @SelectClause + ' SUM(PeriodUsageCurr) AS PeriodUsage'
	--SET @SelectClause = @SelectClause + ' SUM(PeriodUsage) AS PeriodUsage'
	/*===========================*/

	/*-------------------------*/
	SET @FromClause = ' INTO ' + @sTempTable2 + ' FROM RPT_PERIOD_USAGE_V '
	/*-------------------------*/
	
	/*===========================*/
	SET @WhereClause = ' WHERE (PeriodStartDate >= ' + CHAR(39) + CONVERT(varchar(10),@StartDate,121) + CHAR(39) + ' AND PeriodEndDate <= ' + CHAR(39) + CONVERT(varchar(10),@EndDate,121) + CHAR(39) + ')'
	If @EqpPlanID <> '' SET @WhereClause = @WhereClause + ' AND EqpPlanID IN (' + @EqpPlanID + ' )'
	If @FleetID <> '' SET @WhereClause = @WhereClause + ' AND FleetID IN (' + @FleetID + ' )'

	--*******************************************
	--Change Start
	--Tas 17-Sep-2009
	SET @WhereClause = @WhereClause + ' AND ('+CAST(@Level AS varchar(50))+'<>1 OR BranchId In (SELECT AMT_OBJECT_ID FROM USER_LEVEL_PERMISSION WHERE AMT_USER_ID = '+CAST(@UserId AS varchar(50))+'))'
	SET @WhereClause =@WhereClause	+ ' AND ('+CAST(@Level AS varchar(50))+'<>2 OR SiteID IN(SELECT AMT_OBJECT_ID FROM USER_LEVEL_PERMISSION WHERE AMT_USER_ID = '+CAST(@UserId AS varchar(50))+'))'
	
	--Change End
	--*******************************************

	If @SiteID <> '' SET @WhereClause = @WhereClause + ' AND SiteID IN (' + @SiteID + ' )'
	If @BranchId <> '' SET @WhereClause = @WhereClause + ' AND BranchId IN (' + @BranchId + ' )'
	If @DealerId > 0 SET @WhereClause = @WhereClause + ' AND DealerId = ' + Convert(varchar, @DealerId)
	IF @ModelID <> ''  SET @WhereClause = @WhereClause + ' AND ModelId IN (' + @ModelID + ')'	--AL 06/12/06
	/*===========================*/
	
	/*-------------------------*/
	SET @GroupClause = ' GROUP BY ' + @GroupClause + ''
	/*-------------------------*/	

	/*===========================*/
	SET @OrderClause = ' ORDER BY ' + 
	CASE @AnalyseBy 
		WHEN 'MONH' THEN ' Description'
		WHEN 'QRTR' THEN ' Description'
		WHEN 'YEAR' THEN ' Description'
		ELSE 'Description'
	END
	/*===========================*/


	/*---------------------------*/
	SET @sSQL = @SelectClause + @FromClause + @WhereClause + @GroupClause + @OrderClause
	/*---------------------------*/

-- 	PRINT '@GroupClause = ' + (@GroupClause)
-- 	PRINT '@SelectClause = ' + (@SelectClause) 
-- 	PRINT '@FromClause = ' + (@FromClause) 
-- 	PRINT '@WhereClause = ' + (@WhereClause) 	
-- 	PRINT '@OrderClause = ' + (@OrderClause)
   	--PRINT '@sSQL = ' + (@sSQL)
	

	EXEC (@sSQL)


-- drop table z_mtbs2
-- exec ('select * into z_mtbs2 from ' + @sTempTable2 )

	SET @sSQL =  ' SELECT ISNULL(ev.Description, usa.Description) AS Description, (SELECT us.PeriodUsage FROM ' + @sTempTable2 + ' us WHERE ISNULL(us.Description,usa.Description) = usa.Description or ISNULL(us.Description,usa.Description) is null) AS PeriodUsage, (ISNULL(ev.NOOfEvents,0)) AS NOOfEvents FROM ' + @sTempTable + ' ev FULL OUTER JOIN 
                      ' + @sTempTable2 + ' usa ON ev.Description = usa.Description WHERE ISNULL(ev.Description, usa.Description) IS NOT NULL ' --GROUP BY  ev.Description, usa.Description, NOOfEvents'

	/*===========================*/
	SET @sSQL = @sSQL + ' ORDER BY ' + 
	CASE @AnalyseBy 
		WHEN 'MONH' THEN ' Description'
		WHEN 'QRTR' THEN ' Description'
		WHEN 'YEAR' THEN ' Description'
		ELSE ' CASE WHEN (ISNULL(ev.NOOfEvents,0)) = 0 THEN NULL ELSE (SELECT us.PeriodUsage FROM ' + @sTempTable2 + ' us WHERE ISNULL(us.Description,usa.Description) = usa.Description or ISNULL(us.Description,usa.Description) is null)/(ISNULL(ev.NOOfEvents,0)) END'
	END

	--print(@sSQL)
	EXEC (@sSQL)

	EXEC('DROP TABLE ' + @sTempTable + '  DROP TABLE ' + @sTempTable2)

SET NOCOUNT OFF


GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[EQP_CLASS_ADD_UPDATE_P]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[EQP_CLASS_ADD_UPDATE_P]
GO

CREATE Procedure [dbo].[EQP_CLASS_ADD_UPDATE_P]
/******************************************************************************
	File: EQP_CLASS_ADD_UPDATE_P.sql
	Name: EQP_CLASS_ADD_UPDATE_P

	Called By:

	Desc: 1. Add / Update Eqp_Class

	Auth: A Lassauniere
	Date: 17 Sep 07
*******************************************************************************
		Change History
*******************************************************************************
	Date:		Author:		Description:
	--------	--------	----------------------------------------
    28/05/08	AL			Check if there already a default
	16-Feb-2010	AL			CR8786: cannot have no default record
	27/09/11	DA			Changed @Eqp_Class_Code, @Eqp_Class_Desc from Varchar(10) to Varchar(50)

*******************************************************************************/
	/* Param List */
    @Eqp_Class_Id  as int = 0  OUTPUT,
    /*DA E635 */
    @Eqp_Class_Code varchar(50),
    @Eqp_Class_Desc varchar(50),
	@Default_Record bit,
    @Message varchar(2000)='' OUTPUT
AS

--AL: 16/02/10
IF ISNULL(@Default_Record,0)=0 AND EXISTS(SELECT * FROM EQP_CLASS WHERE Eqp_Class_Id=@Eqp_Class_Id AND Default_Record<>0)
BEGIN
	SET @Message='There is no default record'
	RETURN
END
ELSE IF ISNULL(@Default_Record,0)<>0
BEGIN
	UPDATE EQP_CLASS
	SET	Default_Record=0
END


IF ISNULL(@Eqp_Class_Id,0)=0
BEGIN
	INSERT INTO
	EQP_CLASS
	(Eqp_Class_Code,Eqp_Class_Desc,Default_Record)
	VALUES
	(@Eqp_Class_Code,
	 @Eqp_Class_Desc,
	 @Default_Record)
	
	SET @Eqp_Class_Id = SCOPE_IDENTITY()
END
ELSE
BEGIN
	UPDATE EQP_CLASS
	SET	Eqp_Class_Code=@Eqp_Class_Code,
		Eqp_Class_Desc=@Eqp_Class_Desc,
		Default_Record=@Default_Record
	WHERE Eqp_Class_Id=@Eqp_Class_Id
END


RETURN


GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[QW_WIP_P]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[QW_WIP_P]
GO

CREATE          Procedure [dbo].[QW_WIP_P]
/******************************************************************************
	Name: QW_WIP_P

	Called By: 

	Desc: 
             
	Auth: Alex Lassauniere
	Date: 07 May 2008
*******************************************************************************
		Change History
*******************************************************************************
	Date:		Author:		Description:
	--------	-----------	---------------------------------------
	28-May-2009	AL			CR8198: fixed Truncation Error
	16-Jun-09	KN			CR8262: Check isnull of Task_Id
	16-Jun-09	KN			CR8273: Add Contract filter
	16-Jun-09	AL			CR8277: fixed join + task header + strategy flag
	14-Oct-11	TP			Issue 2538 : Quick watch WIP error
*******************************************************************************/
	/* Param List */
	@BranchId varchar(MAX)='',
	@SiteId varchar(MAX)='',
	@FleetId varchar(MAX)='',
	@ModelId varchar(MAX)='',
	@EqpPlanId varchar(MAX)='',
	@ParentEqpPlanId varchar(MAX)='',
	@ContractId varchar(MAX)='',
	@UserID int	,
	@NoOfRows INT = 20


AS
IF ISNULL(@NoOfRows,0) = 0
	SET @NoOfRows = 20 
--Get Eqps
CREATE TABLE #EQP(SiteID int ,Site varchar(50),EqpPlanID int PRIMARY KEY,EqpPlan varchar(100),ModelID int,Model varchar(50))
INSERT INTO #EQP(SiteID,Site,EqpPlanID,EqpPlan,ModelID,Model)
EXEC EQP_SELECTOR_GET_P	@AnalyseBy='SITE,EQPL,MODL',
						@UserID=@UserID,
						@BranchId=@BranchId,
						@SiteId=@SiteId,
						@FleetId=@FleetId,
						@ModelId=@ModelId,
						@EquipmentId=@EqpPlanId,
						@ParentEqpPlanID=@ParentEqpPlanId,
						@EquipmentTypeId=1,
						@ContractId = @ContractId

--SELECT * FROM #EQP
		
SELECT	TOP(@NoOfRows)
		ISNULL(Task_ID,0) AS Task_ID,WorkorderID,
		Site,EqpPlan,Model,
		Task,Cost,Date,[WO #],
		[WIP Days],Strategy,Linked
FROM         
		(SELECT	T.Task_ID,WOP.WorkorderID,
				E.Site,E.EqpPlan,E.Model,
				TH.Description AS Task,
				SUMMARY.TotalSell AS Cost, 
				WOP.AMTStartDate AS Date,
				WOP.WorkOrderNumber AS [WO #],
				DATEDIFF(day,WOP.AMTStartDate,getdate()) AS [WIP Days],
				CONVERT(BIT, CASE WHEN PT.Unscheduled = 0 THEN 1 ELSE 0 END) AS Strategy,
				CONVERT(BIT, CASE WHEN T.Task_ID IS NULL THEN 0 ELSE 1 END) AS Linked
		FROM
				#EQP E INNER JOIN
				tblWorkOrders AS WOP ON E.EqpPlanID=WOP.EqpPlanID INNER JOIN
				tblWorkOrders AS WOC ON WOP.WorkOrderId = WOC.AMTParentWorkOrderId INNER JOIN
				WORK_ORDER_PARENT_COST_SUMMARY_V SUMMARY ON WOP.WorkOrderId = SUMMARY.WorkOrderId INNER JOIN
				tblWorkOrderOperations AS WOO ON WOC.WorkOrderId = WOO.WorkOrderId INNER JOIN
				tblWorkOrderProjs AS WOPR ON WOP.WorkOrderId = WOPR.WorkOrderId  INNER JOIN
				tblProjTasks PT ON WOPR.ProjTaskId=PT.ProjTaskID LEFT OUTER JOIN
				TASK_HEADER TH ON WOP.Task_Header_ID=TH.Task_Header_ID LEFT OUTER JOIN	--AL: 16/06/09
				TASK AS T ON T.Work_Order_ID = WOP.WorkOrderId 
		WHERE
				CONVERT(BIT, ISNULL(NULLIF (WOP.AMTStatusId, 2), 0))<>0
				AND ISNULL(T.Task_Status_ID,3)=3	--C
		GROUP BY 
				T.Task_ID,WOP.WorkorderID,
				E.Site,E.EqpPlan,E.Model,
				TH.Description,SUMMARY.TotalSell, WOP.AMTStartDate,
				WOP.WorkOrderNumber,
				CONVERT(BIT, CASE WHEN PT.Unscheduled = 0 THEN 1 ELSE 0 END),
				CONVERT(BIT, CASE WHEN T.Task_ID IS NULL THEN 0 ELSE 1 END)
		)T 
WHERE
		[WIP Days]>30
ORDER BY [WIP Days] DESC,Date

DROP TABLE #EQP

GO


/****** Object:  StoredProcedure [dbo].[RPT_GET_TECH_PERF_ANALYSIS_CHART_P]    Script Date: 10/21/2011 16:40:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[RPT_GET_TECH_PERF_ANALYSIS_CHART_P]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[RPT_GET_TECH_PERF_ANALYSIS_CHART_P]
GO

/****** Object:  StoredProcedure [dbo].[RPT_GET_TECH_PERF_ANALYSIS_CHART_P]    Script Date: 10/21/2011 16:40:20 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE       PROCEDURE [dbo].[RPT_GET_TECH_PERF_ANALYSIS_CHART_P]
/******************************************************************************
	File: 
	Name: RPT_GET_TECH_PERF_ANALYSIS_CHART_P

	Called By: Technical Perf Analysis Chart

	Desc: 
              
	Auth: 
	Date: 19-Sep-2006
*******************************************************************************
		Change History
*******************************************************************************
Date:		Author:		Description:
--------	--------	----------------------------------------
21 Apr 2008	KN		Added New Paramaters Redo, Warranty, Life COnfirmed , OriginalPartType
					And Modified the Stored Procedure
21 Oct 2011 GD     Fixed 2430 where percentage shown on chart was mismatching description
*******************************************************************************/
/* params */
@BranchID varchar(max)='', 
@SiteID varchar(max)='',  
@FleetID varchar(max)='',
@EqpPlanID varchar(max) = '',
@ModelID varchar(max) = '',
@CompCodeID varchar(max) = '',
@TaskTypeID varchar(max) = '',
@ModifierID varchar(max) = '',
@TaskCounterID varchar(max) = '',
@OccTypeID varchar(max) = '',
@StartDate datetime = null,
@EndDate datetime = null,
@AnalyseBy  varchar(max) = 'OCTY',
@Redo int = 2,
@Warranty int = 2,
@LifeConfirmed int = 2,
@OriginalPartTypeID varchar(max) = ''

AS
SET NOCOUNT ON

DECLARE @SQLStr varchar(max)
DECLARE @sqlSelect varchar(max)
DECLARE @sqlTotal varchar(max)
DECLARE @sqlFrom varchar(max)
DECLARE @sqlWhere varchar(max)
DECLARE @sqlGroup varchar(max)
DECLARE @sqlHaving varchar(max)

DECLARE @Total float
DECLARE @strStartDate varchar(50),@strEndDate varchar(50)

SET @strStartDate=Convert(varchar,@StartDate)
SET @strEndDate=Convert(varchar,@EndDate)

CREATE TABLE #z_Total (
	Total float)


SET @sqlFrom = ' FROM TECH_PERF_ANL_V v '

SET @sqlWhere = ' WHERE AMTStartDate BETWEEN ''' + @strStartDate + ''' AND ''' + @strEndDate + ''''

IF @BranchID <> ''
BEGIN
	SET @sqlWhere = @sqlWhere + ' AND BranchId IN ( ' + @BranchID + ') '
END

IF @SiteID <> ''
BEGIN
	SET @sqlWhere = @sqlWhere + ' AND SiteId IN ( ' + @SiteID + ') '
END

IF @FleetID <> ''
BEGIN
	SET @sqlWhere = @sqlWhere + ' AND FleetId IN ( ' + @FleetID + ') '
END

IF @EqpPlanID <> ''
BEGIN
	SET @sqlWhere = @sqlWhere + ' AND EqpPlanId IN ( ' + @EqpPlanID + ') '
END

IF @ModelID <> ''
BEGIN
	SET @sqlWhere = @sqlWhere + ' AND ModelId IN ( ' + @ModelID + ') '
END
	
IF @CompCodeID <> ''
BEGIN
	SET @sqlWhere = @sqlWhere + ' AND AMTComponentCodeId IN ( ' + @CompCodeID + ') '
END

IF @TaskTypeID <> ''
BEGIN
	SET @sqlWhere = @sqlWhere + ' AND AMTTaskTypeId IN ( ' + @TaskTypeID + ') '
END

IF @ModifierID <> ''
BEGIN
	SET @sqlWhere = @sqlWhere + ' AND AMTModifierId IN ( ' + @ModifierID + ') '
END

IF @TaskCounterID <> ''
BEGIN
	SET @sqlWhere = @sqlWhere + ' AND AMTApplicationCodeId IN ( ' + @TaskCounterID + ') '
END

IF @OccTypeID <> ''
BEGIN
	SET @sqlWhere = @sqlWhere + ' AND OccurrenceTypeId IN ( ' + @OccTypeID + ') '
END

IF @OriginalPartTypeID <> ''
BEGIN
	SET @sqlWhere = @sqlWhere + ' AND ISNULL(OriginalPartTypeId,0) IN ( ' + @OriginalPartTypeID + ') '
END

IF @Redo IN (1,0)
	SET @sqlWhere = @sqlWhere + ' AND ISNULL(Redo,0) = '+ CAST(@Redo AS VARCHAR) 


IF @LifeConfirmed IN (1,0)
	SET @sqlWhere = @sqlWhere + ' AND ISNULL(LifeConfirmed,1) = '+ CAST(@LifeConfirmed AS VARCHAR) 


IF @Warranty IN (1,0)
	SET @sqlWhere = @sqlWhere + ' AND ISNULL(Task_Warranty,0) = '+ CAST(@Warranty AS VARCHAR) 

SET @sqlTotal = 'INSERT INTO #z_Total SELECT COUNT(WorkOrderId) AS total'
SET @sqlTotal = @sqlTotal +  @sqlFrom + @sqlWhere

--Print @sqlTotal

EXEC(@sqlTotal)

Select @Total=Total from #z_Total

--print @Total


IF @AnalyseBy  = 'OCTY'
BEGIN

	SET @sqlSelect = 'SELECT  V.OccurrenceTypeDesc  AS analyse,'
	SET @sqlGroup = 'GROUP BY OccurrenceTypeDesc'

END
ELSE IF @AnalyseBy  = 'ORPT'
BEGIN

	SET @sqlSelect = 'SELECT  ISNULL(V.OriginalPartTypeDesc,''(No task details)'')  AS analyse,'
	SET @sqlGroup = 'GROUP BY V.OriginalPartTypeDesc'
END
ELSE IF @AnalyseBy  = 'DTAC'
BEGIN

	SET @sqlSelect = 'SELECT  ISNULL(V.CauseDesc,''(No task details)'')  AS analyse,'
	SET @sqlGroup = 'GROUP BY V.CauseDesc'
END
ELSE IF @AnalyseBy  = 'REPR'
BEGIN

	SET @sqlSelect = 'SELECT  ISNULL(V.RepairCodeDesc,''(No task details)'')  AS analyse,'
	SET @sqlGroup = 'GROUP BY V.RepairCodeDesc'
END
ELSE IF @AnalyseBy  = 'SYMP'
BEGIN

	SET @sqlSelect = 'SELECT  ISNULL(V.SymptomDesc,''(No task details)'')  AS analyse,'
	SET @sqlGroup = 'GROUP BY V.SymptomDesc'
END


--GD 2430 Create temporary table to hold all rows
CREATE TABLE #temp(analyse VARCHAR(200) COLLATE DATABASE_DEFAULT , pct FLOAT)

--GD 2430 Create temporary table to hold final result
CREATE TABLE #aa_PieChartPct(number INT,analyse VARCHAR(200) COLLATE DATABASE_DEFAULT ,pct FLOAT)


SET @sqlSelect = @sqlSelect + 'CAST(COUNT(v.WorkOrderId) AS float) / ' + CONVERT(varchar, @Total) + ' * 100 AS pct' 
SET @SQLStr = 'INSERT INTO #temp(analyse,pct) '+@sqlSelect + @sqlFrom + @sqlWhere + @sqlGroup + ' ORDER BY PCT DESC, Analyse'-- + @sqlHaving 
EXEC(@SQLStr)

 
 INSERT INTO #aa_PieChartPct(number ,analyse ,pct)
 SELECT TOP 14 ROW_NUMBER() OVER(ORDER BY SUM(pct) DESC ) AS 'number',analyse,Sum(pct) as 'pct' 
 FROM #temp GROUP By analyse
 
 --calculate sume of all other costs expect above 14 rows
 DECLARE @OthersCost FLOAT  
 SET @OthersCost = (SELECT SUM(pct) FROM #temp WHERE analyse NOT IN ( SELECT  analyse FROM #aa_PieChartPct)) 
 
 IF ISNULL(@OthersCost,0)>0
 BEGIN
	INSERT INTO #aa_PieChartPct(number,analyse,pct) VALUES (16,'OTHERS',@OthersCost)
 END
 
SELECT analyse,pct FROM #aa_PieChartPct
 
DROP TABLE #aa_PieChartPct
DROP TABLE #temp

SET NOCOUNT OFF

GO


if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[RPT_TOTALCOST_WORKSHEET_P]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[RPT_TOTALCOST_WORKSHEET_P]

GO

CREATE Procedure RPT_TOTALCOST_WORKSHEET_P
/******************************************************************************
	File: 
	Name: RPT_TOTALCOST_WORKSHEET_P

	Called By: 

	Desc: 

	Auth: Alex Lassauniere
	Date: 22-Jun-2006
*******************************************************************************
		Change History
*******************************************************************************
	Date:		Author:		Description:
	--------	--------	----------------------------------------
	27 Jun 08	AL		Added @YearStartMonth
	07/04/08	AL		Do not include analysebyID=0
	02/04/08	AL		Enable modeling overheads
	03/10/06	AL		Set all SQL varchar lengths to 8000
	13/07/06	KN		Set the Variable Length from 1000 to 8000
	23/06/06	AL		Fixed CostBearerID + loop
	10/10/11    GD      E642 add cost category code
	26/10/11    TP      Issue 2451 : Error message when running Total Cost Worksheet Report
*******************************************************************************/
	/* Param List */
    
@Next12Months bit =1,
@StartDate int =200601,
@EndDate int =200603, 
@AnalyseBy varchar(10) ='MONH',
@GroupBy varchar(1000) ='BRAN,SITE,',
@IncludeOverheads bit =1,
@IncludeEquipment bit =1,
@IncludeOtherCosts bit =1,
@IncludeActuals bit =1,
@IncludeProjected bit =1,
@BranchID varchar(MAX) ='',
@SiteID varchar(MAX) ='',
@FleetID varchar(MAX) ='',  
@CCActivity varchar(MAX) ='',
@CCLocation varchar(MAX) ='',
@CCResponsibility varchar(MAX) ='',	
@CostCentreID varchar(MAX) ='',
@CostExpenseID varchar(MAX) ='',
@CostCategory varchar(MAX) ='',
@CostBearerID varchar(MAX) ='',
@CostAtCost bit=0,
@PieChart bit=0,
@ProjectionTypeID varchar(MAX) ='1',
@YearStartMonth int=0	--AL: 27/06/08

AS


IF @Next12Months=1
BEGIN
	SET @startDate= left(convert(varchar,dateadd(month,1,getdate()),112),6)
	SET @endDate= left(convert(varchar,dateadd(year,1,getdate()),112),6)
END

--### clean up parameters
SET @AnalyseBy=UPPER(@AnalyseBy)
SET @GroupBy=UPPER(@GroupBy)

--# Mods on parameters if Pie chart
IF @PieChart=1
BEGIN
	SET @GroupBy=@AnalyseBy
	SET @AnalyseBy=''
END

IF RIGHT(@GroupBy,1)<>',' SET @GroupBy=@GroupBy+','

IF @AnalyseBy<>''
	IF RIGHT(@AnalyseBy,1)=',' SET @AnalyseBy=LEFT(@AnalyseBy,LEN(@AnalyseBy)-1)

IF @CCActivity<>''
	IF RIGHT(@CCActivity,1)<>',' SET @CCActivity=@CCActivity+','
IF @CCLocation<>''
	IF RIGHT(@CCLocation,1)<>',' SET @CCLocation=@CCLocation+','
IF @CCResponsibility<>''
	IF RIGHT(@CCResponsibility,1)<>',' SET @CCResponsibility=@CCResponsibility+','
IF @CostCategory<>''
	IF RIGHT(@CostCategory,1)<>',' SET @CostCategory=@CostCategory+','

SET @GroupBy=REPLACE(@GroupBy,'''','')
SET @AnalyseBy=REPLACE(@AnalyseBy,'''','')
SET @BranchID=REPLACE(@BranchID,'''','')
SET @SiteID=REPLACE(@SiteID,'''','')
SET @FleetID=REPLACE(@FleetID,'''','')
SET @CCActivity=REPLACE(@CCActivity,'''','')
SET @CCLocation=REPLACE(@CCLocation,'''','')
SET @CCResponsibility=REPLACE(@CCResponsibility,'''','')
SET @CostCategory=REPLACE(@CostCategory,'''','')


IF @BranchID<>''
	IF RIGHT(@BranchID,1)=',' SET @BranchID=LEFT(@BranchID,LEN(@BranchID)-1)
IF @SiteID<>''
	IF RIGHT(@SiteID,1)=',' SET @SiteID=LEFT(@SiteID,LEN(@SiteID)-1)
IF @FleetID<>''
	IF RIGHT(@FleetID,1)=',' SET @FleetID=LEFT(@FleetID,LEN(@FleetID)-1)
IF @CostCentreID<>''
	IF RIGHT(@CostCentreID,1)=',' SET @CostCentreID=LEFT(@CostCentreID,LEN(@CostCentreID)-1)
IF @CostExpenseID<>''
	IF RIGHT(@CostExpenseID,1)=',' SET @CostExpenseID=LEFT(@CostExpenseID,LEN(@CostExpenseID)-1)
IF @CostBearerID<>''
	IF RIGHT(@CostBearerID,1)=',' SET @CostBearerID=LEFT(@CostBearerID,LEN(@CostBearerID)-1)




--### Local variables
DECLARE @Where_Clause varchar(MAX),
	@GroupByClause1 varchar(MAX),
	@GroupByClause2 varchar(MAX),
	@SQL varchar(MAX),
	@SQL1 varchar(MAX),
	@SQL2 varchar(MAX),
	@SelectColumns varchar(MAX),
	@InsertIntoClause varchar(MAX),
	@InclMissPerFields varchar(MAX),
	@GroupByMaxCol int,
	@AmountString varchar(10),
	@CostTypeString varchar(50),
	@CostAtCostEnabled bit,
	@NonNullAnalyseByID varchar(MAX)

SET @Where_Clause=''
SET @GroupByClause1=''
SET @GroupByClause2=''
SET @SQL=''
SET @SQL1=''
SET @SQL2=''
SET @SelectColumns=''
SET @InsertIntoClause=''
SET @InclMissPerFields=''
SET @GroupByMaxCol=3
SET @NonNullAnalyseByID=''

SET @AmountString=CASE WHEN @CostAtCost=0 THEN 'Sell' ELSE 'Cost' END

SELECT TOP 1 @CostAtCostEnabled=Enable_Cost_At_Cost FROM AMT_VARIABLE
IF ISNULL(@CostAtCostEnabled,0)=0
	SET @CostTypeString=''
ELSE
	SET @CostTypeString=CASE WHEN @CostAtCost=0 THEN 'Cost at Sell' ELSE 'Cost at Cost' END

--########## Insert Data into temp table against GroupBy selection
--## 1 - Create a basic temporary table
CREATE TABLE #z_Cost(pk INT IDENTITY(1,1) CONSTRAINT PK_pk PRIMARY KEY CLUSTERED, Amount float NULL,CalenderPeriod int)

--## 2 - Modifiy temp table against GroupBy selection, and build up dynamic SQL to insert data later on 
DECLARE @tmpGroupBy varchar(1000), @Counter int, @Column varchar(1000), @GroupByCol int, @tmpFilter varchar(MAX)
DECLARE @paramCounter int, @sameAsGroupBy bit, @dateBased bit

SET @paramCounter=0
SET @GroupByCol=1
SET @sameAsGroupBy=0
SET @dateBased=case when @AnalyseBy<>'MONH' AND @AnalyseBy<>'QRTR' AND @AnalyseBy<>'YEAR' then 0 else 1 end

WHILE @paramCounter<2
BEGIN

	IF @paramCounter=0
		SET @tmpGroupBy=@GroupBy
	ELSE 
	BEGIN
		IF @dateBased=0	--Bar chart
		BEGIN
			SET @tmpGroupBy=@AnalyseBy + ','
			SET @sameAsGroupBy=CASE WHEN CHARINDEX(@AnalyseBy,@GroupBy)=0 THEN 0 ELSE 1 END
		END
		ELSE
			SET @tmpGroupBy=''
	
	END

	SET @Counter=CHARINDEX(',',@tmpGroupBy)
	
	WHILE @Counter>0 AND @tmpGroupBy<>''
	BEGIN
		--Retrieve GroupBy
		SET @Column=LEFT(@tmpGroupBy,@Counter-1)	--retrieved GroupBy
		--SET @Column=REPLACE(@Column,'''','')
		SET @tmpGroupBy=RIGHT(@tmpGroupBy,LEN(@tmpGroupBy)-@Counter)
	
		--Find GroupBy and update SQL
	
		IF @Column ='BRAN'	--Branch as text
		BEGIN
			IF @sameAsGroupBy=0
			BEGIN
				SET @GroupByClause1 = @GroupByClause1 + 'Branch,'
				SET @GroupByClause2 = @GroupByClause2 + 'Branch,'
				SET @InsertIntoClause = @InsertIntoClause + 'Branch,'
				SET @InclMissPerFields=@InclMissPerFields + 'Branch,'
				SET @NonNullAnalyseByID=@NonNullAnalyseByID +' AND ISNULL(BranchID,0)>0'		
				--Add columns for the temporary table
				SET @SQL= 'ALTER TABLE #z_Cost ADD Branch varchar(50) NULL'
				EXEC(@SQL)
			END 
			SET @SelectColumns= @SelectColumns+'Branch AS Col'+ Convert(varchar,@GroupByCol)+','
	
		END 
	
		ELSE IF @Column ='SITE'	--Site as text 
		BEGIN
			IF @sameAsGroupBy=0
			BEGIN
				SET @GroupByClause1 = @GroupByClause1 + 'Site,'
				SET @GroupByClause2 = @GroupByClause2 + 'Site,'
				SET @InsertIntoClause = @InsertIntoClause + 'Site,'
				SET @InclMissPerFields=@InclMissPerFields + 'Site,'		
				SET @NonNullAnalyseByID=@NonNullAnalyseByID +' AND ISNULL(SiteID,0)>0'		
				--Add columns for the temporary table
				SET @SQL= 'ALTER TABLE #z_Cost ADD Site varchar(50) NULL'
				EXEC(@SQL)
			END
			SET @SelectColumns= @SelectColumns+'Site AS Col'+ Convert(varchar,@GroupByCol)+','
	
		END
	
		ELSE IF @Column ='FLEE'	--Fleet as text
		BEGIN
			IF @sameAsGroupBy=0
			BEGIN
				SET @GroupByClause1 = @GroupByClause1 + 'Fleet,'
				SET @GroupByClause2 = @GroupByClause2 + 'Fleet,'
				SET @InsertIntoClause = @InsertIntoClause + 'Fleet,'
				SET @InclMissPerFields=@InclMissPerFields + 'Fleet,'		
				SET @NonNullAnalyseByID=@NonNullAnalyseByID +' AND ISNULL(FleetID,0)>0'		
				--Add columns for the temporary table
				SET @SQL= 'ALTER TABLE #z_Cost ADD Fleet varchar(50) NULL'
				EXEC(@SQL)
			END
			SET @SelectColumns= @SelectColumns+'Fleet AS Col'+ Convert(varchar,@GroupByCol)+','
	
		END
	
		ELSE IF @Column ='CCAC'	--CCActivity as text
		BEGIN
			IF @sameAsGroupBy=0
			BEGIN
				SET @GroupByClause1 = @GroupByClause1 + 'CC_Activity,'
				SET @GroupByClause2 = @GroupByClause2 + 'CC_Activity,'
				SET @InsertIntoClause = @InsertIntoClause + 'CC_Activity,'
				SET @InclMissPerFields=@InclMissPerFields + 'CC_Activity,'		
				--Add columns for the temporary table
				SET @SQL= 'ALTER TABLE #z_Cost ADD CC_Activity varchar(50) NULL'
				EXEC(@SQL)
			END
			SET @SelectColumns= @SelectColumns+'CC_Activity AS Col'+ Convert(varchar,@GroupByCol)+','
	
		END
			ELSE IF @Column ='CCLO'	--CCLocation as text
		BEGIN
			IF @sameAsGroupBy=0
			BEGIN				SET @GroupByClause1 = @GroupByClause1 + 'CC_Location,'
				SET @GroupByClause2 = @GroupByClause2 + 'CC_Location,'
				SET @InsertIntoClause = @InsertIntoClause + 'CC_Location,'
				SET @InclMissPerFields=@InclMissPerFields + 'CC_Location,'		
				--Add columns for the temporary table
				SET @SQL= 'ALTER TABLE #z_Cost ADD CC_Location varchar(50) NULL'
				EXEC(@SQL)
			END
			SET @SelectColumns= @SelectColumns+'CC_Location AS Col'+ Convert(varchar,@GroupByCol)+','

		END
	
		ELSE IF @Column ='CCRP'	--CCResponsibility as text
		BEGIN
			IF @sameAsGroupBy=0
			BEGIN
				SET @GroupByClause1 = @GroupByClause1 + 'CC_Responsibility,'
				SET @GroupByClause2 = @GroupByClause2 + 'CC_Responsibility,'
				SET @InsertIntoClause = @InsertIntoClause + 'CC_Responsibility,'
				SET @InclMissPerFields=@InclMissPerFields + 'CC_Responsibility,'		
				--Add columns for the temporary table
				SET @SQL= 'ALTER TABLE #z_Cost ADD CC_Responsibility varchar(50) NULL'
				EXEC(@SQL)
			END
			SET @SelectColumns= @SelectColumns+'CC_Responsibility AS Col'+ Convert(varchar,@GroupByCol)+','
	
		END
	
		ELSE IF @Column ='CCTR'	--CostCentreID as ID
		BEGIN
			IF @sameAsGroupBy=0
			BEGIN
				SET @GroupByClause1 = @GroupByClause1 + 'Cost_Centre,'
				SET @GroupByClause2 = @GroupByClause2 + 'Cost_Centre,'
				SET @InsertIntoClause = @InsertIntoClause + 'Cost_Centre,'
				SET @InclMissPerFields=@InclMissPerFields + 'Cost_Centre,'
				--Add columns for the temporary table
				SET @SQL= 'ALTER TABLE #z_Cost ADD Cost_Centre varchar(70) NULL'
				EXEC(@SQL)
			END
			SET @SelectColumns= @SelectColumns+'Cost_Centre AS Col'+ Convert(varchar,@GroupByCol)+','
	
		END
	
		ELSE IF @Column ='CEXP'	--CostExpenseID as ID
		BEGIN
			IF @sameAsGroupBy=0
			BEGIN
				SET @GroupByClause1 = @GroupByClause1 + 'Cost_Expense,'
				SET @GroupByClause2 = @GroupByClause2 + 'Cost_Expense,'
				SET @InsertIntoClause = @InsertIntoClause + 'Cost_Expense,'
				SET @InclMissPerFields=@InclMissPerFields + 'Cost_Expense,'
				--Add columns for the temporary table
				SET @SQL= 'ALTER TABLE #z_Cost ADD Cost_Expense varchar(70) NULL'
				EXEC(@SQL)
			END
			SET @SelectColumns= @SelectColumns+'Cost_Expense AS Col'+ Convert(varchar,@GroupByCol)+','
	
		END
	
		ELSE IF @Column ='COBE'	--CostBearerID as ID 
		BEGIN
			IF @sameAsGroupBy=0
			BEGIN
				SET @GroupByClause1 = @GroupByClause1 + 'CostBearer,'
				SET @GroupByClause2 = @GroupByClause2 + 'CostBearer,'
				SET @InsertIntoClause = @InsertIntoClause + 'CostBearer,'
				SET @InclMissPerFields=@InclMissPerFields + 'CostBearer,'		
				--Add columns for the temporary table
				SET @SQL= 'ALTER TABLE #z_Cost ADD CostBearer varchar(70) NULL'
				EXEC(@SQL)
			END
			SET @SelectColumns= @SelectColumns+'CostBearer AS Col'+ Convert(varchar,@GroupByCol)+','
	
		END
	
		ELSE IF @Column ='CCAT'	--CostCategory as text
		BEGIN
			IF @sameAsGroupBy=0
			BEGIN
				SET @GroupByClause1 = @GroupByClause1 + 'Cost_Category,'
				SET @GroupByClause2 = @GroupByClause2 + 'Cost_Category,'
				SET @InsertIntoClause = @InsertIntoClause + 'Cost_Category,'
				SET @InclMissPerFields=@InclMissPerFields + 'Cost_Category,'		
				--Add columns for the temporary table
				SET @SQL= 'ALTER TABLE #z_Cost ADD Cost_Category varchar(70) NULL'
				EXEC(@SQL)
			END
			SET @SelectColumns= @SelectColumns+'Cost_Category AS Col'+ Convert(varchar,@GroupByCol)+','
	
		END
		
		--GD 10/10/11 E642
		ELSE IF @Column ='CCCD'	--CostCategory Code as text
		BEGIN
			IF @sameAsGroupBy=0
			BEGIN
				SET @GroupByClause1 = @GroupByClause1 + 'Cost_Category_Code,'
				SET @GroupByClause2 = @GroupByClause2 + 'Cost_Category_Code,'
				SET @InsertIntoClause = @InsertIntoClause + 'Cost_Category_Code,'
				SET @InclMissPerFields=@InclMissPerFields + 'Cost_Category_Code,'		
				--Add columns for the temporary table
				SET @SQL= 'ALTER TABLE #z_Cost ADD Cost_Category_Code varchar(70) NULL'
				EXEC(@SQL)
			END
			SET @SelectColumns= @SelectColumns+'Cost_Category_Code AS Col'+ Convert(varchar,@GroupByCol)+','
	
		END
		
		ELSE 
			SET @SelectColumns= @SelectColumns+'''All'' AS Col'+ Convert(varchar,@GroupByCol)+','

		--Increment @GroupByCol and check if more GroupBy in selection		SET @Counter=CHARINDEX(',',@tmpGroupBy)
		SET @GroupByCol=@GroupByCol+1
	END
		
	SET @paramCounter=@paramCounter+1
END


--## 3 - Add Null columns if Groupby contains less items then @GroupByMaxCol
WHILE @GroupByCol<=@GroupByMaxCol
BEGIN
	SET @SelectColumns= @SelectColumns+''''' AS Col'+ Convert(varchar,@GroupByCol)+','
	SET @GroupByCol=@GroupByCol+1
END


--## 4 - Clean up SQL by taking out the coma at the end
IF LEN(@GroupByClause1)>0 SET @GroupByClause1=LEFT(@GroupByClause1,LEN(@GroupByClause1)-1)
IF LEN(@GroupByClause2)>0 SET @GroupByClause2=LEFT(@GroupByClause2,LEN(@GroupByClause2)-1)
IF LEN(@SelectColumns)>0 SET @SelectColumns=LEFT(@SelectColumns,LEN(@SelectColumns)-1)
IF LEN(@InsertIntoClause)>0 SET @InsertIntoClause=LEFT(@InsertIntoClause,LEN(@InsertIntoClause)-1)
IF LEN(@InclMissPerFields)>0 SET @InclMissPerFields=LEFT(@InclMissPerFields,LEN(@InclMissPerFields)-1)


--## 5 - Where Clause - used to insert data later into temp table against given filters
SET @Where_Clause = ' WHERE 0=0 '


--###
IF @IncludeActuals =0 SET @Where_Clause = @Where_Clause +  ' AND IsActual<>1 '
IF @IncludeProjected =0 SET @Where_Clause = @Where_Clause +  ' AND IsActual<>0 '

IF @CCActivity <>''
BEGIN
	SET @Where_Clause = @Where_Clause +  ' AND ('

	SET @tmpFilter=@CCActivity
	SET @Counter=CHARINDEX(',',@tmpFilter)
	
	WHILE @Counter>0
	BEGIN
		--Retrieve Filter
		SET @Column=LEFT(@tmpFilter,@Counter-1)	--retrieved Filter
		SET @tmpFilter=RIGHT(@tmpFilter,LEN(@tmpFilter)-@Counter)
	
		SET @Where_Clause = @Where_Clause + 'CC_Activity LIKE ''' +  @Column + ''' OR '
	
		SET @Counter=CHARINDEX(',',@tmpFilter)
	
	END
	
	--remove last OR and add )
	SET @Where_Clause = LEFT(@Where_Clause,LEN(@Where_Clause)-3) + ') '
END

IF @CCLocation <>''
BEGIN
	SET @Where_Clause = @Where_Clause +  ' AND ('

	SET @tmpFilter=@CCLocation
	SET @Counter=CHARINDEX(',',@tmpFilter)
	
	WHILE @Counter>0
	BEGIN
		--Retrieve Filter
		SET @Column=LEFT(@tmpFilter,@Counter-1)	--retrieved Filter
		SET @tmpFilter=RIGHT(@tmpFilter,LEN(@tmpFilter)-@Counter)
	
		SET @Where_Clause = @Where_Clause + 'CC_Location LIKE ''' +  @Column + ''' OR '
	
		SET @Counter=CHARINDEX(',',@tmpFilter)
	
	END
	
	--remove last OR and add )
	SET @Where_Clause = LEFT(@Where_Clause,LEN(@Where_Clause)-3) + ') '
END

IF @CCResponsibility <>''
BEGIN
	SET @Where_Clause = @Where_Clause +  ' AND ('

	SET @tmpFilter=@CCResponsibility
	SET @Counter=CHARINDEX(',',@tmpFilter)
	
	WHILE @Counter>0
	BEGIN
		--Retrieve Filter
		SET @Column=LEFT(@tmpFilter,@Counter-1)	--retrieved Filter
		SET @tmpFilter=RIGHT(@tmpFilter,LEN(@tmpFilter)-@Counter)
	
		SET @Where_Clause = @Where_Clause + 'CC_Responsibility LIKE ''' +  @Column + ''' OR '
	
		SET @Counter=CHARINDEX(',',@tmpFilter)
	
	END
	
	--remove last OR and add )
	SET @Where_Clause = LEFT(@Where_Clause,LEN(@Where_Clause)-3) + ') '
END

IF @CostCategory <>''
BEGIN
	SET @Where_Clause = @Where_Clause +  ' AND ('

	SET @tmpFilter=@CostCategory
	SET @Counter=CHARINDEX(',',@tmpFilter)
	
	WHILE @Counter>0
	BEGIN
		--Retrieve Filter
		SET @Column=LEFT(@tmpFilter,@Counter-1)	--retrieved Filter
		SET @tmpFilter=RIGHT(@tmpFilter,LEN(@tmpFilter)-@Counter)
	
		SET @Where_Clause = @Where_Clause + 'Cost_Category LIKE ''' +  @Column + ''' OR '
	
		SET @Counter=CHARINDEX(',',@tmpFilter)
	
	END
	
	--remove last OR and add )
	SET @Where_Clause = LEFT(@Where_Clause,LEN(@Where_Clause)-3) + ') '
END

IF @BranchID <>'' SET @Where_Clause = @Where_Clause +  ' AND BranchID IN (' + @BranchID + ') '
IF @FleetID <>'' SET @Where_Clause = @Where_Clause +  ' AND FleetID IN (' + @FleetID + ') '
IF @SiteID <>'' SET @Where_Clause = @Where_Clause +  ' AND SiteID IN (' + @SiteID + ') '
IF @CostCentreID <>'' SET @Where_Clause = @Where_Clause +  ' AND Cost_Centre_ID IN (' + @CostCentreID + ') '
IF @CostExpenseID <>'' SET @Where_Clause = @Where_Clause +  ' AND Cost_Expense_ID IN (' + @CostExpenseID + ') '
IF @CostBearerID <>'' SET @Where_Clause = @Where_Clause +  ' AND CostBearerID IN (' + @CostBearerID + ') '

--### AL 09/06/06
DECLARE @strStartDate varchar(50),@strEndDate varchar(50)
SET @strStartDate=Convert(varchar,@StartDate)
SET @strEndDate=Convert(varchar,@EndDate)
SET @Where_Clause = @Where_Clause +  ' AND (CalenderPeriod BETWEEN ' + @strStartDate + ' AND ' + @strEndDate + ') '

--### AL 02/04/08
SET @Where_Clause = @Where_Clause +  ' AND Projection_Type_ID IN (' + @ProjectionTypeID + ') '

/*
--debug only
print @Where_Clause
*/

--## 6 - Insert amounts into temporary table 
SET @SQL1 = ' INSERT INTO #z_Cost (Amount,CalenderPeriod' + CASE WHEN @InsertIntoClause='' THEN '' ELSE ','+@InsertIntoClause END + ') '
SET @SQL1=@SQL1+' SELECT SUM(' + @AmountString + '),CalenderPeriod'
SET @SQL1 =  @SQL1 + CASE WHEN @GroupByClause1='' THEN '' ELSE ','+ @GroupByClause1 END

SET @SQL2 =  @Where_Clause + @NonNullAnalyseByID + ' GROUP BY ' + CASE WHEN @GroupByClause1='' THEN '' ELSE @GroupByClause1 +  ',' END + 'CalenderPeriod'

/*
--debug only
print @SQL1 + ' FROM RPT_TOTAL_COST_OH_V ' + @SQL2
print @SQL1 + ' FROM RPT_TOTAL_COST_EQP_V ' + @SQL2
print @SQL1 + ' FROM RPT_TOTAL_COST_OC_V ' + @SQL2
*/

IF @IncludeOverheads=1 EXEC(@SQL1 + ' FROM RPT_TOTAL_COST_OH_V ' + @SQL2)
IF @IncludeEquipment=1 EXEC(@SQL1 + ' FROM RPT_TOTAL_COST_EQP_V ' + @SQL2)
IF @IncludeOtherCosts=1 EXEC(@SQL1 + ' FROM RPT_TOTAL_COST_OC_V ' + @SQL2)


--## 7  - Insert the missing calender periods into temporary table
SET @SQL =  'INSERT INTO #z_Cost(Amount,CalenderPeriod' + CASE @InclMissPerFields WHEN '' THEN ')' ELSE ','+ @InclMissPerFields + ')' END
SET @SQL = @SQL + ' SELECT 0,rm.Calendar_Period' + CASE @InclMissPerFields WHEN '' THEN '' ELSE ','+ @InclMissPerFields END
SET @SQL = @SQL + ' FROM REPORT_MONTH_V rm '+ CASE @InclMissPerFields WHEN '' THEN '' ELSE 'CROSS JOIN (SELECT DISTINCT '+ @InclMissPerFields + ' FROM #z_Cost) A'END
SET @SQL = @SQL + ' WHERE (rm.Calendar_Period NOT IN (SELECT DISTINCT CalenderPeriod FROM #z_Cost))'
SET @SQL = @SQL + ' AND (rm.Calendar_Period BETWEEN ' + @strStartDate + ' AND ' + @strEndDate + ')'
SET @SQL = @SQL + ' GROUP BY rm.Calendar_Period'+ CASE @InclMissPerFields WHEN '' THEN '' ELSE ','+ @InclMissPerFields END

/*
--debug only
print @SQL
*/

EXEC(@SQL)

/*
--debug only
SELECT * FROM #z_Cost
*/


--AL: 27/06/08
UPDATE #z_Cost
SET CalenderPeriod=left(convert(varchar,dateadd(month,-1*@YearStartMonth, convert(datetime,convert(varchar,calenderperiod) + '01',112)),112),6)




--########## Get out Data against Analyse By
IF @AnalyseBy = 'MONH' 
BEGIN
	IF @GroupByClause2<>'' SET @GroupByClause2=@GroupByClause2 +','
	SET @SQL =  'SELECT '+ @SelectColumns +',CalenderPeriod,'
	SET @SQL = @SQL + 'RIGHT(CONVERT(VARCHAR(12),CONVERT(DATETIME,CONVERT(VARCHAR,CalenderPeriod)+''01'',112),113),9) AS CalPeriodDescr,'
	SET @SQL = @SQL + 'SUM(Amount) AS TotalCost,'
	SET @SQL = @SQL + '''' + @CostTypeString + ''' AS CostType,'
	SET @SQL = @SQL + 'convert(bit,' + convert(varchar,@dateBased) + ') AS DateBased '
	SET @SQL = @SQL + 'FROM #z_Cost B '
	SET @SQL = @SQL + 'GROUP BY '+ @GroupByClause2+'CalenderPeriod ' 
	SET @SQL = @SQL + 'ORDER BY CalenderPeriod'
	
END
ELSE IF @AnalyseBy = 'QRTR' 
BEGIN
	IF @GroupByClause2<>'' SET @GroupByClause2=@GroupByClause2 +','
	SET @SQL =  'SELECT ' + @SelectColumns +','
	SET @SQL = @SQL + 'CAST(Left(CalenderPeriod,4) + CONVERT(varchar(1),((Right(CalenderPeriod,2)+2)/3)) AS int) as  CalenderPeriod,'
	SET @SQL = @SQL + 'LEFT(CalenderPeriod,4) + ''-Q'' + CONVERT(varchar(1),((Right(CalenderPeriod,2)+2)/3)) as CalPeriodDescr,'
	SET @SQL = @SQL + 'SUM(Amount) AS TotalCost,'
	SET @SQL = @SQL + '''' + @CostTypeString + ''' AS CostType,'
	SET @SQL = @SQL + 'convert(bit,' + convert(varchar,@dateBased) + ') AS DateBased '
	SET @SQL = @SQL + 'FROM #z_Cost B '
	SET @SQL = @SQL + 'GROUP BY '+ @GroupByClause2
	SET @SQL = @SQL + 'CAST(Left(CalenderPeriod,4) + CONVERT(varchar(1),((Right(CalenderPeriod,2)+2)/3)) AS int),'
	SET @SQL = @SQL + 'LEFT(CalenderPeriod,4) + ''-Q'' + CONVERT(varchar(1),((Right(CalenderPeriod,2)+2)/3)) '
	SET @SQL = @SQL + 'ORDER BY Left(CalenderPeriod,4) + ''-Q'' + CONVERT(varchar(1),((Right(CalenderPeriod,2)+2)/3)) '
END
ELSE IF @AnalyseBy = 'YEAR'  
BEGIN
	IF @GroupByClause2<>'' SET @GroupByClause2=@GroupByClause2 +','
	SET @SQL =  'SELECT ' + @SelectColumns +',CalenderPeriod/100 as CalenderPeriod,CAST(CalenderPeriod/100 AS varchar) AS CalPeriodDescr,'
	SET @SQL = @SQL + 'SUM(Amount) AS TotalCost,'
	SET @SQL = @SQL + '''' + @CostTypeString + ''' AS CostType,'
	SET @SQL = @SQL + 'convert(bit,' + convert(varchar,@dateBased) + ') AS DateBased '
	SET @SQL = @SQL + 'FROM #z_Cost B '
	SET @SQL = @SQL + 'GROUP BY '+ @GroupByClause2 + 'CalenderPeriod/100,CAST(CalenderPeriod/100 AS varchar) '
	SET @SQL = @SQL + 'ORDER BY CalenderPeriod/100'
END
ELSE IF @PieChart=1 
BEGIN
	IF @GroupByClause2=' '
		SET @SQL=''
	ELSE
	BEGIN 
		SET @SQL =  'SELECT ' + @SelectColumns +','
		SET @SQL = @SQL + 'SUM(Amount) AS TotalCost,'
		SET @SQL = @SQL + '''' + @CostTypeString + ''' AS CostType,'
		SET @SQL = @SQL + 'convert(bit,' + convert(varchar,@dateBased) + ') AS DateBased '
		SET @SQL = @SQL + 'FROM #z_Cost B '
		SET @SQL = @SQL + 'GROUP BY '+ @GroupByClause2 
		SET @SQL = @SQL + ' ORDER BY '+ @GroupByClause2
	END
END
ELSE	--Bar chart with other analyse by
BEGIN
	SET @SQL =  'SELECT ' + @SelectColumns 
	SET @SQL = @SQL + ',0 as CalenderPeriod, '''' as CalPeriodDescr,SUM(Amount) AS TotalCost,'
	SET @SQL = @SQL + '''' + @CostTypeString + ''' AS CostType,'
	SET @SQL = @SQL + 'convert(bit,' + convert(varchar,@dateBased) + ') AS DateBased '
	SET @SQL = @SQL + 'FROM #z_Cost B '
	SET @SQL = @SQL + 'GROUP BY '+ @GroupByClause2 
	SET @SQL = @SQL + ' ORDER BY ' + @GroupByClause2
END


/*
--debug only
print @SQL
*/

IF @SQL<>'' EXEC(@SQL)


--########## drop temporary table
DROP TABLE #z_Cost




GO

/****** Object:  StoredProcedure [dbo].[EMPLOYEE_AVAILABILITY_REUSABLE_GET_P]    Script Date: 11/04/2011 16:10:40 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[EMPLOYEE_AVAILABILITY_REUSABLE_GET_P]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[EMPLOYEE_AVAILABILITY_REUSABLE_GET_P]
GO

/****** Object:  StoredProcedure [dbo].[EMPLOYEE_AVAILABILITY_REUSABLE_GET_P]    Script Date: 11/04/2011 16:10:40 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

create     PROCEDURE [dbo].[EMPLOYEE_AVAILABILITY_REUSABLE_GET_P]
/******************************************************************************
	File: EMPLOYEE_AVAILABILITY_REUSABLE_GET_P.sql
	Name: EMPLOYEE_AVAILABILITY_REUSABLE_GET_P

	Called By: 

	Desc:  get Employee availability details
             

	Auth: Alex Lassauniere
	Date: 28 May 2007
*******************************************************************************
		Change History
*******************************************************************************
	Date:		Author:		Description:
	--------	--------	----------------------------------------
	29/05/07	AL			Added Working
	01/06/07	AL			Added @WorkingStatusID
	05/06/07	AL			Mod Allocation query
	06/06/07	AL			Added @Shift
	10/06/07	AL			Now using Views and no Cross join
	12/06/07	AL			Fixed Join to include slots within a calendar hour
	04/07/07	AL			Changed Join to last 2 queries to speed up process
	11/03/08	AL			CR6936: Fixed Date range check
	26/09/08	AL			Fixed overlapping regions
	23/10/08	AL			Fixed allocated end time
	01/10/09	AL			CR8304: changed filters to varchar + sped up process
	14 Jun 11	V Vasylyeva	#1813 speeding up
	17 Jun 11	V Vasylyeva	#1903 errors when multiple values selected in the filters
	04 Nov 11   G Dhillon   #2768 BS Labour Availability Issues
*******************************************************************************/	
	@From DateTime,
	@To DateTime, 
	@BranchID varchar(MAX)='', 
	@SiteID varchar(MAX)='',
	@WorkGroupID varchar(MAX)='', 
	@LabourActivityID varchar(MAX)='',
	@WorkingStatusID int =null,
	@Shift int=0
AS

	SET @From=convert(DateTime,Convert(varchar,@From,106) + ' ' + convert(varchar,DATEPART(Hour,@From)) + ':00:00:000',113)	--Start range on start of current hour
	SET @To=convert(DateTime,Convert(varchar,@To,106) + ' ' + convert(varchar,DATEPART(Hour,@To)) + ':00:00:000',113)	--end range on start of current hour

	--AL: 06/06/07
	SET @From=dateadd(minute,@Shift,@From)
	SET @To=dateadd(minute,@Shift,@To)
	

	DECLARE @StatusNONWORKING int,@StatusNONWORKINGALLOC int,@StatusNONWORKINGSCHED int, @StatusNONAVAILABLE int, @StatusAVAILABLE int, @StatusALLOCATED int,@StatusPARTLYAVAILABLE int
	DECLARE @TaskStatusYTS int, @TaskStatusIP int, @TaskStatusC int, @TaskStatusA int, @CompanyCode varchar(50)

	SET @TaskStatusYTS			=6
	SET @TaskStatusIP			=2
	SET @TaskStatusC			=3
	SET @TaskStatusA			=5

	SET @StatusNONWORKING			=0
	SET @StatusNONWORKINGALLOC		=1
	SET @StatusNONWORKINGSCHED		=2
	SET @StatusNONAVAILABLE		=3
	SET @StatusALLOCATED		=4 
	SET @StatusAVAILABLE		=5
	SET @StatusPARTLYAVAILABLE	=6

	/*VV #1903
	SET @BranchID =nullif(@BranchID,0)
	SET @SiteID =nullif(@SiteID,0)
	SET @WorkGroupID =nullif(@WorkGroupID,0)
	SET @LabourActivityID =nullif(@LabourActivityID,0)
	SET @WorkingStatusID =nullif(@WorkingStatusID,0)
	*/
	

	--0: create temp table containing the hour range to prevent calling the view later
	CREATE TABLE #CH(Calendar_Hour DATETIME PRIMARY KEY,Calendar_Date DATETIME)
	INSERT INTO #CH(Calendar_Hour,Calendar_Date)
	SELECT dateadd(minute,@Shift,Calendar_Hour) as  Calendar_Hour, Calendar_Date
	FROM	CALENDAR_HOUR_V
	WHERE	(Calendar_Hour BETWEEN @From AND @To)
	

	CREATE TABLE #CH1(Calendar_Hour_Start DATETIME PRIMARY KEY,Calendar_Hour_End DATETIME,Calendar_Date DATETIME)
	INSERT INTO #CH1(Calendar_Hour_Start,Calendar_Hour_End,Calendar_Date)
	SELECT Calendar_Hour_Start, dateadd(ms,-2,dateadd(hh,1,Calendar_Hour_Start)) AS Calendar_Hour_End, Calendar_Date
	FROM
		(SELECT dateadd(minute,@Shift,Calendar_Hour) as  Calendar_Hour_Start, Calendar_Date			
		FROM	CALENDAR_HOUR_V
		WHERE	(Calendar_Hour >= @From AND Calendar_Hour<@To))A
		

	CREATE TABLE #ED(Employee_ID INT PRIMARY KEY, EmployeeName VARCHAR(200) COLLATE database_default, 
					BranchId INT, SiteId INT, Site VARCHAR(200) COLLATE database_default, 
					WorkGroupID INT, WorkGroup VARCHAR(200) COLLATE database_default, 
					LabourActivityId INT, LabourActivity VARCHAR(200) COLLATE database_default)
	INSERT INTO #ED(Employee_ID, EmployeeName, BranchId, SiteId, Site, 
					WorkGroupID, WorkGroup, LabourActivityId, LabourActivity)
	SELECT Employee_ID, EmployeeName, BranchId, SiteId, Site, 
			WorkGroupID, WorkGroup, LabourActivityId, LabourActivity
	FROM  
			EMPLOYEE_REPORT_V
	WHERE 
	     	(BranchID IN (SELECT list_item FROM dbo.LIST_TO_TABLE_F(@BranchID)) OR ISNULL(@BranchID,'0')='0')
			AND (SiteID IN (SELECT list_item FROM dbo.LIST_TO_TABLE_F(@SiteID)) OR ISNULL(@SiteID,'0')='0')
			AND (WorkGroupID IN (SELECT list_item FROM dbo.LIST_TO_TABLE_F(@WorkGroupID)) OR ISNULL(@WorkGroupID,'0')='0')
			AND (LabourActivityId IN (SELECT list_item FROM dbo.LIST_TO_TABLE_F(@LabourActivityID)) OR ISNULL(@LabourActivityID,'0')='0')
			AND (@WorkingStatusID IS NULL)	--AL: 01/06/07
	
	/*VV #1813*/
	SELECT E.Employee_ID,
	ERA.From_Time, ERA.To_Time, ERA.Break_Start, ERA.Break_End,	ERA.HourStatus
	INTO #EMPLOYEE_AVAILABILITY
	FROM 
	#ED E 
		INNER JOIN
	EMPLOYEE_REPORT_AVAILABILITY_V ERA 
		ON E.Employee_ID=ERA.Employee_ID 
	WHERE
	((From_Time BETWEEN @From AND @To) OR (To_Time BETWEEN @From AND @To) 
	OR (From_Time<=@From AND To_Time>=@To))
	
	/*VV #1813*/
	SELECT E.Employee_ID, ERA.From_Time,ERA.To_Time
	INTO #EMPLOYEE_ALLOCATION
	FROM  			
	#ED E 
		INNER JOIN
	EMPLOYEE_REPORT_ALLOCATION_V ERA 
		ON E.Employee_ID=ERA.Employee_ID 
	WHERE
	((ERA.From_Time BETWEEN @From AND @To) 
	OR (ERA.To_Time BETWEEN @From AND @To) 
	OR (ERA.From_Time<=@From AND To_Time>=@To))	
	
	
		
	SELECT	*
	FROM
		(--1: get all employees
		SELECT	A.Employee_ID,A.EmployeeName,
				A.BranchID,A.SiteId,A.Site,A.WorkGroupID,A.WorkGroup,A.LabourActivityId,A.LabourActivity,0 as AvailableHour,
				CH.Calendar_Hour,0 as Working,
				@StatusNONWORKING as HourStatus,0 as PartlyHourStatus
		FROM
			#ED A  CROSS JOIN
			(SELECT TOP 1 Calendar_Hour, Calendar_Date			--AL: 06/06/07
			FROM	#CH) CH
		--ORDER BY	Calendar_hour

		UNION ALL

		--2: get employee availablity status
		SELECT	Employee_ID,EmployeeName,
				BranchID,SiteId,Site,WorkGroupID,WorkGroup,LabourActivityId,LabourActivity,Working as AvailableHour,
				Calendar_Hour,Working,
				case when Working=0 then @StatusNONWORKINGSCHED else HourStatus end as HourStatus,
				case when Working=0 or Working=1 then 0 else 1 end as PartlyHourStatus
		FROM
			(SELECT	Employee_ID,EmployeeName,
					BranchID,SiteId,Site,WorkGroupID,WorkGroup,LabourActivityId,LabourActivity,
					Calendar_Hour_Start as Calendar_Hour,HourStatus,
					SUM(case 
						when From_Time BETWEEN Calendar_Hour_Start AND Calendar_Hour_End then
							case when To_Time BETWEEN Calendar_Hour_Start AND Calendar_Hour_End
								then convert(float,datediff(mi,From_Time,To_Time))/60
								else convert(float,datediff(mi,From_Time,Calendar_Hour_End))/60
							end
						when To_Time BETWEEN Calendar_Hour_Start AND Calendar_Hour_End then 
							convert(float,datediff(mi,Calendar_Hour_Start,To_Time))/60	--Note only one case here where From_Time before Calendar_Hour_Start as other is handled in previous statement
						when To_Time<Calendar_Hour_Start OR From_Time>Calendar_Hour_End then
							0
						else
							1	--would be From_Time<Calendar_Hour_Start AND To_Time>Calendar_Hour_End
					end) -
					SUM(case 
						when Break_Start BETWEEN Calendar_Hour_Start AND Calendar_Hour_End then
							case when Break_End BETWEEN Calendar_Hour_Start AND Calendar_Hour_End
								then convert(float,datediff(mi,Break_Start,Break_End))/60
								else convert(float,datediff(mi,Break_Start,Calendar_Hour_End))/60
							end
						when Break_End BETWEEN Calendar_Hour_Start AND Calendar_Hour_End then 
							convert(float,datediff(mi,Calendar_Hour_Start,Break_End))/60	--Note only one case here where From_Time before Calendar_Hour_Start as other is handled in previous statement
						when Break_End<Calendar_Hour_Start OR Break_Start>Calendar_Hour_End then
							0
						else
							1	--would be Break_Start<Calendar_Hour_Start AND Break_End>Calendar_Hour_End
					end) as Working
			FROM
				/* VV #1813
				(SELECT E.Employee_ID, E.EmployeeName, 
						E.BranchId, E.SiteId, E.Site, 
						E.WorkGroupID, E.WorkGroup, 
						E.LabourActivityId, E.LabourActivity, 
						From_Time, To_Time, Break_Start, Break_End, 
						HourStatus,
						CH.Calendar_Hour as Calendar_Hour_Start, dateadd(hh,1,CH.Calendar_Hour) as Calendar_Hour_End
				FROM  
						#ED E INNER JOIN
						EMPLOYEE_REPORT_AVAILABILITY_V ERA ON E.Employee_ID=ERA.Employee_ID FULL OUTER JOIN	--AL: 04/07/07
						(SELECT Calendar_Hour, Calendar_Date			--AL: 06/06/07
						FROM	#CH) CH ON
							((CH.Calendar_Hour BETWEEN ERA.From_Time AND ERA.To_Time) OR (dateadd(hh,1,CH.Calendar_Hour)  BETWEEN ERA.From_Time AND ERA.To_Time))
							OR ((ERA.From_Time BETWEEN CH.Calendar_Hour AND dateadd(hh,1,CH.Calendar_Hour) ) OR (ERA.To_Time BETWEEN CH.Calendar_Hour AND dateadd(hh,1,CH.Calendar_Hour)))
				WHERE
						((From_Time BETWEEN @From AND @To) OR (To_Time BETWEEN @From AND @To) OR (From_Time<=@From AND To_Time>=@To))	--AL: 11/03/08
				)B*/
				(
				SELECT E.Employee_ID, E.EmployeeName, 
				E.BranchId, E.SiteId, E.Site, 
				E.WorkGroupID, E.WorkGroup, 
				E.LabourActivityId, E.LabourActivity, 
				ERA.From_Time, ERA.To_Time, ERA.Break_Start, ERA.Break_End, 
				ERA.HourStatus,
				CH.Calendar_Hour as Calendar_Hour_Start, dateadd(hh,1,CH.Calendar_Hour) as Calendar_Hour_End
				FROM  
				#ED E 
					INNER JOIN
				#EMPLOYEE_AVAILABILITY ERA 
					ON E.Employee_ID=ERA.Employee_ID 
					FULL OUTER JOIN
				#CH CH 
					ON ((CH.Calendar_Hour BETWEEN ERA.From_Time AND ERA.To_Time) 
					OR (dateadd(hh,1,CH.Calendar_Hour)  BETWEEN ERA.From_Time AND ERA.To_Time))
					OR ((ERA.From_Time BETWEEN CH.Calendar_Hour AND dateadd(hh,1,CH.Calendar_Hour) ) 
					OR (ERA.To_Time BETWEEN CH.Calendar_Hour AND dateadd(hh,1,CH.Calendar_Hour)))
				WHERE E.Employee_ID>0
				) B
				GROUP BY	Employee_ID,EmployeeName,
							BranchID,SiteId,Site,WorkGroupID,WorkGroup,LabourActivityId,LabourActivity,
							Calendar_Hour_Start,HourStatus
			)C
		

		UNION ALL

		--3: get employee allocation
		SELECT	Employee_ID,EmployeeName,
				BranchID,SiteId,Site,WorkGroupID,WorkGroup,LabourActivityId,LabourActivity,0 as AvailableHour,
				Calendar_Hour,Working,
				case when Working=0 then @StatusNONWORKINGALLOC else @StatusALLOCATED end as HourStatus,
				case when Working=1 or Working=0 then 0 else 1 end as PartlyHourStatus
		FROM
			(SELECT	Employee_ID,EmployeeName,
					BranchID,SiteId,Site,WorkGroupID,WorkGroup,LabourActivityId,LabourActivity,
					Calendar_Hour_Start as Calendar_Hour,
					SUM(case 
						when From_Time >= Calendar_Hour_Start AND From_Time<Calendar_Hour_End then
							case when To_Time >= Calendar_Hour_Start AND To_Time<Calendar_Hour_End
								then convert(float,datediff(mi,From_Time,To_Time))/60
								--AL: 23/10/08
								--else convert(float,datediff(mi,From_Time,Calendar_Hour_End))/60
								else convert(float,datediff(mi,From_Time,dateadd(ms,2,Calendar_Hour_End)))/60
							end
						when To_Time >= Calendar_Hour_Start AND To_Time<Calendar_Hour_End then 
							convert(float,datediff(mi,Calendar_Hour_Start,To_Time))/60	--Note only one case here where From_Time before Calendar_Hour_Start as other is handled in previous statement
						when To_Time<Calendar_Hour_Start OR From_Time>Calendar_Hour_End then
							0
						else
							1	--would be From_Time<Calendar_Hour_Start AND To_Time>Calendar_Hour_End
					end)  as Working
			FROM
				/*VV #1813
				(SELECT E.Employee_ID, E.EmployeeName, 
						E.BranchId, E.SiteId, E.Site, 
						E.WorkGroupID, E.WorkGroup, 
						E.LabourActivityId, E.LabourActivity,
						From_Time,To_Time,
						CH.Calendar_Hour_Start, CH.Calendar_Hour_End
				FROM  
						--AL: 26/09/08
						#ED E INNER JOIN
						EMPLOYEE_REPORT_ALLOCATION_V ERA ON E.Employee_ID=ERA.Employee_ID FULL OUTER JOIN	--AL: 04/07/07
						(SELECT Calendar_Hour_Start,Calendar_Hour_End,Calendar_Date
						FROM #CH1) CH ON
							((CH.Calendar_Hour_Start >= ERA.From_Time AND CH.Calendar_Hour_Start<ERA.To_Time) OR 
							 (CH.Calendar_Hour_End >= ERA.From_Time AND CH.Calendar_Hour_End<ERA.To_Time) OR
							 (CH.Calendar_Hour_Start<ERA.From_Time AND CH.Calendar_Hour_End>ERA.To_Time))
				WHERE
						((From_Time BETWEEN @From AND @To) OR (To_Time BETWEEN @From AND @To) OR (From_Time<=@From AND To_Time>=@To))	--AL: 11/03/08)					
				)B*/
				
				(
					SELECT E.Employee_ID, E.EmployeeName, 
					E.BranchId, E.SiteId, E.Site, 
					E.WorkGroupID, E.WorkGroup, 
					E.LabourActivityId, E.LabourActivity,
					ERA.From_Time,ERA.To_Time,
					CH.Calendar_Hour_Start, CH.Calendar_Hour_End
					FROM  
					#ED E 
						INNER JOIN
					#EMPLOYEE_ALLOCATION ERA 
						ON E.Employee_ID=ERA.Employee_ID 
						FULL OUTER JOIN	
					#CH1 CH 
						ON
						((CH.Calendar_Hour_Start >= ERA.From_Time AND CH.Calendar_Hour_Start<ERA.To_Time) OR 
						 (CH.Calendar_Hour_End >= ERA.From_Time AND CH.Calendar_Hour_End<ERA.To_Time) OR
						 (CH.Calendar_Hour_Start<ERA.From_Time AND CH.Calendar_Hour_End>ERA.To_Time))
					WHERE E.Employee_ID>0
				) B
				
			GROUP BY	Employee_ID,EmployeeName,
						BranchID,SiteId,Site,WorkGroupID,WorkGroup,LabourActivityId,LabourActivity,
						Calendar_Hour_Start ,From_Time,To_Time
			)C
		)UNION_QUERY

DROP TABLE #CH,#CH1,#ED


GO



if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[RPT_MAINTENANCE_STRATEGY_SUMMARY_P]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[RPT_MAINTENANCE_STRATEGY_SUMMARY_P]
GO


CREATE          Procedure [dbo].[RPT_MAINTENANCE_STRATEGY_SUMMARY_P]  
/******************************************************************************  
  
 Name: RPT_MAINTENANCE_STRATEGY_SUMMARY_P  
  
 Called By:   
 Desc:   
  
 Auth: Veronika Vasylyeva  
 Date: 20 May 2008  
*******************************************************************************  
  Change History  
*******************************************************************************  
 Date:  Author:  Description:  
 -------- -------- ----------------------------------------  
 09-Nov-11 RJ  Issue 2810 - Rolled back #355 
 30-Oct-08 VV  CR7548 Took out the primary key of #z_OccTypes  
 29/10/08 KN  Fixed Selecting only End of life Category  
 17/09/08 AL  removed links to tblqualifier and tbluoms  
*******************************************************************************/  
 /* Param List */      
 @BranchID varchar(max) = '',  
 @SiteID varchar(max) = '',  
 @FleetID varchar(max) = '',  
 @ModelID varchar(max) = '' ,  
 @EqpPlanID  varchar(max) = '',  
 @SystemID varchar(max) = '',  
 @SubSystemID varchar(max) = '',  
 @CompCodeID varchar(max) = '',  
 @TaskTypeID varchar(max) = '',  
 @TaskHeaderId varchar(max)='',  
 @Warranty int=0,  --0: No, 1: Yes, 2: All  
 @Redo int=0,   --0: No, 1: Yes, 2: All  
 @LifeConfirmed int=1 --0: No, 1: Yes, 2: All  
AS  
  
DECLARE @SchSuppr int  
DECLARE @SchDep int  
DECLARE @CA varchar(10)  
DECLARE @Multiple varchar(20)  
DECLARE @Days varchar(10)  
DECLARE @DefCB int  
DECLARE @StartDate datetime  
DECLARE @EndDate datetime  
  
SET @CA='CA - '  
SET @Multiple='Multiple'  
SET @Days='Days'  
  
SET @StartDate=CONVERT(datetime, LEFT(CONVERT(varchar, DATEADD(month, 1, GETDATE()), 112), 6) + '01', 112)  
SET @EndDate=DATEADD(year, 1,@StartDate)  
  
SET @SchSuppr=1  
SET @SchDep=2  
  
SELECT @DefCB=CostBearerId FROM tblCostBearers WHERE Default_Value=1  
  
CREATE TABLE #z_ProjTasks(  
  ProjTaskId int,  
  EqpPlanId int,  
  EqpProjId int,  
  ManufacturerId int,  
  UsageQUOMId int,  
  First float,  
  Frequency float,  
  Final float,  
  Task_Header_Id int,  
  Rotable_Part_Id int,  
  Part_Id int,  
  Planning_Task bit,  
  Planning_Lead_Time int,  
  Schedule_Type_Id int,  
  Scheduling_Group_Id int,  
  Operational_Criticality_Id int,  
  Warranty_Period_Usage float,  
  Warranty_Period_Days float,  
  Maintenance_Strategy_Id int,  
  Changeout_Guidelines varchar(1000) COLLATE DATABASE_DEFAULT,  
  Task_Description varchar(100) COLLATE DATABASE_DEFAULT,  
  InspectionTaskTypeId int,  
  PerformanceStrategyReason varchar(200) COLLATE DATABASE_DEFAULT,  
  RCMComponentStructureId int,  
  ParentTaskId int,  
  Unscheduled smallint    
 PRIMARY KEY(ProjTaskId))  
  
  
CREATE TABLE #z_RRTasks(  
  ProjTaskId int,  
  Frequency float,  
  Task_Header_Id int,  
  ParentTaskId int,  
  PartsCost float,  
  LabourCost float,  
  MiscCost float,  
  Duration float,  
  LabourHours float  
 PRIMARY KEY(ProjTaskId))  
  
INSERT INTO #z_ProjTasks(  
ProjTaskId,EqpPlanId,EqpProjId,ManufacturerId,UsageQUOMId,First,Frequency,Final,Task_Header_Id,Rotable_Part_Id,  
Part_Id,Planning_Task,Planning_Lead_Time,Schedule_Type_Id,Scheduling_Group_Id,Operational_Criticality_Id,  
Warranty_Period_Usage,Warranty_Period_Days,Maintenance_Strategy_Id,Changeout_Guidelines,Task_Description,  
InspectionTaskTypeId,PerformanceStrategyReason,RCMComponentStructureId,ParentTaskId,Unscheduled)  
SELECT  
PT.ProjTaskId,PT.EqpPlanId,PT.EqpProjId,PT.ManufacturerId,PT.UsageQUOMId, PT.First,PT.Frequency,PT.Final,PT.Task_Header_Id,  
PT.Rotable_Part_Id,PT.Part_Id,PT.Planning_Task,PT.Planning_Lead_Time,PT.Schedule_Type_Id,PT.Scheduling_Group_Id,  
PT.Operational_Criticality_Id,PT.Warranty_Period_Usage,PT.Warranty_Period_Days,PT.Maintenance_Strategy_Id,  
PT.Changeout_Guidelines,PT.Task_Description,PT.InspectionTaskTypeId,PT.PerformanceStrategyReason,  
PT.RCMComponentStructureId,PT.ParentTaskId,PT.Unscheduled  
FROM   
EQUIPMENT_HIERARCHY_V EH  
 INNER JOIN  
tblProjTasks PT  
 ON EH.EqpProjId=PT.EqpProjId  
WHERE EH.Projection_Type_Id=1 AND PT.Unscheduled=0 AND PT.ParentTaskId IS NULL AND  
(@BranchId='' OR EH.BranchId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@BranchId))) AND  
(@SiteId='' OR EH.SiteId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@SiteId))) AND  
(@FleetId='' OR EH.FleetId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@FleetId))) AND  
(@EqpPlanId='' OR EH.EqpPlanId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@EqpPlanId))) AND  
(@ModelId='' OR EH.ModelId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@ModelId))) AND  
--(@SystemId='' OR SS.SystemId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@SystemId))) --AND  
--(@SubSystemId='' OR SS.SubSystemId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@SubSystemId))) AND  
--(@ComponentCodeId='' OR CC.ComponentCodeId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@ComponentCodeId))) AND  
--(@TaskTypeId='' OR PT.TaskTypeId IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@TaskTypeId))) AND  
(@TaskHeaderId='' OR PT.Task_Header_Id IN (SELECT List_Item FROM dbo.LIST_TO_TABLE_F(@TaskHeaderId)))  
  
--select * from #z_ProjTasks return  
  
INSERT INTO #z_RRTasks  
(ProjTaskId,Frequency,Task_Header_Id,ParentTaskId,PartsCost,LabourCost,MiscCost,Duration,LabourHours)  
SELECT PT.ProjTaskId,PT.Frequency,PT.Task_Header_Id,PT.ParentTaskId,  
SUM(PTA.PartsCost * CPE.CumPartsEscalation*PTO.Probability / 100/ ERC.ExRate) AS PartsCost,  
SUM(PTA.TotalLabourCost * CE.CumLaborEscalation  * PTO.Probability / 100/ ERC.ExRate) AS LabourCost,  
SUM(PTA.TotalMiscCost *CE.CumMiscEscalation * PTO.Probability / 100/ ERC.ExRate)  AS MiscCost,  
SUM(PTA.Duration* PTO.Probability / 100)  AS Duration,   
SUM(PTA.LaborHours* PTO.Probability / 100) AS LaborHours  
FROM  
tblProjTasks PT  
 INNER JOIN  
#z_ProjTasks ParT  
 ON PT.ParentTaskId=ParT.ProjTaskId  
 INNER JOIN   
tblProjTaskOpts PTO  
 ON PTO.ProjTaskId = PT.ProjTaskId  
 INNER JOIN   
PROJ_TASK_AMT_COST_1_V PTA  
 ON PTA.ProjTaskOptId = PTO.ProjTaskOptId  
 INNER JOIN   
tblCostEscalations CE  
 ON PTA.Pricing_Date >= CE.EscalationDate AND PTA.Pricing_Date < CE.EndDate  
 INNER JOIN   
tblCostPartsEscalations CPE  
 ON CE.CostEscalationId = CPE.CostEscalationId AND CPE.ManufacturerId = PT.ManufacturerId  
 INNER JOIN   
tblEqpProjs EPR  
 ON PT.EqpProjId = EPR.EqpProjId  
 INNER JOIN   
tblExRates ER  
 ON EPR.ExchangeRateId = ER.ExRateID  
 INNER JOIN   
tblExRateCurrencies ERC  
 ON ERC.ExRateID = ER.ExRateID AND ERC.CurrencyID = PTA.CurrencyID  
GROUP BY PT.ProjTaskId,PTO.ProjTaskOptId,PT.Frequency,PT.Task_Header_Id,PT.ParentTaskId  
  
CREATE TABLE #z_Cost_Allocation(ProjTaskAmtId int,JobCodeId int,Component_Code_Id int,ModifierId int,  
Cost_Allocation_Ref varchar(100) COLLATE DATABASE_DEFAULT  
PRIMARY KEY(ProjTaskAmtId))  
  
INSERT INTO #z_Cost_Allocation(ProjTaskAmtId,JobCodeId,Component_Code_Id,ModifierId,Cost_Allocation_Ref)  
SELECT PTA.ProjTaskAmtId,  
CASE COUNT(DISTINCT ISNULL(CAD.Job_Code_Id,0)) WHEN 1 THEN MAX(CAD.Job_Code_Id) ELSE -1 END  AS JobCodeId,  
Component_Code_Id,ModifierId,Cost_Allocation_Ref  
FROM  
#z_ProjTasks PT  
 INNER JOIN  
tblProjTaskOpts PTO  
 ON PT.ProjTaskId=PTO.ProjTaskId  
 INNER JOIN  
tblProjTaskAmts PTA  
 ON PTO.ProjTaskOptId=PTA.ProjTaskOptId  
 INNER JOIN  
COST_ALLOCATION CA  
 ON PTA.ProjTaskAmtId=CA.Proj_Task_Amt_Id  
 INNER JOIN  
COST_ALLOCATION_DETAIL CAD  
 ON CA.Cost_Allocation_Id=CAD.Cost_Allocation_Id  
GROUP BY PTA.ProjTaskAmtId,Component_Code_Id,ModifierId,Cost_Allocation_Ref  
  
--Failure Mode Analysis  
CREATE TABLE #z_RCM_FAILURE_MODE(RCMFailureModeId int, PrimaryMode bit, Frequency float,   
PartsCost float, LabourCost float, MiscCost float,  
PercentProbability float,OccurrenceTypeId int,RCMComponentStructureId int   
PRIMARY KEY(RCMFailureModeId,RCMComponentStructureId))  
  
CREATE TABLE #z_PM_FAILURE_MODE(RCMFailureModeId int, PrimaryMode bit, Frequency float,   
PartsCost float, LabourCost float, MiscCost float,  
PercentProbability float,OccurrenceTypeId int,RCMComponentStructureId int   
PRIMARY KEY(RCMFailureModeId,RCMComponentStructureId))  
  
CREATE TABLE #z_ProjTaskF(RCMComponentStructureId int,ProjTaskId int,TaskHeaderId int,PartsCost float,   
Frequency float,LabourCost float, MiscCost float,FleetId int,ModelId int,UsageQUOMId int  
PRIMARY KEY(RCMComponentStructureId,ProjTaskId,TaskHeaderId))  
  
IF EXISTS(SELECT RCMComponentStructureId FROM #z_ProjTasks WHERE RCMComponentStructureId>0)  
BEGIN  
 INSERT INTO #z_RCM_FAILURE_MODE(RCMFailureModeId, PrimaryMode, Frequency, PartsCost, LabourCost, MiscCost,   
 PercentProbability,OccurrenceTypeId,RCMComponentStructureId)  
 SELECT RCMFailureModeId, PrimaryMode, Frequency, PartsCost, LabourCost, MiscCost,  
 PercentProbability,OccurrenceTypeId,RCMComponentStructureId  
 FROM RCM_FAILURE_MODE WHERE RCMComponentStructureId IN (SELECT RCMComponentStructureId FROM #z_ProjTasks)  
  
 INSERT INTO #z_PM_FAILURE_MODE(RCMFailureModeId, PrimaryMode, Frequency, PartsCost, LabourCost, MiscCost,   
 PercentProbability,OccurrenceTypeId,RCMComponentStructureId)  
 SELECT RCMFailureModeId, PrimaryMode,NULLIF(Frequency,0) AS Frequency, NULLIF(PartsCost,0) AS PartsCost,   
 NULLIF(LabourCost,0) AS LabourCost,NULLIF(MiscCost,0) AS MiscCost,  
 PercentProbability,OccurrenceTypeId,RCMComponentStructureId  
 FROM #z_RCM_FAILURE_MODE WHERE PrimaryMode=1  
  
 INSERT INTO #z_ProjTaskF(RCMComponentStructureId,ProjTaskId,TaskHeaderId,Frequency,PartsCost,LabourCost,MiscCost,  
 FleetId,ModelId,UsageQUOMId)  
 SELECT PT.RCMComponentStructureId,PT.ProjTaskId,PT.Task_Header_Id,PT.Frequency,  
 SUM(PTA.PartsCost * CPE.CumPartsEscalation/ERC.ExRate) AS PartsCost,  
 SUM(PTA.TotalLabourCost * CE.CumLaborEscalation/ERC.ExRate) AS LabourCost,  
 SUM(PTA.TotalMiscCost * CE.CumMiscEscalation/ERC.ExRate)  AS MiscCost,  
 EH.FleetId,EH.ModelId,PT.UsageQUOMId  
 FROM  
 #z_ProjTasks Z  
  INNER JOIN  
 tblProjTasks PT   
  ON Z.ProjTaskId = PT.ProjTaskId   
  INNER JOIN  
 EQUIPMENT_HIERARCHY_V EH  
  ON PT.EqpProjId=EH.EqpProjId   
  INNER JOIN   
 tblProjTaskOpts PTO  
  ON PTO.ProjTaskId = PT.ProjTaskId  
  INNER JOIN   
 PROJ_TASK_AMT_COST_1_V PTA  
  ON PTA.ProjTaskOptId = PTO.ProjTaskOptId  
  INNER JOIN   
 tblCostEscalations CE  
  ON PTA.Pricing_Date >= CE.EscalationDate AND PTA.Pricing_Date < CE.EndDate  
  INNER JOIN   
 tblCostPartsEscalations CPE  
  ON CE.CostEscalationId = CPE.CostEscalationId AND CPE.ManufacturerId = PT.ManufacturerId  
  INNER JOIN   
 tblEqpProjs EPR  
  ON PT.EqpProjId = EPR.EqpProjId  
  INNER JOIN   
 tblExRates ER  
  ON EPR.ExchangeRateId = ER.ExRateID  
  INNER JOIN   
 tblExRateCurrencies ERC  
  ON ERC.ExRateID = ER.ExRateID AND ERC.CurrencyID = PTA.CurrencyID  
 WHERE PT.RCMComponentStructureId>0  
 GROUP BY PT.RCMComponentStructureId,PT.ProjTaskId,PT.Task_Header_Id,PT.Frequency,EH.FleetId,EH.ModelId,PT.UsageQUOMId  
   
END  
--SELECt * into z_ProjTasks FROM #z_ProjTasks return  
  
CREATE TABLE #z_FleetModel(Task_Header_Id int,FleetId int,ModelId int,UsageQUOMId int   
PRIMARY KEY(Task_Header_Id,FleetId,ModelId,UsageQUOMId))  
  
INSERT INTO #z_FleetModel(Task_Header_Id,FleetId,ModelId,UsageQUOMId)  
SELECT DISTINCT PT.Task_Header_Id,EP.FleetId,E.ModelId,ISNULL(PT.UsageQUOMId,0) AS UsageQUOMId  
 FROM   
#z_ProjTasks PT  
 INNER JOIN  
tblEqpPlans EP  
 ON PT.EqpPlanId=EP.EqpPlanId  
 INNER JOIN  
tblEquipment E  
 ON EP.EquipmentId=E.EquipmentId  
  
CREATE TABLE #z_ActualAnalysis(WorkOrderId int, ProjTaskId int,TaskHeaderId int,OccurrenceTypeId int,UsageQUOMId int,  
TotalLife float,FleetId int, ModelId int,Cost float,CCost float  
 PRIMARY KEY (WorkOrderId))  
  
IF EXISTS(SELECT Use_Transaction_WO_Costs FROM AMT_VARIABLE WHERE Use_Transaction_WO_Costs=1)  
BEGIN  
 --Average Frequency (only on END OF LIFE occurrences)  
 INSERT INTO #z_ActualAnalysis(WorkOrderId,ProjTaskId,TaskHeaderId,OccurrenceTypeId,UsageQUOMId,TotalLife,FleetId,   
 ModelId,Cost,CCost)  
  
 SELECT WO.WorkOrderId,PT.ProjTaskId,PT.Task_Header_Id AS TaskHeaderId,ISNULL(WO.AMTOccurrenceTypeId,0) AS OccurrenceTypeId,PT.UsageQUOMId,  
 TotalLife,EH.FleetId, EH.ModelId,  
 SUM(WOS.PercentParts / 100 * WOO.PartsSell / WOC.ExchangeRate /** CPE.CumPartsEscalation*/+  
  WOS.PercentLabour / 100 * WOO.LabourSell / WOC.ExchangeRate /** CE.CumLaborEscalation*/+  
  WOS.PercentMisc / 100 * WOO.MiscSell / WOC.ExchangeRate /** CE.CumMiscEscalation*/) AS Cost,  
  
 SUM(CASE WOS.CostBearerId WHEN @DefCB THEN   
  WOS.PercentParts / 100 * WOO.PartsSell / WOC.ExchangeRate /** CPE.CumPartsEscalation*/+  
  WOS.PercentLabour / 100 * WOO.LabourSell / WOC.ExchangeRate /** CE.CumLaborEscalation*/+  
  WOS.PercentMisc / 100 * WOO.MiscSell / WOC.ExchangeRate /** CE.CumMiscEscalation*/  
 ELSE 0 END) AS CCost  
   
  FROM     
 #z_FleetModel A  
  INNER JOIN  
 EQUIPMENT_HIERARCHY_V EH  
  ON A.FleetId=EH.FleetId AND A.ModelId=EH.ModelId AND EH.Projection_Type_Id=1  
  INNER JOIN  
 tblProjTasks PT   
  ON A.Task_Header_Id=PT.Task_Header_Id AND EH.EqpProjId=PT.EqpProjId AND ISNULL(A.UsageQUOMId,0)=ISNULL(PT.UsageQUOMId,0)  
  INNER JOIN  
 tblWorkOrderProjs WOP   
  ON PT.ProjTaskId=WOP.ProjTaskId  
  INNER JOIN  
 tblWorkOrders WO   
  ON WOP.WorkOrderId = WO.WorkOrderId   
  INNER JOIN  
 tblWorkOrders WOC  
  ON WO.WorkOrderId=WOC.AmtParentWorkOrderId  
  INNER JOIN  
 tblWorkOrderOperations WOO    
  ON WOC.WorkOrderId = WOO.WorkOrderId  
  INNER JOIN  
 tblWorkOrderSettlements WOS   
  ON WOC.WorkOrderId = WOS.WorkOrderId   
  INNER JOIN  
 tblCostEscalations CE  
  ON CE.EscalationDate <= WOC.StartDate AND CE.EndDate > WOC.StartDate   
  INNER JOIN  
 tblCostPartsEscalations CPE   
  ON CE.CostEscalationId =CPE.CostEscalationId AND PT.ManufacturerId=CPE.ManufacturerId  
  LEFT OUTER JOIN  
 TASK T   
  ON WO.WorkOrderId = T.Work_Order_ID  
  
 WHERE       
   (WOP.TotalLife IS NOT NULL) AND   
   (ISNULL(T.ChangeoutCategoryId, 1) = 1) AND -- FIXED BY KN : 29-Oct-08 ONLY EOL  
   (ABS(ISNULL(T.Task_Warranty,0))=@Warranty OR (@Warranty=2)) AND  
   (ABS(ISNULL(T.Redo,0))=@Redo OR (@Redo=2)) AND  
   (ABS(ISNULL(T.LifeConfirmed,1))=@LifeConfirmed OR (@LifeConfirmed=2))  
 GROUP BY WO.WorkOrderId,PT.Task_Header_Id,ISNULL(WO.AMTOccurrenceTypeId,0),PT.UsageQUOMId,  
 TotalLife,EH.FleetId, EH.ModelId,PT.ProjTaskId  
   
END  
ELSE  
BEGIN  
 --Average Frequency (only on END OF LIFE occurrences)  
 INSERT INTO #z_ActualAnalysis(WorkOrderId,ProjTaskId,TaskHeaderId,OccurrenceTypeId,UsageQUOMId,TotalLife,FleetId,   
 ModelId,Cost,CCost)  
  
 SELECT WO.WorkOrderId,PT.ProjTaskId,PT.Task_Header_Id AS TaskHeaderId,ISNULL(WO.AMTOccurrenceTypeId,0) AS OccurrenceTypeId,PT.UsageQUOMId,  
 TotalLife,EH.FleetId, EH.ModelId,  
 SUM(WOS.PercentParts / 100 * WOO.PartsSell / WOC.ExchangeRate /** CPE.CumPartsEscalation*/+  
 WOS.PercentLabour / 100 * WOO.LabourSell / WOC.ExchangeRate /** CE.CumLaborEscalation*/+  
 WOS.PercentMisc / 100 * WOO.MiscSell / WOC.ExchangeRate /** CE.CumMiscEscalation*/) AS Cost,  
  
 SUM(CASE WOS.CostBearerId WHEN @DefCB THEN   
  WOS.PercentParts / 100 * WOO.PartsSell / WOC.ExchangeRate +  
  WOS.PercentLabour / 100 * WOO.LabourSell / WOC.ExchangeRate+  
  WOS.PercentMisc / 100 * WOO.MiscSell / WOC.ExchangeRate   
 ELSE 0 END) AS CCost  
   
  FROM     
 #z_FleetModel A  
  INNER JOIN  
 EQUIPMENT_HIERARCHY_V EH  
  ON A.FleetId=EH.FleetId AND A.ModelId=EH.ModelId AND EH.Projection_Type_Id=1  
  INNER JOIN  
 tblProjTasks PT   
  ON A.Task_Header_Id=PT.Task_Header_Id AND EH.EqpProjId=PT.EqpProjId AND ISNULL(A.UsageQUOMId,0)=ISNULL(PT.UsageQUOMId,0)  
  INNER JOIN  
 tblWorkOrderProjs WOP   
  ON PT.ProjTaskId=WOP.ProjTaskId  
  INNER JOIN  
 tblWorkOrders WO   
  ON WOP.WorkOrderId = WO.WorkOrderId   
  INNER JOIN  
 tblWorkOrders WOC  
  ON WO.WorkOrderId=WOC.AmtParentWorkOrderId  
  INNER JOIN  
 tblWorkOrderOperations WOO    
  ON WOC.WorkOrderId = WOO.WorkOrderId  
  INNER JOIN  
 tblWorkOrderSettlements WOS   
  ON WOC.WorkOrderId = WOS.WorkOrderId   
  INNER JOIN  
 tblCostEscalations CE  
  ON CE.EscalationDate <= WOC.AmtStartDate AND CE.EndDate > WOC.AmtStartDate   
  INNER JOIN  
 tblCostPartsEscalations CPE   
  ON CE.CostEscalationId =CPE.CostEscalationId AND PT.ManufacturerId=CPE.ManufacturerId  
  LEFT OUTER JOIN  
 TASK T   
  ON WO.WorkOrderId = T.Work_Order_ID  
  
 WHERE       
   (WOP.TotalLife IS NOT NULL) AND   
   (ISNULL(T.ChangeoutCategoryId, 1) = 1) AND -- FIXED BY KN : 29-Oct-08 ONLY EOL  
   (ABS(ISNULL(T.Task_Warranty,0))=@Warranty OR (@Warranty=2)) AND  
   (ABS(ISNULL(T.Redo,0))=@Redo OR (@Redo=2)) AND  
   (ABS(ISNULL(T.LifeConfirmed,1))=@LifeConfirmed OR (@LifeConfirmed=2))  
 GROUP BY WO.WorkOrderId,PT.Task_Header_Id,ISNULL(WO.AMTOccurrenceTypeId,0),PT.UsageQUOMId,  
 TotalLife,EH.FleetId, EH.ModelId,PT.ProjTaskId  
END  
  
--drop table z_ActualAnalysis  
--SELECT * into z_ActualAnalysis FROM #z_ActualAnalysis return  
  
  
CREATE TABLE #z_ActualCosts(TaskHeaderId int,FleetId int,OccurrenceTypeId int,UsageQUOMId int,  
OccNum float,TotalCost float,CTotalCost float,ModelId int,TotalLife float  
PRIMARY KEY(TaskHeaderId,FleetId,OccurrenceTypeId,UsageQUOMId,ModelId))  
  
INSERT INTO #z_ActualCosts(TaskHeaderId,FleetId,OccurrenceTypeId,UsageQUOMId,  
OccNum,TotalCost,CTotalCost,ModelId,TotalLife)  
SELECT  
TaskHeaderId,FleetId,OccurrenceTypeId,ISNULL(UsageQUOMId,0) AS UsageQUOMId,COUNT(WorkOrderId) AS OccNum,  
SUM(Cost) AS TotalCost,SUM(CCost) AS CTotalCost,ModelId,SUM(TotalLife) AS TotalLife  
FROM #z_ActualAnalysis  
GROUP BY TaskHeaderId,FleetId,OccurrenceTypeId,UsageQUOMId,ModelId  
  
  
  
  
--SELECT * FROM #z_ActualCosts  
  
CREATE TABLE #z_Usage(FleetId int,UsageQUOMId int,ModelId int,Usage float)  
  
INSERT INTO #z_Usage(FleetId,ModelId,UsageQUOMId,Usage)  
SELECT EH.FleetId,EH.ModelId,RU.QUOMId, SUM(PeriodUsage) AS Usage  
FROM  
tblRepUsages RU  
 INNER JOIN  
EQUIPMENT_HIERARCHY_V EH  
 ON RU.EqpProjId=EH.EqpProjId  
 INNER JOIN  
 (SELECT DISTINCT FleetId,ModelId,UsageQUOMId FROM #z_FleetModel) A  
  ON EH.FleetId=A.FleetId AND EH.ModelId=A.ModelId AND EH.Projection_Type_Id=1 AND   
     ISNULL(RU.QUOMId,0)=ISNULL(A.UsageQUOMId,0)  
GROUP BY EH.FleetId,EH.ModelId,RU.QUOMId  
  
--select * from #z_Usage  
  
--select * into z_ProjTaskF from #z_ProjTaskF  
--select * into z_RCM_FAILURE_MODE from #z_RCM_FAILURE_MODE  
--select * into z_ActualCosts from #z_ActualCosts  
--return  
  
CREATE TABLE #z_OccTypes(TaskHeaderId int,FleetId int,ModelId int,UsageQUOMId int,OccurrenceTypeId int,ProjTaskId int)  
--VV 30-Oct-2008 PRIMARY KEY (TaskHeaderId,OccurrenceTypeId,FleetId,ModelId,UsageQUOMId))  
  
INSERT INTO #z_OccTypes(TaskHeaderId,OccurrenceTypeId,FleetId,ModelId,UsageQUOMId,ProjTaskId)  
SELECT PT.TaskHeaderId,FM.OccurrenceTypeId,PT.FleetId,PT.ModelId,ISNULL(PT.UsageQUOMId,0) AS UsageQUOMId,  
PT.ProjTaskId  
FROM   
#z_ProjTaskF PT  
 INNER JOIN  
#z_RCM_FAILURE_MODE FM  
 ON PT.RCMComponentStructureId=FM.RCMComponentStructureId  
   
 UNION  
  
SELECT AC.TaskHeaderId,AC.OccurrenceTypeId,AC.FleetId,AC.ModelId,ISNULL(AC.UsageQUOMId,0),  
PT.ProjTaskId  
FROM   
#z_ProjTaskF PT  
 INNER JOIN  
#z_ActualCosts AC  
 ON PT.FleetId=AC.FleetId AND PT.ModelId=AC.ModelId AND PT.UsageQUOMId=AC.UsageQUOMId AND PT.TaskHeaderId=AC.TaskHeaderId  
  
  
  
CREATE TABLE #z_VarianceAnalysisB(FleetId int,ModelId int,TaskHeaderId int,UsageQUOMId int,ProjHeaderId int,  
IntervalToDate float,OccToDate float,CostToDate float,IntervalProj float,OccProj float,  
CostProj float PRIMARY KEY (TaskHeaderId,UsageQUOMId,ProjHeaderId,FleetId,ModelId))  
  
CREATE TABLE #z_VarianceAnalysisC(FleetId int,ModelId int,TaskHeaderId int,UsageQUOMId int,ProjHeaderId int,  
IntervalToDate float,OccToDate float,CostToDate float,IntervalProj float,OccProj float,  
CostProj float PRIMARY KEY (TaskHeaderId,UsageQUOMId,ProjHeaderId,FleetId,ModelId))  
  
  
--Variance Cause Analysis Budget  
--drop table z_ProjTasks  
--select * into z_ProjTasks from #z_ProjTasks  
--return  
  
  
  
  
INSERT INTO #z_VarianceAnalysisB(FleetId,ModelId,TaskHeaderId,UsageQUOMId,ProjHeaderId,  
IntervalToDate,OccToDate,CostToDate,IntervalProj,OccProj,CostProj)  
SELECT EH.FleetId,EH.ModelId,PT.Task_Header_Id AS TaskHeaderId, ISNULL(PT.UsageQUOMId,0) AS UsageQUOMId,EH.ProjHeaderId,   
AVG(PT.Frequency) AS IntervalToDate,   
ISNULL(SUM(B.OccToDate),0) AS OccToDate,  
ISNULL(SUM(PT.PastTotalSellEsc),0) AS CostToDate,   
AVG(PT.Frequency) AS IntervalProj,   
ISNULL(SUM(PT.FutureOccNumber),0) AS OccProj,   
ISNULL(SUM(PT.FutureTotalSellEsc),0) AS CostProj  
FROM   
#z_FleetModel A  
 INNER JOIN  
EQUIPMENT_HIERARCHY_V EH  
 ON A.FleetId=EH.FleetId AND A.ModelId=EH.ModelId AND EH.Projection_Type_Id =2  
 INNER JOIN  
tblProjTasks PT   
 ON A.Task_Header_Id=PT.Task_Header_Id AND ISNULL(A.UsageQUOMId,0)=ISNULL(PT.UsageQUOMId,0)  
    AND EH.EqpProjId=PT.EqpProjId   
 LEFT OUTER JOIN  
(SELECT PT.ProjTaskId,SUM(CASE WHEN PTOC.OccDate < GETDATE() THEN 1 ELSE 0 END) AS OccToDate  
FROM  
#z_FleetModel A  
 INNER JOIN  
EQUIPMENT_HIERARCHY_V EH  
 ON A.FleetId=EH.FleetId AND A.ModelId=EH.ModelId AND EH.Projection_Type_Id =2  
 INNER JOIN  
tblProjTasks PT   
 ON A.Task_Header_Id=PT.Task_Header_Id AND ISNULL(A.UsageQUOMId,0)=ISNULL(PT.UsageQUOMId,0)  
    AND EH.EqpProjId=PT.EqpProjId   
 INNER JOIN  
tblProjTaskOccs PTOC  
 ON PT.ProjTaskId = PTOC.ProjTaskId   
GROUP BY PT.ProjTaskId  
) B  
 ON PT.ProjTaskId = B.ProjTaskId   
   
GROUP BY PT.UsageQUOMId,PT.Task_Header_Id,EH.FleetId,EH.ModelId,EH.ProjHeaderId  
  
--drop table z_FleetModel,z_ActualAnalysis  
--select * into z_FleetModel from #z_FleetModel  
--select * into z_ActualAnalysis from #z_ActualAnalysis  
--return  
  
--Variance Cause Analysis Current  
INSERT INTO #z_VarianceAnalysisC(FleetId,ModelId,TaskHeaderId,UsageQUOMId,ProjHeaderId,  
IntervalToDate,OccToDate,CostToDate,IntervalProj,OccProj,CostProj)  
SELECT EH.FleetId,EH.ModelId,PT.Task_Header_Id AS TaskHeaderId, ISNULL(PT.UsageQUOMId,0) AS UsageQUOMId,  
EH.ProjHeaderId,   
ISNULL(SUM(AA.TotalLife)/SUM(OccToDate),0) AS IntervalToDate,   
ISNULL(SUM(OccToDate),0) AS OccToDate,  
ISNULL(SUM(AA.CostToDate),0) AS CostToDate,   
AVG(PT.Frequency) AS IntervalProj,   
ISNULL(SUM(PT.FutureOccNumber),0) AS OccProj,   
ISNULL(SUM(PT.FutureTotalSellEsc),0) AS CostProj  
FROM   
#z_FleetModel A  
 INNER JOIN  
EQUIPMENT_HIERARCHY_V EH  
 ON A.FleetId=EH.FleetId AND A.ModelId=EH.ModelId AND EH.Projection_Type_Id =1  
 INNER JOIN  
tblProjTasks PT   
 ON A.Task_Header_Id=PT.Task_Header_Id AND ISNULL(A.UsageQUOMId,0)=ISNULL(PT.UsageQUOMId,0)  
    AND EH.EqpProjId=PT.EqpProjId   
 LEFT OUTER JOIN  
  
(SELECT PT.ProjTaskId,SUM(AA.TotalLife) AS TotalLife,COUNT(AA.WorkOrderId) AS OccToDate,  
SUM(AA.CCost) AS CostToDate  
FROM   
#z_FleetModel A  
 INNER JOIN  
EQUIPMENT_HIERARCHY_V EH  
 ON A.FleetId=EH.FleetId AND A.ModelId=EH.ModelId AND EH.Projection_Type_Id =1  
 INNER JOIN  
tblProjTasks PT   
 ON A.Task_Header_Id=PT.Task_Header_Id AND ISNULL(A.UsageQUOMId,0)=ISNULL(PT.UsageQUOMId,0)  
    AND EH.EqpProjId=PT.EqpProjId   
 LEFT OUTER JOIN  
#z_ActualAnalysis AA  
 ON PT.ProjTaskId = AA.ProjTaskId   
GROUP BY PT.ProjTaskId) AA  
 ON PT.ProjTaskId = AA.ProjTaskId   
  
GROUP BY PT.UsageQUOMId,PT.Task_Header_Id,EH.FleetId,EH.ModelId,EH.ProjHeaderId  
  
DROP TABLE #z_ActualAnalysis  
  
--select * from #z_VarianceAnalysisC  
--select * from #z_VarianceAnalysisB  
--return  
  
  
SELECT PT.ProjTaskId,PT.Task_Header_Id AS TaskHeaderId,TH.Description AS Task_Header,PT.Task_Description,EH.Site+'/'+EH.Fleet AS SiteFleet,  
EH.EqpPlan,OC.Operational_Criticality,MA.Manufacturer,EH.Model,  
ISNULL(P.Part,RP.Part_Number) AS Part,CAST(CASE WHEN PT.Rotable_Part_Id>0 THEN 1 ELSE 0 END AS bit) Rotable,  
PT.Planning_Task, CASE PT.Planning_Task WHEN 1 THEN PT.Planning_Lead_Time ELSE NULL END AS Planning_Lead_Time,  
CASE   
WHEN PT.ParentTaskId>0 OR PT.Unscheduled<>0 THEN NULL  
WHEN EH.QUOMId>0 THEN  
 CAST(PT.Warranty_Period_Days AS varchar)+'/'+CAST(PT.Warranty_Period_Usage AS varchar)  
ELSE   
 CAST(PT.Warranty_Period_Days AS varchar)  
END AS Warranty,  
CASE   
  
WHEN PT.ParentTaskId>0 OR PT.Unscheduled<>0 THEN NULL  
ELSE ISNULL(QUOM_1.UOMShortDesc,'') END AS EqpQUOM,  
RR.ProjTaskId AS RRTaskId,THRR.Description AS RRTask_Header,RR.Frequency AS RRFrequency,  
RR.PartsCost AS RRPartsCost,RR.LabourCost AS RRLabourCost,RR.MiscCost AS RRMiscCost,  
RR.Duration AS RRDuration,RR.LabourHours AS RRLabourHours,  
PT.First,PT.Frequency,NULLIF(PT.Final,0) AS Final,  
ISNULL(QUOM.UOMShortDesc,@Days)AS UsageQUOM,  
  
CASE   
WHEN PTSG.Scheduling_Group_Type=@SchDep THEN 'Dependency'  
WHEN PTSG.Scheduling_Group_Type=@SchSuppr AND PTSG.SchedulingGroupSubtypeId=1 THEN 'Sibling Suppression'  
WHEN PTSG.Scheduling_Group_Type=@SchSuppr AND PTSG.SchedulingGroupSubtypeId=0 THEN 'Parent Suppression'  
WHEN PT.InspectionTaskTypeId>0 THEN 'Inspection Logic'  
ELSE NULL END AS AdvLogic,  
MS.Maintenance_Strategy,PT.PerformanceStrategyReason,PT.Changeout_Guidelines,  
M.Model + ':' + CC_1.Code + ':' + MC_1.Code + ':' + TT_1.Code + ':' + AC_1.Code + ':' + ISNULL(CS.[Group], '') AS CompStruct,  
Convert(varchar(25),CS.LastModDate,106) AS LastModDate,CS.PreparedBy,  
EH.FleetId,EH.ModelId,PT.UsageQUOMId,SCHT.Schedule_Type  
  
--into Table1  
FROM  
#z_ProjTasks PT  
 INNER JOIN  
EQUIPMENT_HIERARCHY_V EH  
 ON PT.EqpProjId=EH.EqpProjId  
 INNER JOIN  
TASK_HEADER TH  
 ON PT.Task_Header_Id=TH.Task_Header_Id  
 INNER JOIN  
tblManufacturers MA   
 ON PT.ManufacturerId = MA.ManufacturerId   
 LEFT OUTER JOIN  
tblQUOMs QUOM  
 ON PT.UsageQUOMId = QUOM.QUOMId   
-- LEFT OUTER JOIN  
--tblQualifiers Q   
-- ON Q.QualifierId = QUOM.QualifierId   
-- LEFT OUTER JOIN  
--tblUOMs UOM ON QUOM.UOMId = UOM.UOMId    
 LEFT OUTER JOIN  
tblQUOMs QUOM_1  
 ON EH.QUOMId = QUOM_1.QUOMId   
-- LEFT OUTER JOIN  
--tblQualifiers Q_1  
-- ON Q_1.QualifierId = QUOM_1.QualifierId   
-- LEFT OUTER JOIN  
--tblUOMs UOM_1 ON QUOM_1.UOMId = UOM_1.UOMId    
 LEFT OUTER JOIN  
PROJ_TASK_SCHEDULING_GROUP PTSG   
 ON PT.Scheduling_Group_Id = PTSG.Scheduling_Group_Id   
 LEFT OUTER JOIN  
OPERATIONAL_CRITICALITY OC   
 ON PT.Operational_Criticality_Id = OC.Operational_Criticality_Id   
 LEFT OUTER JOIN  
SCHEDULE_TYPE SCHT ON PT.Schedule_Type_Id = SCHT.Schedule_Type_Id   
 LEFT OUTER JOIN  
MAINTENANCE_STRATEGY MS   
 ON PT.Maintenance_Strategy_Id = MS.Maintenance_Strategy_Id  
 LEFT OUTER JOIN  
tblParts P ON PT.Part_Id = P.PartId   
 LEFT OUTER JOIN  
ROTABLE_PART RP  
 ON PT.Rotable_Part_Id=RP.Rotable_Part_Id  
 LEFT JOIN  
#z_RRTasks RR  
 ON PT.ProjTaskId=RR.ParentTaskId  
 LEFT JOIN  
TASK_HEADER THRR  
 ON RR.Task_Header_Id=THRR.Task_Header_Id  
 LEFT OUTER JOIN  
RCM_COMPONENT_STRUCTURE CS  
 ON PT.RCMComponentStructureId=CS.RCMComponentStructureId  
 LEFT OUTER JOIN  
tblModels M   
 ON CS.ModelId=M.ModelId  
 LEFT OUTER JOIN  
tblComponentCodes CC_1  
 ON CS.ComponentCodeId=CC_1.ComponentCodeId  
 LEFT OUTER JOIN  
tblModifierCodes MC_1  
 ON CS.ModifierCodeId=MC_1.ModifierId  
 LEFT OUTER JOIN  
tblTaskTypes TT_1  
 ON CS.TaskTypeId=TT_1.TaskTypeId  
 LEFT OUTER JOIN  
tblApplicationCodes AC_1  
 ON CS.ApplicationCodeId=AC_1.ApplicationCodeId  
  
--Task Costs  
  
SELECT PT.ProjTaskId,PTA.ProjTaskAmtId,PT.Task_Header_Id AS TaskHeaderId,  
ISNULL(JC.Code+' - '+JC.Description,@CA+CASE WHEN CA.JobCodeId<0 THEN @Multiple ELSE JCA.Code+' - '+JCA.Description END) AS Job_Code,  
REPLACE(REPLACE(dbo.COST_SOURCE_DESC_GET_F(PTA.PricedJobId,CA.ProjTaskAmtId,PTA.Consumable,PT.ParentTaskId),'Cost Allocation','CA'),'Standard Job','SJ') +  
ISNULL(' - '+ISNULL(CA.Cost_Allocation_Ref+':'+ACC.Code+':'+AMC.Code,SJ.StdJob),'') AS CostSource,  
  
SUM(PTA.PartsCost * CPE.CumPartsEscalation*PTO.Probability / 100/ ERC.ExRate) AS PartsCost,  
SUM(PTA.TotalLabourCost * CE.CumLaborEscalation  * PTO.Probability / 100/ ERC.ExRate) AS LabourCost,  
SUM(PTA.TotalMiscCost *CE.CumMiscEscalation * PTO.Probability / 100/ ERC.ExRate)  AS MiscCost,  
SUM(PTA.Duration* PTO.Probability / 100)  AS Duration,   
SUM(PTA.LaborHours* PTO.Probability / 100) AS LaborHours  
--into Table2  
FROM  
#z_ProjTasks PT  
 INNER JOIN   
tblProjTaskOpts PTO  
 ON PTO.ProjTaskId = PT.ProjTaskId  
 INNER JOIN   
PROJ_TASK_AMT_COST_1_V PTA  
 ON PTA.ProjTaskOptId = PTO.ProjTaskOptId  
 INNER JOIN   
tblCostEscalations CE  
 ON PTA.Pricing_Date >= CE.EscalationDate AND PTA.Pricing_Date < CE.EndDate  
 INNER JOIN   
tblCostPartsEscalations CPE  
 ON CE.CostEscalationId = CPE.CostEscalationId AND CPE.ManufacturerId = PT.ManufacturerId  
 INNER JOIN   
tblEqpProjs EPR  
 ON PT.EqpProjId = EPR.EqpProjId  
 INNER JOIN   
tblExRates ER  
 ON EPR.ExchangeRateId = ER.ExRateID  
 INNER JOIN   
tblExRateCurrencies ERC  
 ON ERC.ExRateID = ER.ExRateID AND ERC.CurrencyID = PTA.CurrencyID  
 LEFT OUTER JOIN   
tblJobCodes JC  
 ON PTA.JobCodeId=JC.JobCodeId  
 LEFT OUTER JOIN  
#z_Cost_Allocation CA  
 ON PTA.ProjTaskAmtId=CA.ProjTaskAmtId  
 LEFT OUTER JOIN   
tblJobCodes JCA  
 ON CA.JobCodeId=JCA.JobCodeId  
 LEFT OUTER JOIN  
tblComponentCodes ACC  
 ON CA.Component_Code_Id=ACC.ComponentCodeId  
 LEFT OUTER JOIN  
tblModifierCodes AMC   
 ON CA.ModifierId=AMC.ModifierId  
 LEFT OUTER JOIN  
tblPricedJobs PJ  
 ON PTA.PricedJobId=PJ.PricedJobId  
 LEFT OUTER JOIN  
tblStdJobs SJ  
 ON PJ.StdJobId=SJ.StdJobId  
GROUP BY PT.ProjTaskId,PTA.ProjTaskAmtId,PTA.PricedJobId,PTA.Consumable,PT.ParentTaskId,  
JC.Code,JC.Description,CA.JobCodeId,JCA.Code,JCA.Description,CA.ProjTaskAmtId,  
CA.Cost_Allocation_Ref,ACC.Code,AMC.Code,SJ.StdJob,PT.Task_Header_Id  
  
--Analysis of Failure modes  
--drop table z_OccTypes,z_ProjTaskF,z_PM_FAILURE_MODE,z_RCM_FAILURE_MODE,z_Usage,z_ActualCosts  
--select * into z_OccTypes from #z_OccTypes  
--select * into z_ProjTaskF from #z_ProjTaskF  
--select * into z_PM_FAILURE_MODE from #z_PM_FAILURE_MODE  
--select * into z_RCM_FAILURE_MODE from #z_RCM_FAILURE_MODE  
--select * into z_Usage from #z_Usage  
--select * into z_ActualCosts from #z_ActualCosts  
  
  
SELECT ZOT.TaskHeaderId,ZOT.FleetId,ZOT.ModelId,ZOT.UsageQUOMId,  
ZOT.OccurrenceTypeId,OT.OccurrenceType + ' - ' + OT.OccurrenceTypeDesc AS OccurrenceType,  
ISNULL(B.PrimaryMode,0) AS PrimaryMode,ISNULL(B.PercentProbability,0) AS FMProb,ISNULL(B.Frequency,0) AS FMFreq,  
ISNULL(B.FMCost,0) AS FMCost,ISNULL(A.OccNum,0) AS OccNum,ISNULL(A.Probab*100,0) AS AProb,ISNULL(A.Freq,0) AS AFreq,  
ISNULL(A.Cost,0) AS ACost,  
(ISNULL(B.PercentProbability*B.FMCost/NULLIF(B.Frequency,0),0)/100 -  
ISNULL(A.Probab*A.Cost/NULLIF(A.Freq,0),0))*ISNULL(U.Usage,0) AS ACI,ISNULL(B.ProjTaskId,A.ProjTaskId) AS ProjTaskId  
--into Table3  
FROM  
#z_OccTypes ZOT  
 INNER JOIN  
tblOccurrenceTypes OT  
 ON ZOT.OccurrenceTypeId=OT.OccurrenceTypeId  
 LEFT OUTER JOIN  
(SELECT FM.PrimaryMode,FM.OccurrenceTypeId,FM.PercentProbability,  
PT.Frequency*ISNULL(FM.Frequency/PM.Frequency,0) AS Frequency,   
PT.PartsCost*ISNULL(FM.PartsCost/PM.PartsCost,0)+PT.LabourCost*ISNULL(FM.LabourCost/PM.LabourCost,0)+  
PT.MiscCost*ISNULL(FM.MiscCost/PM.MiscCost,0) AS FMCost,  
FM.RCMFailureModeId,PT.TaskHeaderId,PT.FleetId,PT.ModelId,PT.UsageQUOMId,PT.ProjTaskId  
FROM   
#z_ProjTaskF PT  
 INNER JOIN  
#z_PM_FAILURE_MODE PM  
 ON PT.RCMComponentStructureId=PM.RCMComponentStructureId  
 INNER JOIN  
#z_RCM_FAILURE_MODE FM  
 ON PM.RCMComponentStructureId=FM.RCMComponentStructureId  
 INNER JOIN  
tblOccurrenceTypes OT  
 ON FM.OccurrenceTypeId=OT.OccurrenceTypeId) B  
   
 ON ZOT.ProjTaskId=B.ProjTaskId AND ZOT.OccurrenceTypeId=B.OccurrenceTypeId  
  
 LEFT OUTER JOIN  
  
(SELECT AC.TaskHeaderId,AC.FleetId,AC.ModelId,AC.OccurrenceTypeId,AC.UsageQUOMId,  
AC.OccNum,AC.OccNum/NULLIF(TAC.TotalOcc,0) AS Probab,AC.TotalLife/NULLIF(AC.OccNum,0) AS Freq,  
AC.TotalCost/NULLIF(AC.OccNum,0) AS Cost,PT.ProjTaskId  
FROM  
#z_ProjTaskF PT  
 INNER JOIN  
#z_ActualCosts AC  
 ON PT.FleetId=AC.FleetId AND PT.ModelId=AC.ModelId AND PT.UsageQUOMId=AC.UsageQUOMId AND PT.TaskHeaderId=AC.TaskHeaderId  
 INNER JOIN  
(SELECT TaskHeaderId,FleetId,ModelId,UsageQUOMId,SUM(OccNum) AS TotalOcc  
 FROM #z_ActualCosts GROUP BY TaskHeaderId,FleetId,ModelId,UsageQUOMId) TAC  
 ON AC.FleetId=TAC.FleetId AND AC.ModelId=TAC.ModelId AND AC.TaskHeaderId=TAC.TaskHeaderId AND  
 ISNULL(AC.UsageQUOMId,0)=ISNULL(TAC.UsageQUOMId,0)  
) A  
   
 ON ZOT.ProjTaskId=A.ProjTaskId AND ZOT.OccurrenceTypeId=A.OccurrenceTypeId  
 LEFT OUTER JOIN  
#z_Usage U  
 ON ZOT.FleetId=U.FleetId AND ZOT.ModelId=U.ModelId AND ISNULL(ZOT.UsageQUOMId,0)=ISNULL(U.UsageQUOMId,0)  
  
  
--performance Vs budget  
/*SELECT *   
into Table4  
FROM  
(*/  
SELECT C.TaskHeaderId,PH.Projection_Name,ISNULL(QUOM.UOMShortDesc,@Days) AS UsageQUOM,  
C.IntervalToDate,C.OccToDate,  
ISNULL(C.CostToDate/NULLIF(C.OccToDate,0),0) AS AvgCostToDate,C.CostToDate,  
C.IntervalProj,C.OccProj+C.OccToDate as OccProj,  
ISNULL((C.CostProj+ C.CostToDate)/NULLIF(C.OccProj+C.OccToDate,0),0) as AvgCostProj,  
C.CostProj+ C.CostToDate AS CostProj,C.FleetId,C.ModelId,C.UsageQUOMId  
FROM  
#z_VarianceAnalysisC C  
 INNER JOIN  
PROJECTION_HEADER PH  
 ON C.ProjHeaderId=PH.Projection_Header_Id  
 LEFT OUTER JOIN  
tblQUOMs QUOM  
 ON C.UsageQUOMId = QUOM.QUOMId   
 UNION ALL  
SELECT B.TaskHeaderId,PH.Projection_Name,ISNULL(QUOM.UOMShortDesc,@Days) AS UsageQUOM,  
B.IntervalToDate,B.OccToDate,  
ISNULL(B.CostToDate/NULLIF(B.OccToDate,0),0) AS AvgCostToDate,B.CostToDate,  
B.IntervalProj,B.OccProj+B.OccToDate as OccProj,  
ISNULL((B.CostProj+ B.CostToDate)/NULLIF(B.OccProj+B.OccToDate,0),0) as AvgCostProj,  
B.CostProj+ B.CostToDate AS CostProj,B.FleetId,B.ModelId,B.UsageQUOMId  
FROM  
#z_VarianceAnalysisB B  
 INNER JOIN  
PROJECTION_HEADER PH  
 ON B.ProjHeaderId=PH.Projection_Header_Id  
 LEFT OUTER JOIN  
tblQUOMs QUOM  
 ON B.UsageQUOMId = QUOM.QUOMId   
  
 UNION ALL  
  
SELECT C.TaskHeaderId,'Variance' AS Projection_Name,ISNULL(QUOM.UOMShortDesc,@Days) AS UsageQUOM,  
  
C.IntervalToDate - B.IntervalToDate AS IntervalToDate,   
B.OccToDate - C.OccToDate AS OccToDate,  
ISNULL(C.CostToDate/NULLIF(C.OccToDate,0),0)-ISNULL(B.CostToDate/NULLIF(B.OccToDate,0),0) AS AvgCostToDate,  
B.CostToDate - C.CostToDate AS CostToDate,   
C.IntervalProj - B.IntervalProj AS IntervalProj,   
B.OccProj + B.OccToDate - C.OccProj-C.OccToDate AS OccProj,   
ISNULL((B.CostProj+ B.CostToDate)/NULLIF((B.OccProj+B.OccToDate),0),0)-  
ISNULL((C.CostProj+ C.CostToDate)/NULLIF((C.OccProj+C.OccToDate),0),0)  
AS AvgCostProj,  
B.CostProj+B.CostToDate - C.CostProj-C.CostToDate AS CostProj,C.FleetId,C.ModelId,C.UsageQUOMId  
FROM   
#z_VarianceAnalysisC C  
 INNER JOIN  
#z_VarianceAnalysisB B  
 ON C.TaskHeaderId=B.TaskHeaderId AND C.UsageQUOMId=B.UsageQUOMId AND C.FleetId=B.FleetId AND C.ModelId=B.ModelId  
 LEFT OUTER JOIN  
tblQUOMs QUOM  
 ON C.UsageQUOMId = QUOM.QUOMId   
/*) A*/  
  
GO

